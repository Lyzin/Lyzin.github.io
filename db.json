{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/posts_cover_img/golang/gin.jpg","path":"posts_cover_img/golang/gin.jpg","modified":1,"renderable":0},{"_id":"source/posts_cover_img/golang/go_mysql.png","path":"posts_cover_img/golang/go_mysql.png","modified":1,"renderable":0},{"_id":"source/posts_cover_img/golang/golang_code.jpeg","path":"posts_cover_img/golang/golang_code.jpeg","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/index.jpeg","path":"img/index.jpeg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"46470820f001c21f02442c879262ec7727d79f9b","modified":1652806484354},{"_id":"source/CNAME","hash":"82d7594a908abb253c2c6926bc6eff8bf93f66f8","modified":1652803622461},{"_id":"source/_posts/.DS_Store","hash":"427707db07da763f722a51f37de54313a0617ed5","modified":1652806550801},{"_id":"source/about/index.md","hash":"34c8f9a42c124e23af655fc6974d8a9878e3bb59","modified":1652750705000},{"_id":"source/categories/index.md","hash":"81ff292ac67d59c468e6490650948ba1c9d4b861","modified":1652760176000},{"_id":"source/posts_cover_img/.DS_Store","hash":"56200568d0db52db3db0c1b25edd9fbd7d22a16b","modified":1652806616848},{"_id":"source/tags/index.md","hash":"c4d2f53593d7734bd884ab3d1bcc66285c27d83d","modified":1652760191000},{"_id":"source/_posts/golang/.DS_Store","hash":"b598212dd58349105bd865e6e90f294ea2d11ed4","modified":1652806550800},{"_id":"source/posts_cover_img/golang/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1652720327700},{"_id":"source/posts_cover_img/golang/gin.jpg","hash":"4c6807a369fbdea8992c7290a32b5944142154b1","modified":1652719024037},{"_id":"source/_posts/golang/go_mysql使用/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1652806591267},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets.md","hash":"cc26b0b470601c53fed402e7c5f22e215c888706","modified":1652807151280},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220324152525798.png","hash":"e2de9bdffe7ed94f017fdc98c18c64af2e9e37ca","modified":1648106725798},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648106775705},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104406809.png","hash":"abd98fdcb1917651287101d4997597ba18a39afe","modified":1652669046810},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220324152502070.png","hash":"e333fdfe89a0205a4fd9260c21b22d2b4a519df7","modified":1648106702070},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104457767.png","hash":"0412e533cb239869d8c6e4ac60b9e713fb14ba20","modified":1652669097767},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104653089.png","hash":"67fc4b975bb1648593012a5f66881e40208d59bd","modified":1652669213090},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516105118247.png","hash":"a14a64ea599eae5731f0e4e4f0d6263be7f1bd6d","modified":1652669478248},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516145006179.png","hash":"009cd987f3f0c406045e0f85b911247765728d0d","modified":1652683806180},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1652711431000},{"_id":"themes/butterfly/README.md","hash":"66b4889591d0f36696c4d363412c753b6fe25519","modified":1652711431000},{"_id":"themes/butterfly/README_CN.md","hash":"08afd014fd27019909f341a2ad6162665958c6d6","modified":1652711431000},{"_id":"themes/butterfly/package-lock.json","hash":"3987f1feaf5335f94d0b8133ca66fe170ad6881e","modified":1652749170000},{"_id":"themes/butterfly/_config.yml","hash":"f2278d498dc192bfa974ed95aa045f002aa53f9a","modified":1652761103000},{"_id":"themes/butterfly/package.json","hash":"5b788fa38cb9d1453aff77bdc82a99aeda3a963d","modified":1652749170000},{"_id":"themes/butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":1652711431000},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1652711431000},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1652711431000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"ef75e0bc41beed0ac4c0e299be0d64f2dca06501","modified":1652760715000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1652711431000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1652711431000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1652711431000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1652711431000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1652711431000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1652711431000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1652711431000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":1652711431000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1652711431000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1652711431000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"54511ed299a3bcf4ecbb62e3078f6b0611ccbd2c","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"da27c20f0e672103b984e135eb2fe7770ca7fcce","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1652711431000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1652711431000},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a12b9f11d7d3f52de5b2090d2805d7303e0187a5","modified":1652711431000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1652711431000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1652711431000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1652711431000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1652711431000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1652711431000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1652711431000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1652711431000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1652711431000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1652711431000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1652711431000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1652711431000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1652711431000},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1652711431000},{"_id":"themes/butterfly/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1652718632000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1652711431000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1652711431000},{"_id":"themes/butterfly/source/img/favicon.svg","hash":"a35bfa2b041d294bf477467f0e68df97145cf503","modified":1634248854000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1652711431000},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1652711431000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1652711431000},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"ef2abe26e11ae9a786771144383e9fcb66719209","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"de2e978ff0cacd02eb635cf7676a39e9a21781dd","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1652711431000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1652711431000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ca58af8903eb1d1d05edae54fc2e23aeac6da6c5","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1652711431000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":1652711431000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1652711431000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1652711431000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1652711431000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1652711431000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1652711431000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1652711431000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1652711431000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7d98129f2ee08169f877b76d4d0b95c17df354f8","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"309b9aee523f90aff13d48142d124de9039d8511","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"693d999777dd16e0566d29ac3203d4c167b2f9a7","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c488a3414dbae899488b6d46f6cb91575bc23b9e","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"8cb8fcc210edab1ae1adf4aee8cc6948f7e9f28e","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"5737164f5a77fb813b5bacba0a273d2a490a2ced","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"7c712719bb8960c335f94b519923e5a86ee7bd32","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"26ac3fb930fe9f3ace0c5d0191b87425bf053e74","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1652711431000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1652711431000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1652711431000},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516171940580.png","hash":"2a15ffea802f01658d8ec8d8f8b1c8bec508ac02","modified":1652692780580},{"_id":"source/posts_cover_img/golang/go_mysql.png","hash":"f5d1b8772cfa123dcf981664eec445ba7926833e","modified":1652720628549},{"_id":"source/posts_cover_img/golang/golang_code.jpeg","hash":"8bfd8a0528c0172912adb9ad002d2bbb6902bda5","modified":1652718542731},{"_id":"themes/butterfly/source/img/avatar.png","hash":"d6b9d9460c28ec57e59703a191121a3a67053bcc","modified":1652714143000},{"_id":"themes/butterfly/source/img/index.jpeg","hash":"186cbfccb5d98f3252204bbf9726b48488f98dc5","modified":1652715023000}],"Category":[{"name":"Golang Mysql笔记","_id":"cl3aeutxh0004vsv259lfft69"}],"Data":[],"Page":[{"title":"关于","date":"2022-05-17T01:15:41.000Z","type":"about","layout":"about","_content":"\n## 这是我的博客，记录自己！\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-05-17 09:15:41\ntype: about\nlayout: about\n---\n\n## 这是我的博客，记录自己！\n\n","updated":"2022-05-17T01:25:05.000Z","path":"about/index.html","comments":1,"_id":"cl3aeutwu0000vsv29tlt448a","content":"<h2 id=\"这是我的博客，记录自己！\"><a href=\"#这是我的博客，记录自己！\" class=\"headerlink\" title=\"这是我的博客，记录自己！\"></a>这是我的博客，记录自己！</h2>","site":{"data":{}},"cover":"/img/index.jpeg","excerpt":"","more":"<h2 id=\"这是我的博客，记录自己！\"><a href=\"#这是我的博客，记录自己！\" class=\"headerlink\" title=\"这是我的博客，记录自己！\"></a>这是我的博客，记录自己！</h2>"},{"title":"博客分类","date":"2022-05-17T01:26:46.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 博客分类\ndate: 2022-05-17 09:26:46\ntype: categories\nlayout: categories\n---\n","updated":"2022-05-17T04:02:56.000Z","path":"categories/index.html","comments":1,"_id":"cl3aeutwx0001vsv2cslddt57","content":"","site":{"data":{}},"cover":"/img/index.jpeg","excerpt":"","more":""},{"title":"文章标签","date":"2022-05-17T01:30:33.000Z","type":"tags","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2022-05-17 09:30:33\ntype: tags\nlayout: tags\n---\n\n","updated":"2022-05-17T04:03:11.000Z","path":"tags/index.html","comments":1,"_id":"cl3aeutxb0002vsv24tsxedzu","content":"","site":{"data":{}},"cover":"/img/index.jpeg","excerpt":"","more":""}],"Post":[{"title":"Golang Mysql笔记","date":"2021-05-16T11:31:21.000Z","cover":"/posts_cover_img/golang/go_mysql.png","_content":"\n## 一、Mysql环境搭建\n\n### 1、mysql镜像地址\n\n> 推荐使用docker搭建mysql环境，非常方便用来学习mysql\n>\n> [mysql的docker镜像地址](https://registry.hub.docker.com/_/mysql)\n\n### 2、创建mysql容器\n\n#### 2.1 拉取mysql镜像\n\n```bash\ndocker pull mysql\n```\n\n#### 2.2 创建mysql容器\n\n> 下面内容来自dockerhub里mysql的使用介绍\n\n```bash\n#Configuration without a cnf file\n#Many configuration options can be passed as flags to mysqld. This will give you the flexibility to customize the container without needing a cnf file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (utf8mb4) just run the following:\n\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# If you would like to see a complete list of available options, just run:\n$ docker run -it --rm mysql:tag --verbose --help\n\n------------------->翻译如下<--------------------------\n#没有cnf文件的配置\n#许多配置选项可以作为标志传递给mysqld。这将使你能够灵活地定制容器而不需要cnf文件。例如，如果你想改变所有表的默认编码和排序为使用UTF-8(utf8mb4)，只需运行以下内容。\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# 如果你想看到可用选项的完整列表，只需运行。\n$ docker run -it --rm mysql:tag --verbose --help\n```\n\n> 创建mysql容器\n\n```bash\n$ docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# --name mysql 创建的容器名叫mysql\n# -e MYSQL_ROOT_PASSWORD=123456   MYSQL_ROOT_PASSWORD指定了将为MySQL根超级用户账户设置的密码，可以看到是123456\n# --character-set-server=utf8mb4  设置mysql字符编码为utf8mb4，表示可以支持中文和表情\n# --collation-server=utf8mb4_unicode_ci 在字符集内用于比较或排序字符的一套规则，即校验规则\n```\n\n![image-20220324152525798](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152525798.png)\n\n#### 2.3 连接数据库\n\n> 这里使用了`mycli`这个包来连接数据库测试\n>\n> `mycli`包时python写的一个具有代码提示的mysql使用工具\n\n![image-20220324152502070](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152502070.png)\n\n> 可以看到连接数据库成功，可以成功登录到mysql里面了\n\n## 二、go连接mysql\n\n### 1、go连接mysql用到的包\n\n#### 1.1 database/sql\n\n> \u0011go语言中的`database/sql`包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动，使用`database/sql`包时必须注入一个数据库驱动\n>\n> - 也就是说`database/sql`里面定义了SQL的需要实现的方法\n\n#### 1.2 mysql数据库驱动\n\n```go\n// 下载mysql驱动\ngo get -u github.com/go-sql-driver/mysql\n\n// -u：表示所有的依赖都是下载最新的\n// github地址：https://github.com/go-sql-driver/mysql\n```\n\n### 2、使用mysql驱动\n\n#### 2.1 Open方法\n\n> go语言中没有数据库驱动，所以需要外部导入一个数据库驱动来注入\n>\n> 使用`database/sql`的Open()方法\n>\n> 下面内容来自Open方法注释翻译\n>\n> - 打开一个由其数据库驱动名称和一个特定的数据源名称指定的数据库。\n> - 驱动程序特定的数据源名称，通常至少包括一个数据库名称和连接信息。\n> - 大多数用户会通过一个特定驱动程序的连接来打开一个数据库辅助函数来打开数据库，该函数返回一个*DB。\n>     - Go标准库中没有包含数据库驱动没有包括在Go标准库中。参见 https://golang.org/s/sqldrivers 以了解第三方驱动程序的列表。\n>     - Open可以只验证它的参数，而不创建一个与数据库的连接与数据库的连接。为了验证数据源的名称是否有效，可以调用Ping。\n> - 返回的DB对于多个goroutine的并发使用是安全的并维护它自己的空闲连接池。\n>     - 因此，Open函数应该只被调用一次。很少有必要关闭一个数据库。\n\n```go\n// open方法打开指定驱动的数据库\n// Open opens a database specified by its database driver name and a\n// driver-specific data source name, usually consisting of at least a\n// database name and connection information.\n//\n// Most users will open a database via a driver-specific connection\n// helper function that returns a *DB. No database drivers are included\n// in the Go standard library. See https://golang.org/s/sqldrivers for\n// a list of third-party drivers.\n//\n// Open may just validate its arguments without creating a connection\n// to the database. To verify that the data source name is valid, call\n// Ping.\n//\n// The returned DB is safe for concurrent use by multiple goroutines\n// and maintains its own pool of idle connections. Thus, the Open\n// function should be called just once. It is rarely necessary to\n// close a DB.\nfunc Open(driverName, dataSourceName string) (*DB, error) {\n\tdriversMu.RLock()\n\tdriveri, ok := drivers[driverName]\n\tdriversMu.RUnlock()\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"sql: unknown driver %q (forgotten import?)\", driverName)\n\t}\n\n\tif driverCtx, ok := driveri.(driver.DriverContext); ok {\n\t\tconnector, err := driverCtx.OpenConnector(dataSourceName)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn OpenDB(connector), nil\n\t}\n\n\treturn OpenDB(dsnConnector{dsn: dataSourceName, driver: driveri}), nil\n}\n```\n\n> Open方法\n>\n> - 打开一个driverName指定的数据库\n>\n> - DataSourceName指定数据源，一般包括数据库文件名和连接信息\n\n#### 2.2 DB结构体\n\n> 一般都是通过数据库特定的链接帮助函数打开数据库，返回一个`*DB`(DB结构体指针)\n>\n> 下面内容来自DB结构体的翻译\n>\n> - DB是一个数据库句柄，代表一个由0个或更多的底层连接。它可以安全地被多个goroutines同时使用。\n>     - 0或多个底层连接，这里是指有一个连接池，当要连接数据库时从连接池里拿一个sql连接对象来用，用完了再放回去\n>     - 连接池的优势：\n>         - 当需要频繁的操作sql数据时，会提前将sql数据库连接提前创建好并放到链接池里\n>         - 而不是每次需要操作sql时，再去创建连接，节省时间和提高效率\n>         - 当使用完以后，再将链接放回到链接池\n>         - 并且连接池是可以被多个`goroutine`同时使用\n> - sql包自动创建和释放连接；它也维护一个空闲的连接池。\n>     - 如果数据库有有每个连接状态的概念，这种状态可以被可靠地观察到在一个事务（Tx）或连接（Conn）中可靠地观察到这种状态。\n>     - 一旦DB.Begin被调用，返回的返回的Tx被绑定到一个单一的连接。\n>     - 一旦提交或称为 \"回滚\"，该事务的连接被返回到DB的闲置连接池。\n>     - 池的大小 可以用SetMaxIdleConns来控制。\n\n```go\n// 下面是DB结构体的实现\n// DB is a database handle representing a pool of zero or more\n// underlying connections. It's safe for concurrent use by multiple\n// goroutines.\n//\n// The sql package creates and frees connections automatically; it\n// also maintains a free pool of idle connections. If the database has\n// a concept of per-connection state, such state can be reliably observed\n// within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the\n// returned Tx is bound to a single connection. Once Commit or\n// Rollback is called on the transaction, that transaction's\n// connection is returned to DB's idle connection pool. The pool size\n// can be controlled with SetMaxIdleConns.\ntype DB struct {\n\t// Atomic access only. At top of struct to prevent mis-alignment\n\t// on 32-bit platforms. Of type time.Duration.\n\twaitDuration int64 // Total time waited for new connections.\n\n\tconnector driver.Connector\n\t// numClosed is an atomic counter which represents a total number of\n\t// closed connections. Stmt.openStmt checks it before cleaning closed\n\t// connections in Stmt.css.\n\tnumClosed uint64\n\n\tmu           sync.Mutex // protects following fields\n\tfreeConn     []*driverConn\n\tconnRequests map[uint64]chan connRequest\n\tnextRequest  uint64 // Next key to use in connRequests.\n\tnumOpen      int    // number of opened and pending open connections\n\t// Used to signal the need for new connections\n\t// a goroutine running connectionOpener() reads on this chan and\n\t// maybeOpenNewConnections sends on the chan (one send per needed connection)\n\t// It is closed during db.Close(). The close tells the connectionOpener\n\t// goroutine to exit.\n\topenerCh          chan struct{}\n\tclosed            bool\n\tdep               map[finalCloser]depSet\n\tlastPut           map[*driverConn]string // stacktrace of last conn's put; debug only\n\tmaxIdleCount      int                    // zero means defaultMaxIdleConns; negative means 0\n\tmaxOpen           int                    // <= 0 means unlimited\n\tmaxLifetime       time.Duration          // maximum amount of time a connection may be reused\n\tmaxIdleTime       time.Duration          // maximum amount of time a connection may be idle before being closed\n\tcleanerCh         chan struct{}\n\twaitCount         int64 // Total number of connections waited for.\n\tmaxIdleClosed     int64 // Total number of connections closed due to idle count.\n\tmaxIdleTimeClosed int64 // Total number of connections closed due to idle time.\n\tmaxLifetimeClosed int64 // Total number of connections closed due to max connection lifetime limit.\n\n\tstop func() // stop cancels the connection opener.\n}\n```\n\n### 3、mysql连接\n\n#### 3.1 Open数据库\n\n> 使用Open方法打开数据库:\n>\n> - dataSourceName格式：`“用户名:密码@tcp(host:port)/数据库名称”`\n> - Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n>     - 当dataSourceName格式不正确的时候，会报错\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"数据库的打开成功:%#+v\\n\", db)\n\tfmt.Printf(\"数据库db类型:%T\\n\", db)\n}\n```\n\n```go\n// 上面代码返回的DB数据\n// 数据库的打开成功:\n&sql.DB{\n    waitDuration:0, \n    connector:(*mysql.connector)(0xc00012a018), \n    numClosed:0x0, \n    mu:sync.Mutex{state:0, sema:0x0}nn:[]*sql.driverConn(nil), \n    connRequests:map[uint64]chan sql.connRequest{}, \n    nextRequest:0x0, \n    numOpen:0, \n    openerCh:(chan struct {})(0xc0001020c0), \n    closed:false, \n    dep:map[sql.finalCloser]sql.depSet(nil), \n    lastPut:map[*sql.driverConn]string{}, \n    maxIdleCount:0, \n    maxOpen:0, \n    maxLifetime:0, \n    maxIdleTime:0, \n    cleanerCh:(chan struct {})(nil), \n    waitCount:0, \n    maxIdleClosed:0, \n    maxIdleTimeClosed:0, \n    maxLifetimeClosed:0, \n    stop:(func())(0x107d760)\n}\n// 数据库db类型: *sql.DB\n```\n\n##### 3.1.1 Open数据库正确\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\t_, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"校验数据库成功\\n\")\n}\n```\n\n![image-20220516104406809](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104406809.png)\n\n##### 3.1.2 Open数据库失败\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式不正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)————prc_ly\"\n\t_, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"校验数据库成功\\n\")\n}\n```\n\n![image-20220516104457767](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104457767.png)\n\n#### 3.2 Ping数据库\n\n> 通过Ping方法来真正连接数据库，校验是否连接正确\n\n##### 3.2.1 Ping数据库正确\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确，密码不正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"打开数据库成功\\n\")\n}\n```\n\n![image-20220516105118247](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516105118247.png)\n\n##### 3.2.2 Ping数据库失败\n\n> 比如将dsn里的数据库密码写错\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确，密码不正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"打开数据库成功\\n\")\n}\n```\n\n![image-20220516104653089](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104653089.png)\n\n#### 3.3 驱动注入原理简单介绍\n\n```go\n// 使用mysql驱动\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n```go\n// 因为是以匿名导入\"github.com/go-sql-driver/mysql\"包，所以只会导入这个包的Init方法\n// 路径：/Users/xxx/Desktop/Code/go_study/pkg/mod/github.com/go-sql-driver/mysql@v1.6.0/driver.go\n\n// Package mysql provides a MySQL driver for Go's database/sql package.\n//\n// The driver should be used via the database/sql package:\n//\n//  import \"database/sql\"\n//  import _ \"github.com/go-sql-driver/mysql\"\n//\n//  db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n//\n// See https://github.com/go-sql-driver/mysql#usage for details\npackage mysql\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"net\"\n\t\"sync\"\n)\n\nfunc init() {\n\tsql.Register(\"mysql\", &MySQLDriver{})\n}\n```\n\n> 其实可以看到是导入了go原生的`database/sql`这个包，然后init方法里进行了注册\n>\n> - 所以在我们写代码的时候，只需要匿名导入`\"github.com/go-sql-driver/mysql\"`这个包，会自动执行init方法，帮我们调用`database/sql`包里的`Register`方法来完成mysql的注入\n>\n> - Register注册并命名一个数据库，可以在Open函数中使用该命名启用该驱动\n> - 如果 Register注册同一名称两次，或者driver参数为nil，会导致panic。\n\n## 三、go增删改查数据库\n\n### 1、定义全局db连接池\n\n> 在第二章我们了解到，使用Open方法打开mysql数据库:\n>\n> 得到的db是`database/sql`包里定义的`DB`结构体对象，并且DB是一个连接池，所以我们可以将其定义为全局的变量，供其他地方使用\n>\n> - 另外再initDB方法里，因为db这个变量已经定义为全局变量了，就不需要再重新声明并定义了\n>     - 在db, err = sql.Open(\"mysql\", dsn)这块代码，如果仍写成`:=`，就会将db这个变量声明未局部变量，那边全局db仍然是一个空指针，这块需要注意\n>     - 另外为什么err也可以直接用`=`号接收，因为在返回值里定义了\n\n```go\n// 定义db为全局的连接池\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\t\n}\n```\n\n### 2、查询单条数据\n\n> 查询数据用到了两个方法，queryRow和Scan\n\n#### 2.1 QueryRow方法\n\n> QueryRow()\n>\n> - 表示是从一个连接池里拿出来一个连接去数据库查询单条记录\n> - 注释翻译：\n>     - QueryRow执行一个查询，预计最多返回一条记录。\n>     - QueryRow总是返回一个非零的值。\n>     - 错误被推迟到Row的Scan方法被调用。\n>     - 如果查询没有选择任何行，*Row的扫描将返回ErrNoRows。否则，*Row's Scan会扫描第一条被选择的行，并丢弃其余的。\n>     - QueryRow内部使用context.Background。要指定context，请使用QueryRowContext.Background。\n\n```go\n// QueryRow\n// QueryRow executes a query that is expected to return at most one row.\n// QueryRow always returns a non-nil value. Errors are deferred until\n// Row's Scan method is called.\n// If the query selects no rows, the *Row's Scan will return ErrNoRows.\n// Otherwise, the *Row's Scan scans the first selected row and discards\n// the rest.\n//\n// QueryRow uses context.Background internally; to specify the context, use\n// QueryRowContext.\nfunc (db *DB) QueryRow(query string, args ...interface{}) *Row {\n\treturn db.QueryRowContext(context.Background(), query, args...)\n}\n```\n\n#### 2.2 Scan方法\n\n> Scan()\n>\n> - 从queryRow方法拿到的Row对象，然后传进一个结构体来接收查询到结果，对结构体进行重新赋值，所以需要传入结构体指针\n> - 注释翻译\n>     - 扫描将匹配的行中的列复制到目的地的值中。\n>     - 指向的值。详情请参见Rows.Scan的文档。\n>     - 如果有多条记录符合查询要求。扫描使用第一条记录，并丢弃其余的记录。\n>     - 如果没有任何行符合 查询，Scan会返回ErrNoRows。\n\n```go\n// Scan copies the columns from the matched row into the values\n// pointed at by dest. See the documentation on Rows.Scan for details.\n// If more than one row matches the query,\n// Scan uses the first row and discards the rest. If no row matches\n// the query, Scan returns ErrNoRows.\nfunc (r *Row) Scan(dest ...interface{}) error {\n\tif r.err != nil {\n\t\treturn r.err\n\t}\n\n\t// TODO(bradfitz): for now we need to defensively clone all\n\t// []byte that the driver returned (not permitting\n\t// *RawBytes in Rows.Scan), since we're about to close\n\t// the Rows in our defer, when we return from this function.\n\t// the contract with the driver.Next(...) interface is that it\n\t// can return slices into read-only temporary memory that's\n\t// only valid until the next Scan/Close. But the TODO is that\n\t// for a lot of drivers, this copy will be unnecessary. We\n\t// should provide an optional interface for drivers to\n\t// implement to say, \"don't worry, the []bytes that I return\n\t// from Next will not be modified again.\" (for instance, if\n\t// they were obtained from the network anyway) But for now we\n\t// don't care.\n\tdefer r.rows.Close()\n\tfor _, dp := range dest {\n\t\tif _, ok := dp.(*RawBytes); ok {\n\t\t\treturn errors.New(\"sql: RawBytes isn't allowed on Row.Scan\")\n\t\t}\n\t}\n\n\tif !r.rows.Next() {\n\t\tif err := r.rows.Err(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn ErrNoRows\n\t}\n\terr := r.rows.Scan(dest...)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Make sure the query can be processed to completion with no errors.\n\treturn r.rows.Close()\n}\n```\n\n#### 2.3 查询实例\n\n> 下面是单条记录查询的demo\n>\n> 需要先定一个数据库对应表的结构体，来传入给Scan方法进行接收QueryRow对象获得的值\n>\n> 注意：\n>\n> - 需要传入的是结构体指针，因为go语言中函数传值一般都是值拷贝，我们不希望值拷贝，如果是值拷贝，拿到的结果就不会重新赋值给声明的结构体\n>\n> - 所以对声明的结构体重新赋值，必须穿入指针，保证是传入的同一个\n>\n> 查询时，传递给QueryRow的sqlStr时，可以在sqlStr里使用`?`来表示占位符，用来动态传递值\n>\n> 必须对RowQuery查询到的结果调用Scan方法，因为Scan方法里定义了自动释放数据库链接的方法\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 定义user结构体，结构体字段必须要和查询数据库表的字段定义一致\ntype user struct{\n\tid int\n\tname string\n\tage int\n\thobby string\n}\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\n\treturn\n}\n\n// 查询单条记录\nfunc queryData(id int) {\n\tsqlStr := \"select * from user where id=?;\"\n\t// 从db连接池里拿出来一个连接去查询记录\n\trowObj := db.QueryRow(sqlStr, id)\n\t\n\t// 定义接收的结构体对象\n\tvar u1 user\n\t\n\t// 拿到结果\n\t// 必须调用Scan方法，Scan会自动归还db的连接，传入user结构体的指针\n\trowObj.Scan(&u1.id, &u1.name, &u1.age, &u1.hobby)\n\tfmt.Printf(\"u1:%+#v\\n\", u1)\n}\n\nfunc main() {\n\terr := initDB()\n\tif err != nil {\n\t\tfmt.Printf(\"initDB err:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\tqueryData(1)\n}\n```\n\n![image-20220516145006179](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516145006179.png)\n\n### 3、最大连接数\n\n> 因为`DB`这个结构体自己维护了一个数据库连接池，那么这个连接池可以设置数据库链接大小\n\n#### 3.1 SetMaxOpenConns方法\n\n> 用来设置数据库连接池最大连接数\n>\n> 注释翻译:\n>\n> - SetMaxOpenConns设置到数据库的最大开放连接数。\n> - 如果MaxIdleConns大于0，而新的MaxOpenConns小于MaxIdleConns，那么MaxIdleConns将被减少以符合新的MaxOpenConns限制。\n> - 如果n<=0，那么对开放连接的数量没有限制。默认是0（无限）。\n\n```go\n// 数据库连接数\n// SetMaxOpenConns sets the maximum number of open connections to the database.\n//\n// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than\n// MaxIdleConns, then MaxIdleConns will be reduced to match the new\n// MaxOpenConns limit.\n//\n// If n <= 0, then there is no limit on the number of open connections.\n// The default is 0 (unlimited).\nfunc (db *DB) SetMaxOpenConns(n int) {...}\n```\n\n#### 3.2 SetMaxOpenConns方法使用\n\n> 如果设置了SetMaxOpenConns的最大数，比如10\n>\n> 当连接池的db连接被使用完了，程序就会夯住，因为没有连接池里没有闲置的db连接了，此时会一直等待有闲置的db来使用，但是池子里已经没有可用的db连接了，那么程序就卡住了\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 定义user结构体\ntype user struct{\n\tid int\n\tname string\n\tage int\n\thobby string\n}\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 设置db最大连接池的连接个数\n\n\tdb.SetMaxOpenConns(10)\n\treturn\n}\n\n// 查询单条记录\nfunc queryData(id int) {\n\tsqlStr := \"select * from user where id=?;\"\n\t// 从db连接池里拿出来一个连接去查询记录\n\tfor i := 0; i < 11; i++{\n\t\tfmt.Printf(\"开始第%v次查询\\n\", i)\n\t\tdb.QueryRow(sqlStr, id)\n\t}\n\t\n\t\n\t// 定义接收的结构体对象\n\tvar u1 user\n\t\n\t// 拿到结果\n\t// 必须调用Scan方法，Scan会自动归还db的连接\n\t// rowObj.Scan(&u1.id, &u1.name, &u1.age, &u1.hobby)\n\tfmt.Printf(\"u1:%+#v\\n\", u1)\n}\n\nfunc main() {\n\terr := initDB()\n\tif err != nil {\n\t\tfmt.Printf(\"initDB err:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\tqueryData(1)\n}\n```\n\n![image-20220516171940580](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516171940580.png)\n\n","source":"_posts/golang/go_mysql使用/go_mysql使用.assets.md","raw":"---\ntitle: Golang Mysql笔记\ndate: 2021-05-16 19:31:21\ntags: \n- Mysql\n- Golang\ncover: /posts_cover_img/golang/go_mysql.png\ncategories: Golang Mysql笔记\n---\n\n## 一、Mysql环境搭建\n\n### 1、mysql镜像地址\n\n> 推荐使用docker搭建mysql环境，非常方便用来学习mysql\n>\n> [mysql的docker镜像地址](https://registry.hub.docker.com/_/mysql)\n\n### 2、创建mysql容器\n\n#### 2.1 拉取mysql镜像\n\n```bash\ndocker pull mysql\n```\n\n#### 2.2 创建mysql容器\n\n> 下面内容来自dockerhub里mysql的使用介绍\n\n```bash\n#Configuration without a cnf file\n#Many configuration options can be passed as flags to mysqld. This will give you the flexibility to customize the container without needing a cnf file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (utf8mb4) just run the following:\n\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# If you would like to see a complete list of available options, just run:\n$ docker run -it --rm mysql:tag --verbose --help\n\n------------------->翻译如下<--------------------------\n#没有cnf文件的配置\n#许多配置选项可以作为标志传递给mysqld。这将使你能够灵活地定制容器而不需要cnf文件。例如，如果你想改变所有表的默认编码和排序为使用UTF-8(utf8mb4)，只需运行以下内容。\n$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# 如果你想看到可用选项的完整列表，只需运行。\n$ docker run -it --rm mysql:tag --verbose --help\n```\n\n> 创建mysql容器\n\n```bash\n$ docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n\n# --name mysql 创建的容器名叫mysql\n# -e MYSQL_ROOT_PASSWORD=123456   MYSQL_ROOT_PASSWORD指定了将为MySQL根超级用户账户设置的密码，可以看到是123456\n# --character-set-server=utf8mb4  设置mysql字符编码为utf8mb4，表示可以支持中文和表情\n# --collation-server=utf8mb4_unicode_ci 在字符集内用于比较或排序字符的一套规则，即校验规则\n```\n\n![image-20220324152525798](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152525798.png)\n\n#### 2.3 连接数据库\n\n> 这里使用了`mycli`这个包来连接数据库测试\n>\n> `mycli`包时python写的一个具有代码提示的mysql使用工具\n\n![image-20220324152502070](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152502070.png)\n\n> 可以看到连接数据库成功，可以成功登录到mysql里面了\n\n## 二、go连接mysql\n\n### 1、go连接mysql用到的包\n\n#### 1.1 database/sql\n\n> \u0011go语言中的`database/sql`包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动，使用`database/sql`包时必须注入一个数据库驱动\n>\n> - 也就是说`database/sql`里面定义了SQL的需要实现的方法\n\n#### 1.2 mysql数据库驱动\n\n```go\n// 下载mysql驱动\ngo get -u github.com/go-sql-driver/mysql\n\n// -u：表示所有的依赖都是下载最新的\n// github地址：https://github.com/go-sql-driver/mysql\n```\n\n### 2、使用mysql驱动\n\n#### 2.1 Open方法\n\n> go语言中没有数据库驱动，所以需要外部导入一个数据库驱动来注入\n>\n> 使用`database/sql`的Open()方法\n>\n> 下面内容来自Open方法注释翻译\n>\n> - 打开一个由其数据库驱动名称和一个特定的数据源名称指定的数据库。\n> - 驱动程序特定的数据源名称，通常至少包括一个数据库名称和连接信息。\n> - 大多数用户会通过一个特定驱动程序的连接来打开一个数据库辅助函数来打开数据库，该函数返回一个*DB。\n>     - Go标准库中没有包含数据库驱动没有包括在Go标准库中。参见 https://golang.org/s/sqldrivers 以了解第三方驱动程序的列表。\n>     - Open可以只验证它的参数，而不创建一个与数据库的连接与数据库的连接。为了验证数据源的名称是否有效，可以调用Ping。\n> - 返回的DB对于多个goroutine的并发使用是安全的并维护它自己的空闲连接池。\n>     - 因此，Open函数应该只被调用一次。很少有必要关闭一个数据库。\n\n```go\n// open方法打开指定驱动的数据库\n// Open opens a database specified by its database driver name and a\n// driver-specific data source name, usually consisting of at least a\n// database name and connection information.\n//\n// Most users will open a database via a driver-specific connection\n// helper function that returns a *DB. No database drivers are included\n// in the Go standard library. See https://golang.org/s/sqldrivers for\n// a list of third-party drivers.\n//\n// Open may just validate its arguments without creating a connection\n// to the database. To verify that the data source name is valid, call\n// Ping.\n//\n// The returned DB is safe for concurrent use by multiple goroutines\n// and maintains its own pool of idle connections. Thus, the Open\n// function should be called just once. It is rarely necessary to\n// close a DB.\nfunc Open(driverName, dataSourceName string) (*DB, error) {\n\tdriversMu.RLock()\n\tdriveri, ok := drivers[driverName]\n\tdriversMu.RUnlock()\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"sql: unknown driver %q (forgotten import?)\", driverName)\n\t}\n\n\tif driverCtx, ok := driveri.(driver.DriverContext); ok {\n\t\tconnector, err := driverCtx.OpenConnector(dataSourceName)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn OpenDB(connector), nil\n\t}\n\n\treturn OpenDB(dsnConnector{dsn: dataSourceName, driver: driveri}), nil\n}\n```\n\n> Open方法\n>\n> - 打开一个driverName指定的数据库\n>\n> - DataSourceName指定数据源，一般包括数据库文件名和连接信息\n\n#### 2.2 DB结构体\n\n> 一般都是通过数据库特定的链接帮助函数打开数据库，返回一个`*DB`(DB结构体指针)\n>\n> 下面内容来自DB结构体的翻译\n>\n> - DB是一个数据库句柄，代表一个由0个或更多的底层连接。它可以安全地被多个goroutines同时使用。\n>     - 0或多个底层连接，这里是指有一个连接池，当要连接数据库时从连接池里拿一个sql连接对象来用，用完了再放回去\n>     - 连接池的优势：\n>         - 当需要频繁的操作sql数据时，会提前将sql数据库连接提前创建好并放到链接池里\n>         - 而不是每次需要操作sql时，再去创建连接，节省时间和提高效率\n>         - 当使用完以后，再将链接放回到链接池\n>         - 并且连接池是可以被多个`goroutine`同时使用\n> - sql包自动创建和释放连接；它也维护一个空闲的连接池。\n>     - 如果数据库有有每个连接状态的概念，这种状态可以被可靠地观察到在一个事务（Tx）或连接（Conn）中可靠地观察到这种状态。\n>     - 一旦DB.Begin被调用，返回的返回的Tx被绑定到一个单一的连接。\n>     - 一旦提交或称为 \"回滚\"，该事务的连接被返回到DB的闲置连接池。\n>     - 池的大小 可以用SetMaxIdleConns来控制。\n\n```go\n// 下面是DB结构体的实现\n// DB is a database handle representing a pool of zero or more\n// underlying connections. It's safe for concurrent use by multiple\n// goroutines.\n//\n// The sql package creates and frees connections automatically; it\n// also maintains a free pool of idle connections. If the database has\n// a concept of per-connection state, such state can be reliably observed\n// within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the\n// returned Tx is bound to a single connection. Once Commit or\n// Rollback is called on the transaction, that transaction's\n// connection is returned to DB's idle connection pool. The pool size\n// can be controlled with SetMaxIdleConns.\ntype DB struct {\n\t// Atomic access only. At top of struct to prevent mis-alignment\n\t// on 32-bit platforms. Of type time.Duration.\n\twaitDuration int64 // Total time waited for new connections.\n\n\tconnector driver.Connector\n\t// numClosed is an atomic counter which represents a total number of\n\t// closed connections. Stmt.openStmt checks it before cleaning closed\n\t// connections in Stmt.css.\n\tnumClosed uint64\n\n\tmu           sync.Mutex // protects following fields\n\tfreeConn     []*driverConn\n\tconnRequests map[uint64]chan connRequest\n\tnextRequest  uint64 // Next key to use in connRequests.\n\tnumOpen      int    // number of opened and pending open connections\n\t// Used to signal the need for new connections\n\t// a goroutine running connectionOpener() reads on this chan and\n\t// maybeOpenNewConnections sends on the chan (one send per needed connection)\n\t// It is closed during db.Close(). The close tells the connectionOpener\n\t// goroutine to exit.\n\topenerCh          chan struct{}\n\tclosed            bool\n\tdep               map[finalCloser]depSet\n\tlastPut           map[*driverConn]string // stacktrace of last conn's put; debug only\n\tmaxIdleCount      int                    // zero means defaultMaxIdleConns; negative means 0\n\tmaxOpen           int                    // <= 0 means unlimited\n\tmaxLifetime       time.Duration          // maximum amount of time a connection may be reused\n\tmaxIdleTime       time.Duration          // maximum amount of time a connection may be idle before being closed\n\tcleanerCh         chan struct{}\n\twaitCount         int64 // Total number of connections waited for.\n\tmaxIdleClosed     int64 // Total number of connections closed due to idle count.\n\tmaxIdleTimeClosed int64 // Total number of connections closed due to idle time.\n\tmaxLifetimeClosed int64 // Total number of connections closed due to max connection lifetime limit.\n\n\tstop func() // stop cancels the connection opener.\n}\n```\n\n### 3、mysql连接\n\n#### 3.1 Open数据库\n\n> 使用Open方法打开数据库:\n>\n> - dataSourceName格式：`“用户名:密码@tcp(host:port)/数据库名称”`\n> - Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n>     - 当dataSourceName格式不正确的时候，会报错\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"数据库的打开成功:%#+v\\n\", db)\n\tfmt.Printf(\"数据库db类型:%T\\n\", db)\n}\n```\n\n```go\n// 上面代码返回的DB数据\n// 数据库的打开成功:\n&sql.DB{\n    waitDuration:0, \n    connector:(*mysql.connector)(0xc00012a018), \n    numClosed:0x0, \n    mu:sync.Mutex{state:0, sema:0x0}nn:[]*sql.driverConn(nil), \n    connRequests:map[uint64]chan sql.connRequest{}, \n    nextRequest:0x0, \n    numOpen:0, \n    openerCh:(chan struct {})(0xc0001020c0), \n    closed:false, \n    dep:map[sql.finalCloser]sql.depSet(nil), \n    lastPut:map[*sql.driverConn]string{}, \n    maxIdleCount:0, \n    maxOpen:0, \n    maxLifetime:0, \n    maxIdleTime:0, \n    cleanerCh:(chan struct {})(nil), \n    waitCount:0, \n    maxIdleClosed:0, \n    maxIdleTimeClosed:0, \n    maxLifetimeClosed:0, \n    stop:(func())(0x107d760)\n}\n// 数据库db类型: *sql.DB\n```\n\n##### 3.1.1 Open数据库正确\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\t_, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"校验数据库成功\\n\")\n}\n```\n\n![image-20220516104406809](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104406809.png)\n\n##### 3.1.2 Open数据库失败\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式不正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)————prc_ly\"\n\t_, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"校验数据库成功\\n\")\n}\n```\n\n![image-20220516104457767](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104457767.png)\n\n#### 3.2 Ping数据库\n\n> 通过Ping方法来真正连接数据库，校验是否连接正确\n\n##### 3.2.1 Ping数据库正确\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确，密码不正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"打开数据库成功\\n\")\n}\n```\n\n![image-20220516105118247](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516105118247.png)\n\n##### 3.2.2 Ping数据库失败\n\n> 比如将dsn里的数据库密码写错\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\t\n\t// dsn格式正确，密码不正确\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Printf(\"校验数据库参数失败:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\tfmt.Printf(\"打开数据库失败:%v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"打开数据库成功\\n\")\n}\n```\n\n![image-20220516104653089](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104653089.png)\n\n#### 3.3 驱动注入原理简单介绍\n\n```go\n// 使用mysql驱动\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\n```go\n// 因为是以匿名导入\"github.com/go-sql-driver/mysql\"包，所以只会导入这个包的Init方法\n// 路径：/Users/xxx/Desktop/Code/go_study/pkg/mod/github.com/go-sql-driver/mysql@v1.6.0/driver.go\n\n// Package mysql provides a MySQL driver for Go's database/sql package.\n//\n// The driver should be used via the database/sql package:\n//\n//  import \"database/sql\"\n//  import _ \"github.com/go-sql-driver/mysql\"\n//\n//  db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n//\n// See https://github.com/go-sql-driver/mysql#usage for details\npackage mysql\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\t\"net\"\n\t\"sync\"\n)\n\nfunc init() {\n\tsql.Register(\"mysql\", &MySQLDriver{})\n}\n```\n\n> 其实可以看到是导入了go原生的`database/sql`这个包，然后init方法里进行了注册\n>\n> - 所以在我们写代码的时候，只需要匿名导入`\"github.com/go-sql-driver/mysql\"`这个包，会自动执行init方法，帮我们调用`database/sql`包里的`Register`方法来完成mysql的注入\n>\n> - Register注册并命名一个数据库，可以在Open函数中使用该命名启用该驱动\n> - 如果 Register注册同一名称两次，或者driver参数为nil，会导致panic。\n\n## 三、go增删改查数据库\n\n### 1、定义全局db连接池\n\n> 在第二章我们了解到，使用Open方法打开mysql数据库:\n>\n> 得到的db是`database/sql`包里定义的`DB`结构体对象，并且DB是一个连接池，所以我们可以将其定义为全局的变量，供其他地方使用\n>\n> - 另外再initDB方法里，因为db这个变量已经定义为全局变量了，就不需要再重新声明并定义了\n>     - 在db, err = sql.Open(\"mysql\", dsn)这块代码，如果仍写成`:=`，就会将db这个变量声明未局部变量，那边全局db仍然是一个空指针，这块需要注意\n>     - 另外为什么err也可以直接用`=`号接收，因为在返回值里定义了\n\n```go\n// 定义db为全局的连接池\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\t\n}\n```\n\n### 2、查询单条数据\n\n> 查询数据用到了两个方法，queryRow和Scan\n\n#### 2.1 QueryRow方法\n\n> QueryRow()\n>\n> - 表示是从一个连接池里拿出来一个连接去数据库查询单条记录\n> - 注释翻译：\n>     - QueryRow执行一个查询，预计最多返回一条记录。\n>     - QueryRow总是返回一个非零的值。\n>     - 错误被推迟到Row的Scan方法被调用。\n>     - 如果查询没有选择任何行，*Row的扫描将返回ErrNoRows。否则，*Row's Scan会扫描第一条被选择的行，并丢弃其余的。\n>     - QueryRow内部使用context.Background。要指定context，请使用QueryRowContext.Background。\n\n```go\n// QueryRow\n// QueryRow executes a query that is expected to return at most one row.\n// QueryRow always returns a non-nil value. Errors are deferred until\n// Row's Scan method is called.\n// If the query selects no rows, the *Row's Scan will return ErrNoRows.\n// Otherwise, the *Row's Scan scans the first selected row and discards\n// the rest.\n//\n// QueryRow uses context.Background internally; to specify the context, use\n// QueryRowContext.\nfunc (db *DB) QueryRow(query string, args ...interface{}) *Row {\n\treturn db.QueryRowContext(context.Background(), query, args...)\n}\n```\n\n#### 2.2 Scan方法\n\n> Scan()\n>\n> - 从queryRow方法拿到的Row对象，然后传进一个结构体来接收查询到结果，对结构体进行重新赋值，所以需要传入结构体指针\n> - 注释翻译\n>     - 扫描将匹配的行中的列复制到目的地的值中。\n>     - 指向的值。详情请参见Rows.Scan的文档。\n>     - 如果有多条记录符合查询要求。扫描使用第一条记录，并丢弃其余的记录。\n>     - 如果没有任何行符合 查询，Scan会返回ErrNoRows。\n\n```go\n// Scan copies the columns from the matched row into the values\n// pointed at by dest. See the documentation on Rows.Scan for details.\n// If more than one row matches the query,\n// Scan uses the first row and discards the rest. If no row matches\n// the query, Scan returns ErrNoRows.\nfunc (r *Row) Scan(dest ...interface{}) error {\n\tif r.err != nil {\n\t\treturn r.err\n\t}\n\n\t// TODO(bradfitz): for now we need to defensively clone all\n\t// []byte that the driver returned (not permitting\n\t// *RawBytes in Rows.Scan), since we're about to close\n\t// the Rows in our defer, when we return from this function.\n\t// the contract with the driver.Next(...) interface is that it\n\t// can return slices into read-only temporary memory that's\n\t// only valid until the next Scan/Close. But the TODO is that\n\t// for a lot of drivers, this copy will be unnecessary. We\n\t// should provide an optional interface for drivers to\n\t// implement to say, \"don't worry, the []bytes that I return\n\t// from Next will not be modified again.\" (for instance, if\n\t// they were obtained from the network anyway) But for now we\n\t// don't care.\n\tdefer r.rows.Close()\n\tfor _, dp := range dest {\n\t\tif _, ok := dp.(*RawBytes); ok {\n\t\t\treturn errors.New(\"sql: RawBytes isn't allowed on Row.Scan\")\n\t\t}\n\t}\n\n\tif !r.rows.Next() {\n\t\tif err := r.rows.Err(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn ErrNoRows\n\t}\n\terr := r.rows.Scan(dest...)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Make sure the query can be processed to completion with no errors.\n\treturn r.rows.Close()\n}\n```\n\n#### 2.3 查询实例\n\n> 下面是单条记录查询的demo\n>\n> 需要先定一个数据库对应表的结构体，来传入给Scan方法进行接收QueryRow对象获得的值\n>\n> 注意：\n>\n> - 需要传入的是结构体指针，因为go语言中函数传值一般都是值拷贝，我们不希望值拷贝，如果是值拷贝，拿到的结果就不会重新赋值给声明的结构体\n>\n> - 所以对声明的结构体重新赋值，必须穿入指针，保证是传入的同一个\n>\n> 查询时，传递给QueryRow的sqlStr时，可以在sqlStr里使用`?`来表示占位符，用来动态传递值\n>\n> 必须对RowQuery查询到的结果调用Scan方法，因为Scan方法里定义了自动释放数据库链接的方法\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 定义user结构体，结构体字段必须要和查询数据库表的字段定义一致\ntype user struct{\n\tid int\n\tname string\n\tage int\n\thobby string\n}\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\n\treturn\n}\n\n// 查询单条记录\nfunc queryData(id int) {\n\tsqlStr := \"select * from user where id=?;\"\n\t// 从db连接池里拿出来一个连接去查询记录\n\trowObj := db.QueryRow(sqlStr, id)\n\t\n\t// 定义接收的结构体对象\n\tvar u1 user\n\t\n\t// 拿到结果\n\t// 必须调用Scan方法，Scan会自动归还db的连接，传入user结构体的指针\n\trowObj.Scan(&u1.id, &u1.name, &u1.age, &u1.hobby)\n\tfmt.Printf(\"u1:%+#v\\n\", u1)\n}\n\nfunc main() {\n\terr := initDB()\n\tif err != nil {\n\t\tfmt.Printf(\"initDB err:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\tqueryData(1)\n}\n```\n\n![image-20220516145006179](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516145006179.png)\n\n### 3、最大连接数\n\n> 因为`DB`这个结构体自己维护了一个数据库连接池，那么这个连接池可以设置数据库链接大小\n\n#### 3.1 SetMaxOpenConns方法\n\n> 用来设置数据库连接池最大连接数\n>\n> 注释翻译:\n>\n> - SetMaxOpenConns设置到数据库的最大开放连接数。\n> - 如果MaxIdleConns大于0，而新的MaxOpenConns小于MaxIdleConns，那么MaxIdleConns将被减少以符合新的MaxOpenConns限制。\n> - 如果n<=0，那么对开放连接的数量没有限制。默认是0（无限）。\n\n```go\n// 数据库连接数\n// SetMaxOpenConns sets the maximum number of open connections to the database.\n//\n// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than\n// MaxIdleConns, then MaxIdleConns will be reduced to match the new\n// MaxOpenConns limit.\n//\n// If n <= 0, then there is no limit on the number of open connections.\n// The default is 0 (unlimited).\nfunc (db *DB) SetMaxOpenConns(n int) {...}\n```\n\n#### 3.2 SetMaxOpenConns方法使用\n\n> 如果设置了SetMaxOpenConns的最大数，比如10\n>\n> 当连接池的db连接被使用完了，程序就会夯住，因为没有连接池里没有闲置的db连接了，此时会一直等待有闲置的db来使用，但是池子里已经没有可用的db连接了，那么程序就卡住了\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\n// 定义全局db连接池\nvar db *sql.DB\n\n// 定义user结构体\ntype user struct{\n\tid int\n\tname string\n\tage int\n\thobby string\n}\n\n// 初始化数据库\nfunc initDB() (err error){\n\t// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确\n\tdsn := \"root:123456@tcp(127.0.0.1:3306)/prc_ly\"\n\tdb, err = sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 校验数据库打开是否成功\n\terr = db.Ping()\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\t// 设置db最大连接池的连接个数\n\n\tdb.SetMaxOpenConns(10)\n\treturn\n}\n\n// 查询单条记录\nfunc queryData(id int) {\n\tsqlStr := \"select * from user where id=?;\"\n\t// 从db连接池里拿出来一个连接去查询记录\n\tfor i := 0; i < 11; i++{\n\t\tfmt.Printf(\"开始第%v次查询\\n\", i)\n\t\tdb.QueryRow(sqlStr, id)\n\t}\n\t\n\t\n\t// 定义接收的结构体对象\n\tvar u1 user\n\t\n\t// 拿到结果\n\t// 必须调用Scan方法，Scan会自动归还db的连接\n\t// rowObj.Scan(&u1.id, &u1.name, &u1.age, &u1.hobby)\n\tfmt.Printf(\"u1:%+#v\\n\", u1)\n}\n\nfunc main() {\n\terr := initDB()\n\tif err != nil {\n\t\tfmt.Printf(\"initDB err:%v\\n\", err)\n\t\treturn\n\t}\n\t\n\tqueryData(1)\n}\n```\n\n![image-20220516171940580](go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516171940580.png)\n\n","slug":"golang/go_mysql使用/go_mysql使用.assets","published":1,"updated":"2022-05-17T17:05:51.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3aeutxe0003vsv29hoh2tmx","content":"<h2 id=\"一、Mysql环境搭建\"><a href=\"#一、Mysql环境搭建\" class=\"headerlink\" title=\"一、Mysql环境搭建\"></a>一、Mysql环境搭建</h2><h3 id=\"1、mysql镜像地址\"><a href=\"#1、mysql镜像地址\" class=\"headerlink\" title=\"1、mysql镜像地址\"></a>1、mysql镜像地址</h3><blockquote>\n<p>推荐使用docker搭建mysql环境，非常方便用来学习mysql</p>\n<p><a href=\"https://registry.hub.docker.com/_/mysql\">mysql的docker镜像地址</a></p>\n</blockquote>\n<h3 id=\"2、创建mysql容器\"><a href=\"#2、创建mysql容器\" class=\"headerlink\" title=\"2、创建mysql容器\"></a>2、创建mysql容器</h3><h4 id=\"2-1-拉取mysql镜像\"><a href=\"#2-1-拉取mysql镜像\" class=\"headerlink\" title=\"2.1 拉取mysql镜像\"></a>2.1 拉取mysql镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-创建mysql容器\"><a href=\"#2-2-创建mysql容器\" class=\"headerlink\" title=\"2.2 创建mysql容器\"></a>2.2 创建mysql容器</h4><blockquote>\n<p>下面内容来自dockerhub里mysql的使用介绍</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Configuration without a cnf file</span></span><br><span class=\"line\"><span class=\"comment\">#Many configuration options can be passed as flags to mysqld. This will give you the flexibility to customize the container without needing a cnf file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (utf8mb4) just run the following:</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you would like to see a complete list of available options, just run:</span></span><br><span class=\"line\">$ docker run -it --<span class=\"built_in\">rm</span> mysql:tag --verbose --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">-------------------&gt;翻译如下&lt;--------------------------</span><br><span class=\"line\"><span class=\"comment\">#没有cnf文件的配置</span></span><br><span class=\"line\"><span class=\"comment\">#许多配置选项可以作为标志传递给mysqld。这将使你能够灵活地定制容器而不需要cnf文件。例如，如果你想改变所有表的默认编码和排序为使用UTF-8(utf8mb4)，只需运行以下内容。</span></span><br><span class=\"line\">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你想看到可用选项的完整列表，只需运行。</span></span><br><span class=\"line\">$ docker run -it --<span class=\"built_in\">rm</span> mysql:tag --verbose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建mysql容器</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --name mysql 创建的容器名叫mysql</span></span><br><span class=\"line\"><span class=\"comment\"># -e MYSQL_ROOT_PASSWORD=123456   MYSQL_ROOT_PASSWORD指定了将为MySQL根超级用户账户设置的密码，可以看到是123456</span></span><br><span class=\"line\"><span class=\"comment\"># --character-set-server=utf8mb4  设置mysql字符编码为utf8mb4，表示可以支持中文和表情</span></span><br><span class=\"line\"><span class=\"comment\"># --collation-server=utf8mb4_unicode_ci 在字符集内用于比较或排序字符的一套规则，即校验规则</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152525798.png\" class=\"\" title=\"image-20220324152525798\">\n\n<h4 id=\"2-3-连接数据库\"><a href=\"#2-3-连接数据库\" class=\"headerlink\" title=\"2.3 连接数据库\"></a>2.3 连接数据库</h4><blockquote>\n<p>这里使用了<code>mycli</code>这个包来连接数据库测试</p>\n<p><code>mycli</code>包时python写的一个具有代码提示的mysql使用工具</p>\n</blockquote>\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152502070.png\" class=\"\" title=\"image-20220324152502070\">\n\n<blockquote>\n<p>可以看到连接数据库成功，可以成功登录到mysql里面了</p>\n</blockquote>\n<h2 id=\"二、go连接mysql\"><a href=\"#二、go连接mysql\" class=\"headerlink\" title=\"二、go连接mysql\"></a>二、go连接mysql</h2><h3 id=\"1、go连接mysql用到的包\"><a href=\"#1、go连接mysql用到的包\" class=\"headerlink\" title=\"1、go连接mysql用到的包\"></a>1、go连接mysql用到的包</h3><h4 id=\"1-1-database-x2F-sql\"><a href=\"#1-1-database-x2F-sql\" class=\"headerlink\" title=\"1.1 database&#x2F;sql\"></a>1.1 database&#x2F;sql</h4><blockquote>\n<p>\u0011go语言中的<code>database/sql</code>包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动，使用<code>database/sql</code>包时必须注入一个数据库驱动</p>\n<ul>\n<li>也就是说<code>database/sql</code>里面定义了SQL的需要实现的方法</li>\n</ul>\n</blockquote>\n<h4 id=\"1-2-mysql数据库驱动\"><a href=\"#1-2-mysql数据库驱动\" class=\"headerlink\" title=\"1.2 mysql数据库驱动\"></a>1.2 mysql数据库驱动</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载mysql驱动</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/<span class=\"keyword\">go</span>-sql-driver/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -u：表示所有的依赖都是下载最新的</span></span><br><span class=\"line\"><span class=\"comment\">// github地址：https://github.com/go-sql-driver/mysql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用mysql驱动\"><a href=\"#2、使用mysql驱动\" class=\"headerlink\" title=\"2、使用mysql驱动\"></a>2、使用mysql驱动</h3><h4 id=\"2-1-Open方法\"><a href=\"#2-1-Open方法\" class=\"headerlink\" title=\"2.1 Open方法\"></a>2.1 Open方法</h4><blockquote>\n<p>go语言中没有数据库驱动，所以需要外部导入一个数据库驱动来注入</p>\n<p>使用<code>database/sql</code>的Open()方法</p>\n<p>下面内容来自Open方法注释翻译</p>\n<ul>\n<li>打开一个由其数据库驱动名称和一个特定的数据源名称指定的数据库。</li>\n<li>驱动程序特定的数据源名称，通常至少包括一个数据库名称和连接信息。</li>\n<li>大多数用户会通过一个特定驱动程序的连接来打开一个数据库辅助函数来打开数据库，该函数返回一个*DB。<ul>\n<li>Go标准库中没有包含数据库驱动没有包括在Go标准库中。参见 <a href=\"https://golang.org/s/sqldrivers\">https://golang.org/s/sqldrivers</a> 以了解第三方驱动程序的列表。</li>\n<li>Open可以只验证它的参数，而不创建一个与数据库的连接与数据库的连接。为了验证数据源的名称是否有效，可以调用Ping。</li>\n</ul>\n</li>\n<li>返回的DB对于多个goroutine的并发使用是安全的并维护它自己的空闲连接池。<ul>\n<li>因此，Open函数应该只被调用一次。很少有必要关闭一个数据库。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open方法打开指定驱动的数据库</span></span><br><span class=\"line\"><span class=\"comment\">// Open opens a database specified by its database driver name and a</span></span><br><span class=\"line\"><span class=\"comment\">// driver-specific data source name, usually consisting of at least a</span></span><br><span class=\"line\"><span class=\"comment\">// database name and connection information.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Most users will open a database via a driver-specific connection</span></span><br><span class=\"line\"><span class=\"comment\">// helper function that returns a *DB. No database drivers are included</span></span><br><span class=\"line\"><span class=\"comment\">// in the Go standard library. See https://golang.org/s/sqldrivers for</span></span><br><span class=\"line\"><span class=\"comment\">// a list of third-party drivers.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Open may just validate its arguments without creating a connection</span></span><br><span class=\"line\"><span class=\"comment\">// to the database. To verify that the data source name is valid, call</span></span><br><span class=\"line\"><span class=\"comment\">// Ping.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The returned DB is safe for concurrent use by multiple goroutines</span></span><br><span class=\"line\"><span class=\"comment\">// and maintains its own pool of idle connections. Thus, the Open</span></span><br><span class=\"line\"><span class=\"comment\">// function should be called just once. It is rarely necessary to</span></span><br><span class=\"line\"><span class=\"comment\">// close a DB.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(driverName, dataSourceName <span class=\"type\">string</span>)</span></span> (*DB, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tdriversMu.RLock()</span><br><span class=\"line\">\tdriveri, ok := drivers[driverName]</span><br><span class=\"line\">\tdriversMu.RUnlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;sql: unknown driver %q (forgotten import?)&quot;</span>, driverName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> driverCtx, ok := driveri.(driver.DriverContext); ok &#123;</span><br><span class=\"line\">\t\tconnector, err := driverCtx.OpenConnector(dataSourceName)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> OpenDB(connector), <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OpenDB(dsnConnector&#123;dsn: dataSourceName, driver: driveri&#125;), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Open方法</p>\n<ul>\n<li><p>打开一个driverName指定的数据库</p>\n</li>\n<li><p>DataSourceName指定数据源，一般包括数据库文件名和连接信息</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"2-2-DB结构体\"><a href=\"#2-2-DB结构体\" class=\"headerlink\" title=\"2.2 DB结构体\"></a>2.2 DB结构体</h4><blockquote>\n<p>一般都是通过数据库特定的链接帮助函数打开数据库，返回一个<code>*DB</code>(DB结构体指针)</p>\n<p>下面内容来自DB结构体的翻译</p>\n<ul>\n<li>DB是一个数据库句柄，代表一个由0个或更多的底层连接。它可以安全地被多个goroutines同时使用。<ul>\n<li>0或多个底层连接，这里是指有一个连接池，当要连接数据库时从连接池里拿一个sql连接对象来用，用完了再放回去</li>\n<li>连接池的优势：<ul>\n<li>当需要频繁的操作sql数据时，会提前将sql数据库连接提前创建好并放到链接池里</li>\n<li>而不是每次需要操作sql时，再去创建连接，节省时间和提高效率</li>\n<li>当使用完以后，再将链接放回到链接池</li>\n<li>并且连接池是可以被多个<code>goroutine</code>同时使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>sql包自动创建和释放连接；它也维护一个空闲的连接池。<ul>\n<li>如果数据库有有每个连接状态的概念，这种状态可以被可靠地观察到在一个事务（Tx）或连接（Conn）中可靠地观察到这种状态。</li>\n<li>一旦DB.Begin被调用，返回的返回的Tx被绑定到一个单一的连接。</li>\n<li>一旦提交或称为 “回滚”，该事务的连接被返回到DB的闲置连接池。</li>\n<li>池的大小 可以用SetMaxIdleConns来控制。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是DB结构体的实现</span></span><br><span class=\"line\"><span class=\"comment\">// DB is a database handle representing a pool of zero or more</span></span><br><span class=\"line\"><span class=\"comment\">// underlying connections. It&#x27;s safe for concurrent use by multiple</span></span><br><span class=\"line\"><span class=\"comment\">// goroutines.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The sql package creates and frees connections automatically; it</span></span><br><span class=\"line\"><span class=\"comment\">// also maintains a free pool of idle connections. If the database has</span></span><br><span class=\"line\"><span class=\"comment\">// a concept of per-connection state, such state can be reliably observed</span></span><br><span class=\"line\"><span class=\"comment\">// within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the</span></span><br><span class=\"line\"><span class=\"comment\">// returned Tx is bound to a single connection. Once Commit or</span></span><br><span class=\"line\"><span class=\"comment\">// Rollback is called on the transaction, that transaction&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">// connection is returned to DB&#x27;s idle connection pool. The pool size</span></span><br><span class=\"line\"><span class=\"comment\">// can be controlled with SetMaxIdleConns.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Atomic access only. At top of struct to prevent mis-alignment</span></span><br><span class=\"line\">\t<span class=\"comment\">// on 32-bit platforms. Of type time.Duration.</span></span><br><span class=\"line\">\twaitDuration <span class=\"type\">int64</span> <span class=\"comment\">// Total time waited for new connections.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tconnector driver.Connector</span><br><span class=\"line\">\t<span class=\"comment\">// numClosed is an atomic counter which represents a total number of</span></span><br><span class=\"line\">\t<span class=\"comment\">// closed connections. Stmt.openStmt checks it before cleaning closed</span></span><br><span class=\"line\">\t<span class=\"comment\">// connections in Stmt.css.</span></span><br><span class=\"line\">\tnumClosed <span class=\"type\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmu           sync.Mutex <span class=\"comment\">// protects following fields</span></span><br><span class=\"line\">\tfreeConn     []*driverConn</span><br><span class=\"line\">\tconnRequests <span class=\"keyword\">map</span>[<span class=\"type\">uint64</span>]<span class=\"keyword\">chan</span> connRequest</span><br><span class=\"line\">\tnextRequest  <span class=\"type\">uint64</span> <span class=\"comment\">// Next key to use in connRequests.</span></span><br><span class=\"line\">\tnumOpen      <span class=\"type\">int</span>    <span class=\"comment\">// number of opened and pending open connections</span></span><br><span class=\"line\">\t<span class=\"comment\">// Used to signal the need for new connections</span></span><br><span class=\"line\">\t<span class=\"comment\">// a goroutine running connectionOpener() reads on this chan and</span></span><br><span class=\"line\">\t<span class=\"comment\">// maybeOpenNewConnections sends on the chan (one send per needed connection)</span></span><br><span class=\"line\">\t<span class=\"comment\">// It is closed during db.Close(). The close tells the connectionOpener</span></span><br><span class=\"line\">\t<span class=\"comment\">// goroutine to exit.</span></span><br><span class=\"line\">\topenerCh          <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">\tclosed            <span class=\"type\">bool</span></span><br><span class=\"line\">\tdep               <span class=\"keyword\">map</span>[finalCloser]depSet</span><br><span class=\"line\">\tlastPut           <span class=\"keyword\">map</span>[*driverConn]<span class=\"type\">string</span> <span class=\"comment\">// stacktrace of last conn&#x27;s put; debug only</span></span><br><span class=\"line\">\tmaxIdleCount      <span class=\"type\">int</span>                    <span class=\"comment\">// zero means defaultMaxIdleConns; negative means 0</span></span><br><span class=\"line\">\tmaxOpen           <span class=\"type\">int</span>                    <span class=\"comment\">// &lt;= 0 means unlimited</span></span><br><span class=\"line\">\tmaxLifetime       time.Duration          <span class=\"comment\">// maximum amount of time a connection may be reused</span></span><br><span class=\"line\">\tmaxIdleTime       time.Duration          <span class=\"comment\">// maximum amount of time a connection may be idle before being closed</span></span><br><span class=\"line\">\tcleanerCh         <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">\twaitCount         <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections waited for.</span></span><br><span class=\"line\">\tmaxIdleClosed     <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to idle count.</span></span><br><span class=\"line\">\tmaxIdleTimeClosed <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to idle time.</span></span><br><span class=\"line\">\tmaxLifetimeClosed <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to max connection lifetime limit.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstop <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"comment\">// stop cancels the connection opener.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql连接\"><a href=\"#3、mysql连接\" class=\"headerlink\" title=\"3、mysql连接\"></a>3、mysql连接</h3><h4 id=\"3-1-Open数据库\"><a href=\"#3-1-Open数据库\" class=\"headerlink\" title=\"3.1 Open数据库\"></a>3.1 Open数据库</h4><blockquote>\n<p>使用Open方法打开数据库:</p>\n<ul>\n<li>dataSourceName格式：<code>“用户名:密码@tcp(host:port)/数据库名称”</code></li>\n<li>Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确<ul>\n<li>当dataSourceName格式不正确的时候，会报错</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;数据库的打开成功:%#+v\\n&quot;</span>, db)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;数据库db类型:%T\\n&quot;</span>, db)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上面代码返回的DB数据</span></span><br><span class=\"line\"><span class=\"comment\">// 数据库的打开成功:</span></span><br><span class=\"line\">&amp;sql.DB&#123;</span><br><span class=\"line\">    waitDuration:<span class=\"number\">0</span>, </span><br><span class=\"line\">    connector:(*mysql.connector)(<span class=\"number\">0xc00012a018</span>), </span><br><span class=\"line\">    numClosed:<span class=\"number\">0x0</span>, </span><br><span class=\"line\">    mu:sync.Mutex&#123;state:<span class=\"number\">0</span>, sema:<span class=\"number\">0x0</span>&#125;nn:[]*sql.driverConn(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    connRequests:<span class=\"keyword\">map</span>[<span class=\"type\">uint64</span>]<span class=\"keyword\">chan</span> sql.connRequest&#123;&#125;, </span><br><span class=\"line\">    nextRequest:<span class=\"number\">0x0</span>, </span><br><span class=\"line\">    numOpen:<span class=\"number\">0</span>, </span><br><span class=\"line\">    openerCh:(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span> &#123;&#125;)(<span class=\"number\">0xc0001020c0</span>), </span><br><span class=\"line\">    closed:<span class=\"literal\">false</span>, </span><br><span class=\"line\">    dep:<span class=\"keyword\">map</span>[sql.finalCloser]sql.depSet(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    lastPut:<span class=\"keyword\">map</span>[*sql.driverConn]<span class=\"type\">string</span>&#123;&#125;, </span><br><span class=\"line\">    maxIdleCount:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxOpen:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxLifetime:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleTime:<span class=\"number\">0</span>, </span><br><span class=\"line\">    cleanerCh:(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span> &#123;&#125;)(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    waitCount:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleTimeClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxLifetimeClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    stop:(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>)(<span class=\"number\">0x107d760</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据库db类型: *sql.DB</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-1-Open数据库正确\"><a href=\"#3-1-1-Open数据库正确\" class=\"headerlink\" title=\"3.1.1 Open数据库正确\"></a>3.1.1 Open数据库正确</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\t_, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;校验数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104406809.png\" class=\"\" title=\"image-20220516104406809\">\n\n<h5 id=\"3-1-2-Open数据库失败\"><a href=\"#3-1-2-Open数据库失败\" class=\"headerlink\" title=\"3.1.2 Open数据库失败\"></a>3.1.2 Open数据库失败</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)————prc_ly&quot;</span></span><br><span class=\"line\">\t_, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;校验数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104457767.png\" class=\"\" title=\"image-20220516104457767\">\n\n<h4 id=\"3-2-Ping数据库\"><a href=\"#3-2-Ping数据库\" class=\"headerlink\" title=\"3.2 Ping数据库\"></a>3.2 Ping数据库</h4><blockquote>\n<p>通过Ping方法来真正连接数据库，校验是否连接正确</p>\n</blockquote>\n<h5 id=\"3-2-1-Ping数据库正确\"><a href=\"#3-2-1-Ping数据库正确\" class=\"headerlink\" title=\"3.2.1 Ping数据库正确\"></a>3.2.1 Ping数据库正确</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确，密码不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;打开数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516105118247.png\" class=\"\" title=\"image-20220516105118247\">\n\n<h5 id=\"3-2-2-Ping数据库失败\"><a href=\"#3-2-2-Ping数据库失败\" class=\"headerlink\" title=\"3.2.2 Ping数据库失败\"></a>3.2.2 Ping数据库失败</h5><blockquote>\n<p>比如将dsn里的数据库密码写错</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确，密码不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;打开数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104653089.png\" class=\"\" title=\"image-20220516104653089\">\n\n<h4 id=\"3-3-驱动注入原理简单介绍\"><a href=\"#3-3-驱动注入原理简单介绍\" class=\"headerlink\" title=\"3.3 驱动注入原理简单介绍\"></a>3.3 驱动注入原理简单介绍</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用mysql驱动</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为是以匿名导入&quot;github.com/go-sql-driver/mysql&quot;包，所以只会导入这个包的Init方法</span></span><br><span class=\"line\"><span class=\"comment\">// 路径：/Users/xxx/Desktop/Code/go_study/pkg/mod/github.com/go-sql-driver/mysql@v1.6.0/driver.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Package mysql provides a MySQL driver for Go&#x27;s database/sql package.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The driver should be used via the database/sql package:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  import &quot;database/sql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//  import _ &quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@/dbname&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/go-sql-driver/mysql#usage for details</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql/driver&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsql.Register(<span class=\"string\">&quot;mysql&quot;</span>, &amp;MySQLDriver&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实可以看到是导入了go原生的<code>database/sql</code>这个包，然后init方法里进行了注册</p>\n<ul>\n<li><p>所以在我们写代码的时候，只需要匿名导入<code>&quot;github.com/go-sql-driver/mysql&quot;</code>这个包，会自动执行init方法，帮我们调用<code>database/sql</code>包里的<code>Register</code>方法来完成mysql的注入</p>\n</li>\n<li><p>Register注册并命名一个数据库，可以在Open函数中使用该命名启用该驱动</p>\n</li>\n<li><p>如果 Register注册同一名称两次，或者driver参数为nil，会导致panic。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"三、go增删改查数据库\"><a href=\"#三、go增删改查数据库\" class=\"headerlink\" title=\"三、go增删改查数据库\"></a>三、go增删改查数据库</h2><h3 id=\"1、定义全局db连接池\"><a href=\"#1、定义全局db连接池\" class=\"headerlink\" title=\"1、定义全局db连接池\"></a>1、定义全局db连接池</h3><blockquote>\n<p>在第二章我们了解到，使用Open方法打开mysql数据库:</p>\n<p>得到的db是<code>database/sql</code>包里定义的<code>DB</code>结构体对象，并且DB是一个连接池，所以我们可以将其定义为全局的变量，供其他地方使用</p>\n<ul>\n<li>另外再initDB方法里，因为db这个变量已经定义为全局变量了，就不需要再重新声明并定义了<ul>\n<li>在db, err &#x3D; sql.Open(“mysql”, dsn)这块代码，如果仍写成<code>:=</code>，就会将db这个变量声明未局部变量，那边全局db仍然是一个空指针，这块需要注意</li>\n<li>另外为什么err也可以直接用<code>=</code>号接收，因为在返回值里定义了</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义db为全局的连接池</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、查询单条数据\"><a href=\"#2、查询单条数据\" class=\"headerlink\" title=\"2、查询单条数据\"></a>2、查询单条数据</h3><blockquote>\n<p>查询数据用到了两个方法，queryRow和Scan</p>\n</blockquote>\n<h4 id=\"2-1-QueryRow方法\"><a href=\"#2-1-QueryRow方法\" class=\"headerlink\" title=\"2.1 QueryRow方法\"></a>2.1 QueryRow方法</h4><blockquote>\n<p>QueryRow()</p>\n<ul>\n<li>表示是从一个连接池里拿出来一个连接去数据库查询单条记录</li>\n<li>注释翻译：<ul>\n<li>QueryRow执行一个查询，预计最多返回一条记录。</li>\n<li>QueryRow总是返回一个非零的值。</li>\n<li>错误被推迟到Row的Scan方法被调用。</li>\n<li>如果查询没有选择任何行，<em>Row的扫描将返回ErrNoRows。否则，</em>Row’s Scan会扫描第一条被选择的行，并丢弃其余的。</li>\n<li>QueryRow内部使用context.Background。要指定context，请使用QueryRowContext.Background。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// QueryRow</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow executes a query that is expected to return at most one row.</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow always returns a non-nil value. Errors are deferred until</span></span><br><span class=\"line\"><span class=\"comment\">// Row&#x27;s Scan method is called.</span></span><br><span class=\"line\"><span class=\"comment\">// If the query selects no rows, the *Row&#x27;s Scan will return ErrNoRows.</span></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, the *Row&#x27;s Scan scans the first selected row and discards</span></span><br><span class=\"line\"><span class=\"comment\">// the rest.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow uses context.Background internally; to specify the context, use</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRowContext.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *DB)</span></span> QueryRow(query <span class=\"type\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) *Row &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> db.QueryRowContext(context.Background(), query, args...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-Scan方法\"><a href=\"#2-2-Scan方法\" class=\"headerlink\" title=\"2.2 Scan方法\"></a>2.2 Scan方法</h4><blockquote>\n<p>Scan()</p>\n<ul>\n<li>从queryRow方法拿到的Row对象，然后传进一个结构体来接收查询到结果，对结构体进行重新赋值，所以需要传入结构体指针</li>\n<li>注释翻译<ul>\n<li>扫描将匹配的行中的列复制到目的地的值中。</li>\n<li>指向的值。详情请参见Rows.Scan的文档。</li>\n<li>如果有多条记录符合查询要求。扫描使用第一条记录，并丢弃其余的记录。</li>\n<li>如果没有任何行符合 查询，Scan会返回ErrNoRows。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Scan copies the columns from the matched row into the values</span></span><br><span class=\"line\"><span class=\"comment\">// pointed at by dest. See the documentation on Rows.Scan for details.</span></span><br><span class=\"line\"><span class=\"comment\">// If more than one row matches the query,</span></span><br><span class=\"line\"><span class=\"comment\">// Scan uses the first row and discards the rest. If no row matches</span></span><br><span class=\"line\"><span class=\"comment\">// the query, Scan returns ErrNoRows.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Row)</span></span> Scan(dest ...<span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r.err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// TODO(bradfitz): for now we need to defensively clone all</span></span><br><span class=\"line\">\t<span class=\"comment\">// []byte that the driver returned (not permitting</span></span><br><span class=\"line\">\t<span class=\"comment\">// *RawBytes in Rows.Scan), since we&#x27;re about to close</span></span><br><span class=\"line\">\t<span class=\"comment\">// the Rows in our defer, when we return from this function.</span></span><br><span class=\"line\">\t<span class=\"comment\">// the contract with the driver.Next(...) interface is that it</span></span><br><span class=\"line\">\t<span class=\"comment\">// can return slices into read-only temporary memory that&#x27;s</span></span><br><span class=\"line\">\t<span class=\"comment\">// only valid until the next Scan/Close. But the TODO is that</span></span><br><span class=\"line\">\t<span class=\"comment\">// for a lot of drivers, this copy will be unnecessary. We</span></span><br><span class=\"line\">\t<span class=\"comment\">// should provide an optional interface for drivers to</span></span><br><span class=\"line\">\t<span class=\"comment\">// implement to say, &quot;don&#x27;t worry, the []bytes that I return</span></span><br><span class=\"line\">\t<span class=\"comment\">// from Next will not be modified again.&quot; (for instance, if</span></span><br><span class=\"line\">\t<span class=\"comment\">// they were obtained from the network anyway) But for now we</span></span><br><span class=\"line\">\t<span class=\"comment\">// don&#x27;t care.</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.rows.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, dp := <span class=\"keyword\">range</span> dest &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := dp.(*RawBytes); ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;sql: RawBytes isn&#x27;t allowed on Row.Scan&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !r.rows.Next() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := r.rows.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ErrNoRows</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.rows.Scan(dest...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Make sure the query can be processed to completion with no errors.</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r.rows.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-查询实例\"><a href=\"#2-3-查询实例\" class=\"headerlink\" title=\"2.3 查询实例\"></a>2.3 查询实例</h4><blockquote>\n<p>下面是单条记录查询的demo</p>\n<p>需要先定一个数据库对应表的结构体，来传入给Scan方法进行接收QueryRow对象获得的值</p>\n<p>注意：</p>\n<ul>\n<li><p>需要传入的是结构体指针，因为go语言中函数传值一般都是值拷贝，我们不希望值拷贝，如果是值拷贝，拿到的结果就不会重新赋值给声明的结构体</p>\n</li>\n<li><p>所以对声明的结构体重新赋值，必须穿入指针，保证是传入的同一个</p>\n</li>\n</ul>\n<p>查询时，传递给QueryRow的sqlStr时，可以在sqlStr里使用<code>?</code>来表示占位符，用来动态传递值</p>\n<p>必须对RowQuery查询到的结果调用Scan方法，因为Scan方法里定义了自动释放数据库链接的方法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义user结构体，结构体字段必须要和查询数据库表的字段定义一致</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> user <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tid <span class=\"type\">int</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\thobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询单条记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">queryData</span><span class=\"params\">(id <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsqlStr := <span class=\"string\">&quot;select * from user where id=?;&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class=\"line\">\trowObj := db.QueryRow(sqlStr, id)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 定义接收的结构体对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u1 user</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 必须调用Scan方法，Scan会自动归还db的连接，传入user结构体的指针</span></span><br><span class=\"line\">\trowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;u1:%+#v\\n&quot;</span>, u1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := initDB()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;initDB err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tqueryData(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516145006179.png\" class=\"\" title=\"image-20220516145006179\">\n\n<h3 id=\"3、最大连接数\"><a href=\"#3、最大连接数\" class=\"headerlink\" title=\"3、最大连接数\"></a>3、最大连接数</h3><blockquote>\n<p>因为<code>DB</code>这个结构体自己维护了一个数据库连接池，那么这个连接池可以设置数据库链接大小</p>\n</blockquote>\n<h4 id=\"3-1-SetMaxOpenConns方法\"><a href=\"#3-1-SetMaxOpenConns方法\" class=\"headerlink\" title=\"3.1 SetMaxOpenConns方法\"></a>3.1 SetMaxOpenConns方法</h4><blockquote>\n<p>用来设置数据库连接池最大连接数</p>\n<p>注释翻译:</p>\n<ul>\n<li>SetMaxOpenConns设置到数据库的最大开放连接数。</li>\n<li>如果MaxIdleConns大于0，而新的MaxOpenConns小于MaxIdleConns，那么MaxIdleConns将被减少以符合新的MaxOpenConns限制。</li>\n<li>如果n&lt;&#x3D;0，那么对开放连接的数量没有限制。默认是0（无限）。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据库连接数</span></span><br><span class=\"line\"><span class=\"comment\">// SetMaxOpenConns sets the maximum number of open connections to the database.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than</span></span><br><span class=\"line\"><span class=\"comment\">// MaxIdleConns, then MaxIdleConns will be reduced to match the new</span></span><br><span class=\"line\"><span class=\"comment\">// MaxOpenConns limit.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// If n &lt;= 0, then there is no limit on the number of open connections.</span></span><br><span class=\"line\"><span class=\"comment\">// The default is 0 (unlimited).</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *DB)</span></span> SetMaxOpenConns(n <span class=\"type\">int</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-SetMaxOpenConns方法使用\"><a href=\"#3-2-SetMaxOpenConns方法使用\" class=\"headerlink\" title=\"3.2 SetMaxOpenConns方法使用\"></a>3.2 SetMaxOpenConns方法使用</h4><blockquote>\n<p>如果设置了SetMaxOpenConns的最大数，比如10</p>\n<p>当连接池的db连接被使用完了，程序就会夯住，因为没有连接池里没有闲置的db连接了，此时会一直等待有闲置的db来使用，但是池子里已经没有可用的db连接了，那么程序就卡住了</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义user结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> user <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tid <span class=\"type\">int</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\thobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 设置db最大连接池的连接个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdb.SetMaxOpenConns(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询单条记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">queryData</span><span class=\"params\">(id <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsqlStr := <span class=\"string\">&quot;select * from user where id=?;&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++&#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开始第%v次查询\\n&quot;</span>, i)</span><br><span class=\"line\">\t\tdb.QueryRow(sqlStr, id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 定义接收的结构体对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u1 user</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 必须调用Scan方法，Scan会自动归还db的连接</span></span><br><span class=\"line\">\t<span class=\"comment\">// rowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;u1:%+#v\\n&quot;</span>, u1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := initDB()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;initDB err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tqueryData(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516171940580.png\" class=\"\" title=\"image-20220516171940580\">\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Mysql环境搭建\"><a href=\"#一、Mysql环境搭建\" class=\"headerlink\" title=\"一、Mysql环境搭建\"></a>一、Mysql环境搭建</h2><h3 id=\"1、mysql镜像地址\"><a href=\"#1、mysql镜像地址\" class=\"headerlink\" title=\"1、mysql镜像地址\"></a>1、mysql镜像地址</h3><blockquote>\n<p>推荐使用docker搭建mysql环境，非常方便用来学习mysql</p>\n<p><a href=\"https://registry.hub.docker.com/_/mysql\">mysql的docker镜像地址</a></p>\n</blockquote>\n<h3 id=\"2、创建mysql容器\"><a href=\"#2、创建mysql容器\" class=\"headerlink\" title=\"2、创建mysql容器\"></a>2、创建mysql容器</h3><h4 id=\"2-1-拉取mysql镜像\"><a href=\"#2-1-拉取mysql镜像\" class=\"headerlink\" title=\"2.1 拉取mysql镜像\"></a>2.1 拉取mysql镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-创建mysql容器\"><a href=\"#2-2-创建mysql容器\" class=\"headerlink\" title=\"2.2 创建mysql容器\"></a>2.2 创建mysql容器</h4><blockquote>\n<p>下面内容来自dockerhub里mysql的使用介绍</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Configuration without a cnf file</span></span><br><span class=\"line\"><span class=\"comment\">#Many configuration options can be passed as flags to mysqld. This will give you the flexibility to customize the container without needing a cnf file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (utf8mb4) just run the following:</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you would like to see a complete list of available options, just run:</span></span><br><span class=\"line\">$ docker run -it --<span class=\"built_in\">rm</span> mysql:tag --verbose --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">-------------------&gt;翻译如下&lt;--------------------------</span><br><span class=\"line\"><span class=\"comment\">#没有cnf文件的配置</span></span><br><span class=\"line\"><span class=\"comment\">#许多配置选项可以作为标志传递给mysqld。这将使你能够灵活地定制容器而不需要cnf文件。例如，如果你想改变所有表的默认编码和排序为使用UTF-8(utf8mb4)，只需运行以下内容。</span></span><br><span class=\"line\">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果你想看到可用选项的完整列表，只需运行。</span></span><br><span class=\"line\">$ docker run -it --<span class=\"built_in\">rm</span> mysql:tag --verbose --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建mysql容器</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --name mysql 创建的容器名叫mysql</span></span><br><span class=\"line\"><span class=\"comment\"># -e MYSQL_ROOT_PASSWORD=123456   MYSQL_ROOT_PASSWORD指定了将为MySQL根超级用户账户设置的密码，可以看到是123456</span></span><br><span class=\"line\"><span class=\"comment\"># --character-set-server=utf8mb4  设置mysql字符编码为utf8mb4，表示可以支持中文和表情</span></span><br><span class=\"line\"><span class=\"comment\"># --collation-server=utf8mb4_unicode_ci 在字符集内用于比较或排序字符的一套规则，即校验规则</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152525798.png\" class=\"\" title=\"image-20220324152525798\">\n\n<h4 id=\"2-3-连接数据库\"><a href=\"#2-3-连接数据库\" class=\"headerlink\" title=\"2.3 连接数据库\"></a>2.3 连接数据库</h4><blockquote>\n<p>这里使用了<code>mycli</code>这个包来连接数据库测试</p>\n<p><code>mycli</code>包时python写的一个具有代码提示的mysql使用工具</p>\n</blockquote>\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220324152502070.png\" class=\"\" title=\"image-20220324152502070\">\n\n<blockquote>\n<p>可以看到连接数据库成功，可以成功登录到mysql里面了</p>\n</blockquote>\n<h2 id=\"二、go连接mysql\"><a href=\"#二、go连接mysql\" class=\"headerlink\" title=\"二、go连接mysql\"></a>二、go连接mysql</h2><h3 id=\"1、go连接mysql用到的包\"><a href=\"#1、go连接mysql用到的包\" class=\"headerlink\" title=\"1、go连接mysql用到的包\"></a>1、go连接mysql用到的包</h3><h4 id=\"1-1-database-x2F-sql\"><a href=\"#1-1-database-x2F-sql\" class=\"headerlink\" title=\"1.1 database&#x2F;sql\"></a>1.1 database&#x2F;sql</h4><blockquote>\n<p>\u0011go语言中的<code>database/sql</code>包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动，使用<code>database/sql</code>包时必须注入一个数据库驱动</p>\n<ul>\n<li>也就是说<code>database/sql</code>里面定义了SQL的需要实现的方法</li>\n</ul>\n</blockquote>\n<h4 id=\"1-2-mysql数据库驱动\"><a href=\"#1-2-mysql数据库驱动\" class=\"headerlink\" title=\"1.2 mysql数据库驱动\"></a>1.2 mysql数据库驱动</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载mysql驱动</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/<span class=\"keyword\">go</span>-sql-driver/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -u：表示所有的依赖都是下载最新的</span></span><br><span class=\"line\"><span class=\"comment\">// github地址：https://github.com/go-sql-driver/mysql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用mysql驱动\"><a href=\"#2、使用mysql驱动\" class=\"headerlink\" title=\"2、使用mysql驱动\"></a>2、使用mysql驱动</h3><h4 id=\"2-1-Open方法\"><a href=\"#2-1-Open方法\" class=\"headerlink\" title=\"2.1 Open方法\"></a>2.1 Open方法</h4><blockquote>\n<p>go语言中没有数据库驱动，所以需要外部导入一个数据库驱动来注入</p>\n<p>使用<code>database/sql</code>的Open()方法</p>\n<p>下面内容来自Open方法注释翻译</p>\n<ul>\n<li>打开一个由其数据库驱动名称和一个特定的数据源名称指定的数据库。</li>\n<li>驱动程序特定的数据源名称，通常至少包括一个数据库名称和连接信息。</li>\n<li>大多数用户会通过一个特定驱动程序的连接来打开一个数据库辅助函数来打开数据库，该函数返回一个*DB。<ul>\n<li>Go标准库中没有包含数据库驱动没有包括在Go标准库中。参见 <a href=\"https://golang.org/s/sqldrivers\">https://golang.org/s/sqldrivers</a> 以了解第三方驱动程序的列表。</li>\n<li>Open可以只验证它的参数，而不创建一个与数据库的连接与数据库的连接。为了验证数据源的名称是否有效，可以调用Ping。</li>\n</ul>\n</li>\n<li>返回的DB对于多个goroutine的并发使用是安全的并维护它自己的空闲连接池。<ul>\n<li>因此，Open函数应该只被调用一次。很少有必要关闭一个数据库。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// open方法打开指定驱动的数据库</span></span><br><span class=\"line\"><span class=\"comment\">// Open opens a database specified by its database driver name and a</span></span><br><span class=\"line\"><span class=\"comment\">// driver-specific data source name, usually consisting of at least a</span></span><br><span class=\"line\"><span class=\"comment\">// database name and connection information.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Most users will open a database via a driver-specific connection</span></span><br><span class=\"line\"><span class=\"comment\">// helper function that returns a *DB. No database drivers are included</span></span><br><span class=\"line\"><span class=\"comment\">// in the Go standard library. See https://golang.org/s/sqldrivers for</span></span><br><span class=\"line\"><span class=\"comment\">// a list of third-party drivers.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Open may just validate its arguments without creating a connection</span></span><br><span class=\"line\"><span class=\"comment\">// to the database. To verify that the data source name is valid, call</span></span><br><span class=\"line\"><span class=\"comment\">// Ping.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The returned DB is safe for concurrent use by multiple goroutines</span></span><br><span class=\"line\"><span class=\"comment\">// and maintains its own pool of idle connections. Thus, the Open</span></span><br><span class=\"line\"><span class=\"comment\">// function should be called just once. It is rarely necessary to</span></span><br><span class=\"line\"><span class=\"comment\">// close a DB.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Open</span><span class=\"params\">(driverName, dataSourceName <span class=\"type\">string</span>)</span></span> (*DB, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tdriversMu.RLock()</span><br><span class=\"line\">\tdriveri, ok := drivers[driverName]</span><br><span class=\"line\">\tdriversMu.RUnlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;sql: unknown driver %q (forgotten import?)&quot;</span>, driverName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> driverCtx, ok := driveri.(driver.DriverContext); ok &#123;</span><br><span class=\"line\">\t\tconnector, err := driverCtx.OpenConnector(dataSourceName)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> OpenDB(connector), <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OpenDB(dsnConnector&#123;dsn: dataSourceName, driver: driveri&#125;), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Open方法</p>\n<ul>\n<li><p>打开一个driverName指定的数据库</p>\n</li>\n<li><p>DataSourceName指定数据源，一般包括数据库文件名和连接信息</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"2-2-DB结构体\"><a href=\"#2-2-DB结构体\" class=\"headerlink\" title=\"2.2 DB结构体\"></a>2.2 DB结构体</h4><blockquote>\n<p>一般都是通过数据库特定的链接帮助函数打开数据库，返回一个<code>*DB</code>(DB结构体指针)</p>\n<p>下面内容来自DB结构体的翻译</p>\n<ul>\n<li>DB是一个数据库句柄，代表一个由0个或更多的底层连接。它可以安全地被多个goroutines同时使用。<ul>\n<li>0或多个底层连接，这里是指有一个连接池，当要连接数据库时从连接池里拿一个sql连接对象来用，用完了再放回去</li>\n<li>连接池的优势：<ul>\n<li>当需要频繁的操作sql数据时，会提前将sql数据库连接提前创建好并放到链接池里</li>\n<li>而不是每次需要操作sql时，再去创建连接，节省时间和提高效率</li>\n<li>当使用完以后，再将链接放回到链接池</li>\n<li>并且连接池是可以被多个<code>goroutine</code>同时使用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>sql包自动创建和释放连接；它也维护一个空闲的连接池。<ul>\n<li>如果数据库有有每个连接状态的概念，这种状态可以被可靠地观察到在一个事务（Tx）或连接（Conn）中可靠地观察到这种状态。</li>\n<li>一旦DB.Begin被调用，返回的返回的Tx被绑定到一个单一的连接。</li>\n<li>一旦提交或称为 “回滚”，该事务的连接被返回到DB的闲置连接池。</li>\n<li>池的大小 可以用SetMaxIdleConns来控制。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是DB结构体的实现</span></span><br><span class=\"line\"><span class=\"comment\">// DB is a database handle representing a pool of zero or more</span></span><br><span class=\"line\"><span class=\"comment\">// underlying connections. It&#x27;s safe for concurrent use by multiple</span></span><br><span class=\"line\"><span class=\"comment\">// goroutines.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The sql package creates and frees connections automatically; it</span></span><br><span class=\"line\"><span class=\"comment\">// also maintains a free pool of idle connections. If the database has</span></span><br><span class=\"line\"><span class=\"comment\">// a concept of per-connection state, such state can be reliably observed</span></span><br><span class=\"line\"><span class=\"comment\">// within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the</span></span><br><span class=\"line\"><span class=\"comment\">// returned Tx is bound to a single connection. Once Commit or</span></span><br><span class=\"line\"><span class=\"comment\">// Rollback is called on the transaction, that transaction&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">// connection is returned to DB&#x27;s idle connection pool. The pool size</span></span><br><span class=\"line\"><span class=\"comment\">// can be controlled with SetMaxIdleConns.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Atomic access only. At top of struct to prevent mis-alignment</span></span><br><span class=\"line\">\t<span class=\"comment\">// on 32-bit platforms. Of type time.Duration.</span></span><br><span class=\"line\">\twaitDuration <span class=\"type\">int64</span> <span class=\"comment\">// Total time waited for new connections.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tconnector driver.Connector</span><br><span class=\"line\">\t<span class=\"comment\">// numClosed is an atomic counter which represents a total number of</span></span><br><span class=\"line\">\t<span class=\"comment\">// closed connections. Stmt.openStmt checks it before cleaning closed</span></span><br><span class=\"line\">\t<span class=\"comment\">// connections in Stmt.css.</span></span><br><span class=\"line\">\tnumClosed <span class=\"type\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmu           sync.Mutex <span class=\"comment\">// protects following fields</span></span><br><span class=\"line\">\tfreeConn     []*driverConn</span><br><span class=\"line\">\tconnRequests <span class=\"keyword\">map</span>[<span class=\"type\">uint64</span>]<span class=\"keyword\">chan</span> connRequest</span><br><span class=\"line\">\tnextRequest  <span class=\"type\">uint64</span> <span class=\"comment\">// Next key to use in connRequests.</span></span><br><span class=\"line\">\tnumOpen      <span class=\"type\">int</span>    <span class=\"comment\">// number of opened and pending open connections</span></span><br><span class=\"line\">\t<span class=\"comment\">// Used to signal the need for new connections</span></span><br><span class=\"line\">\t<span class=\"comment\">// a goroutine running connectionOpener() reads on this chan and</span></span><br><span class=\"line\">\t<span class=\"comment\">// maybeOpenNewConnections sends on the chan (one send per needed connection)</span></span><br><span class=\"line\">\t<span class=\"comment\">// It is closed during db.Close(). The close tells the connectionOpener</span></span><br><span class=\"line\">\t<span class=\"comment\">// goroutine to exit.</span></span><br><span class=\"line\">\topenerCh          <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">\tclosed            <span class=\"type\">bool</span></span><br><span class=\"line\">\tdep               <span class=\"keyword\">map</span>[finalCloser]depSet</span><br><span class=\"line\">\tlastPut           <span class=\"keyword\">map</span>[*driverConn]<span class=\"type\">string</span> <span class=\"comment\">// stacktrace of last conn&#x27;s put; debug only</span></span><br><span class=\"line\">\tmaxIdleCount      <span class=\"type\">int</span>                    <span class=\"comment\">// zero means defaultMaxIdleConns; negative means 0</span></span><br><span class=\"line\">\tmaxOpen           <span class=\"type\">int</span>                    <span class=\"comment\">// &lt;= 0 means unlimited</span></span><br><span class=\"line\">\tmaxLifetime       time.Duration          <span class=\"comment\">// maximum amount of time a connection may be reused</span></span><br><span class=\"line\">\tmaxIdleTime       time.Duration          <span class=\"comment\">// maximum amount of time a connection may be idle before being closed</span></span><br><span class=\"line\">\tcleanerCh         <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">\twaitCount         <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections waited for.</span></span><br><span class=\"line\">\tmaxIdleClosed     <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to idle count.</span></span><br><span class=\"line\">\tmaxIdleTimeClosed <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to idle time.</span></span><br><span class=\"line\">\tmaxLifetimeClosed <span class=\"type\">int64</span> <span class=\"comment\">// Total number of connections closed due to max connection lifetime limit.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstop <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"comment\">// stop cancels the connection opener.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、mysql连接\"><a href=\"#3、mysql连接\" class=\"headerlink\" title=\"3、mysql连接\"></a>3、mysql连接</h3><h4 id=\"3-1-Open数据库\"><a href=\"#3-1-Open数据库\" class=\"headerlink\" title=\"3.1 Open数据库\"></a>3.1 Open数据库</h4><blockquote>\n<p>使用Open方法打开数据库:</p>\n<ul>\n<li>dataSourceName格式：<code>“用户名:密码@tcp(host:port)/数据库名称”</code></li>\n<li>Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确<ul>\n<li>当dataSourceName格式不正确的时候，会报错</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;数据库的打开成功:%#+v\\n&quot;</span>, db)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;数据库db类型:%T\\n&quot;</span>, db)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上面代码返回的DB数据</span></span><br><span class=\"line\"><span class=\"comment\">// 数据库的打开成功:</span></span><br><span class=\"line\">&amp;sql.DB&#123;</span><br><span class=\"line\">    waitDuration:<span class=\"number\">0</span>, </span><br><span class=\"line\">    connector:(*mysql.connector)(<span class=\"number\">0xc00012a018</span>), </span><br><span class=\"line\">    numClosed:<span class=\"number\">0x0</span>, </span><br><span class=\"line\">    mu:sync.Mutex&#123;state:<span class=\"number\">0</span>, sema:<span class=\"number\">0x0</span>&#125;nn:[]*sql.driverConn(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    connRequests:<span class=\"keyword\">map</span>[<span class=\"type\">uint64</span>]<span class=\"keyword\">chan</span> sql.connRequest&#123;&#125;, </span><br><span class=\"line\">    nextRequest:<span class=\"number\">0x0</span>, </span><br><span class=\"line\">    numOpen:<span class=\"number\">0</span>, </span><br><span class=\"line\">    openerCh:(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span> &#123;&#125;)(<span class=\"number\">0xc0001020c0</span>), </span><br><span class=\"line\">    closed:<span class=\"literal\">false</span>, </span><br><span class=\"line\">    dep:<span class=\"keyword\">map</span>[sql.finalCloser]sql.depSet(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    lastPut:<span class=\"keyword\">map</span>[*sql.driverConn]<span class=\"type\">string</span>&#123;&#125;, </span><br><span class=\"line\">    maxIdleCount:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxOpen:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxLifetime:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleTime:<span class=\"number\">0</span>, </span><br><span class=\"line\">    cleanerCh:(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span> &#123;&#125;)(<span class=\"literal\">nil</span>), </span><br><span class=\"line\">    waitCount:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxIdleTimeClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    maxLifetimeClosed:<span class=\"number\">0</span>, </span><br><span class=\"line\">    stop:(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>)(<span class=\"number\">0x107d760</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据库db类型: *sql.DB</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-1-1-Open数据库正确\"><a href=\"#3-1-1-Open数据库正确\" class=\"headerlink\" title=\"3.1.1 Open数据库正确\"></a>3.1.1 Open数据库正确</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\t_, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;校验数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104406809.png\" class=\"\" title=\"image-20220516104406809\">\n\n<h5 id=\"3-1-2-Open数据库失败\"><a href=\"#3-1-2-Open数据库失败\" class=\"headerlink\" title=\"3.1.2 Open数据库失败\"></a>3.1.2 Open数据库失败</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)————prc_ly&quot;</span></span><br><span class=\"line\">\t_, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;校验数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104457767.png\" class=\"\" title=\"image-20220516104457767\">\n\n<h4 id=\"3-2-Ping数据库\"><a href=\"#3-2-Ping数据库\" class=\"headerlink\" title=\"3.2 Ping数据库\"></a>3.2 Ping数据库</h4><blockquote>\n<p>通过Ping方法来真正连接数据库，校验是否连接正确</p>\n</blockquote>\n<h5 id=\"3-2-1-Ping数据库正确\"><a href=\"#3-2-1-Ping数据库正确\" class=\"headerlink\" title=\"3.2.1 Ping数据库正确\"></a>3.2.1 Ping数据库正确</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确，密码不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;打开数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516105118247.png\" class=\"\" title=\"image-20220516105118247\">\n\n<h5 id=\"3-2-2-Ping数据库失败\"><a href=\"#3-2-2-Ping数据库失败\" class=\"headerlink\" title=\"3.2.2 Ping数据库失败\"></a>3.2.2 Ping数据库失败</h5><blockquote>\n<p>比如将dsn里的数据库密码写错</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// dsn格式正确，密码不正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;校验数据库参数失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;打开数据库失败:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;打开数据库成功\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516104653089.png\" class=\"\" title=\"image-20220516104653089\">\n\n<h4 id=\"3-3-驱动注入原理简单介绍\"><a href=\"#3-3-驱动注入原理简单介绍\" class=\"headerlink\" title=\"3.3 驱动注入原理简单介绍\"></a>3.3 驱动注入原理简单介绍</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用mysql驱动</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因为是以匿名导入&quot;github.com/go-sql-driver/mysql&quot;包，所以只会导入这个包的Init方法</span></span><br><span class=\"line\"><span class=\"comment\">// 路径：/Users/xxx/Desktop/Code/go_study/pkg/mod/github.com/go-sql-driver/mysql@v1.6.0/driver.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Package mysql provides a MySQL driver for Go&#x27;s database/sql package.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The driver should be used via the database/sql package:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  import &quot;database/sql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//  import _ &quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@/dbname&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/go-sql-driver/mysql#usage for details</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql/driver&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsql.Register(<span class=\"string\">&quot;mysql&quot;</span>, &amp;MySQLDriver&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其实可以看到是导入了go原生的<code>database/sql</code>这个包，然后init方法里进行了注册</p>\n<ul>\n<li><p>所以在我们写代码的时候，只需要匿名导入<code>&quot;github.com/go-sql-driver/mysql&quot;</code>这个包，会自动执行init方法，帮我们调用<code>database/sql</code>包里的<code>Register</code>方法来完成mysql的注入</p>\n</li>\n<li><p>Register注册并命名一个数据库，可以在Open函数中使用该命名启用该驱动</p>\n</li>\n<li><p>如果 Register注册同一名称两次，或者driver参数为nil，会导致panic。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"三、go增删改查数据库\"><a href=\"#三、go增删改查数据库\" class=\"headerlink\" title=\"三、go增删改查数据库\"></a>三、go增删改查数据库</h2><h3 id=\"1、定义全局db连接池\"><a href=\"#1、定义全局db连接池\" class=\"headerlink\" title=\"1、定义全局db连接池\"></a>1、定义全局db连接池</h3><blockquote>\n<p>在第二章我们了解到，使用Open方法打开mysql数据库:</p>\n<p>得到的db是<code>database/sql</code>包里定义的<code>DB</code>结构体对象，并且DB是一个连接池，所以我们可以将其定义为全局的变量，供其他地方使用</p>\n<ul>\n<li>另外再initDB方法里，因为db这个变量已经定义为全局变量了，就不需要再重新声明并定义了<ul>\n<li>在db, err &#x3D; sql.Open(“mysql”, dsn)这块代码，如果仍写成<code>:=</code>，就会将db这个变量声明未局部变量，那边全局db仍然是一个空指针，这块需要注意</li>\n<li>另外为什么err也可以直接用<code>=</code>号接收，因为在返回值里定义了</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义db为全局的连接池</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、查询单条数据\"><a href=\"#2、查询单条数据\" class=\"headerlink\" title=\"2、查询单条数据\"></a>2、查询单条数据</h3><blockquote>\n<p>查询数据用到了两个方法，queryRow和Scan</p>\n</blockquote>\n<h4 id=\"2-1-QueryRow方法\"><a href=\"#2-1-QueryRow方法\" class=\"headerlink\" title=\"2.1 QueryRow方法\"></a>2.1 QueryRow方法</h4><blockquote>\n<p>QueryRow()</p>\n<ul>\n<li>表示是从一个连接池里拿出来一个连接去数据库查询单条记录</li>\n<li>注释翻译：<ul>\n<li>QueryRow执行一个查询，预计最多返回一条记录。</li>\n<li>QueryRow总是返回一个非零的值。</li>\n<li>错误被推迟到Row的Scan方法被调用。</li>\n<li>如果查询没有选择任何行，<em>Row的扫描将返回ErrNoRows。否则，</em>Row’s Scan会扫描第一条被选择的行，并丢弃其余的。</li>\n<li>QueryRow内部使用context.Background。要指定context，请使用QueryRowContext.Background。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// QueryRow</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow executes a query that is expected to return at most one row.</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow always returns a non-nil value. Errors are deferred until</span></span><br><span class=\"line\"><span class=\"comment\">// Row&#x27;s Scan method is called.</span></span><br><span class=\"line\"><span class=\"comment\">// If the query selects no rows, the *Row&#x27;s Scan will return ErrNoRows.</span></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, the *Row&#x27;s Scan scans the first selected row and discards</span></span><br><span class=\"line\"><span class=\"comment\">// the rest.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRow uses context.Background internally; to specify the context, use</span></span><br><span class=\"line\"><span class=\"comment\">// QueryRowContext.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *DB)</span></span> QueryRow(query <span class=\"type\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;) *Row &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> db.QueryRowContext(context.Background(), query, args...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-Scan方法\"><a href=\"#2-2-Scan方法\" class=\"headerlink\" title=\"2.2 Scan方法\"></a>2.2 Scan方法</h4><blockquote>\n<p>Scan()</p>\n<ul>\n<li>从queryRow方法拿到的Row对象，然后传进一个结构体来接收查询到结果，对结构体进行重新赋值，所以需要传入结构体指针</li>\n<li>注释翻译<ul>\n<li>扫描将匹配的行中的列复制到目的地的值中。</li>\n<li>指向的值。详情请参见Rows.Scan的文档。</li>\n<li>如果有多条记录符合查询要求。扫描使用第一条记录，并丢弃其余的记录。</li>\n<li>如果没有任何行符合 查询，Scan会返回ErrNoRows。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Scan copies the columns from the matched row into the values</span></span><br><span class=\"line\"><span class=\"comment\">// pointed at by dest. See the documentation on Rows.Scan for details.</span></span><br><span class=\"line\"><span class=\"comment\">// If more than one row matches the query,</span></span><br><span class=\"line\"><span class=\"comment\">// Scan uses the first row and discards the rest. If no row matches</span></span><br><span class=\"line\"><span class=\"comment\">// the query, Scan returns ErrNoRows.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Row)</span></span> Scan(dest ...<span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r.err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// TODO(bradfitz): for now we need to defensively clone all</span></span><br><span class=\"line\">\t<span class=\"comment\">// []byte that the driver returned (not permitting</span></span><br><span class=\"line\">\t<span class=\"comment\">// *RawBytes in Rows.Scan), since we&#x27;re about to close</span></span><br><span class=\"line\">\t<span class=\"comment\">// the Rows in our defer, when we return from this function.</span></span><br><span class=\"line\">\t<span class=\"comment\">// the contract with the driver.Next(...) interface is that it</span></span><br><span class=\"line\">\t<span class=\"comment\">// can return slices into read-only temporary memory that&#x27;s</span></span><br><span class=\"line\">\t<span class=\"comment\">// only valid until the next Scan/Close. But the TODO is that</span></span><br><span class=\"line\">\t<span class=\"comment\">// for a lot of drivers, this copy will be unnecessary. We</span></span><br><span class=\"line\">\t<span class=\"comment\">// should provide an optional interface for drivers to</span></span><br><span class=\"line\">\t<span class=\"comment\">// implement to say, &quot;don&#x27;t worry, the []bytes that I return</span></span><br><span class=\"line\">\t<span class=\"comment\">// from Next will not be modified again.&quot; (for instance, if</span></span><br><span class=\"line\">\t<span class=\"comment\">// they were obtained from the network anyway) But for now we</span></span><br><span class=\"line\">\t<span class=\"comment\">// don&#x27;t care.</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.rows.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, dp := <span class=\"keyword\">range</span> dest &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, ok := dp.(*RawBytes); ok &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;sql: RawBytes isn&#x27;t allowed on Row.Scan&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !r.rows.Next() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := r.rows.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ErrNoRows</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := r.rows.Scan(dest...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Make sure the query can be processed to completion with no errors.</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r.rows.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-查询实例\"><a href=\"#2-3-查询实例\" class=\"headerlink\" title=\"2.3 查询实例\"></a>2.3 查询实例</h4><blockquote>\n<p>下面是单条记录查询的demo</p>\n<p>需要先定一个数据库对应表的结构体，来传入给Scan方法进行接收QueryRow对象获得的值</p>\n<p>注意：</p>\n<ul>\n<li><p>需要传入的是结构体指针，因为go语言中函数传值一般都是值拷贝，我们不希望值拷贝，如果是值拷贝，拿到的结果就不会重新赋值给声明的结构体</p>\n</li>\n<li><p>所以对声明的结构体重新赋值，必须穿入指针，保证是传入的同一个</p>\n</li>\n</ul>\n<p>查询时，传递给QueryRow的sqlStr时，可以在sqlStr里使用<code>?</code>来表示占位符，用来动态传递值</p>\n<p>必须对RowQuery查询到的结果调用Scan方法，因为Scan方法里定义了自动释放数据库链接的方法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义user结构体，结构体字段必须要和查询数据库表的字段定义一致</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> user <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tid <span class=\"type\">int</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\thobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询单条记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">queryData</span><span class=\"params\">(id <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsqlStr := <span class=\"string\">&quot;select * from user where id=?;&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class=\"line\">\trowObj := db.QueryRow(sqlStr, id)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 定义接收的结构体对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u1 user</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 必须调用Scan方法，Scan会自动归还db的连接，传入user结构体的指针</span></span><br><span class=\"line\">\trowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;u1:%+#v\\n&quot;</span>, u1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := initDB()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;initDB err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tqueryData(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516145006179.png\" class=\"\" title=\"image-20220516145006179\">\n\n<h3 id=\"3、最大连接数\"><a href=\"#3、最大连接数\" class=\"headerlink\" title=\"3、最大连接数\"></a>3、最大连接数</h3><blockquote>\n<p>因为<code>DB</code>这个结构体自己维护了一个数据库连接池，那么这个连接池可以设置数据库链接大小</p>\n</blockquote>\n<h4 id=\"3-1-SetMaxOpenConns方法\"><a href=\"#3-1-SetMaxOpenConns方法\" class=\"headerlink\" title=\"3.1 SetMaxOpenConns方法\"></a>3.1 SetMaxOpenConns方法</h4><blockquote>\n<p>用来设置数据库连接池最大连接数</p>\n<p>注释翻译:</p>\n<ul>\n<li>SetMaxOpenConns设置到数据库的最大开放连接数。</li>\n<li>如果MaxIdleConns大于0，而新的MaxOpenConns小于MaxIdleConns，那么MaxIdleConns将被减少以符合新的MaxOpenConns限制。</li>\n<li>如果n&lt;&#x3D;0，那么对开放连接的数量没有限制。默认是0（无限）。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数据库连接数</span></span><br><span class=\"line\"><span class=\"comment\">// SetMaxOpenConns sets the maximum number of open connections to the database.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than</span></span><br><span class=\"line\"><span class=\"comment\">// MaxIdleConns, then MaxIdleConns will be reduced to match the new</span></span><br><span class=\"line\"><span class=\"comment\">// MaxOpenConns limit.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// If n &lt;= 0, then there is no limit on the number of open connections.</span></span><br><span class=\"line\"><span class=\"comment\">// The default is 0 (unlimited).</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *DB)</span></span> SetMaxOpenConns(n <span class=\"type\">int</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-SetMaxOpenConns方法使用\"><a href=\"#3-2-SetMaxOpenConns方法使用\" class=\"headerlink\" title=\"3.2 SetMaxOpenConns方法使用\"></a>3.2 SetMaxOpenConns方法使用</h4><blockquote>\n<p>如果设置了SetMaxOpenConns的最大数，比如10</p>\n<p>当连接池的db连接被使用完了，程序就会夯住，因为没有连接池里没有闲置的db连接了，此时会一直等待有闲置的db来使用，但是池子里已经没有可用的db连接了，那么程序就卡住了</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义全局db连接池</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> db *sql.DB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义user结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> user <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tid <span class=\"type\">int</span></span><br><span class=\"line\">\tname <span class=\"type\">string</span></span><br><span class=\"line\">\tage <span class=\"type\">int</span></span><br><span class=\"line\">\thobby <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> (err <span class=\"type\">error</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class=\"line\">\tdsn := <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class=\"line\">\tdb, err = sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, dsn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 校验数据库打开是否成功</span></span><br><span class=\"line\">\terr = db.Ping()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 设置db最大连接池的连接个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdb.SetMaxOpenConns(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询单条记录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">queryData</span><span class=\"params\">(id <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsqlStr := <span class=\"string\">&quot;select * from user where id=?;&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">11</span>; i++&#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;开始第%v次查询\\n&quot;</span>, i)</span><br><span class=\"line\">\t\tdb.QueryRow(sqlStr, id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 定义接收的结构体对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> u1 user</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到结果</span></span><br><span class=\"line\">\t<span class=\"comment\">// 必须调用Scan方法，Scan会自动归还db的连接</span></span><br><span class=\"line\">\t<span class=\"comment\">// rowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;u1:%+#v\\n&quot;</span>, u1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := initDB()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;initDB err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tqueryData(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8.assets/image-20220516171940580.png\" class=\"\" title=\"image-20220516171940580\">\n\n"}],"PostAsset":[{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220324152502070.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220324152502070.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220324152525798.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220324152525798.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104406809.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516104406809.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104457767.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516104457767.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516104653089.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516104653089.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516105118247.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516105118247.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516145006179.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516145006179.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/go_mysql使用/go_mysql使用.assets/image-20220516171940580.png","post":"cl3aeutxe0003vsv29hoh2tmx","slug":"image-20220516171940580.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl3aeutxe0003vsv29hoh2tmx","category_id":"cl3aeutxh0004vsv259lfft69","_id":"cl3aeutxj0007vsv2ebnb11nd"}],"PostTag":[{"post_id":"cl3aeutxe0003vsv29hoh2tmx","tag_id":"cl3aeutxi0005vsv2cik6e2yp","_id":"cl3aeutxj0008vsv239drdyzl"},{"post_id":"cl3aeutxe0003vsv29hoh2tmx","tag_id":"cl3aeutxi0006vsv20diib34c","_id":"cl3aeutxj0009vsv299e20iki"}],"Tag":[{"name":"Mysql","_id":"cl3aeutxi0005vsv2cik6e2yp"},{"name":"Golang","_id":"cl3aeutxi0006vsv20diib34c"}]}}