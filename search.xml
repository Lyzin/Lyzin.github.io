<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis使用</title>
      <link href="/2024/09/28/java/Mybatis%E4%BD%BF%E7%94%A8/Mybatis%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/28/java/Mybatis%E4%BD%BF%E7%94%A8/Mybatis%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mybatis介绍"><a href="#一、Mybatis介绍" class="headerlink" title="一、Mybatis介绍"></a>一、Mybatis介绍</h2><blockquote><p>Mybatis是一款优秀的持久层框架，支持定制化SQL、存储过程与高级映射，Mybatis避免了所有的JDBC代码和手动设置参数以及获取结果集合，Mybatis可使用简单的XML或注解来配置和映射原生信息，并将接口和Java的POJOs(Plan Ordinary Java Object)，普通的Java对象映射成数据库中的记录</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven使用</title>
      <link href="/2024/09/28/java/Maven%E4%BD%BF%E7%94%A8/Maven%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/28/java/Maven%E4%BD%BF%E7%94%A8/Maven%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven介绍"><a href="#一、Maven介绍" class="headerlink" title="一、Maven介绍"></a>一、Maven介绍</h2><blockquote><p><a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p></blockquote><h3 id="1、Maven特点"><a href="#1、Maven特点" class="headerlink" title="1、Maven特点"></a>1、Maven特点</h3><blockquote><ul><li>Apache Maven 是一个软件项目管理和理解工具。基于项目对象模型（POM）的概念，Maven 可以从一个中心信息管理项目的构建、报告和文档。</li></ul></blockquote><h4 id="1-1-管理项目依赖"><a href="#1-1-管理项目依赖" class="headerlink" title="1.1 管理项目依赖"></a>1.1 管理项目依赖</h4><blockquote><ul><li><p>Maven主要是用来管理依赖，与go的module模式一样来管理项目依赖</p></li><li><p>Maven主要是在POM的xml文件中高速Maven我们需要哪些依赖，Maven会自动的将jar包以及它所以来的其他所有的jar包全部下载并导入项目中</p></li></ul></blockquote><h4 id="1-2-管理项目构建"><a href="#1-2-管理项目构建" class="headerlink" title="1.2 管理项目构建"></a>1.2 管理项目构建</h4><blockquote><p>Maven解决的另一个问题是构建管理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1、第一行代码"><a href="#1、第一行代码" class="headerlink" title="1、第一行代码"></a>1、第一行代码</h3><blockquote><p>java的文件名和代码的类名必须一致</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>保存上面代码为 HelloWorld.java</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先编译，编译会产生HelloWorld.class</span></span><br><span class="line">javac HelloWorld.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再执行</span></span><br><span class="line">java HelloWorld.class</span><br></pre></td></tr></table></figure><blockquote><p>Java的执行原理就是最终翻译成计算机底层可以识别的机器语言</p></blockquote><h3 id="2、JDK组成"><a href="#2、JDK组成" class="headerlink" title="2、JDK组成"></a>2、JDK组成</h3><blockquote><ul><li>JDK组成<ul><li>JVM（Java Virtual Machine）：Java虚拟机，真正运行Java程序的地方</li><li>核心类库：Java自己写好的程序，给程序自己的程序调用的</li><li>JRE（Java Runtime Environment）：Java的运行环境</li><li>JDK（Java Development Kit）：Java开发工具包（包括上面所有）</li></ul></li></ul></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922230458755.png" class="" title="JDK组成"><h3 id="3、IDEA创建Java项目"><a href="#3、IDEA创建Java项目" class="headerlink" title="3、IDEA创建Java项目"></a>3、IDEA创建Java项目</h3><blockquote><p>由如下顺序组成</p><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul></blockquote><blockquote><p>所以在idea中应该是这样的</p></blockquote><h4 id="1-1-创建空项目"><a href="#1-1-创建空项目" class="headerlink" title="1.1 创建空项目"></a>1.1 创建空项目</h4><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923001637286.png" class="" title="image-20240923001637286"><h4 id="1-2-项目下创建模块"><a href="#1-2-项目下创建模块" class="headerlink" title="1.2 项目下创建模块"></a>1.2 项目下创建模块</h4><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923001733155.png" class="" title="image-20240923001733155"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923001755578.png" class="" title="image-20240923001755578"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923001833039.png" class="" title="image-20240923001833039"><h4 id="1-3-模块下创建包"><a href="#1-3-模块下创建包" class="headerlink" title="1.3 模块下创建包"></a>1.3 模块下创建包</h4><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923001957834.png" class="" title="image-20240923001957834"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002117952.png" class="" title="image-20240923002117952"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002131176.png" class="" title="image-20240923002131176"><h4 id="1-4-包下创建类"><a href="#1-4-包下创建类" class="headerlink" title="1.4 包下创建类"></a>1.4 包下创建类</h4><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002222772.png" class="" title="image-20240923002222772"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002328065.png" class="" title="image-20240923002328065"><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002347586.png" class="" title="image-20240923002347586"><h3 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h3><h4 id="1-1-基础数据类型"><a href="#1-1-基础数据类型" class="headerlink" title="1.1 基础数据类型"></a>1.1 基础数据类型</h4><blockquote><ul><li>整型<ul><li>byte</li><li>short</li><li>int（默认）</li><li>long</li></ul></li><li>浮点型（小数）<ul><li>float</li><li>double（默认）</li></ul></li><li>字符型<ul><li>char</li></ul></li><li>布尔型<ul><li>boolean</li></ul></li></ul></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922231417210.png" class="" title="基本数据类型"><h4 id="1-2-自动类型转换"><a href="#1-2-自动类型转换" class="headerlink" title="1.2 自动类型转换"></a>1.2 自动类型转换</h4><blockquote><p>类型范围小的变量，可以直接赋值给类型范围大的变量</p><p>比如：byte类型可以自动转为int类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">typeStudy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// 可以吧byte类型直接赋值到int类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> n1;</span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922232218052.png" class="" title="自动类型转换"><h4 id="1-3-表达式自动类型转换"><a href="#1-3-表达式自动类型转换" class="headerlink" title="1.3 表达式自动类型转换"></a>1.3 表达式自动类型转换</h4><blockquote><p>表达式类型转换是指：不同类型的变量或数据一起运算，最终的数据类型</p><p>表达式中，小范围类型的变量，会自动转换为表达式中较大范围的类型再参与运算</p><p>注意：</p><ul><li>表达式的最终结果类型由表达式中的最高类型决定</li><li>在表达式中，byte、short、char是直接转为int类型参与运算的</li></ul></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922232629156.png" class="" title="image-20240922232629156"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">typeStudy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> n1;</span><br><span class="line">        <span class="type">long</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        <span class="comment">// 表达式以最高类型决定</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> n1 + b + c;</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">res1</span> <span class="operator">=</span> n1 + b + c + <span class="number">1.0</span>;</span><br><span class="line">        System.out.println(res1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，byte、short、char是直接转为int运算的</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f3</span> <span class="operator">=</span> f1 + f2;</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-强制类型转换"><a href="#1-4-强制类型转换" class="headerlink" title="1.4 强制类型转换"></a>1.4 强制类型转换</h4><blockquote><p>类型大的数据或变量直接赋值给类型范围小的变量会报错</p><p>强制类型转换：</p><ul><li>强行将类型范围大的变量、数据赋值给类型范围小的变量</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">数据类型 变量<span class="number">2</span> = (数据类型)变量<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forceChangeType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) a;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-字符串类型"><a href="#1-5-字符串类型" class="headerlink" title="1.5 字符串类型"></a>1.5 字符串类型</h4><blockquote><p>字符串在JAVA中是引用类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;sam&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="4、变量定义"><a href="#4、变量定义" class="headerlink" title="4、变量定义"></a>4、变量定义</h3><blockquote><p>格式：数据类型 变量名 &#x3D; 数据;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 数据;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">19</span>;</span><br></pre></td></tr></table></figure><h3 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h3><h4 id="1-1-加减乘除"><a href="#1-1-加减乘除" class="headerlink" title="1.1 加减乘除"></a>1.1 加减乘除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calcStudy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println(a + b); <span class="comment">// 12</span></span><br><span class="line">        System.out.println(a - b); <span class="comment">// 8</span></span><br><span class="line">        System.out.println(a * b); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(a / b); <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-连接符"><a href="#1-2-连接符" class="headerlink" title="1.2 +连接符"></a>1.2 +连接符</h4><blockquote><p><code>+</code>符号与字符串运算的时候作为连接符，结果是字符串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combineString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;年龄:&quot;</span> + age;</span><br><span class="line">        System.out.printf(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-自增自减"><a href="#1-3-自增自减" class="headerlink" title="1.3 自增自减"></a>1.3 自增自减</h4><blockquote><p>自增：++ 放在变量前面或后面，对变量自身值加1</p><p>自增：– 放在变量前面或后面，对变量自身值减1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        a++;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        ++b;</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        c--;</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        --d;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922234444314.png" class="" title="自增自减注意事项"><h4 id="1-4-关系运算符"><a href="#1-4-关系运算符" class="headerlink" title="1.4 关系运算符"></a>1.4 关系运算符</h4><blockquote><p>和go语言关系运算符一样</p></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922234640896.png" class="" title="关系运算符"><h4 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h4><blockquote><p>逻辑运算符和go一样</p><p>&amp;&amp;  逻辑与</p><p>||  逻辑或</p><p>!   逻辑非</p></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240922234947521.png" class="" title="image-20240922234947521"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicStudy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        System.out.println(i == <span class="number">10</span> &amp;&amp; j == <span class="number">30</span>); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-6-三元运算符"><a href="#1-6-三元运算符" class="headerlink" title="1.6 三元运算符"></a>1.6 三元运算符</h4><blockquote><p>格式：条件表达式?值1:值2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">easyCalc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> age == <span class="number">30</span> ? <span class="string">&quot;age == 30&quot;</span> : <span class="string">&quot;age &lt; 30&quot;</span>;</span><br><span class="line">        System.out.println(res); <span class="comment">// age == 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><h3 id="1、if-else"><a href="#1、if-else" class="headerlink" title="1、if-else"></a>1、if-else</h3><blockquote><p>if - else if - else流程控制和go一模一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">branchCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a==30&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a&lt;30&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a&gt;30&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、switch"><a href="#2、switch" class="headerlink" title="2、switch"></a>2、switch</h3><blockquote><p>与go类似</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">switchStudy</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;a=30&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;a=30&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、for循环"><a href="#3、for循环" class="headerlink" title="3、for循环"></a>3、for循环</h3><blockquote><p>支持break、continue</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &gt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、while循环"><a href="#4、while循环" class="headerlink" title="4、while循环"></a>4、while循环</h3><blockquote><p>支持break、continue</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whileLoop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="1、静态初始化数组"><a href="#1、静态初始化数组" class="headerlink" title="1、静态初始化数组"></a>1、静态初始化数组</h3><blockquote><p>定义数组的时候给数组赋值</p></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923000652274.png" class="" title="image-20240923000652274"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStudy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arrayStatic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 完整格式</span></span><br><span class="line">        <span class="type">int</span>[] nums1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">// 简化格式</span></span><br><span class="line">        <span class="type">int</span>[] nums2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">        System.out.println(Arrays.toString(nums1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">        System.out.println(Arrays.toString(nums2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、动态初始化数组"><a href="#2、动态初始化数组" class="headerlink" title="2、动态初始化数组"></a>2、动态初始化数组</h3><blockquote><p>定义数组时先不存入具体的元素值，只确定数组存储的数据类型和数组的长度</p><p>和go语言初始化数组一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923002631699.png" class="" title="image-20240923002631699"><h3 id="3、数组长度"><a href="#3、数组长度" class="headerlink" title="3、数组长度"></a>3、数组长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStudy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arrayStatic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 简化格式</span></span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nums1.length</span></span><br><span class="line">        <span class="comment">// 下面长度: 4</span></span><br><span class="line">        System.out.println(nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、数组遍历"><a href="#4、数组遍历" class="headerlink" title="4、数组遍历"></a>4、数组遍历</h3><blockquote><p>数组使用for循环遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.basic.type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStudy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loopArray</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、方法"><a href="#四、方法" class="headerlink" title="四、方法"></a>四、方法</h2><h3 id="1、方法"><a href="#1、方法" class="headerlink" title="1、方法"></a>1、方法</h3><blockquote><p>方法封装了代码，方便重复调用，也就是函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">修饰符 返回值类型 方法名(形参列表) &#123;</span><br><span class="line">    方法的代码块;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面是方法的一个例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Func1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、方法传参"><a href="#2、方法传参" class="headerlink" title="2、方法传参"></a>2、方法传参</h3><blockquote><p>方法传参支持：</p><ul><li>基本数据类型<ul><li>int、double、short等</li></ul></li><li>引用类型<ul><li>String、array、接口</li></ul></li></ul></blockquote><blockquote><p>方法传参机制都是值传递</p><ul><li>基础数据类型参数是值传递，在方法传递进去的是<code>实参的副本</code>，在方法内部修改不会影响方法外形参的值</li><li>引用类型参数也是值传递，在方法传递进去的是引用类型实参的<code>内存地址副本</code>，在方法内部修改会影响方法外引用类型实参的值</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Func1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age=&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、方法重载"><a href="#3、方法重载" class="headerlink" title="3、方法重载"></a>3、方法重载</h3><blockquote><p>方法重载是一个类中，出现多个方法的名称相同，但是他们的形参列表是不同的，那这些方法就是方法重载了</p><p>其实方法重载的原因就是java在方法里</p><ul><li>不支持默认值参数设置</li><li>不支持可变长参数</li></ul><p>所以才需要相同方法名，但是参数不同来支持，这就是方法重载</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Func1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age=&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadFunc1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;reload func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadFunc1</span><span class="params">(<span class="type">int</span> name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;reload func1 name:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadFunc1</span><span class="params">(<span class="type">int</span> name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;reload func1 name:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;reload func1 age:&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>reloadFunc1方法出现了三次，但是每个的形参个数和类型都不一样，那reloadFunc1就实现了方法重载</p></blockquote><h2 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h2><h3 id="1、类的定义"><a href="#1、类的定义" class="headerlink" title="1、类的定义"></a>1、类的定义</h3><blockquote><p>类：一组属性或方法的集合，抽象了所有内容，实现了对象的模板</p><p>对象：从类实例化出来的一个对象</p><p>类中即可有变量、也可以有方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="comment">// public 修饰符表示这个是类的公共变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有public修饰符表示这个是类的私有变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是showUserInfo类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-成员变量与局部变量"><a href="#1-2-成员变量与局部变量" class="headerlink" title="1.2 成员变量与局部变量"></a>1.2 成员变量与局部变量</h4><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中，方法外</td><td>方法中</td></tr><tr><td>初始化值不同</td><td>有默认值，不需要初始化赋值</td><td>没有默认值，使用之前必须赋值</td></tr><tr><td>内存位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>作用域不同</td><td>整个对象</td><td>在所归属的大括号中</td></tr><tr><td>生命周期不同</td><td>与对象公存亡</td><td>随之方法的调用而生，随着方法的运行结束而亡</td></tr></tbody></table><h3 id="2、实例化对象"><a href="#2、实例化对象" class="headerlink" title="2、实例化对象"></a>2、实例化对象</h3><h4 id="1-1-new关键字"><a href="#1-1-new关键字" class="headerlink" title="1.1 new关键字"></a>1.1 new关键字</h4><blockquote><p>类的实例化是用<code>new</code>关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="comment">// public 修饰符表示这个是类的公共变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有public修饰符表示这个是类的私有变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是showUserInfo类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实例化对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lystudy.func.StudyFunc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StudyFunc</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudyFunc</span>();</span><br><span class="line">        System.out.println(sf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接打印对象变量会得到内存地址</p></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923005520477.png" class="" title="image-20240923005520477"><h4 id="1-2-public修饰符理解"><a href="#1-2-public修饰符理解" class="headerlink" title="1.2 public修饰符理解"></a>1.2 public修饰符理解</h4><blockquote><ul><li><p>public修饰符在类中可以将变量、方法变为公共变量、方法，那么实例化对象后，实例化对象就可以直接调用public修饰的变量或方法</p></li><li><p>public修饰符就和go语言的结构体中，结构体字段首字母大写、结构体方法名首字母大写，变为公共变量和公共方法，让外部文件可以实例化后调用，</p></li><li><p>没有public修饰符的变量、方法，就默认都是私有变量、方法</p><ul><li>实例化对象不可以调用</li><li>变量、方法只能在类内部类自我调用</li></ul></li></ul></blockquote><h3 id="3、this关键字"><a href="#3、this关键字" class="headerlink" title="3、this关键字"></a>3、this关键字</h3><blockquote><ul><li><p>this是一个变量，在方法中可以拿到当前对象，比较好理解</p><ul><li><p>类似于python语言的类中的self</p></li><li><p>类似于go语言的结构体方法的接收者</p></li></ul></li><li><p>this可以用点<code>.</code>的方式调用类中的变量、方法</p></li><li><p>哪个对象调用方法，this就指向哪个对象，也就是拿到哪个对象</p></li><li><p>this主要来解决：</p><ul><li>解决对象的成员变量与方法内部变量的名称一样时，导致访问冲突问题</li></ul></li></ul></blockquote><blockquote><p>类定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="comment">// public 修饰符表示这个是类的公共变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有public修饰符表示这个是类的私有变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是showUserInfo类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.showUserInfo();</span><br><span class="line">        <span class="type">int</span> <span class="variable">incrAge</span> <span class="operator">=</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;incrAge=&quot;</span> + incrAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>类实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lystudy.func.StudyFunc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StudyFunc</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudyFunc</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// com.lystudy.func.StudyFunc@7a81197d</span></span><br><span class="line">        System.out.println(sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// incrAge=1</span></span><br><span class="line">        sf.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923010543070.png" class="" title="image-20240923010543070"><h3 id="4、构造器"><a href="#4、构造器" class="headerlink" title="4、构造器"></a>4、构造器</h3><h4 id="1-1-构造器定义"><a href="#1-1-构造器定义" class="headerlink" title="1.1 构造器定义"></a>1.1 构造器定义</h4><blockquote><ul><li>构造器就是构造函数，定义了类的初始状态<ul><li>类比python的类中的<code>__init__</code>方法，也是接收参数，但是没有返回值，即没有return语句</li></ul></li><li>构造器定义<ul><li>在类中定义一个方法名，方法名和类名一样就是构造器</li></ul></li><li>构造器是<code>可重载</code>，本质还是方法</li><li>构造器可分为：<ul><li>无参数构造器，构造器方法不传参</li><li>有参数，构造器方法支持传参</li></ul></li></ul><p>这块理解和python的面向对象的<code>__init__</code>方法一模一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudyFunc</span> &#123;</span><br><span class="line">    <span class="comment">// public 修饰符表示这个是类的公共变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有public修饰符表示这个是类的私有变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudyFunc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudyFunc</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是showUserInfo类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.showUserInfo();</span><br><span class="line">        <span class="type">int</span> <span class="variable">incrAge</span> <span class="operator">=</span> <span class="built_in">this</span>.age + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;incrAge=&quot;</span> + incrAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实例化对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lystudy.func.StudyFunc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StudyFunc</span> <span class="variable">sf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudyFunc</span>();</span><br><span class="line">        System.out.println(sf1);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudyFunc</span> <span class="variable">sf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudyFunc</span>(<span class="number">13</span>);</span><br><span class="line">        System.out.println(sf2);</span><br><span class="line">        sf2.showAge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923011534588.png" class="" title="image-20240923011534588"><h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><h5 id="1-1-1-必须带public修饰符"><a href="#1-1-1-必须带public修饰符" class="headerlink" title="1.1.1 必须带public修饰符"></a>1.1.1 必须带public修饰符</h5><blockquote><p>构造器必须带public修饰符，变为公共方法可以给外部文件暴露，这样在其他文件才可以使用<code>new</code>调用</p></blockquote><img src="/2024/09/22/java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20240923011643672.png" class="" title="image-20240923011643672"><h4 id="1-1-2-未定义构造器方法实例化对象"><a href="#1-1-2-未定义构造器方法实例化对象" class="headerlink" title="1.1.2 未定义构造器方法实例化对象"></a>1.1.2 未定义构造器方法实例化对象</h4><blockquote><p>当类中未定义构造器方法，那么使用<code>new</code>实例化对象时，java类会自己生成并调用一个无参数构造器进行实例化对象</p></blockquote><h3 id="5、封装"><a href="#5、封装" class="headerlink" title="5、封装"></a>5、封装</h3><blockquote><p>封装就是类设计对象处理某一个事物的数据时，应该要把处理的数据以及处理数据的方法涉及到一个对象中去</p></blockquote><h4 id="1-1-设计规范"><a href="#1-1-设计规范" class="headerlink" title="1.1 设计规范"></a>1.1 设计规范</h4><blockquote><ul><li>合理隐藏<ul><li>根据真正的业务逻辑实现</li></ul></li><li>合理暴露<ul><li>需要合理暴露属性和方法</li></ul></li></ul></blockquote><h4 id="1-2-公开和隐藏"><a href="#1-2-公开和隐藏" class="headerlink" title="1.2 公开和隐藏"></a>1.2 公开和隐藏</h4><blockquote><p>公开成员：可以用public(公开)进行修饰</p><p>隐藏成员：使用private(私有，隐藏)进行修饰</p></blockquote><h3 id="6、实体JavaBean"><a href="#6、实体JavaBean" class="headerlink" title="6、实体JavaBean"></a>6、实体JavaBean</h3><blockquote><p>实体类是一种特殊形式的类，要求</p><ul><li>某个类中的成员变量都是私有，并且要对外提供相应的getXxx，setXxx方法</li><li>类中必须要有一个公共的无参的构造器</li></ul><p>可以理解为数据仓库</p></blockquote><h4 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h4><blockquote><ul><li><p>实体类只负责数据存取</p></li><li><p>而对数据的处理交给其他类来完成，已实现数据和数据业务处理相分离</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanStudy</span> &#123;</span><br><span class="line">    <span class="comment">// 实体类的书写要求，特点、应用场景</span></span><br><span class="line">    <span class="comment">// 1.必须要有私有成员变量，并未每个成员变量提供get set方法</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.必须为类提供一个公开的无参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaBeanStudy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.可以生成一个带参数的构造器，比较方柏霓他人操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JavaBeanStudy</span><span class="params">(String name, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>操作类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作数据类</span></span><br><span class="line"><span class="comment">// 将数据和数据操作分离开</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentOperator</span> &#123;</span><br><span class="line">    <span class="comment">// JavaBean实体，默认都是private</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentOperator</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.student = student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (student.getScore() &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大于60分，已经合格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小于60分，学生成绩不合格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-电影类实操"><a href="#1-2-电影类实操" class="headerlink" title="1.2 电影类实操"></a>1.2 电影类实操</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="comment">// javaBean 类</span></span><br><span class="line"><span class="comment">// 只用来保存数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> &#123;</span><br><span class="line">    <span class="comment">// 电影ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影价格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影分数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影导演</span></span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影演员</span></span><br><span class="line">    <span class="keyword">private</span> String actor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 电影信息</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">double</span> price, <span class="type">double</span> score, String director, String actor, String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">        <span class="built_in">this</span>.actor = actor;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDirector</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> director;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDirector</span><span class="params">(String director)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getActor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActor</span><span class="params">(String actor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actor = actor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lystudy.func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieOperator</span> &#123;</span><br><span class="line">    <span class="comment">// 电影的数组</span></span><br><span class="line">    <span class="keyword">private</span> Movie[] movies;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieOperator</span><span class="params">(Movie[] movies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movies = movies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示所有Movie电影信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllMovies</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---系统全部电影信息---&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; movies.length; i++) &#123;</span><br><span class="line">            <span class="type">Movie</span> <span class="variable">m</span> <span class="operator">=</span> movies[i];</span><br><span class="line">            System.out.println(<span class="string">&quot;编号：&quot;</span> + m.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;名称：&quot;</span> + m.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;价格：&quot;</span> + m.getPrice());</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID查询电影信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryMovieInfoById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; movies.length; i++) &#123;</span><br><span class="line">            <span class="type">Movie</span> <span class="variable">m</span> <span class="operator">=</span> movies[i];</span><br><span class="line">            <span class="keyword">if</span> (m.getId() == id) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;---id=&quot;</span> + id + <span class="string">&quot;，该电影信息如下---&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;编号：&quot;</span> + m.getId());</span><br><span class="line">                System.out.println(<span class="string">&quot;名称：&quot;</span> + m.getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;价格：&quot;</span> + m.getPrice());</span><br><span class="line">                System.out.println(<span class="string">&quot;导演：&quot;</span> + m.getActor());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---id=&quot;</span> + id + <span class="string">&quot;，电影未找到---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、常用API"><a href="#六、常用API" class="headerlink" title="六、常用API"></a>六、常用API</h2><h3 id="1、包"><a href="#1、包" class="headerlink" title="1、包"></a>1、包</h3><blockquote><p>包主要是用来分门别类的管理不同程序的，类似于文件夹，建包有利于程序的管理和维护</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">package</span> com.slowNo.javabean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-导包"><a href="#1-1-导包" class="headerlink" title="1.1 导包"></a>1.1 导包</h4><blockquote><ul><li><p>如果在当前程序中，要调用自己所在包下的其他程序，可以直接调用（同一个包下的类，互相可以直接调用）</p></li><li><p>访问其他包下的程序，必须导入包才可以访问</p></li><li><p>在自己的程序中调用Java提供的程序，也需要先导入包才可以使用</p><ul><li>Java.Lang包下的程序不需要我们导入，可以直接使用</li></ul></li><li><p>访问多个其他包下的程序，这些程序名又一样的情况，那么默认只能导入一个程序，另一个程序必须带包名和类型来访问</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包语法</span></span><br><span class="line"><span class="keyword">import</span> com.xx.xxx</span><br></pre></td></tr></table></figure><h3 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h3><blockquote><p>String主要用来处理字符串</p><p>String类表示字符串</p></blockquote><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka使用</title>
      <link href="/2024/09/17/golang/kafka%E4%BD%BF%E7%94%A8/kafka%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/17/golang/kafka%E4%BD%BF%E7%94%A8/kafka%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、kafka安装"><a href="#一、kafka安装" class="headerlink" title="一、kafka安装"></a>一、kafka安装</h2><h3 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h3><h4 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1 拉取镜像"></a>1.1 拉取镜像</h4><blockquote><p><a href="https://hub.docker.com/r/bitnami/kafka">https://hub.docker.com/r/bitnami/kafka</a></p></blockquote><h3 id="2、创建容器"><a href="#2、创建容器" class="headerlink" title="2、创建容器"></a>2、创建容器</h3><h4 id="1-1-docker-run模式"><a href="#1-1-docker-run模式" class="headerlink" title="1.1 docker run模式"></a>1.1 docker run模式</h4><blockquote><p>下面命令是单机模式的kafka</p><p>参考：<a href="https://blog.csdn.net/u010088278/article/details/127824196">https://blog.csdn.net/u010088278/article/details/127824196</a></p><p>比如kafka部署在A机器，远程IP是192.168.0.120:9094，那本地代码想连接，就必须按如下配置</p><ul><li>KAFKA_CFG_ADVERTISED_LISTENERS中配置EXTERNAL:&#x2F;&#x2F;192.168.0.120:9094 表示外部链接的IP，因为是容器部署，所以IP是外部宿主机的IP</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name kafka \</span><br><span class="line">  --restart always \</span><br><span class="line">  --hostname kafka-server \</span><br><span class="line">  --memory 1g \</span><br><span class="line">  --cpus 1.0 \</span><br><span class="line">  -e KAFKA_ENABLE_KRAFT=<span class="built_in">yes</span> \</span><br><span class="line">  -e KAFKA_CFG_NODE_ID=1 \</span><br><span class="line">  -e KAFKA_CFG_PROCESS_ROLES=controller,broker \</span><br><span class="line">  -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094 \</span><br><span class="line">  -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092,EXTERNAL://192.168.0.120:9094 \</span><br><span class="line">  -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT \</span><br><span class="line">  -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-server:9093 \</span><br><span class="line">  -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \</span><br><span class="line">  -p 9092:9092 \</span><br><span class="line">  -p 9094:9094 \</span><br><span class="line">  bitnami/kafka:3.3.2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-e KAFKA_ENABLE_KRAFT=<span class="built_in">yes</span>  开启KRaft</span><br><span class="line">-e KAFKA_CFG_NODE_ID=1 \  单机，所以节点ID为1</span><br><span class="line">-e KAFKA_CFG_PROCESS_ROLES=controller,broker \  kafka与外界交互只用broker</span><br><span class="line">-e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094 \  监听地址，注意EXTERNAL://:9094是给外部链接的端口</span><br><span class="line">-e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092,EXTERNAL://192.168.0.120:9094 \ 注意EXTERNAL://:192.168.0.120:9094 是给外部链接的地址和端口</span><br><span class="line">-e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT \</span><br><span class="line">-e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-server:9093 \</span><br><span class="line">-e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-p 9094:9094 \</span><br></pre></td></tr></table></figure><h4 id="1-2-docker-compose模式"><a href="#1-2-docker-compose模式" class="headerlink" title="1.2 docker-compose模式"></a>1.2 docker-compose模式</h4><blockquote><p>下面命令是单机模式的kafka</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">kafka:</span><br><span class="line">    image: bitnami/kafka:3.3.2</span><br><span class="line">    container_name: kafka</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: kafka-server</span><br><span class="line">    mem_limit: 1g</span><br><span class="line">    cpus: <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    environment:</span><br><span class="line">      - KAFKA_ENABLE_KRAFT=<span class="built_in">yes</span></span><br><span class="line">      - KAFKA_CFG_NODE_ID=1</span><br><span class="line">      - KAFKA_CFG_PROCESS_ROLES=controller,broker</span><br><span class="line">      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094</span><br><span class="line">      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092,EXTERNAL://192.168.0.120:9094</span><br><span class="line">      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT</span><br><span class="line">      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-server:9093</span><br><span class="line">      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">      - <span class="string">&quot;9094:9094&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - dev-unit-network</span><br></pre></td></tr></table></figure><h2 id="二、go使用kafka"><a href="#二、go使用kafka" class="headerlink" title="二、go使用kafka"></a>二、go使用kafka</h2><blockquote><p><a href="https://github.com/segmentio/kafka-go">https://github.com/segmentio/kafka-go</a></p></blockquote><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch使用</title>
      <link href="/2024/09/11/golang/elasticsearch/elasticsearch%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/09/11/golang/elasticsearch/elasticsearch%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装elasticsearch"><a href="#一、安装elasticsearch" class="headerlink" title="一、安装elasticsearch"></a>一、安装elasticsearch</h2><h3 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h3><h4 id="1-1-拉取镜像"><a href="#1-1-拉取镜像" class="headerlink" title="1.1 拉取镜像"></a>1.1 拉取镜像</h4><blockquote><p>官方安装教程：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html</a></p><p>拉取镜像</p><p><a href="https://hub.docker.com/_/elasticsearch/tags">https://hub.docker.com/_/elasticsearch/tags</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.17.24</span><br></pre></td></tr></table></figure><h4 id="1-2-创建单节点的容器"><a href="#1-2-创建单节点的容器" class="headerlink" title="1.2 创建单节点的容器"></a>1.2 创建单节点的容器</h4><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html</a></p><p>启动容器</p><p>elasticsearch容器内数据存储目录：&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># elasticsearch</span></span><br><span class="line"><span class="comment"># /home/ly/docker_volumn/elasticsearch/data:/usr/share/elasticsearch/data 数据映射</span></span><br><span class="line">docker run -itd -p 9200:9200 -p 9300:9300 -v /home/ly/docker_volumn/elasticsearch/data:/usr/share/elasticsearch/data -m 512m -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.17.24</span><br></pre></td></tr></table></figure><h3 id="2、kibana"><a href="#2、kibana" class="headerlink" title="2、kibana"></a>2、kibana</h3><blockquote><p><a href="https://hub.docker.com/_/kibana">https://hub.docker.com/_/kibana</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.17.24</span><br></pre></td></tr></table></figure><blockquote><p>启动容器</p><p>kibana配置文件目录：&#x2F;usr&#x2F;share&#x2F;kibana&#x2F;config</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kibana</span></span><br><span class="line"><span class="comment"># -v /home/ly/docker_volumn/kibana/config:/usr/share/kibana/config 配置文件映射</span></span><br><span class="line">docker run -itd --name kibana -v /home/ly/docker_volumn/kibana/config:/usr/share/kibana/config -m 256m -p 5601:5601 kibana:7.17.24</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/"/>
      <url>/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LeetCode算法刷题</p><p>画图工具：<a href="https://boardmix.cn/">https://boardmix.cn/</a></p></blockquote><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1、进位与取模"><a href="#1、进位与取模" class="headerlink" title="1、进位与取模"></a>1、进位与取模</h3><h4 id="1-1-进位"><a href="#1-1-进位" class="headerlink" title="1.1 进位"></a>1.1 进位</h4><blockquote><p><strong><code>sum / 10</code></strong>:</p><ul><li>用于计算进位值。</li><li>如果 <code>sum</code> 大于等于 10，<code>sum / 10</code> 的结果是 1 或更大，表示需要进位。</li><li>如果 <code>sum</code> 小于 10，<code>sum / 10</code> 的结果是 0，表示没有进位。</li></ul></blockquote><h4 id="1-2-取模"><a href="#1-2-取模" class="headerlink" title="1.2 取模"></a>1.2 取模</h4><blockquote><p>**<code>sum % 10</code>**：</p><ul><li>用于计算当前位的值。</li><li>如果 <code>sum</code> 大于等于 10，<code>sum % 10</code> 的结果是 <code>sum</code> 除以 10 的余数，表示当前位的值。</li><li>如果 <code>sum</code> 小于 10，<code>sum % 10</code> 的结果是 <code>sum</code> 本身，表示当前位的值。</li></ul></blockquote><h3 id="2、短除法"><a href="#2、短除法" class="headerlink" title="2、短除法"></a>2、短除法</h3><blockquote><p>详细见下图</p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240910193532689.png" class="" title="短除法"><h3 id="3、因数和倍数"><a href="#3、因数和倍数" class="headerlink" title="3、因数和倍数"></a>3、因数和倍数</h3><h4 id="1-1-因数-约数"><a href="#1-1-因数-约数" class="headerlink" title="1.1 因数(约数)"></a>1.1 因数(约数)</h4><blockquote><p>在整数除法中，如果商是整数且没有余数（或者说余数为0）</p><p>那么除数就是被除数的<code>因数</code>(也叫<code>约数</code>)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12 ÷ 2 = 6</span><br><span class="line"></span><br><span class="line">2是12的因数</span><br></pre></td></tr></table></figure><h5 id="1-1-1-最小最大因数"><a href="#1-1-1-最小最大因数" class="headerlink" title="1.1.1 最小最大因数"></a>1.1.1 最小最大因数</h5><blockquote><p>一个数的因数的个数是有限的</p><p>最小因数都是1</p><p>最大因数是它本身</p></blockquote><h4 id="1-2-倍数"><a href="#1-2-倍数" class="headerlink" title="1.2 倍数"></a>1.2 倍数</h4><blockquote><p>在整数除法中，如果商是整数且没有余数（或者说余数为0）</p><p>被除数是除数的<code>倍数</code>比如12是2的6，那么12就是2的倍数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12 ÷ 2 = 6</span><br><span class="line"></span><br><span class="line">12是2的倍数</span><br></pre></td></tr></table></figure><h5 id="1-1-1-最小与最大倍数"><a href="#1-1-1-最小与最大倍数" class="headerlink" title="1.1.1 最小与最大倍数"></a>1.1.1 最小与最大倍数</h5><blockquote><p>一个数的倍数的个数是无限的</p><p>最小倍数是它本身</p><p>最大倍数数是没有的</p></blockquote><h3 id="4、公因数"><a href="#4、公因数" class="headerlink" title="4、公因数"></a>4、公因数</h3><h4 id="1-1-公因数"><a href="#1-1-公因数" class="headerlink" title="1.1 公因数"></a>1.1 公因数</h4><blockquote><p>6的因数有1,2,3,5</p><p>9的因数有1,3,9</p><p>6和9的因数都有1和3，那么1和3就是公共公因数，也叫做<code>公因数</code></p></blockquote><h4 id="1-2-最大公因数"><a href="#1-2-最大公因数" class="headerlink" title="1.2 最大公因数"></a>1.2 最大公因数</h4><blockquote><p>6的因数有1,2,3,5</p><p>9的因数有1,3,9</p><p>6和9的因数都有1和3，那么1和3就是公共公因数，也叫做<code>公因数</code></p><p>其中3是最大的公因数，叫做他们的<code>最大公因数</code></p></blockquote><blockquote><p>应用场景：比如两根铁丝一根长18dm，一根长30dm，要把两根铁丝截成相等的小段且不能有剩余，南无每小段最长可以是多少分米，就需要找到18和30的最大公因数</p></blockquote><h3 id="5、公倍数"><a href="#5、公倍数" class="headerlink" title="5、公倍数"></a>5、公倍数</h3><h4 id="1-1-公倍数"><a href="#1-1-公倍数" class="headerlink" title="1.1 公倍数"></a>1.1 公倍数</h4><blockquote><p>4的倍数：4, 8, 12, 20, 24, 28, 32, 36</p><p>6的倍数：6, 12, 18,  24, 30, 36</p><p>12, 24, 36 都是4和6公有的倍数，叫做它们的<code>公倍数</code></p></blockquote><h4 id="1-2-最小公倍数"><a href="#1-2-最小公倍数" class="headerlink" title="1.2 最小公倍数"></a>1.2 最小公倍数</h4><blockquote><p>4的倍数：4, 8, 12, 20, 24, 28, 32, 36</p><p>6的倍数：6, 12, 18,  24, 30, 36</p><p>12, 24, 36 都是4和6公有的倍数，12就是它们的<code>最小公倍数</code></p></blockquote><blockquote><p>如果两个数的最大公因数是1，那这两个输的积就是他们的<code>最小公倍数</code></p></blockquote><h3 id="6、质数和合数"><a href="#6、质数和合数" class="headerlink" title="6、质数和合数"></a>6、质数和合数</h3><h4 id="1-1-质数"><a href="#1-1-质数" class="headerlink" title="1.1 质数"></a>1.1 质数</h4><blockquote><p>一个数，如果只有1和本身两个<code>因数(约数)</code>，这样的数叫<code>质数(也叫素数)</code></p><p>如：2,3,5,7,11,13,17,19</p></blockquote><h4 id="1-2-合数"><a href="#1-2-合数" class="headerlink" title="1.2 合数"></a>1.2 合数</h4><blockquote><p>一个数，如果除了1和本身还有别的<code>因数(约数)</code>，这样的数叫<code>合数</code></p><p>如：4,6,8,9,10,12,14,15,16,18,20</p></blockquote><h4 id="1-3-注意"><a href="#1-3-注意" class="headerlink" title="1.3 注意"></a>1.3 注意</h4><blockquote><p>1既不是质数也不是合数，因为1只有它本身一个因数</p></blockquote><h4 id="1-4-互质数"><a href="#1-4-互质数" class="headerlink" title="1.4 互质数"></a>1.4 互质数</h4><blockquote><p>公因数只有1的两个数，叫做<code>互质数</code></p><p>比如：5和7是互质数，可以说5和7互质</p></blockquote><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><h3 id="1、单链表"><a href="#1、单链表" class="headerlink" title="1、单链表"></a>1、单链表</h3><h4 id="1-1-单链表定义"><a href="#1-1-单链表定义" class="headerlink" title="1.1 单链表定义"></a>1.1 单链表定义</h4><blockquote><p>链表是一个不连续存储的数据结构</p><p>一个链表节点由：数据域+指针域组成</p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909194042691.png" class="" title="单链表定义"><h4 id="1-2-单链表代码"><a href="#1-2-单链表代码" class="headerlink" title="1.2 单链表代码"></a>1.2 单链表代码</h4><blockquote><p>使用go代码实现单链表</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">head.Next = &amp;ListNode&#123;Val: <span class="number">123</span>&#125;</span><br><span class="line">head.Next.Next = &amp;ListNode&#123;Val: <span class="number">456</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909193156783.png" class="" title="单链表代码实现"><blockquote><p>从代码提示来看：</p><ul><li>head是头节点，Next指针域一直指向下一个节点，然后一直循环</li></ul></blockquote><h5 id="1-1-1-指针变量移动"><a href="#1-1-1-指针变量移动" class="headerlink" title="1.1.1 指针变量移动"></a>1.1.1 指针变量移动</h5><blockquote><p>指针变量的移动，就是需要将Next指针域一直指向下一个链表节点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">head.Next = &amp;ListNode&#123;Val: <span class="number">123</span>&#125;</span><br><span class="line">head.Next.Next = &amp;ListNode&#123;Val: <span class="number">456</span>&#125;</span><br><span class="line"></span><br><span class="line">temp := head     <span class="comment">// 指针变量赋值</span></span><br><span class="line">temp = temp.Next <span class="comment">// 移动temp指针到下一个节点</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;current node val: %v\n&quot;</span>, temp.Val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909194617459.png" class="" title="指针移动"><h5 id="1-1-2-节点插入函数"><a href="#1-1-2-节点插入函数" class="headerlink" title="1.1.2 节点插入函数"></a>1.1.2 节点插入函数</h5><blockquote><p>节点插入使用到了指针变量移动</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ln *ListNode)</span></span> Insert(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ln == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前头结点赋值给current临时变量</span></span><br><span class="line">current := ln</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为此时current处于链表的head头结点，所以需要循环找到链表的末尾节点</span></span><br><span class="line"><span class="keyword">for</span> current.Next != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 表示下一个节点不为nil</span></span><br><span class="line">current = current.Next <span class="comment">// 移动current到下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当上面循环完成后，current就指向了链表的末尾节点，此时再把末尾节点指针域连接到新节点</span></span><br><span class="line"><span class="comment">// 创建新的节点</span></span><br><span class="line">newListNode := &amp;ListNode&#123;Val: val&#125;</span><br><span class="line">current.Next = newListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;ListNode&#123;Val: <span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">// 插入新节点</span></span><br><span class="line">head.Insert(<span class="number">20</span>)</span><br><span class="line">head.Insert(<span class="number">30</span>)</span><br><span class="line">head.Insert(<span class="number">40</span>)</span><br><span class="line">head.Insert(<span class="number">50</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909195807558.png" class="" title="单链表添加节点"><h5 id="1-1-3-打印链表函数"><a href="#1-1-3-打印链表函数" class="headerlink" title="1.1.3 打印链表函数"></a>1.1.3 打印链表函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ln *ListNode)</span></span> PrintListNode() &#123;</span><br><span class="line"><span class="keyword">if</span> ln == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := ln</span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"><span class="comment">// 移动指针域到下一个节点</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909200409824.png" class="" title="打印单链表节点"><h4 id="1-3-循环链表"><a href="#1-3-循环链表" class="headerlink" title="1.3 循环链表"></a>1.3 循环链表</h4><blockquote><p>循环链表是指尾节点再次指向头结点</p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909201043046.png" class="" title="循环链表"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 定义由一个节点组成的循环链表</span></span><br><span class="line">head := &amp;ListNode&#123;Val: <span class="number">10</span>&#125;</span><br><span class="line">head.Next = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 添加新节点到循环链表</span></span><br><span class="line">newNode := &amp;ListNode&#123;Val: <span class="number">20</span>&#125;</span><br><span class="line">head.Next = newNode <span class="comment">// 让头结点指向新节点</span></span><br><span class="line">newNode.Next = head <span class="comment">// 让新节点的下一个指针域指向头结点形成循环链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909201506211.png" class="" title="循环链表代码实现"><blockquote><p>从代码调试可以看出，head的Next是20这个节点，20这个节点的Next变为head，这样一直循环形成了循环链表</p><p>断点的“Ⅴ”可以一直展开，但是是因为循环链表，所以一直就是head节点和20这个节点循环展示</p></blockquote><h5 id="1-1-1-循环链表添加节点"><a href="#1-1-1-循环链表添加节点" class="headerlink" title="1.1.1 循环链表添加节点"></a>1.1.1 循环链表添加节点</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// CircularListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> CircularListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *CircularListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append 给循环链表添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cl *CircularListNode)</span></span> Append(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> cl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前头结点赋值给current临时变量</span></span><br><span class="line">current := cl</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为此时current处于链表的head头结点，所以需要循环找到链表的末尾节点</span></span><br><span class="line"><span class="comment">// 当current.Next不等于cl头结点的时候，表示还没有走到循环链表的尾节点</span></span><br><span class="line"><span class="keyword">for</span> current.Next != cl &#123;</span><br><span class="line">current = current.Next <span class="comment">// 移动current到下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当上面循环完成后，current就指向了链表的末尾节点，此时再把末尾节点指针域连接到新节点</span></span><br><span class="line"><span class="comment">// 创建新的节点</span></span><br><span class="line">newListNode := &amp;CircularListNode&#123;Val: val&#125;</span><br><span class="line">current.Next = newListNode</span><br><span class="line">newListNode.Next = cl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 定义由一个节点组成的循环链表</span></span><br><span class="line">head := &amp;CircularListNode&#123;Val: <span class="number">10</span>&#125;</span><br><span class="line">head.Next = head</span><br><span class="line"><span class="comment">// 2.添加新节点到循环链表</span></span><br><span class="line">head.Append(<span class="number">11</span>)</span><br><span class="line">head.Append(<span class="number">12</span>)</span><br><span class="line">head.Append(<span class="number">13</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909202336643.png" class="" title="循环链表添加节点"><h5 id="1-1-2-打印循环链表函数"><a href="#1-1-2-打印循环链表函数" class="headerlink" title="1.1.2 打印循环链表函数"></a>1.1.2 打印循环链表函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cl *CircularListNode)</span></span> PrintCircularListNode() &#123;</span><br><span class="line"><span class="keyword">if</span> cl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := cl.Next</span><br><span class="line"><span class="keyword">if</span> current == cl &#123;</span><br><span class="line"><span class="comment">// 表示只有一个节点</span></span><br><span class="line">fmt.Println(current.Val)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出头结点</span></span><br><span class="line">fmt.Print(cl.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"><span class="comment">// 遍历打印下一个节点</span></span><br><span class="line"><span class="comment">// 因为current节点不等于cl头结点，可以一直打印节点，</span></span><br><span class="line"><span class="comment">// 一旦current.next是cl头结点了，那么current就表示走到了尾节点，此时for循环条件也不成立就退出循环</span></span><br><span class="line"><span class="keyword">for</span> current != cl &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909203304439.png" class="" title="打印循环链表"><h5 id="1-1-3-删除循环链表最后一个节点"><a href="#1-1-3-删除循环链表最后一个节点" class="headerlink" title="1.1.3 删除循环链表最后一个节点"></a>1.1.3 删除循环链表最后一个节点</h5><blockquote><p>核心思想：</p><ul><li>找到循环链表的倒数第二个节点，将倒数第二个节点指向头结点</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CircularListNode 定义链表节点</span></span><br><span class="line"><span class="keyword">type</span> CircularListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Val 链表的数据域</span></span><br><span class="line">Val <span class="type">int</span></span><br><span class="line"><span class="comment">// Next 链表的指针域</span></span><br><span class="line">Next *CircularListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append 给循环链表添加节点</span></span><br><span class="line"><span class="comment">// cl 本身必须是一个循环链表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cl *CircularListNode)</span></span> Append(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> cl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前头结点赋值给current临时变量</span></span><br><span class="line">current := cl</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为此时current处于链表的head头结点，所以需要循环找到链表的末尾节点</span></span><br><span class="line"><span class="comment">// 当current.Next不等于cl头结点的时候，表示还没有走到循环链表的尾节点</span></span><br><span class="line"><span class="keyword">for</span> current.Next != cl &#123;</span><br><span class="line">current = current.Next <span class="comment">// 移动current到下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当上面循环完成后，current就指向了链表的末尾节点，此时再把末尾节点指针域连接到新节点</span></span><br><span class="line"><span class="comment">// 创建新的节点</span></span><br><span class="line">newListNode := &amp;CircularListNode&#123;Val: val&#125;</span><br><span class="line">current.Next = newListNode</span><br><span class="line">newListNode.Next = cl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cl *CircularListNode)</span></span> PrintCircularListNode() &#123;</span><br><span class="line"><span class="keyword">if</span> cl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := cl.Next</span><br><span class="line"><span class="keyword">if</span> current == cl &#123;</span><br><span class="line"><span class="comment">// 表示只有一个节点</span></span><br><span class="line">fmt.Println(current.Val)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出头结点</span></span><br><span class="line">fmt.Print(cl.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"><span class="comment">// 遍历打印下一个节点</span></span><br><span class="line"><span class="comment">// 因为current节点不等于cl头结点，可以一直打印节点，</span></span><br><span class="line"><span class="comment">// 一旦current.next是cl头结点了，那么current就表示走到了尾节点，此时for循环条件也不成立就退出循环</span></span><br><span class="line"><span class="keyword">for</span> current != cl &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteTailNode 删除循环链表的末尾节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cl *CircularListNode)</span></span> DeleteTailNode() &#123;</span><br><span class="line"><span class="keyword">if</span> cl == <span class="literal">nil</span> || cl == cl.Next &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义临时节点</span></span><br><span class="line">current := cl</span><br><span class="line"><span class="comment">// 移动指针变量，表示指针的下一个节点的下一个节点不是头结点，就表示没有找到倒数第二个节点</span></span><br><span class="line"><span class="comment">// 需要继续循环</span></span><br><span class="line"><span class="keyword">for</span> current.Next.Next != cl &#123;</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了链表的倒数第2个节点后，将这个节点的下一个节点指向头结点，就删除最后一个节点</span></span><br><span class="line">current.Next = cl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 定义由一个节点组成的循环链表</span></span><br><span class="line">head := &amp;CircularListNode&#123;Val: <span class="number">10</span>&#125;</span><br><span class="line">head.Next = head</span><br><span class="line"><span class="comment">// 2.添加新节点到循环链表</span></span><br><span class="line">head.Append(<span class="number">11</span>)</span><br><span class="line">head.Append(<span class="number">12</span>)</span><br><span class="line">head.Append(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">head.PrintCircularListNode()</span><br><span class="line"></span><br><span class="line">head.DeleteTailNode()</span><br><span class="line">head.PrintCircularListNode()</span><br><span class="line"></span><br><span class="line">head.DeleteTailNode()</span><br><span class="line">head.PrintCircularListNode()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909205848566.png" class="" title="循环链表删除尾节点"><h3 id="2、双向链表"><a href="#2、双向链表" class="headerlink" title="2、双向链表"></a>2、双向链表</h3><h4 id="1-1-双向链表定义"><a href="#1-1-双向链表定义" class="headerlink" title="1.1 双向链表定义"></a>1.1 双向链表定义</h4><blockquote><ul><li>双向链表是一种数据结构，每个节点包含数据元素以及指向前一个和后一个节点的指针</li><li>任何需要频繁进行插入、删除操作，并且需要保持元素顺序的数据结构，都可能是双向链表的引用场景</li></ul></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909211623806.png" class="" title="双向链表定义"><h4 id="1-2-双向链表代码实现"><a href="#1-2-双向链表代码实现" class="headerlink" title="1.2 双向链表代码实现"></a>1.2 双向链表代码实现</h4><blockquote><p>核心点：</p><ul><li>将head的Next 后向指针域指向新节点</li><li>将newNode的Prev 前向指针域指向head的前一个节点</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedListNode 双向链表节点</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedList</span><br><span class="line">Next *DoubleLinkedList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;DoubleLinkedList&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// 创建新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedList&#123;Val: <span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将head的Next 后向指针域指向新节点</span></span><br><span class="line">head.Next = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将newNode的Prev 前向指针域指向head的前一个节点</span></span><br><span class="line">newNode.Prev = head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909212913309.png" class="" title="双向链表代码实现"><h5 id="1-1-1-添加新节点"><a href="#1-1-1-添加新节点" class="headerlink" title="1.1.1 添加新节点"></a>1.1.1 添加新节点</h5><blockquote><p>核心：</p><ul><li>找到双向链表的最后一个节点</li><li>让最后一个节点的Next后向指针域指向新节点</li><li>让新节点的Prev前向指针域指向最后一个节点</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedList</span><br><span class="line">Next *DoubleLinkedList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;DoubleLinkedList&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// 创建新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedList&#123;Val: <span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将head的Next 后向指针域指向新节点</span></span><br><span class="line">head.Next = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将newNode的Prev 前向指针域指向head的前一个节点</span></span><br><span class="line">newNode.Prev = head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-遍历双向链表"><a href="#1-3-遍历双向链表" class="headerlink" title="1.3 遍历双向链表"></a>1.3 遍历双向链表</h4><h5 id="1-1-2-前向遍历"><a href="#1-1-2-前向遍历" class="headerlink" title="1.1.2 前向遍历"></a>1.1.2 前向遍历</h5><blockquote><p>前向遍历的逻辑：</p><ul><li>从头节点开始，依次向后遍历到尾节点</li><li>需要先从头节点开始向后遍历。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TraverseForward 前向遍历</span></span><br><span class="line"><span class="comment">// 头到尾遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> TraverseForward() &#123;</span><br><span class="line"><span class="keyword">if</span> dl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := dl</span><br><span class="line"></span><br><span class="line"><span class="comment">// current.Next != nil 表示下一个双向链表节点存在</span></span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前指针移动到下一个双向链表节点</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-2-后向遍历"><a href="#1-1-2-后向遍历" class="headerlink" title="1.1.2 后向遍历"></a>1.1.2 后向遍历</h5><blockquote><p>后向遍历的逻辑：</p><ul><li>从尾节点开始，依次向前遍历到头节点。</li><li>需要先找到尾节点，然后从尾节点开始向前遍历。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TraverseBackward 后向遍历</span></span><br><span class="line"><span class="comment">// 从尾到头遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> TraverseBackward() &#123;</span><br><span class="line"><span class="keyword">if</span> dl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到尾节点</span></span><br><span class="line">current := dl</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里必须注意，不能用 current != nil 来判断是不是尾节点，应该用current.Next</span></span><br><span class="line"><span class="comment">// 如果用了current ！= nil，此时即使走到了最后一个节点，那么current还是会被指向尾节点的下一个节点也就是nil</span></span><br><span class="line"><span class="keyword">for</span> current.Next != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 当节点不为空，一直往后移动直到找到尾节点</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// current 此时处于尾节点，然后后向遍历打印</span></span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前指针移动到上一个双向链表节点</span></span><br><span class="line">current = current.Prev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909215722299.png" class="" title="遍历双向链表"><h4 id="1-4-删除节点"><a href="#1-4-删除节点" class="headerlink" title="1.4 删除节点"></a>1.4 删除节点</h4><blockquote><p>基于三个节点的双向链表，删除中间的节点，核心逻辑：</p><ul><li>让head.Next指向head.Next.Next</li><li>此时head.Next就已经等于最后一个节点了，那么此时head.Next.Prev就是最后一个节点的前向指针域指向head节点即可</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedList</span><br><span class="line">Next *DoubleLinkedList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TraverseForward 前向遍历</span></span><br><span class="line"><span class="comment">// 头到尾遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> TraverseForward() &#123;</span><br><span class="line"><span class="keyword">if</span> dl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := dl</span><br><span class="line"></span><br><span class="line"><span class="comment">// current.Next != nil 表示下一个双向链表节点存在</span></span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前指针移动到下一个双向链表节点</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">head := &amp;DoubleLinkedList&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">// 创建新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedList&#123;Val: <span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将head的Next 后向指针域指向新节点</span></span><br><span class="line">head.Next = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将newNode的Prev 前向指针域指向head的前一个节点</span></span><br><span class="line">newNode.Prev = head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新节点</span></span><br><span class="line">newNode2 := &amp;DoubleLinkedList&#123;Val: <span class="number">456</span>&#125;</span><br><span class="line"><span class="comment">// 让最后一个节点的Next后向指针域指向新节点</span></span><br><span class="line"><span class="comment">// head.Next是最后一个节点</span></span><br><span class="line"><span class="comment">// head.Next.Next是最后一个节点的Next指向的节点</span></span><br><span class="line">head.Next.Next = newNode2</span><br><span class="line"><span class="comment">// 让新节点的Prev前向指针域指向最后一个节点</span></span><br><span class="line">newNode2.Prev = head.Next</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前向遍历双向链表</span></span><br><span class="line">fmt.Println(<span class="string">&quot;未删除newNode，前向遍历双向链表&quot;</span>)</span><br><span class="line">head.TraverseForward()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、删除节点 newNode := &amp;DoubleLinkedList&#123;Val: 123&#125;</span></span><br><span class="line"><span class="comment">// 表示head下一个节点指向head的Next.Next几点</span></span><br><span class="line">head.Next = head.Next.Next</span><br><span class="line"><span class="comment">// 此时head.Next就是newNode2这个节点了，那么head.Next.Prev =&gt; newNode2.Prev</span></span><br><span class="line"><span class="comment">// newNode2.Prev = head 表示将newNode2这个节点的前向指针域指向head节点</span></span><br><span class="line"><span class="comment">// 这样就把加在中间的newNode节点给删除了</span></span><br><span class="line">head.Next.Prev = head</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;删除newNode，前向遍历双向链表&quot;</span>)</span><br><span class="line">head.TraverseForward()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909220158564.png" class="" title="双向链表删除节点"><h4 id="1-5-封装节点插入函数"><a href="#1-5-封装节点插入函数" class="headerlink" title="1.5 封装节点插入函数"></a>1.5 封装节点插入函数</h4><h5 id="1-1-1-头插法"><a href="#1-1-1-头插法" class="headerlink" title="1.1.1 头插法"></a>1.1.1 头插法</h5><blockquote><p>将节点插入到双向链表的头部</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedListNode 双向链表节点</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedListNode</span><br><span class="line">Next *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedList 双向链表</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Head 头节点</span></span><br><span class="line">Head *DoubleLinkedListNode</span><br><span class="line"><span class="comment">// Tail 尾节点</span></span><br><span class="line">Tail *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDoubleLinkedList</span><span class="params">()</span></span> *DoubleLinkedList &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;DoubleLinkedList&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertAtStart 实现头部插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> InsertAtStart(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 创建一个新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedListNode&#123;Val: val&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表为空，则直接将新创建的节点赋值返回</span></span><br><span class="line"><span class="keyword">if</span> dl.Head == <span class="literal">nil</span> || dl.Tail == <span class="literal">nil</span> &#123;</span><br><span class="line">dl.Head = newNode</span><br><span class="line">dl.Tail = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表不为空</span></span><br><span class="line"><span class="comment">// 将新节点的Next后向指针域指向 头节点的Head节点</span></span><br><span class="line">newNode.Next = dl.Head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双向链表的 头节点的Prev前向指针域指向新的节点</span></span><br><span class="line">dl.Head.Prev = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双向链表的头结点移动到新节点，实现头插法</span></span><br><span class="line">dl.Head = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := NewDoubleLinkedList()</span><br><span class="line">root.InsertAtStart(<span class="number">1</span>)</span><br><span class="line">root.InsertAtStart(<span class="number">2</span>)</span><br><span class="line">root.InsertAtStart(<span class="number">3</span>)</span><br><span class="line">root.InsertAtStart(<span class="number">4</span>)</span><br><span class="line">root.InsertAtStart(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909223346598.png" class="" title="双向链表头插法"><h5 id="1-1-2-尾插法"><a href="#1-1-2-尾插法" class="headerlink" title="1.1.2 尾插法"></a>1.1.2 尾插法</h5><blockquote><p>将节点插入到双向链表的尾部</p><p>Head 头节点<br>Tail 尾节点 </p><p>表示直接指明了头结点、尾节点是什么，不需要遍历再去查找尾节点了</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedListNode 双向链表节点</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedListNode</span><br><span class="line">Next *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedList 双向链表</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Head 头节点</span></span><br><span class="line">Head *DoubleLinkedListNode</span><br><span class="line"><span class="comment">// Tail 尾节点</span></span><br><span class="line">Tail *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDoubleLinkedList</span><span class="params">()</span></span> *DoubleLinkedList &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;DoubleLinkedList&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertAtEnd 实现尾部插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> InsertAtEnd(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 创建一个新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedListNode&#123;Val: val&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表为空，则直接将新创建的节点赋值返回</span></span><br><span class="line"><span class="keyword">if</span> dl.Head == <span class="literal">nil</span> || dl.Tail == <span class="literal">nil</span> &#123;</span><br><span class="line">dl.Head = newNode</span><br><span class="line">dl.Tail = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表不为空</span></span><br><span class="line"><span class="comment">// 双向链表的尾节点的Next后向指针域指向新节点</span></span><br><span class="line">dl.Tail.Next = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让新节点的前向指针域指向尾部节点</span></span><br><span class="line">newNode.Prev = dl.Tail</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改双向链表的尾节点指到尾部新加的新节点</span></span><br><span class="line">dl.Tail = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := NewDoubleLinkedList()</span><br><span class="line"></span><br><span class="line">root.InsertAtEnd(<span class="number">10</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">20</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">30</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">40</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240909224210216.png" class="" title="双向链表尾插法"><h5 id="1-1-3-删除双向链表任意节点"><a href="#1-1-3-删除双向链表任意节点" class="headerlink" title="1.1.3 删除双向链表任意节点"></a>1.1.3 删除双向链表任意节点</h5><blockquote><p>可删除双向链表中任意的节点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedListNode 双向链表节点</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Prev *DoubleLinkedListNode</span><br><span class="line">Next *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoubleLinkedList 双向链表</span></span><br><span class="line"><span class="keyword">type</span> DoubleLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Head 头节点</span></span><br><span class="line">Head *DoubleLinkedListNode</span><br><span class="line"><span class="comment">// Tail 尾节点</span></span><br><span class="line">Tail *DoubleLinkedListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDoubleLinkedList</span><span class="params">()</span></span> *DoubleLinkedList &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;DoubleLinkedList&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertAtStart 实现头部插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> InsertAtStart(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 创建一个新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedListNode&#123;Val: val&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表为空，则直接将新创建的节点赋值返回</span></span><br><span class="line"><span class="keyword">if</span> dl.Head == <span class="literal">nil</span> || dl.Tail == <span class="literal">nil</span> &#123;</span><br><span class="line">dl.Head = newNode</span><br><span class="line">dl.Tail = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表不为空</span></span><br><span class="line"><span class="comment">// 将新节点的Next后向指针域指向 头节点的Head节点</span></span><br><span class="line">newNode.Next = dl.Head</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双向链表的 头节点的Prev前向指针域指向新的节点</span></span><br><span class="line">dl.Head.Prev = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双向链表的头结点移动到新节点，实现头插法</span></span><br><span class="line">dl.Head = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertAtEnd 实现尾部插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> InsertAtEnd(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 创建一个新双向链表节点</span></span><br><span class="line">newNode := &amp;DoubleLinkedListNode&#123;Val: val&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表为空，则直接将新创建的节点赋值返回</span></span><br><span class="line"><span class="keyword">if</span> dl.Head == <span class="literal">nil</span> || dl.Tail == <span class="literal">nil</span> &#123;</span><br><span class="line">dl.Head = newNode</span><br><span class="line">dl.Tail = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表不为空</span></span><br><span class="line"><span class="comment">// 双向链表的尾节点的Next后向指针域指向新节点</span></span><br><span class="line">dl.Tail.Next = newNode</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让新节点的前向指针域指向尾部节点</span></span><br><span class="line">newNode.Prev = dl.Tail</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改双向链表的尾节点指到尾部新加的新节点</span></span><br><span class="line">dl.Tail = newNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> Delete(val <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 双向链表的头结点赋值给 current</span></span><br><span class="line">current := dl.Head</span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> current.Val == val &#123;</span><br><span class="line"><span class="comment">// 删除节点为：头结点</span></span><br><span class="line"><span class="comment">// current.Prev == nil 说明当前节点的前向指针域确实指向空，那么current就是头结点</span></span><br><span class="line"><span class="comment">// current此时所在的节点为双向链表的头结点</span></span><br><span class="line"><span class="keyword">if</span> current.Prev == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 更改双向链表的头结点的位置，将头节点(dl.Head)往后移动一个节点(current.Next)</span></span><br><span class="line">dl.Head = current.Next</span><br><span class="line"><span class="comment">// 此时current仍是链表的第一个节点，不是链表的第二个节点，因为没有给current重新赋值</span></span><br><span class="line"><span class="comment">// 将current头结点的Next指针域指向空，</span></span><br><span class="line"><span class="comment">// 因为上面的头结点已经移动到了current头结点的下一个节点</span></span><br><span class="line">current.Next = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 此时注意头结点的下一个节点已经是头结点，换句话说就是第二个节点经过dl.Head = current.Next已经变为头结点了</span></span><br><span class="line"><span class="comment">// current仍是链表的第一个节点，因为没有给current重新赋值</span></span><br><span class="line"><span class="comment">// 接着将移动后指向的头结点的前向指针域也指向空</span></span><br><span class="line">dl.Head.Prev = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除节点为：尾结点</span></span><br><span class="line"><span class="comment">// 当current节点的Next后向指针域为nil，说明当前操作的节点是尾节点</span></span><br><span class="line"><span class="comment">// 注意此时current节点是尾节点</span></span><br><span class="line"><span class="keyword">if</span> current.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 将链表的尾节点指向链表的倒数第二个节点，也就是尾节点的前一个节点</span></span><br><span class="line">dl.Tail = current.Prev</span><br><span class="line"><span class="comment">// 此时current仍是链表的最后一个节点，不是链表的倒数第二个节点，因为没有给current重新赋值</span></span><br><span class="line"><span class="comment">// 那么将current的前向指针域指向空，断开与链表的倒数第二个节点连接</span></span><br><span class="line">current.Prev = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 此时链表的Tail尾节点已经移动了到链表的倒数第二个节点</span></span><br><span class="line"><span class="comment">// current仍是链表的最后一个节点，因为没有给current重新赋值</span></span><br><span class="line"><span class="comment">// 那么此时就需要将Tail的Next指针域指向nil，与current断开连接</span></span><br><span class="line">dl.Tail.Next = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除节点为：普通节点（既不是头结点也不是尾节点）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如有这样的双向链表  2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line"><span class="comment">// 当要删除3，那么此时current节点就是3</span></span><br><span class="line"><span class="comment">// current.Prev.Next拆开：</span></span><br><span class="line"><span class="comment">//  1. current.Prev 表示3的前一个节点也就是2，</span></span><br><span class="line"><span class="comment">//  2. current.Prev.Next 表示3的前一个节点的Next后向指针域指向3这个节点的后向指针域指向的节点(=current.Next)，也就是4</span></span><br><span class="line"><span class="comment">//  3. 这样就让2节点-&gt;4节点连接起来了</span></span><br><span class="line">current.Prev.Next = current.Next</span><br><span class="line"><span class="comment">// 注意此时仅仅是2节点与4节点连接了，属于单向连接，4节点还没有和2节点连接，因为是双向链表，所以需要2和4互相连接</span></span><br><span class="line"><span class="comment">// 此时current仍是链表的3节点，因为没有给current重新赋值</span></span><br><span class="line"><span class="comment">// current.Next.Prev拆解：</span></span><br><span class="line"><span class="comment">//  1. current.Next 表示3的后一个节点也就是4</span></span><br><span class="line"><span class="comment">//  2. current.Next.Prev 表示3的后一个节点的Prev前向指针域指向3这个节点的前向指针域指向的节点(=current.Prev)，也就是2</span></span><br><span class="line"><span class="comment">//  3. 这样就让4节点-&gt;2节点连接起来了</span></span><br><span class="line">current.Next.Prev = current.Prev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到此就实现了删除3节点</span></span><br><span class="line"><span class="comment">// 并让3节点前面的2节点、3节点后面的4节点互相连接起来，又形成了双向链表</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当上面一次current.Val != val，那就需要对current重新赋值，向后移动节点继续循环</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TraverseForward 前向遍历</span></span><br><span class="line"><span class="comment">// 头到尾遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dl *DoubleLinkedList)</span></span> TraverseForward() &#123;</span><br><span class="line"><span class="keyword">if</span> dl == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := dl.Head</span><br><span class="line"></span><br><span class="line"><span class="comment">// current.Next != nil 表示下一个双向链表节点存在</span></span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前指针移动到下一个双向链表节点</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := NewDoubleLinkedList()</span><br><span class="line"></span><br><span class="line">root.InsertAtEnd(<span class="number">10</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">20</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">30</span>)</span><br><span class="line">root.InsertAtEnd(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;\n打印完整双向链表节点&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">root.TraverseForward()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点的值</span></span><br><span class="line">root.Delete(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;\n删除尾节点40后，再次打印双向链表节点&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">root.TraverseForward()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点的值</span></span><br><span class="line">root.Delete(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;\n删除节点20后，再次打印双向链表节点&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">root.TraverseForward()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点的值</span></span><br><span class="line">root.Delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;\n删除头节点10后，再次打印双向链表节点&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">root.TraverseForward()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/image-20240910111308814.png" class="" title="删除双向链表任意节点"><h2 id="三、解法大纲"><a href="#三、解法大纲" class="headerlink" title="三、解法大纲"></a>三、解法大纲</h2><h3 id="1、双指针技巧解数组-x2F-链表题目"><a href="#1、双指针技巧解数组-x2F-链表题目" class="headerlink" title="1、双指针技巧解数组&#x2F;链表题目"></a>1、双指针技巧解数组&#x2F;链表题目</h3><blockquote><p>在处理数组和链表时，双指针技巧经常会用到，双指针在数组中就是<code>索引</code>，在链表中就是<code>链表节点</code></p><p>双指针主要分为两类：</p><ul><li>左右指针</li><li>快慢指针</li></ul></blockquote><h4 id="1-1-左右指针"><a href="#1-1-左右指针" class="headerlink" title="1.1 左右指针"></a>1.1 左右指针</h4><blockquote><p>左右指针是指两个指针相向而行或者相背而行，换句话说：</p><ul><li>左指针是指数组的起始索引 <code>0</code><ul><li>一般会定义左指针为<code>left</code></li></ul></li><li>右指针是指数组的末尾索引 <code>len(nums)-1</code><ul><li>一般右指针定义为<code>right</code></li></ul></li></ul></blockquote><h4 id="1-2-快慢指针"><a href="#1-2-快慢指针" class="headerlink" title="1.2 快慢指针"></a>1.2 快慢指针</h4><blockquote><p>快慢指针是指两个指针同向而行，只不过是一快一慢，同向而行是指起始位置都是一样</p><ul><li>快指针<ul><li>一般会定义为 <code>fast</code></li></ul></li><li>慢指针<ul><li>一般会定义 <code>slow</code></li></ul></li></ul></blockquote><h5 id="1-1-1-快慢指针适用场景-单链表"><a href="#1-1-1-快慢指针适用场景-单链表" class="headerlink" title="1.1.1 快慢指针适用场景-单链表"></a>1.1.1 快慢指针适用场景-单链表</h5><blockquote><p>在单链表题目中，大部分技巧都属于快慢指针</p></blockquote><h5 id="1-1-2-快慢指针适用场景-原地修改"><a href="#1-1-2-快慢指针适用场景-原地修改" class="headerlink" title="1.1.2 快慢指针适用场景-原地修改"></a>1.1.2 快慢指针适用场景-原地修改</h5><blockquote><p>在数组问题中的快慢指针技巧，就是让我们原地修改数组，不允许额外开辟新的内存空间，创建新的内存地址</p></blockquote><blockquote><p>以leetcode的26题（删除有序数组中的重复项），原地修改数组的问题</p><ul><li>让慢指针<code>slow</code>走在后面，快指针<code>fast</code>走在前面探路，找到一个不重复的元素就赋值给<code>slow</code>，且让<code>slow</code>前进一步</li><li>这样就保证了nums[0…slow]都是没有重复的元素，当fast指针遍历完整个数组<code>nums</code>后，nums[0…slow]就是整个数组去重之后的结果</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 下面是核心框架代码</span><br><span class="line">slow, fast := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fast &lt; <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> nums[fast] != nums[slow] &#123;</span><br><span class="line">        slow++</span><br><span class="line">        nums[slow] = nums[fast]</span><br><span class="line">    &#125;</span><br><span class="line">    fast++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终因为是需要返回数组的长度，slow是索引，那就需要+1</span></span><br><span class="line"><span class="keyword">return</span> slow + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="四、未在LeetCode收录题目"><a href="#四、未在LeetCode收录题目" class="headerlink" title="四、未在LeetCode收录题目"></a>四、未在LeetCode收录题目</h2><h4 id="1、反转数组"><a href="#1、反转数组" class="headerlink" title="1、反转数组"></a>1、反转数组</h4><blockquote><p>给一个数组进行翻转，不能新创建数组，只能修改原始数组</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reverseNum 反转数组，只能从原始数组修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseNum</span><span class="params">(l []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">left, right := <span class="number">0</span>, <span class="built_in">len</span>(l)<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">tempVal := l[left]</span><br><span class="line">l[left] = l[right]</span><br><span class="line">l[right] = tempVal</span><br><span class="line"></span><br><span class="line">left, right = left+<span class="number">1</span>, right<span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">l := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, reverseNum(l))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、空汽水瓶换汽水"><a href="#2、空汽水瓶换汽水" class="headerlink" title="2、空汽水瓶换汽水"></a>2、空汽水瓶换汽水</h4><blockquote><p>某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeSoda</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">total_soda := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n &gt;= <span class="number">3</span> &#123;</span><br><span class="line"><span class="comment">// 计算可以换几瓶</span></span><br><span class="line">soda := n / <span class="number">3</span></span><br><span class="line">total_soda += soda</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算剩余的空瓶子</span></span><br><span class="line">n = n%<span class="number">3</span> + soda</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 额外剩余2个，还可以再次换一瓶汽水</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span> &#123;</span><br><span class="line">total_soda += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total_soda</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> n &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;n=%v可以换%v瓶汽水\n&quot;</span>, n, changeSoda(v))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、LeetCode-数组"><a href="#五、LeetCode-数组" class="headerlink" title="五、LeetCode-数组"></a>五、LeetCode-数组</h2><h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、<a href="https://leetcode.cn/problems/two-sum/description/">两数之和</a></h3><h4 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-2-题解"><a href="#1-2-题解" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><blockquote><p>使用map方式，原始数据组的值作为map的key，出现的索引作为map的value</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    res := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        another := target - v</span><br><span class="line">        <span class="keyword">if</span> _, ok := res[another]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;res[another], k&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res[v] = k</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、LeetCode-字符串"><a href="#六、LeetCode-字符串" class="headerlink" title="六、LeetCode-字符串"></a>六、LeetCode-字符串</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></h3><h4 id="1-1-题目-1"><a href="#1-1-题目-1" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组**、使用 O(1) 的额外空间解决这一问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-2-题解-1"><a href="#1-2-题解-1" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><blockquote><p>双指针，左右指针，然后修改原始数组</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseString</span><span class="params">(s []<span class="type">byte</span>)</span></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左右指针移动来处理</span></span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        tempChar := s[left]</span><br><span class="line">        s[left] = s[right]</span><br><span class="line">        s[right] = tempChar</span><br><span class="line">        <span class="comment">// 下面是指针左右移动</span></span><br><span class="line">        left, right = left + <span class="number">1</span>, right - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><h4 id="1-1-题目-2"><a href="#1-1-题目-2" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><p><strong>输入：</strong>s &#x3D; “()”</p><p><strong>输出：</strong>true</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong>s &#x3D; “()[]{}”</p><p><strong>输出：</strong>true</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong>s &#x3D; “(]”</p><p><strong>输出：</strong>false</p><p><strong>示例 4：</strong></p><p><strong>输入：</strong>s &#x3D; “([])”</p><p><strong>输出：</strong>true</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul></blockquote><h4 id="1-2-题解-2"><a href="#1-2-题解-2" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [(&#123;&#125;)]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">matchStr</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">stack := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">vStr := <span class="type">string</span>(v)</span><br><span class="line"><span class="keyword">if</span> vStr == <span class="string">&quot;(&quot;</span> || vStr == <span class="string">&quot;&#123;&quot;</span> || vStr == <span class="string">&quot;[&quot;</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, vStr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> vStr == <span class="string">&quot;)&quot;</span> &#123;</span><br><span class="line"><span class="comment">// 需要判断的字符串是 &#123;[()]&#125;</span></span><br><span class="line"><span class="comment">// 此时stack还有值，stack的值是 [&#123;(</span></span><br><span class="line"><span class="comment">// len(stack) == 0  为false</span></span><br><span class="line"><span class="comment">// vStr == stack[len(stack)-1]</span></span><br><span class="line"><span class="comment">//   此时vStr == &quot;)&quot;</span></span><br><span class="line"><span class="comment">//   stack[len(stack)-1] = stack[2] = &quot;(&quot;</span></span><br><span class="line"><span class="comment">//   vStr == stack[len(stack)-1] 为false</span></span><br><span class="line"><span class="comment">//   len(stack) == 0 || vStr == stack[len(stack)-1]  =&gt; false</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || <span class="string">&quot;(&quot;</span> != stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 弹出stack的最后一位元素</span></span><br><span class="line"><span class="comment">// stack =  stack[:len(stack)-1] = stack[:2] = [&#123;</span></span><br><span class="line"><span class="comment">// 切片是左闭右开， 所以stack[:2]其实只能取索引是0和1两个值，相当于是把stack最后一位给pop出去</span></span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> vStr == <span class="string">&quot;]&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || <span class="string">&quot;[&quot;</span> != stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> vStr == <span class="string">&quot;&#125;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// 判断的意思是</span></span><br><span class="line"><span class="comment">// stack 还有值，且 最后一个不能于 &quot;&#123;&quot;时，肯定括号不匹配</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || <span class="string">&quot;&#123;&quot;</span> != stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;(]&quot;</span></span><br><span class="line">ret := matchStr(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret ==&gt; %v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、LeetCode-链表"><a href="#七、LeetCode-链表" class="headerlink" title="七、LeetCode-链表"></a>七、LeetCode-链表</h2><h3 id="2、两数相加"><a href="#2、两数相加" class="headerlink" title="2、两数相加"></a>2、<a href="https://leetcode.cn/problems/add-two-numbers/description/">两数相加</a></h3><h4 id="1-1-题目-3"><a href="#1-1-题目-3" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote><blockquote><p><strong>示例 1：</strong></p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/addtwonumber1.jpg" class="" title="img"><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-2-题解-3"><a href="#1-2-题解-3" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><blockquote><p><strong>逆序存储</strong>：</p><p>在链表中，数字的每一位是按照从低位到高位的顺序存储的。例如，链表 <code>[2,4,3]</code> 表示的整数是 <code>342</code>，而不是 <code>243</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// l1的链表是 1 -&gt; 6 -&gt; 3  对应的整数数字就是 361</span></span><br><span class="line">l1 := &amp;pkg.ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">l1.Next = &amp;pkg.ListNode&#123;Val: <span class="number">6</span>&#125;</span><br><span class="line">l1.Next.Next = &amp;pkg.ListNode&#123;Val: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pkg中的链表定义</span></span><br><span class="line"><span class="keyword">package</span> pkg</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PrintListNode 打印节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := head</span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>题目解答</p><p>carry必须&gt;1，下面是不对carry判断的错误流程，让我们通过一个具体的例子来展示这种情况。假设 <code>l1</code> 和 <code>l2</code> 分别为：</p><ul><li><p><code>l1 = 2 -&gt; 4 -&gt; 9</code></p></li><li><p><code>l2 = 5 -&gt; 6 -&gt; 4</code></p></li><li><p>详细步骤</p><h4 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h4><ul><li><code>dummy</code> 是一个虚拟节点，<code>dummy.Next</code> 为 <code>nil</code>。</li><li><code>current</code> 指向 <code>dummy</code>。</li><li><code>carry</code> 为 <code>0</code>。</li></ul><h4 id="第一次循环"><a href="#第一次循环" class="headerlink" title="第一次循环"></a>第一次循环</h4><ul><li><code>sum = 0 + 2 + 5 = 7</code></li><li><code>carry = 7 / 10 = 0</code></li><li><code>current.Next = &amp;pkg.ListNode&#123;Val: 7&#125;</code></li><li><code>current = current.Next</code></li><li><code>l1 = 4 -&gt; 9</code></li><li><code>l2 = 6 -&gt; 4</code></li></ul><h4 id="第二次循环"><a href="#第二次循环" class="headerlink" title="第二次循环"></a>第二次循环</h4><ul><li><code>sum = 0 + 4 + 6 = 10</code></li><li><code>carry = 10 / 10 = 1</code></li><li><code>current.Next = &amp;pkg.ListNode&#123;Val: 0&#125;</code></li><li><code>current = current.Next</code></li><li><code>l1 = 9</code></li><li><code>l2 = 4</code></li></ul><h4 id="第三次循环"><a href="#第三次循环" class="headerlink" title="第三次循环"></a>第三次循环</h4><ul><li><code>sum = 1 + 9 + 4 = 14</code></li><li><code>carry = 14 / 10 = 1</code></li><li><code>current.Next = &amp;pkg.ListNode&#123;Val: 4&#125;</code></li><li><code>current = current.Next</code></li><li><code>l1 = nil</code></li><li><code>l2 = nil</code></li></ul><h4 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h4><ul><li>结果链表为 <code>7 -&gt; 0 -&gt; 4</code></li></ul></li><li><p>在第三次循环结束后，<code>carry</code> 仍然为 <code>1</code>，但由于 <code>l1</code> 和 <code>l2</code> 都为 <code>nil</code>，循环条件 <code>l1 != nil || l2 != nil</code> 不再满足，循环结束。此时，<code>carry</code> 的值 <code>1</code> 被忽略，导致结果链表缺少最后一个节点 <code>1</code>。</p></li><li><p>正确结果</p><ul><li>正确的结果链表应该是 <code>7 -&gt; 0 -&gt; 4 -&gt; 1</code>，但由于没有判断 <code>carry &gt; 0</code>，最后一个节点 <code>1</code> 被遗漏了。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">pkg <span class="string">&quot;algorithm-study-qa/pkg/go_pkg/linked_list&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *pkg.ListNode, l2 *pkg.ListNode)</span></span> *pkg.ListNode &#123;</span><br><span class="line">dummy := &amp;pkg.ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">current := dummy</span><br><span class="line">carry := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 在 l1 和 l2 都处理完之后，carry 仍然大于 0 的情况。在这种情况下，for 循环会继续执行，直到 carry 变为 0</span></span><br><span class="line"><span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> || carry != <span class="number">0</span> &#123;</span><br><span class="line">sum := carry</span><br><span class="line"><span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">sum += l1.Val</span><br><span class="line">l1 = l1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">sum += l2.Val</span><br><span class="line">l2 = l2.Next</span><br><span class="line">&#125;</span><br><span class="line">carry = sum / <span class="number">10</span></span><br><span class="line">current.Next = &amp;pkg.ListNode&#123;Val: sum % <span class="number">10</span>&#125;</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 注意此时链表是逆序存储：数字的每一位是按照从低位到高位的顺序存储</span></span><br><span class="line"><span class="comment">// l1的链表是 1 -&gt; 6 -&gt; 3  对应的整数数字就是 361</span></span><br><span class="line">l1 := &amp;pkg.ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">l1.Next = &amp;pkg.ListNode&#123;Val: <span class="number">6</span>&#125;</span><br><span class="line">l1.Next.Next = &amp;pkg.ListNode&#123;Val: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">l2 := &amp;pkg.ListNode&#123;Val: <span class="number">4</span>&#125;</span><br><span class="line">l2.Next = &amp;pkg.ListNode&#123;Val: <span class="number">5</span>&#125;</span><br><span class="line">l2.Next.Next = &amp;pkg.ListNode&#123;Val: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">res := addTwoNumbers(l1, l2)</span><br><span class="line">fmt.Print(<span class="string">&quot;\n打印相加之后的结果&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">pkg.PrintListNode(res)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-核心解法"><a href="#1-3-核心解法" class="headerlink" title="1.3 核心解法"></a>1.3 核心解法</h4><blockquote><ul><li>针对l1和l2分别判断，然后将各自链表节点的值加到sum中</li><li>sum除10得到进位值给carry</li><li>sum%10得到余数创建新节点给current结果操作节点</li><li>current节点不断向后移动</li></ul></blockquote><h3 id="21、合并两个有序链表"><a href="#21、合并两个有序链表" class="headerlink" title="21、合并两个有序链表"></a>21、<a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></h3><h4 id="1-1-题目-4"><a href="#1-1-题目-4" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  </p><p><strong>示例 1：</strong></p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/merge_ex1.jpg" class="" title="img"><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul></blockquote><h4 id="1-2-题解-4"><a href="#1-2-题解-4" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PrintListNode 打印节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintListNode</span><span class="params">(head *ListNode)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">current := head</span><br><span class="line"><span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(current.Val, <span class="string">&quot; -&gt; &quot;</span>)</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>解法代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;algorithm-study-qa/leetecode_algorithm/21.merge_two_sorted_lists/go_code/pkg&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoSortedLists3</span><span class="params">(list1 *pkg.ListNode, list2 *pkg.ListNode)</span></span> *pkg.ListNode &#123;</span><br><span class="line">dummy := &amp;pkg.ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">current := dummy</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> list1.Val &gt; list2.Val &#123;</span><br><span class="line">current.Next = list2</span><br><span class="line">list2 = list2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">current.Next = list1</span><br><span class="line">list1 = list1.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让current向后移动</span></span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for循环结束以后进行判断</span></span><br><span class="line"><span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">current.Next = list1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">current.Next = list2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list1 := &amp;pkg.ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">list1.Next = &amp;pkg.ListNode&#123;Val: <span class="number">3</span>&#125;</span><br><span class="line">list1.Next.Next = &amp;pkg.ListNode&#123;Val: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">list2 := &amp;pkg.ListNode&#123;Val: <span class="number">2</span>&#125;</span><br><span class="line">list2.Next = &amp;pkg.ListNode&#123;Val: <span class="number">4</span>&#125;</span><br><span class="line">list2.Next.Next = &amp;pkg.ListNode&#123;Val: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">res := mergeTwoSortedLists3(list1, list2)</span><br><span class="line">fmt.Print(<span class="string">&quot;\nlist1 list2合并后链表&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">pkg.PrintListNode(res)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-核心解法-1"><a href="#1-3-核心解法-1" class="headerlink" title="1.3 核心解法"></a>1.3 核心解法</h4><blockquote><p>因为是合并成为一个有序链表</p><ul><li>链表1节点的值大于链表2节点的值，<ul><li>将定义的current结果链表的Next节点指向链表2节点</li><li>将链表2节点向后移动一个节点</li></ul></li><li>链表1节点的值小于等于链表2节点的值<ul><li>将定义的current结果链表的Next节点指向链表1节点</li><li>将链表1节点向后一个节点</li></ul></li><li>current节点需要向后移动一个节点，因为上面2个判断给current节点的Next节点已经赋值，所以需要将current继续向后移动</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码逻辑</span></span><br><span class="line"><span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> list1.Val &gt; list2.Val &#123;</span><br><span class="line">current.Next = list2</span><br><span class="line"><span class="comment">// 一定要让list2移动到下一个节点</span></span><br><span class="line">list2 = list2.Next</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// list1.Val &lt;= list2.Val</span></span><br><span class="line">current.Next = list1</span><br><span class="line"><span class="comment">// 一定要让list1移动到下一个节点</span></span><br><span class="line">list1 = list1.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让current移动到下一个节点</span></span><br><span class="line">current = current.Next</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="83、删除排序链表中的重复元素"><a href="#83、删除排序链表中的重复元素" class="headerlink" title="83、删除排序链表中的重复元素"></a>83、<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></h3><h4 id="1-1-题目-5"><a href="#1-1-题目-5" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p><strong>示例 1：</strong></p><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/list1.jpg" class="" title="img"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/list2.jpg" class="" title="img"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序 <strong>排列</strong></li></ul></blockquote><h4 id="1-2-题解-5"><a href="#1-2-题解-5" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><h4 id="1-3-核心解法-2"><a href="#1-3-核心解法-2" class="headerlink" title="1.3 核心解法"></a>1.3 核心解法</h4><h3 id="86、分隔链表"><a href="#86、分隔链表" class="headerlink" title="86、分隔链表"></a>86、<a href="https://leetcode.cn/problems/partition-list/description/">分隔链表</a></h3><h4 id="1-1-题目-6"><a href="#1-1-题目-6" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给你一个链表的头节点 <code>head</code> 和一个特定值 <code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p><p>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p><p><strong>示例 1：</strong></p></blockquote><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/partition.jpg" class="" title="img"><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,4,3,2,5,2], x = 3</span><br><span class="line">输出：[1,2,2,4,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [2,1], x = 2</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>-200 &lt;= x &lt;= 200</code></li></ul></blockquote><h4 id="1-2-题解-6"><a href="#1-2-题解-6" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(head *ListNode, x <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="comment">// 存放小于x的链表的虚拟头结点</span></span><br><span class="line">    dummy1 := &amp;ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="comment">// 存放大于等于x的链表的虚拟头结点</span></span><br><span class="line">    dummy2 := &amp;ListNode&#123;Val: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="comment">// current1, current2负责生成结果链表</span></span><br><span class="line">    current1 := dummy1</span><br><span class="line">    current2 := dummy2</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 负责遍历原始链表</span></span><br><span class="line">    p := head</span><br><span class="line">    <span class="keyword">for</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p.Val &gt;= x &#123;</span><br><span class="line">            current2.Next = p</span><br><span class="line">            current2 = current2.Next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current1.Next = p</span><br><span class="line">            current1 = current1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将p的当前节点Next给断掉，不然会出现链表结构混乱</span></span><br><span class="line">        temNode := p.Next</span><br><span class="line">        p.Next = <span class="literal">nil</span></span><br><span class="line">        p = temNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并两个链表</span></span><br><span class="line">    <span class="comment">// 此时current1已经到达了它本身的尾节点</span></span><br><span class="line">    current1.Next = dummy2.Next</span><br><span class="line">    <span class="keyword">return</span> dummy1.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-核心解法-3"><a href="#1-3-核心解法-3" class="headerlink" title="1.3 核心解法"></a>1.3 核心解法</h4><blockquote><p>核心解法：</p><ul><li>双指针判断是否大于目标值</li></ul></blockquote><h3 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a>876. <a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间结点</a></h3><h4 id="1-1-题目-7"><a href="#1-1-题目-7" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给你单链表的头结点 <code>head</code> ，请你找出并返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1：</strong></p><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/lc-midlist1.jpg" class="" title="img"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[3,4,5]</span><br><span class="line">解释：链表只有一个中间结点，值为 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><img src="/2024/09/09/golang/leetcode/leetcode%E5%88%B7%E9%A2%98/lc-midlist2.jpg" class="" title="img"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5,6]</span><br><span class="line">输出：[4,5,6]</span><br><span class="line">解释：该链表有两个中间结点，值分别为 3 和 4 ，返回第二个结点。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表的结点数范围是 <code>[1, 100]</code></li><li><code>1 &lt;= Node.val &lt;= 100</code></li></ul></blockquote><h4 id="1-2-题解-7"><a href="#1-2-题解-7" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><blockquote><p>链表是：1,  2,  3,  4,  5</p><ul><li>第一次走：<ul><li>走之前：Slow &#x3D; 1, fast &#x3D; 1</li><li>走之后：Slow &#x3D; 2, fast &#x3D; 3</li></ul></li><li>第二次走：<ul><li>走之前：Slow &#x3D; 1, fast &#x3D; 1</li><li>走之后：Slow &#x3D; 3, fast &#x3D; 5</li></ul></li><li>第三次走：fast.Next &#x3D; nil,for循环退出，找到了中间节点</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">middleNode</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="comment">// 快慢指针初始化指向 head</span></span><br><span class="line">    fast := head</span><br><span class="line">    slow := head</span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 慢指针走一步</span></span><br><span class="line">        slow = slow.Next</span><br><span class="line">        <span class="comment">// 快指针走两步</span></span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 慢指针指向中间节点</span></span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><h4 id="1-1-题目-8"><a href="#1-1-题目-8" class="headerlink" title="1.1 题目"></a>1.1 题目</h4><blockquote><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p></blockquote><h4 id="1-2-题解-8"><a href="#1-2-题解-8" class="headerlink" title="1.2 题解"></a>1.2 题解</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 注意，不能返回nil，必须返回head，</span></span><br><span class="line">        <span class="comment">// 如果只有一个节点，那返回了nil的话，那就不符合翻转结果</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prev *ListNode</span><br><span class="line">    cur := head</span><br><span class="line">    <span class="keyword">for</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">        tempNext := cur.Next</span><br><span class="line">        <span class="comment">// 核心是让当前节点指向prev，然后不断地把当前节点拼接到prev的最前面实现链表翻转</span></span><br><span class="line">        cur.Next = prev</span><br><span class="line">        prev = cur</span><br><span class="line">        cur = tempNext</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB使用</title>
      <link href="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MongoDB介绍"><a href="#一、MongoDB介绍" class="headerlink" title="一、MongoDB介绍"></a>一、MongoDB介绍</h2><h3 id="1、什么是mongoDB"><a href="#1、什么是mongoDB" class="headerlink" title="1、什么是mongoDB"></a>1、什么是mongoDB</h3><blockquote><p>官网：<a href="https://www.mongodb.com/zh-cn">https://www.mongodb.com/zh-cn</a></p><p>mongoDB操作文档：<a href="https://www.mongodb.com/docs/v5.0/">https://www.mongodb.com/docs/v5.0/</a></p></blockquote><h4 id="1-1-mongoDB特点"><a href="#1-1-mongoDB特点" class="headerlink" title="1.1 mongoDB特点"></a>1.1 mongoDB特点</h4><blockquote><ul><li>MongoDB是一个开源、高性能、无模式的文档型数据库，是NoSQL数据库的其中一种，是最像关系型数据库的非关系型数据库<ul><li>无模式：是指mongoDB在创建表时，不需要像关系型数据库(mysql)预先指定字段列名</li></ul></li><li>MongoDB的数据结构比较散列，是一种类似于JSON格式的BSON，可以存储比较复杂的数据</li><li>MongoDB中记录的每一行都是由key&#x2F;value组成（也称为field:value）的数据结构，每一行是指一个文档，一个文档是指一个JSON对象</li><li>MongoDB中支持基本类型外，还支持数组、文档数组等</li></ul></blockquote><h3 id="2、创建mongoDB"><a href="#2、创建mongoDB" class="headerlink" title="2、创建mongoDB"></a>2、创建mongoDB</h3><blockquote><p>推荐使用docker创建mongoDB容器来学习，减少mongoDB安装的成本</p><p>docker镜像地址：<a href="https://hub.docker.com/_/mongo">https://hub.docker.com/_/mongo</a></p><ul><li>这个镜像中有如何创建容器、如何设置MongoDB容器用户和密码、如何将MongoDB容器数据落盘有详细记录</li></ul></blockquote><h4 id="2-1-拉取mongoDB镜像"><a href="#2-1-拉取mongoDB镜像" class="headerlink" title="2.1 拉取mongoDB镜像"></a>2.1 拉取mongoDB镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20230927111413287.png" class="" title="image-20230927111413287"><h4 id="2-2-创建mongoDB容器"><a href="#2-2-创建mongoDB容器" class="headerlink" title="2.2 创建mongoDB容器"></a>2.2 创建mongoDB容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name mongo -v /my/own/datadir:/data/db -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=mongo123 mongo</span><br></pre></td></tr></table></figure><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20231113122831862.png" class="" title="image-20231113122831862"><h4 id="2-3-连接mongoDB数据库"><a href="#2-3-连接mongoDB数据库" class="headerlink" title="2.3 连接mongoDB数据库"></a>2.3 连接mongoDB数据库</h4><blockquote><p>使用docker创建了mongodb的容器，下面来对mongoDB进行下连接验证</p><p>需要提前安装mongosh软件来连接mongoDB：<a href="https://www.mongodb.com/docs/mongodb-shell/">https://www.mongodb.com/docs/mongodb-shell/</a></p></blockquote><h5 id="2-3-1-无认证连接"><a href="#2-3-1-无认证连接" class="headerlink" title="2.3.1 无认证连接"></a>2.3.1 无认证连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无用户名与密码连接命令，连接后无法插入数据，会提示无权限</span></span><br><span class="line">mongosh <span class="string">&quot;mongodb://localhost:27017&quot;</span></span><br></pre></td></tr></table></figure><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20231113125825424.png" class="" title="image-20231113125825424"><blockquote><p>从上图看出，本地用docker创建的monngoDB容器，通过mongosh已经成功连接到了mongodb数据库中了，但因为无用户和密码连接，所以无法插入数据，会提示无权限</p></blockquote><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20231113132735269.png" class="" title="image-20231113132735269"><h5 id="2-3-2-认证连接"><a href="#2-3-2-认证连接" class="headerlink" title="2.3.2 认证连接"></a>2.3.2 认证连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户名与密码连接命令，连接后可以插入数据，下面命令输入后回车会提示需要输入密码</span></span><br><span class="line">mongosh <span class="string">&quot;mongodb://localhost:27017&quot;</span> --username mongoadmin --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># --username mongoadmin 表示mogodb用户名为mongoadmin</span></span><br><span class="line"><span class="comment"># --authenticationDatabase admin 表示授权用户名mongoadmin的用户有admin数据库权限，即mongoDB数据库的最高权限</span></span><br></pre></td></tr></table></figure><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20231113133114707.png" class="" title="image-20231113133114707"><blockquote><p>从上图看到有了admin权限，就可以插入数据了，并且返回了插入数据的结果，并且返回了一个insertedId，这是MongoDB为插入的数据生成的唯一ID</p></blockquote><h3 id="3、MongoDB与Mysql对比"><a href="#3、MongoDB与Mysql对比" class="headerlink" title="3、MongoDB与Mysql对比"></a>3、MongoDB与Mysql对比</h3><blockquote><p>mongoDB是最像关系型数据库的非关系型数据库，所以MongoDB的很多操作、数据库表的定义和mysql很类似</p></blockquote><img src="/2023/09/27/database/mongoDB%E4%BD%BF%E7%94%A8/mongoDB%E4%BD%BF%E7%94%A8/image-20231113133511163.png" class="" title="image-20231113133511163"><table><thead><tr><th>MYSQL概念</th><th>MongoDB概念</th><th>备注</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table（表）</td><td>collection（集合）</td><td>数据库表&#x2F;集合</td></tr><tr><td>row（行）</td><td>document（文档）</td><td>数据库表行&#x2F;文档</td></tr><tr><td>column（字段）</td><td>field（域）</td><td>数据库表字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB不支持</td></tr><tr><td></td><td>嵌入式文档</td><td>MongoDB通过嵌入式文档来代替多表连接</td></tr><tr><td>primary key(主键ID)</td><td>primary key(主键ID)</td><td>数据库表的主键ID，MongoDB会自动将_id设置为主键</td></tr></tbody></table><h3 id="4、MongoDB数据模型"><a href="#4、MongoDB数据模型" class="headerlink" title="4、MongoDB数据模型"></a>4、MongoDB数据模型</h3><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50道SQL练习题</title>
      <link href="/2023/09/11/database/sql_50_practice/sql_50_practice/"/>
      <url>/2023/09/11/database/sql_50_practice/sql_50_practice/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><blockquote><p>本篇主要是知乎的<a href="https://zhuanlan.zhihu.com/p/43289968">50道SQL练习题</a>和<a href="https://www.bilibili.com/video/BV1q4411G7Lw/?spm_id_from=333.999.0.0">B站对50道SQL练习题配套视频</a>的学习记录</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/38354000%EF%BC%88%E5%AF%B9%E9%A2%98%E7%9B%AE%E5%81%9A%E4%BA%86%E5%88%86%E7%B1%BB%EF%BC%89">https://zhuanlan.zhihu.com/p/38354000（对题目做了分类）</a></p><p><a href="https://zhuanlan.zhihu.com/p/43289968%EF%BC%88%E5%8E%9F%E5%A7%8B%E9%A2%98%E7%9B%AE%EF%BC%89">https://zhuanlan.zhihu.com/p/43289968（原始题目）</a></p></blockquote><h3 id="1、数据准备"><a href="#1、数据准备" class="headerlink" title="1、数据准备"></a>1、数据准备</h3><h4 id="1-1-sql表语句"><a href="#1-1-sql表语句" class="headerlink" title="1.1 sql表语句"></a>1.1 sql表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `student`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `student_id`    <span class="type">bigint</span>      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">    `student_name`  <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    `student_birth` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;学生生日&#x27;</span>,</span><br><span class="line">    `student_sex`   <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;学生性别&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`),</span><br><span class="line">    <span class="keyword">unique</span> index `idx_student_id` (`student_id`)</span><br><span class="line">) <span class="keyword">default</span> charset <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `course`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `course_id`   <span class="type">bigint</span>  <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line">    `course_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    `teacher_id`  <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;教师ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">unique</span> index `idx_course_id` (`course_id`)</span><br><span class="line">) <span class="keyword">default</span> charset <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 教师表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `teacher`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `teacher_id`   <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;教师ID&#x27;</span>,</span><br><span class="line">    `teacher_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;教师名称&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) <span class="keyword">default</span> charset <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 成绩表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> `score`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>     <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    `student_id`    <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">    `course_id`     <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line">    `student_score` <span class="type">int</span>        <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;学生成绩&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`)</span><br><span class="line">) <span class="keyword">default</span> charset <span class="operator">=</span> utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="1-2-sql插表数据"><a href="#1-2-sql插表数据" class="headerlink" title="1.2 sql插表数据"></a>1.2 sql插表数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入学生表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;赵雷&#x27;</span> , <span class="string">&#x27;1990-01-01&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;钱电&#x27;</span> , <span class="string">&#x27;1990-12-21&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;孙风&#x27;</span> , <span class="string">&#x27;1990-05-20&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;李云&#x27;</span> , <span class="string">&#x27;1990-08-06&#x27;</span> , <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;周梅&#x27;</span> , <span class="string">&#x27;1991-12-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;吴兰&#x27;</span> , <span class="string">&#x27;1992-03-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;郑竹&#x27;</span> , <span class="string">&#x27;1989-07-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(`student_id`,`student_name`,`student_birth`,`student_sex`) <span class="keyword">values</span>(<span class="string">&#x27;08&#x27;</span> , <span class="string">&#x27;王菊&#x27;</span> , <span class="string">&#x27;1990-01-20&#x27;</span> , <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="comment">-- 课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(`course_id`,`course_name`,`teacher_id`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;语文&#x27;</span> , <span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(`course_id`,`course_name`,`teacher_id`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;数学&#x27;</span> , <span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(`course_id`,`course_name`,`teacher_id`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;英语&#x27;</span> , <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 教师表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(`teacher_id`,`teacher_name`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(`teacher_id`,`teacher_name`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(`teacher_id`,`teacher_name`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 成绩表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(`student_id`,`course_id`,`student_score`) <span class="keyword">values</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure><blockquote><p>下图是上面四张表的关系图</p></blockquote><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/v2-86fd263583a6cead51675982c1735e68_720w.webp" class="" title="img"><h2 id="二、SQL题目"><a href="#二、SQL题目" class="headerlink" title="二、SQL题目"></a>二、SQL题目</h2><h3 id="1、查询最高成绩"><a href="#1、查询最高成绩" class="headerlink" title="1、查询最高成绩"></a>1、查询最高成绩</h3><blockquote><p>重点题目：</p><p>题目：查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号</p></blockquote><h4 id="1-1-分析"><a href="#1-1-分析" class="headerlink" title="1.1 分析"></a>1.1 分析</h4><blockquote><p>根据题目，我们可以构思出一张临时表，临时表字段有学号、课程01的成绩、课程02的成绩，那么执行一条最简单的sql中的大于判断，就可以得到我们需要的数据</p></blockquote><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911163909638.png" class="" title="image-20230911163909638"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 构思临时表</span></span><br><span class="line"><span class="comment">-- a、需要课程01的成绩以及学号</span></span><br><span class="line"><span class="keyword">select</span> student_id,student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id<span class="operator">=</span><span class="string">&#x27;01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b、需要课程02的成绩以及学号</span></span><br><span class="line"><span class="keyword">select</span> student_id,student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id<span class="operator">=</span><span class="string">&#x27;02&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c、将上面两个子查询进行inner join，以student_id为inner join的条件，那我们就有了一张上图表格中的临时表数据了</span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>, b.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> student_id, student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span>) a</span><br><span class="line">         <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> student_id, student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span>) b</span><br><span class="line">                    <span class="keyword">on</span> a.student_id <span class="operator">=</span> b.student_id;</span><br></pre></td></tr></table></figure><blockquote><p>从下图的结果来看：</p><ul><li>我们得到a表中学过01课程的学生以及分数，b表中学过02课程的学生以及分数</li><li>先忽略student_id列，因为都是a表和b表每一行都是一样的，所以我们只关心student_score这一列就可以，那就是得到了我们上面表格中的那张临时表了</li><li>接下来要做的就是进行下01课程成绩大于02课程成绩的判断就可以了</li></ul></blockquote><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911165106544.png" class="" title="image-20230911165106544"><h4 id="1-2-解答"><a href="#1-2-解答" class="headerlink" title="1.2 解答"></a>1.2 解答</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 最终题目sql</span></span><br><span class="line"><span class="keyword">select</span> a.student_id,a.student_score <span class="string">&#x27;01课成绩&#x27;</span>, b.student_score <span class="string">&#x27;02课成绩&#x27;</span></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> student_id, student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span>) a</span><br><span class="line">         <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> student_id, student_score <span class="keyword">from</span> score <span class="keyword">where</span> course_id <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span>) b</span><br><span class="line">                    <span class="keyword">on</span> a.student_id <span class="operator">=</span> b.student_id</span><br><span class="line"><span class="keyword">where</span> a.student_score <span class="operator">&gt;</span> b.student_score;</span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911165428201.png" class="" title="image-20230911165428201"><blockquote><p>根据上面分析中的inner join拿到的那张临时表再加下01课程成绩大于02课程成绩的判断，select 后面加上题目要求的学号，就得到了我们想要的数据</p></blockquote><h3 id="2、查询平均成绩"><a href="#2、查询平均成绩" class="headerlink" title="2、查询平均成绩"></a>2、查询平均成绩</h3><blockquote><p>重点</p><p>题目：查询平均成绩大于60分的学生的学号和平均成绩</p></blockquote><blockquote><p>在score表中就有我们需要的学号、成绩字段，那么不要多表连接查询了，对于平均成绩，使用avg这个聚合函数就可以得到平均成绩，平均成绩大于60可以使用group by的条件查询语句having来过滤出需要的数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student_id, <span class="built_in">avg</span>(student_score) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> student_id <span class="keyword">having</span> <span class="built_in">avg</span>(student_score) <span class="operator">&gt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911144225898.png" class="" title="image-20230911144225898"><h3 id="3、查询学生信息"><a href="#3、查询学生信息" class="headerlink" title="3、查询学生信息"></a>3、查询学生信息</h3><blockquote><p>查询所有学生的学号、姓名、选课数、总成绩</p></blockquote><h4 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a>3.1 分析</h4><blockquote><p>要查询上面的条件，那我们可以构思出一张临时表，像下面这样</p><p>临时表的字段：</p><ul><li>学号</li><li>姓名</li><li>课程编号</li><li>该课程成绩（单独一门课程的成绩）</li></ul><p>题目要求求出选课数、总成绩，那就涉及到了聚合函数，选课数用count，总成绩用sum</p></blockquote><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911133802206.png" class="" title="image-20230911133802206"><blockquote><p>构造临时表步骤</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在学生表可以拿到学号、姓名</span></span><br><span class="line"><span class="keyword">select</span> student_id,student_name <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在成绩表可以拿到课程编号、该课成绩</span></span><br><span class="line"><span class="keyword">select</span> course_id,student_score <span class="keyword">from</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以在两张表中看到都有student_id字段，那么使用左连接那就可以拿到student表和score表所有的字段了</span></span><br><span class="line"><span class="keyword">select</span> st.<span class="operator">*</span>,s.<span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">as</span> st <span class="keyword">left</span> <span class="keyword">join</span> score s <span class="keyword">on</span> st.student_id <span class="operator">=</span> s.student_id;</span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911140519243.png" class="" title="image-20230911140519243"><h4 id="3-2-疑问解答"><a href="#3-2-疑问解答" class="headerlink" title="3.2 疑问解答"></a>3.2 疑问解答</h4><blockquote><p>为什么要用左连接？</p><p>可以从上面左连接的结果看出，使用左连接，那么学生信息一定会有的，但是成绩不一定会有，也就表示该学生可能没有学该门课程，这是符合正常逻辑的，可以看到图中的王菊就是这样一条数据，这样就不会漏掉任何一个学生</p></blockquote><blockquote><p>如果使用了内连接会怎样？</p><p>可以看到王菊那一条数据没有了，因为内连接是按照只返回两个表中连接字段相等的行，因为王菊的学号是8，但是score表没有学号为8的数据，那么内连接就不会有王菊这条数据，相当于是漏数据了</p></blockquote><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911141249543.png" class="" title="image-20230911141249543"><h4 id="3-3-解答"><a href="#3-3-解答" class="headerlink" title="3.3 解答"></a>3.3 解答</h4><blockquote><p>最终的题目sql如下</p><p>为什么要使用group by呢？</p><ul><li>因为要统计选课数、总成绩，那第一时间想到的就是聚合函数，聚合函数一般都是和group by搭配使用的</li><li>注意点：<ul><li>没有在group by中出现的字段，不建议出现在select语句中，那为什么s.student_score可以在select中出现呢？<ul><li><code>SELECT</code>子句中可以包含任何可以被唯一确定的列。在我们的查询中，使用了聚合函数<code>SUM(s.student_score)</code>，这意味着虽然<code>student_score</code>这个字段没有出现在<code>GROUP BY</code>中，但是它实际上被<code>SUM()</code>函数处理过，系统会对每个分组中的所有<code>student_score</code>进行求和，求出的结果是唯一的，所以可以出现在<code>SELECT</code>中。</li><li>如果在<code>SELECT</code>子句中使用了没有出现在<code>GROUP BY</code>子句中的列，并且这个列没有被聚合函数处理，那你可能得到的结果就是不确定的，因为在每个分组中，这个列可能有多个不同的值，系统不知道应该选择哪一个，所以这种做法通常是不被推荐的</li></ul></li><li>因为题目要求还需要输出学生姓名，那么也需要将st.student_name放到group by语句后。</li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> st.student_id <span class="string">&#x27;学号&#x27;</span>, st.student_name <span class="string">&#x27;姓名&#x27;</span>, <span class="built_in">count</span>(s.student_id) <span class="string">&#x27;选课数&#x27;</span>, <span class="built_in">sum</span>(s.student_score) <span class="string">&#x27;总成绩&#x27;</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> st</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> score s <span class="keyword">on</span> st.student_id <span class="operator">=</span> s.student_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> st.student_id,st.student_name;</span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911141657041.png" class="" title="image-20230911141657041"><blockquote><p>可以看到结果已经出来，但是有个小瑕疵，就是选课数为0时，总成绩为null，一般不太希望出现null，那就可以使用case when语句来处理一下</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- case when语句，和if-else语句逻辑是一样的</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;男&#x27;</span></span><br><span class="line">     <span class="keyword">WHEN</span> sex <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span> <span class="keyword">END</span>   </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> st.student_id <span class="string">&#x27;学号&#x27;</span>, st.student_name <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>, <span class="built_in">count</span>(s.student_id) <span class="keyword">as</span> <span class="string">&#x27;选课数&#x27;</span>, <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> s.student_score <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> s.student_score <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">&#x27;总成绩&#x27;</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> st</span><br><span class="line">         <span class="keyword">left</span> <span class="keyword">join</span> score s <span class="keyword">on</span> st.student_id <span class="operator">=</span> s.student_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> st.student_id;</span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911141832188.png" class="" title="image-20230911141832188"><blockquote><p>思路：写多表sql时，就是先构造出自己想要的表字段，看看是一张表能不能搞定，如果一张表搞定不了，那就关联多张表来构思出一张我们想要字段的表，然后再进行数据处理</p><p>参考：<a href="https://juejin.cn/post/6844903902366662670?searchId=20230911141919C406DDF1D71FA5DBBC8F">https://juejin.cn/post/6844903902366662670?searchId=20230911141919C406DDF1D71FA5DBBC8F</a></p></blockquote><h3 id="4、查询老师个数"><a href="#4、查询老师个数" class="headerlink" title="4、查询老师个数"></a>4、查询老师个数</h3><blockquote><p>题目：查询姓“猴”的老师的个数</p></blockquote><blockquote><p>该题目主要考察聚合函数count和like这两个语法，比较简单，直接来看sql语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找姓猴的老师</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(teacher_id) <span class="keyword">from</span> `teacher` <span class="keyword">where</span> teacher_name <span class="keyword">like</span> <span class="string">&#x27;猴%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 因为教师表中没有姓猴的老师，所以个数为0</span></span><br></pre></td></tr></table></figure><img src="/2023/09/11/database/sql_50_practice/sql_50_practice/image-20230911131825496.png" class="" title="image-20230911131825496"><h3 id="5、查询未学过某门课"><a href="#5、查询未学过某门课" class="headerlink" title="5、查询未学过某门课"></a>5、查询未学过某门课</h3><blockquote><p>重点题目</p><p>题目：查询没学过“张三”老师课的学生的学号、姓名</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Langchain与OpenAI</title>
      <link href="/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/"/>
      <url>/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Langchain"><a href="#一、Langchain" class="headerlink" title="一、Langchain"></a>一、Langchain</h2><blockquote><p>langchain官网地址：<a href="https://python.langchain.com/docs/get_started/introduction.html">https://python.langchain.com/docs/get_started/introduction.html</a></p></blockquote><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>LangChain 是一个利用语言模型开发应用程序的框架，它使应用程序能够：</p><ul><li><p>Data-aware：将语言模型与其他数据源连接起来</p></li><li><p>Proxy：允许语言模型与其环境交互</p></li></ul><p>LangChain的主要价值部分：</p><ul><li><p>Components：用于处理语言模型的抽象概念，以及每个抽象概念的实现集合。无论您是否使用 LangChain 框架的其他部分，组件都是模块化的，易于使用。</p></li><li><p>Off-the-shelf chains：用于完成特定高级任务的组件结构化组合，现成的链可以让您轻松上手。对于更复杂的应用和细微的用例，组件可以轻松定制现有链或构建新链。</p></li></ul></blockquote><blockquote><p>LangChain 为下列模块提供了标准的、可扩展的接口和外部集成，这些模块的复杂程度从低到高依次排列：</p><ul><li><p>Model I&#x2F;O（模型输入输出）：语言模型接口</p></li><li><p>Retrieval（检索）：与特定应用数据的接口</p></li><li><p>Chains（链）：构建调用序列</p></li><li><p>Agents（代理）：让链根据高级指令选择要使用的工具</p></li><li><p>Memory（内存）：在链运行之间保持应用程序状态</p></li><li><p>Callbacks（回调）：记录任何链的中间步骤并进行流式处理</p></li></ul></blockquote><h3 id="2、安装Langchain"><a href="#2、安装Langchain" class="headerlink" title="2、安装Langchain"></a>2、安装Langchain</h3><blockquote><p>要安装所有集成所需的所有模块，请运行如下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install <span class="string">&quot;langchain[all]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、LLMs介绍"><a href="#3、LLMs介绍" class="headerlink" title="3、LLMs介绍"></a>3、LLMs介绍</h3><blockquote><p><strong>LLMs</strong>是Large Language Model的缩写。</p><p>LLMs语言模型分为两种类型，在LangChain中被称为：</p><ul><li>LLMs：这是一种语言模型，它接受一个字符串作为输入并返回一个字符串 </li><li>ChatModels：这是一种语言模型，它接受一系列消息作为输入，并返回一个消息</li></ul><p>LLMs的输入&#x2F;输出非常简单易懂 - 一个字符串。但是ChatModels呢？输入是一个ChatMessages的列表，输出是一个单独的ChatMessage。</p><p>一个ChatMessage有两个必需的组件：</p><ul><li>content：这是消息的内容。 </li><li>role：这是发出ChatMessage的实体的角色。</li></ul><p>LangChain提供了几个对象，便于区分不同的角色：</p><ul><li>HumanMessage：来自人&#x2F;用户的ChatMessage。 </li><li>AIMessage：来自AI&#x2F;助手的ChatMessage。 </li><li>SystemMessage：来自系统的ChatMessage。 </li><li>FunctionMessage：来自函数调用的ChatMessage。 </li><li>如果这些角色都不确切，还有一个ChatMessage类，您可以手动指定角色。</li></ul><p>LangChain为上面两个语言模型都提供了标准接口，但理解这种差异对构建给定语言模型的提示很有帮助。LangChain提供的标准接口有两种方法：</p><ul><li>predict：输入一个字符串，返回一个字符串。 </li><li>predict_messages（给ChatModels用）: 输入一系列消息，返回一个消息。</li></ul></blockquote><h3 id="4、Prompt模板"><a href="#4、Prompt模板" class="headerlink" title="4、Prompt模板"></a>4、Prompt模板</h3><blockquote><p>大多数 LLM 应用程序不会将用户输入直接传递到 LLM 中。通常，它们会将用户输入添加到一段较大的文本（称为提示模板）中，为手头的特定任务提供额外的上下文。</p><p>在前面的例子中，我们传递给模型的文本包含生成公司名称的指令。对于我们的应用程序来说，如果用户只需提供公司&#x2F;产品的描述，而无需向模型提供说明，那就再好不过了。</p><p>PromptTemplates 正好可以解决这个问题！它们捆绑了从用户输入到完全格式化提示的所有逻辑。一开始可以非常简单–例如，生成上述字符串的提示语可以是</p></blockquote><h4 id="4-1-prompt模板简单示例"><a href="#4-1-prompt模板简单示例" class="headerlink" title="4.1 prompt模板简单示例"></a>4.1 prompt模板简单示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt = PromptTemplate.from_template(<span class="string">&quot;What is a good name for a company that makes &#123;product&#125;?&quot;</span>)</span><br><span class="line">prompt.<span class="built_in">format</span>(product=<span class="string">&quot;colorful socks&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出，可以看到将&quot;colorful socks&quot;替换到了&#123;product&#125;中</span></span><br><span class="line">What <span class="keyword">is</span> a good name <span class="keyword">for</span> a company that makes colorful socks?</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt_template = PromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;Tell me a &#123;adjective&#125; joke about &#123;content&#125;.&quot;</span></span><br><span class="line">)</span><br><span class="line">prompt_template.<span class="built_in">format</span>(adjective=<span class="string">&quot;funny&quot;</span>, content=<span class="string">&quot;chickens&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="string">&quot;Tell me a funny joke about chickens.&quot;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-1-支持没有变量直接输出"><a href="#4-1-1-支持没有变量直接输出" class="headerlink" title="4.1.1 支持没有变量直接输出"></a>4.1.1 支持没有变量直接输出</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持没有变量直接输出</span></span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt_template = PromptTemplate.from_template(</span><br><span class="line"><span class="string">&quot;Tell me a joke&quot;</span></span><br><span class="line">)</span><br><span class="line">prompt_template.<span class="built_in">format</span>()</span><br></pre></td></tr></table></figure><h5 id="4-1-2-指定输入的变量值"><a href="#4-1-2-指定输入的变量值" class="headerlink" title="4.1.2 指定输入的变量值"></a>4.1.2 指定输入的变量值</h5><blockquote><p>可明确指定input_variables。input_variables是一个列表，里面的元素为模板需要替换的变量，当这些变量将与模板字符串中的变量进行比较，如果不匹配，就会出现异常。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">invalid_prompt = PromptTemplate(</span><br><span class="line">    <span class="comment"># input_variables 只有adjective，缺少content变量，输出报错</span></span><br><span class="line">    input_variables=[<span class="string">&quot;adjective&quot;</span>],</span><br><span class="line">    template=<span class="string">&quot;Tell me a &#123;adjective&#125; joke about &#123;content&#125;.&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(invalid_prompt.<span class="built_in">format</span>(adjective=<span class="string">&quot;funny&quot;</span>, content=<span class="string">&quot;chickens&quot;</span>))</span><br></pre></td></tr></table></figure><img src="/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/image-20230910225007662.png" class="" title="image-20230910225007662"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">invalid_prompt = PromptTemplate(</span><br><span class="line">    <span class="comment"># input_variables 有adjective、content变量，输出正常</span></span><br><span class="line">    input_variables=[<span class="string">&quot;adjective&quot;</span>, <span class="string">&quot;content&quot;</span>],</span><br><span class="line">    template=<span class="string">&quot;Tell me a &#123;adjective&#125; joke about &#123;content&#125;.&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(invalid_prompt.<span class="built_in">format</span>(adjective=<span class="string">&quot;funny&quot;</span>, content=<span class="string">&quot;chickens&quot;</span>))</span><br></pre></td></tr></table></figure><img src="/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/image-20230910225041108.png" class="" title="image-20230910225041108"><h4 id="4-2-prompt模板组合使用"><a href="#4-2-prompt模板组合使用" class="headerlink" title="4.2 prompt模板组合使用"></a>4.2 prompt模板组合使用</h4><blockquote><p>与原始字符串格式化相比，使用这些格式化有几个优点。</p><ul><li>可以 “部分 “删除变量–例如，一次只能格式化部分变量。</li><li>可以将它们组合在一起，轻松地将不同模板组合成一个提示符。</li></ul><p>PromptTemplates也可用于生成信息列表</p><ul><li>在这种情况下，提示不仅包含内容信息，还包含每条信息（其角色、在列表中的位置等）</li><li>最常见的情况是 ChatPromptTemplate 是 ChatMessageTemplate 的列表。</li><li>每个 ChatMessageTemplate 都包含如何格式化 ChatMessage 的说明–它的角色和内容。下面我们就来看看：</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.prompts.chat <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    SystemMessagePromptTemplate,</span><br><span class="line">    HumanMessagePromptTemplate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统消息模板</span></span><br><span class="line">template = <span class="string">&quot;You are a helpful assistant that translates &#123;input_language&#125; to &#123;output_language&#125;.&quot;</span></span><br><span class="line">system_message_prompt = SystemMessagePromptTemplate.from_template(template)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输出模板，也就是提问的问题</span></span><br><span class="line">human_template = <span class="string">&quot;&#123;text&#125;&quot;</span></span><br><span class="line">human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chatGPT提问的模板，组合上面的system_message_prompt、human_message_prompt</span></span><br><span class="line">chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])</span><br><span class="line"><span class="built_in">print</span>(chat_prompt.format_messages(input_language=<span class="string">&quot;English&quot;</span>, output_language=<span class="string">&quot;French&quot;</span>, text=<span class="string">&quot;I love programming.&quot;</span>))</span><br></pre></td></tr></table></figure><img src="/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/image-20230910225641989.png" class="" title="image-20230910225641989"><h2 id="X、ChatGPt遇到的问题"><a href="#X、ChatGPt遇到的问题" class="headerlink" title="X、ChatGPt遇到的问题"></a>X、ChatGPt遇到的问题</h2><h3 id="1、查出token长度"><a href="#1、查出token长度" class="headerlink" title="1、查出token长度"></a>1、查出token长度</h3><img src="/2023/09/10/ai/langchain%E4%B8%8Eopenai/langchain%E4%B8%8Eopenai/image-20230910221001040.png" class="" title="image-20230910221001040"><blockquote><p>解决:初始化AI时，不要穿max_token参数，就暂时不会有这个报错，但是具体原因未知，后续再调研</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Langchain </tag>
            
            <tag> openai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Gorm使用</title>
      <link href="/2023/03/18/golang/go_gorm%E4%BD%BF%E7%94%A8/go_gorm%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/18/golang/go_gorm%E4%BD%BF%E7%94%A8/go_gorm%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Gorm介绍"><a href="#一、Gorm介绍" class="headerlink" title="一、Gorm介绍"></a>一、Gorm介绍</h2>]]></content>
      
      
      <categories>
          
          <category> Go Gorm使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go常用技巧</title>
      <link href="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、构建Go应用docker镜像"><a href="#一、构建Go应用docker镜像" class="headerlink" title="一、构建Go应用docker镜像"></a>一、构建Go应用docker镜像</h2><h3 id="1、go官方镜像介绍"><a href="#1、go官方镜像介绍" class="headerlink" title="1、go官方镜像介绍"></a>1、go官方镜像介绍</h3><blockquote><p>go官方提供了官方镜像方便我们去构建go镜像，地址：<a href="https://hub.docker.com/_/golang">https://hub.docker.com/_&#x2F;golang</a></p><p>主要有三种镜像版本可供我们选择</p><ul><li><code>golang:&lt;version&gt;</code>:当不确定你的需求是什么，你可能想使用这个镜像</li><li><code>golang:&lt;version&gt;-alpine</code>：精简版的go镜像，可以构建出更小体积的go应用镜像</li><li><code>golang:&lt;version&gt;-windowsservercore</code>：服务于windows平台的构建镜像</li></ul></blockquote><h3 id="2、构建镜像选择"><a href="#2、构建镜像选择" class="headerlink" title="2、构建镜像选择"></a>2、构建镜像选择</h3><blockquote><p>我们可以选择不同go版本的镜像作为基础镜像进而构建出属于我们自己的go应用镜像</p><p>下文全部采用<code>golang:1.17.13-alpine3.16</code>作为基础镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull golang:1.17.13-alpine3.16</span><br></pre></td></tr></table></figure><blockquote><p>从下图可以看出<code>golang:1.17.13-alpine3.16</code>镜像大小为314M</p></blockquote><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211225231207.png" class="" title="image-20230211225231207"><h3 id="3、初次构建web应用镜像"><a href="#3、初次构建web应用镜像" class="headerlink" title="3、初次构建web应用镜像"></a>3、初次构建web应用镜像</h3><blockquote><p>下面是自行编写的docker镜像，采用了<code>golang:1.17.13-alpine3.16</code>作为了基础镜像，来构建web应用</p></blockquote><blockquote><p>下面是<code>main.go</code>的代码，提供了一个<code>/goods/</code>接口输出响应</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/goods&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>:  <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>: []<span class="type">string</span>&#123;<span class="string">&quot;跑步&quot;</span>, <span class="string">&quot;唱歌&quot;</span>, <span class="string">&quot;跳舞&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;date&quot;</span>: time.Now(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">srv := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler: router,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 服务连接</span></span><br><span class="line"><span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;listen: %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, os.Interrupt)</span><br><span class="line">&lt;-quit</span><br><span class="line">log.Println(<span class="string">&quot;Shutdown Server ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">if</span> err := srv.Shutdown(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Server Shutdown:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Server exiting&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面是构建web应用的dockerfile内容，对于其中的几个关键点进行下解释</p><ul><li><p>ENV GOPROXY <a href="https://goproxy.cn,direct/">https://goproxy.cn,direct</a></p><ul><li>设置go国内的代理，方便拉取依赖，否则同步下载项目依赖很慢</li></ul></li><li><p>go mod</p><ul><li>开启<code>go mod模式</code>来管理项目依赖</li></ul></li><li><p>upx</p><ul><li>upx是一种先进的可执行文件压缩工具，对于可执行程序可以有效减少体积，这里我们将构建出来go应用的体积再次压缩减少体积，这里不对upx进行过多介绍，详细可见：<a href="https://github.com/upx/upx">upx官网</a></li></ul></li><li><p>-ldflags&#x3D;”-s -w”</p><ul><li>go build时忽略符号表和调试信息，进而减少go应用体积</li><li>-s 忽略符号表和调试信息</li><li>-w 忽略DWARFv3调试信息，将无法使用gdb进行调试</li></ul></li><li><p>CMD [“.&#x2F;myweb”]</p><ul><li>表示基于此镜像启动的容器会自动执行go build的<code>myweb</code>可执行程序，也就是将我们的web应用启动起来了</li></ul></li></ul></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.17</span>.<span class="number">13</span>-alpine3.<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GOPROXY https://goproxy.cn,direct</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> upx .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> main.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod init github.com/myweb &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    go mod tidy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    go build -ldflags=<span class="string">&quot;-s -w&quot;</span> -o myweb main.go &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./upx -9 myweb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;./myweb&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始构建镜像</span></span><br><span class="line">docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211230839373.png" class="" title="image-20230211230839373"><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211230910301.png" class="" title="image-20230211230910301"><blockquote><p>可以看到构建出来的镜像比较大，达到了484MB，基于构建出来的myweb镜像启动一个容器来使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name myweb -p 8080:8080 myweb:v1</span><br></pre></td></tr></table></figure><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211231156524.png" class="" title="image-20230211231156524"><blockquote><p>可以看到服务正常启动了</p></blockquote><h3 id="4、瘦身构建web应用镜像"><a href="#4、瘦身构建web应用镜像" class="headerlink" title="4、瘦身构建web应用镜像"></a>4、瘦身构建web应用镜像</h3><blockquote><p>从第3步构建出web应用来看，构建出来myweb的镜像还是比较大的，那么在后续传输或构建的时候比较占用资源，那么如何优化镜像的大小呢？</p><ul><li>使用docker的多阶段构建：<ul><li>在<code>golang:1.17.13-alpine3.16</code>这个基础镜像中只做构建web应用但是不执行<code>CMD [&quot;./myweb&quot;]</code></li><li>将构建出来的<code>myweb</code>应用复制到<code>alpine</code>镜像中来构建最终myweb的镜像</li></ul></li></ul></blockquote><blockquote><p>为什么上面的办法可以？</p><ul><li>这里需要用到docker的多阶段构建知识<ul><li>Docker 17.05版本以后，官方就提供了一个新的特性：<code>Multi-stage builds</code>（多阶段构建）</li><li>使用多阶段构建，可以在一个 <code>Dockerfile</code> 中使用多个 FROM 语句。每个 FROM 指令都可以使用不同的基础镜像，并表示开始一个新的构建阶段。最终构建出来的镜像以最后一次的FROM镜像为准</li></ul></li><li>Alpine镜像<ul><li>Alpine Linux是一个超轻量级的发行版，大小大约5M左右，特别适合作为构建体积小应用的基础镜像</li></ul></li></ul></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用golang:1.17.13-alpine3.16构建出myweb的可执行程序</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.17</span>.<span class="number">13</span>-alpine3.<span class="number">16</span> AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GOPROXY https://goproxy.cn,direct</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> upx .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> main.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod init github.com/myweb &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    go mod tidy &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    go build -ldflags=<span class="string">&quot;-s -w&quot;</span> -o myweb main.go &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ./upx -9 myweb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上一部构建出来的myweb放到alpine中执行</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">  apk add tzdata &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">     apk del tzdata</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /build/myweb .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;./myweb&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>继续执行构建镜像命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始构建镜像，构建出</span></span><br><span class="line">docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure><blockquote><p>查看构建出来的镜像大小，从第三步的<code>484MB</code>直接减少到了<code>10.2MB</code>，体积减少了将近<code>98%</code>，这个瘦身的量是非常可观的</p></blockquote><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211232655842.png" class="" title="image-20230211232655842"><blockquote><p>基于构建出来的不到11M的镜像启动容器，然后访问<code>/goods/</code>接口返回的响应正常</p></blockquote><img src="/2023/02/10/golang/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/go%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/image-20230211231156524.png" class="" title="image-20230211231156524"><blockquote><p>至此到这里就达成了go应用构建的镜像的瘦身</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> go常用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node使用</title>
      <link href="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、node介绍"><a href="#一、node介绍" class="headerlink" title="一、node介绍"></a>一、node介绍</h2><h3 id="1、浏览器中的JavaScript"><a href="#1、浏览器中的JavaScript" class="headerlink" title="1、浏览器中的JavaScript"></a>1、浏览器中的JavaScript</h3><blockquote><p>浏览器中的javascript由两部分组成：</p><ul><li>JS核心语法<ul><li>变量</li><li>函数</li><li>对象</li><li>等等</li></ul></li><li>WEBAPI<ul><li>DOM操作</li><li>BOM操作</li><li>基于XMLHTTPRequest的ajax操作</li><li>等等</li></ul></li></ul></blockquote><blockquote><p>每个浏览器内置了DOM、BOM这样的API函数，因此浏览器中的JavaScript才可以调用</p></blockquote><blockquote><p>浏览器中的运行环境是指代码运行的所需必要环境，主要包括：</p><ul><li>V8引擎负责解析和执行javascript代码</li><li>内置API是由运行环境提供的特殊接口，只能在所需的运行环境中调用</li></ul></blockquote><h3 id="2、什么是node"><a href="#2、什么是node" class="headerlink" title="2、什么是node"></a>2、什么是node</h3><blockquote><p><a href="https://nodejs.org/zh-cn/">node.js</a>是一个基于Chrome V8 引擎的JavaScript运行环境</p><ul><li>浏览器是JavaScript的前端运行环境</li><li>node.js是JavaScript的后端运行环境</li><li>node.js中无法调用DOM和BOM等浏览器内置API</li></ul></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230121233525754.png" class="" title="image-20230121233525754"><blockquote><p>node.js可以做什么？</p><ul><li>能够构建web应用，比如express</li><li>可以构建跨平台应用，比如Electron</li><li>可以快速构建API接口，比如restify</li></ul></blockquote><h3 id="3、安装node-js"><a href="#3、安装node-js" class="headerlink" title="3、安装node.js"></a>3、安装node.js</h3><blockquote><p>从<a href="https://nodejs.org/zh-cn/">node.js</a>官网下载LTS(长期稳定版本)版本的node</p></blockquote><h3 id="4、node执行js代码"><a href="#4、node执行js代码" class="headerlink" title="4、node执行js代码"></a>4、node执行js代码</h3><blockquote><p>编写好如下js代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;node.js study&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>保存为后缀名为xxx.js的文件，然后使用命令行进行执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node xxx.js</span><br></pre></td></tr></table></figure><h2 id="二、node模块"><a href="#二、node模块" class="headerlink" title="二、node模块"></a>二、node模块</h2><h3 id="1、模块分类"><a href="#1、模块分类" class="headerlink" title="1、模块分类"></a>1、模块分类</h3><blockquote><p>node.js中的根据模块的不同，模块分为了3类，分别是：</p><ul><li>内置模块：由官方Node.js官方提供，例如fs、path、http等</li><li>自定义模块：由用户创建的每个.js文件，都是自定义模块</li><li>第三方模块：由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要下载</li></ul></blockquote><h3 id="2、加载模块"><a href="#2、加载模块" class="headerlink" title="2、加载模块"></a>2、加载模块</h3><h4 id="2-1-require方法"><a href="#2-1-require方法" class="headerlink" title="2.1 require方法"></a>2.1 require方法</h4><blockquote><p>使用require()方法，可以加在需要的内置模块、用户自定义模块、第三方模块进行使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载内置模块，比如：fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 加载用户的自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 加载第三方模块，第三方模块需要下载使用</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122201205567.png" class="" title="image-20230122201205567"><h3 id="3、模块作用域"><a href="#3、模块作用域" class="headerlink" title="3、模块作用域"></a>3、模块作用域</h3><blockquote><p>模块作用域：</p><ul><li>和函数作用域一样，在自定义模块中定义的变量、方法等成员，只能在当前模块内访问，这种模块级别的访问限制，叫做模块作用域</li><li>作用：<ul><li>模块作用域可以防止全局变量污染的问题</li></ul></li></ul></blockquote><h3 id="4、向外共享模块作用域中的成员"><a href="#4、向外共享模块作用域中的成员" class="headerlink" title="4、向外共享模块作用域中的成员"></a>4、向外共享模块作用域中的成员</h3><h4 id="4-1-module对象"><a href="#4-1-module对象" class="headerlink" title="4.1 module对象"></a>4.1 module对象</h4><blockquote><p>每个.js自定义模块中都有一个module对象，它里面存储了和当前模块相关的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>)</span><br></pre></td></tr></table></figure><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122202605066.png" class="" title="image-20230122202605066"><blockquote><ul><li>exports是Module对象的一个属性，可以导出当前.js文件的变量，给外部共享变量</li></ul></blockquote><h4 id="4-1-module-exports对象"><a href="#4-1-module-exports对象" class="headerlink" title="4.1 module.exports对象"></a>4.1 module.exports对象</h4><blockquote><ul><li>在自定义模块中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用</li><li>外界用require()方法导入自定义模块，得到的就是module.exports所指向的对象</li></ul></blockquote><h5 id="4-1-1-不使用module-exports导出对象"><a href="#4-1-1-不使用module-exports导出对象" class="headerlink" title="4.1.1 不使用module.exports导出对象"></a>4.1.1 不使用module.exports导出对象</h5><blockquote><p><code>01.js</code>没有显式的使用module.exports导出任何对象，那么当前文件的module对象中的exports属性就是一个空对象</p></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122203856652.png" class="" title="image-20230122203856652"><h5 id="4-1-2-使用module-exports导出对象"><a href="#4-1-2-使用module-exports导出对象" class="headerlink" title="4.1.2 使用module.exports导出对象"></a>4.1.2 使用module.exports导出对象</h5><blockquote><p>console.log打印对象不用JSON.stringify，否则都是[object object]</p><p>解决办法：<a href="https://www.cnblogs.com/xiaodongxier/p/consolelog-ru-he-da-yin-dui-xiang.html">https://www.cnblogs.com/xiaodongxier/p/consolelog-ru-he-da-yin-dui-xiang.html</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log打印对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)) </span><br></pre></td></tr></table></figure><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122204728093.png" class="" title="image-20230122204728093"><h4 id="4-1-3-exports对象"><a href="#4-1-3-exports对象" class="headerlink" title="4.1.3 exports对象"></a>4.1.3 exports对象</h4><blockquote><p>由于<code>module.exports</code>每次写起来有些麻烦，为了简化，node提供了<code>exports</code>对象，默认情况下<code>exports</code>和<code>module.exports</code>指向同一个对象，最终共享的结果，还是以<code>module.exports</code>指向的对象为准</p></blockquote><blockquote><p>下面验证确实为true</p></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122210148039.png" class="" title="image-20230122210148039"><h4 id="4-1-4-共享成员注意事项"><a href="#4-1-4-共享成员注意事项" class="headerlink" title="4.1.4 共享成员注意事项"></a>4.1.4 共享成员注意事项</h4><blockquote><ul><li>使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</li></ul></blockquote><blockquote><p>module.exports本身是一个空对象，那么给module.exports重新赋值了一个对象以后，module.exports本身就是重新赋值以后的对象，那么被require导入时，只会导入module.exports本身就是重新赋值以后的对象，不会导入exports声明的变量，因为require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</p></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122212528163.png" class="" title="image-20230122212528163"><blockquote><p>module.exports本身是一个空对象，那么给module.exports添加了一个hobby属性，module.exports本身就有了添加hobby这个属性，那么被require导入时，只会导入module.exports本身的hobby属性，不会导入exports声明的变量，因为require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</p></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122212841431.png" class="" title="image-20230122212841431"><blockquote><p>使用module.exports添加属性，使用exports添加属性，由于<code>exports</code>和<code>module.exports</code>指向同一个对象，那么被require导入时，会导入module.exports和exports这两个导出的变量</p></blockquote><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230122213144836.png" class="" title="image-20230122213144836"><h3 id="5、模块化规范"><a href="#5、模块化规范" class="headerlink" title="5、模块化规范"></a>5、模块化规范</h3><blockquote><p>node.js遵循了commonJS模块化规范，有如下规定：</p><ol><li>每个模块内容，module变量表示当前模块</li><li>module变量是一个对象，其中的exports(即module.exports)属性就是对外的接口</li><li>加载某个模块，就是加载该模块的module.exports属性，require方法用于加载模块</li></ol></blockquote><h2 id="三、包与npm"><a href="#三、包与npm" class="headerlink" title="三、包与npm"></a>三、包与npm</h2><h3 id="1、包的介绍"><a href="#1、包的介绍" class="headerlink" title="1、包的介绍"></a>1、包的介绍</h3><blockquote><p>node.js中的第三方模块就是包</p></blockquote><h4 id="1-1-包管理仓库"><a href="#1-1-包管理仓库" class="headerlink" title="1.1 包管理仓库"></a>1.1 包管理仓库</h4><blockquote><p>全球最大的包共享平台：<a href="https://www.npmjs.com/">https://www.npmjs.com</a>，可以用来搜索包</p></blockquote><blockquote><p>全球最大的包镜像地址：<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a>，可以用来下载第三方包到本地来使用</p></blockquote><h3 id="2、npm管理包"><a href="#2、npm管理包" class="headerlink" title="2、npm管理包"></a>2、npm管理包</h3><blockquote><p>安装包的命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">npm install 包的名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装简写</span></span><br><span class="line">npm i 包的名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装全局包</span></span><br><span class="line">npm i 包名名称 -g</span><br></pre></td></tr></table></figure><h4 id="2-1-npm装包后的文件"><a href="#2-1-npm装包后的文件" class="headerlink" title="2.1 npm装包后的文件"></a>2.1 npm装包后的文件</h4><blockquote><p>初次安装包完成以后，在项目文件夹下多了如下内容：</p><ul><li>node_modules的文件夹<ul><li>用来存放所有已安装到项目中的包，require导入第三方包时，就从这个目录中查找并加载包</li><li>在第三方包体积比较大的时候，不方便团队之间共享项目源代码，在共享是剔除node_modules文件夹</li></ul></li><li>package-lock.json的配置文件<ul><li>用来记录node_modules目录下的每一个包的下载信息，比如包的名称、版本、下载地址等</li></ul></li></ul></blockquote><h5 id="2-1-1-package-json文件"><a href="#2-1-1-package-json文件" class="headerlink" title="2.1.1 package.json文件"></a>2.1.1 package.json文件</h5><blockquote><p>npm规定在项目根目录中必须提供一个<code>package.json</code>的包管理配置文件，用来记录与项目相关的一些配置信息</p><ul><li>项目的名称、版本号、描述等</li><li>项目中用到了哪些包</li><li>哪些包只在开发期间用</li><li>哪些包在开发和部署是都需要用到</li></ul><p>注意：</p><ul><li>后续再项目开发中，一定要把node_modules文件夹加入到.gitignore忽略文件中</li></ul></blockquote><blockquote><p>npm包管理工具提供了一个快速创建<code>package.json</code>文件的快捷命令，而且只需要创建一次</p><ul><li>项目文件夹名称一定要用英文名称，不能是中文</li><li>运行<code>npm install</code>命令安装包的时候，npm会自动将包的名称和版本添加到<code>package.json</code>文件中</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230126170347281.png" class="" title="image-20230126170347281"><h5 id="2-1-2-package-json节点"><a href="#2-1-2-package-json节点" class="headerlink" title="2.1.2 package.json节点"></a>2.1.2 package.json节点</h5><blockquote><p>package.json文件的内容有时候会有两个节点</p></blockquote><blockquote><p>dependencies节点</p><ul><li><p>一般称为核心依赖包</p></li><li><p>在package.json文件中，有一个dependencies节点，专门用来记录使用npm install安装了哪些包，主要包含了包名和版本号</p></li></ul></blockquote><blockquote><p>devDependencies节点</p><ul><li><p>一般称为开发依赖包</p></li><li><p>如果有些包只在开发节点使用，上线不会用到，则把这些包记录到devDependencies节点</p></li><li><p>如果有些包需要再开发和项目上线都用到，则把这些包记录到dependencies节点</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装需要的包到devDependencies节点</span></span><br><span class="line">npm i 包名 -D </span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于如下命令</span></span><br><span class="line">bom install 包名 --save-dev</span><br></pre></td></tr></table></figure><h5 id="2-1-3-一次性安装所有包"><a href="#2-1-3-一次性安装所有包" class="headerlink" title="2.1.3 一次性安装所有包"></a>2.1.3 一次性安装所有包</h5><blockquote><p>拿到一个前端项目，如何一次性安装所有包？</p><p>在项目根目录下，与package.json文件同级，执行以下命令，npm包管理工具会先读取package.json中的dependencies节点，读取到记录的所有依赖的报名和版本号后，npm包管理工具会将所有依赖下载到当前项目中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="2-1-4-卸载包"><a href="#2-1-4-卸载包" class="headerlink" title="2.1.4 卸载包"></a>2.1.4 卸载包</h5><blockquote><p>卸载包的时候必须跟上包名，卸载包成功以后</p><ul><li>会将包从项目的node_modules文件中移除</li><li>会自动将包的信息从package.json的dependencies节点中移除</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure><h4 id="2-2-下载包慢解决"><a href="#2-2-下载包慢解决" class="headerlink" title="2.2 下载包慢解决"></a>2.2 下载包慢解决</h4><blockquote><p>查看当前下载包镜像源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><img src="/2023/01/21/web_dev/node/node%E4%BD%BF%E7%94%A8/image-20230126172600055.png" class="" title="image-20230126172600055"><blockquote><p>将下载包的镜像源切换为淘宝镜像源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><blockquote><p>最后再使用如下命令查看是否切换成功</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><h4 id="2-3-nrm工具"><a href="#2-3-nrm工具" class="headerlink" title="2.3 nrm工具"></a>2.3 nrm工具</h4><blockquote><p>主要是用来管理包的镜像源</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过npm包管理器，将nrm安装为全局工具</span></span><br><span class="line">npm i nrm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有可用镜像源</span></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换镜像源</span></span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加镜像源，registry为镜像源的别名，url为镜像源的地址</span></span><br><span class="line">nrm add registry http://registry.npm.frp.trmap.cn/</span><br></pre></td></tr></table></figure><h3 id="3、模块加载机制"><a href="#3、模块加载机制" class="headerlink" title="3、模块加载机制"></a>3、模块加载机制</h3><blockquote><ul><li>内置模块<ul><li>是由node.js官方提供，内置模块的加载优先级最高</li><li>即使项目的node_modules文件夹下有同名的包也会先加载内置模块</li></ul></li><li>自定义模块<ul><li>使用require()加载自定义模块，必须指定<code>./</code>和<code>../</code>开头的路径标识符，在加载自定义模块时，如果没有指定<code>./</code>和<code>../</code>路径标识符时，node会将它最为内置模块或第三方模块加载</li><li>node会按照如下顺序进行加载<ul><li>按确切的文件名进行加载</li><li>补全.js扩展名进行加载</li><li>补全.json扩展名进行加载</li><li>补全.node扩展名进行加载</li><li>加载失败，终端报错</li></ul></li></ul></li><li>第三方模块<ul><li>使用require()加载模块，没有指定<code>./</code>和<code>../</code>开头的路径标识符，也不是内置模块，那么node会从当前模块的父目录开始，尝试从&#x2F;node_modules文件夹加载第三方模块</li><li>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go LeetCode</title>
      <link href="/2022/10/24/golang/go_leetcode/go_leetcode/"/>
      <url>/2022/10/24/golang/go_leetcode/go_leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="一、学习笔记"><a href="#一、学习笔记" class="headerlink" title="一、学习笔记"></a>一、学习笔记</h2><blockquote><p><a href="https://books.halfrost.com/leetcode/">https://books.halfrost.com/leetcode/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go常用包</title>
      <link href="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/"/>
      <url>/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、air包"><a href="#一、air包" class="headerlink" title="一、air包"></a>一、air包</h2><h3 id="1、air介绍"><a href="#1、air介绍" class="headerlink" title="1、air介绍"></a>1、air介绍</h3><blockquote><p>air包可以用来热加载项目，而不用每次修改完代码以后重启项目，只要项目文件有修改，air会监听文件是否有修改，有修改的话就会自动重新编译运行</p><p>air特点：</p><ul><li>彩色的日志输出</li><li>自定义构建或必要的命令</li><li>支持外部子目录</li><li>在 Air 启动之后，允许监听新创建的路径</li><li>更棒的构建过程</li></ul><p>下图来自<a href="https://github.com/cosmtrek/air">官方介绍</a></p></blockquote><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/air_office.png" class="" title="air_office"><h3 id="2、air安装"><a href="#2、air安装" class="headerlink" title="2、air安装"></a>2、air安装</h3><blockquote><p>前提要在环境变量中设置<code>GOPATH</code>，因为下面两种方式都会安装在<code>GOPATH</code>目录下的bin目录中</p><p>如果没有设置<code>GOPATH</code>，那么下面两种方式安装完以后，在命令行输入<code>air</code>，会出现<code>air</code>命令未找到的错误</p></blockquote><blockquote><p>下图是GOPATH设置方式，mac中如果安装了iterm2，则需要修改的配置文件是<code>~/.zshrc</code></p></blockquote><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20221030234926824.png" class="" title="image-20221030234926824"><h4 id="2-1-使用go-install-个人推荐"><a href="#2-1-使用go-install-个人推荐" class="headerlink" title="2.1 使用go install(个人推荐)"></a>2.1 使用go install(个人推荐)</h4><blockquote><p>使用Go的版本为1.16或更高</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/cosmtrek/air@latest</span><br></pre></td></tr></table></figure><h4 id="2-2-使用install-sh-官方推荐"><a href="#2-2-使用install-sh-官方推荐" class="headerlink" title="2.2 使用install.sh(官方推荐)"></a>2.2 使用install.sh(官方推荐)</h4><blockquote><p>安装的binary文件会存在目录<code>GOPATH/bin/air</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s -- -b $(go <span class="built_in">env</span> GOPATH)/bin</span><br></pre></td></tr></table></figure><h3 id="3、air如何使用"><a href="#3、air如何使用" class="headerlink" title="3、air如何使用"></a>3、air如何使用</h3><p>1、首先，进入你的项目文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/your_project</span><br></pre></td></tr></table></figure><p>2、最简单的方法是执行air命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 优先在当前路径查找 `.air.toml` 后缀的文件，如果没有找到，则使用默认的</span><br><span class="line">air -c .air.toml</span><br></pre></td></tr></table></figure><p>您可以运行以下命令初始化，把默认配置添加到当前路径下的<code>.air.toml</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">air init</span><br></pre></td></tr></table></figure><p>4、在这之后，你只需执行 <code>air</code> 命令，无需添加额外的变量，它就能使用 <code>.air.toml</code> 文件中的配置了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">air</span><br></pre></td></tr></table></figure><p>5、下图是air启动后的样例</p><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20221031000739115.png" class="" title="image-20221031000739115"><p>6、air的debug模式会输出更详细信息，air使用<code>-d</code>命令</p><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20221031001024632.png" class="" title="image-20221031001024632"><h3 id="4、air内容模板"><a href="#4、air内容模板" class="headerlink" title="4、air内容模板"></a>4、air内容模板</h3><h4 id="4-1-官方模板"><a href="#4-1-官方模板" class="headerlink" title="4.1 官方模板"></a>4.1 官方模板</h4><blockquote><p>下图是官方提供的模板内容</p></blockquote><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Config file for [Air](https://github.com/cosmtrek/air) in TOML format</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Working directory</span></span><br><span class="line"><span class="comment"># . or absolute path, please note that the directories following must be under root.</span></span><br><span class="line"><span class="attr">root</span> = <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="attr">tmp_dir</span> = <span class="string">&quot;tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"><span class="comment"># Just plain old shell command. You could use `make` as well.</span></span><br><span class="line"><span class="attr">cmd</span> = <span class="string">&quot;go build -o ./tmp/main .&quot;</span></span><br><span class="line"><span class="comment"># Binary file yields from `cmd`.</span></span><br><span class="line"><span class="attr">bin</span> = <span class="string">&quot;tmp/main&quot;</span></span><br><span class="line"><span class="comment"># Customize binary, can setup environment variables when run your app.</span></span><br><span class="line"><span class="attr">full_bin</span> = <span class="string">&quot;APP_ENV=dev APP_USER=air ./tmp/main&quot;</span></span><br><span class="line"><span class="comment"># Watch these filename extensions.</span></span><br><span class="line"><span class="attr">include_ext</span> = [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;tpl&quot;</span>, <span class="string">&quot;tmpl&quot;</span>, <span class="string">&quot;html&quot;</span>]</span><br><span class="line"><span class="comment"># Ignore these filename extensions or directories.</span></span><br><span class="line"><span class="attr">exclude_dir</span> = [<span class="string">&quot;assets&quot;</span>, <span class="string">&quot;tmp&quot;</span>, <span class="string">&quot;vendor&quot;</span>, <span class="string">&quot;frontend/node_modules&quot;</span>]</span><br><span class="line"><span class="comment"># Watch these directories if you specified.</span></span><br><span class="line"><span class="attr">include_dir</span> = []</span><br><span class="line"><span class="comment"># Watch these files.</span></span><br><span class="line"><span class="attr">include_file</span> = []</span><br><span class="line"><span class="comment"># Exclude files.</span></span><br><span class="line"><span class="attr">exclude_file</span> = []</span><br><span class="line"><span class="comment"># Exclude specific regular expressions.</span></span><br><span class="line"><span class="attr">exclude_regex</span> = [<span class="string">&quot;_test\\.go&quot;</span>]</span><br><span class="line"><span class="comment"># Exclude unchanged files.</span></span><br><span class="line"><span class="attr">exclude_unchanged</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># Follow symlink for directories</span></span><br><span class="line"><span class="attr">follow_symlink</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># This log file places in your tmp_dir.</span></span><br><span class="line"><span class="attr">log</span> = <span class="string">&quot;air.log&quot;</span></span><br><span class="line"><span class="comment"># It&#x27;s not necessary to trigger build each time file changes if it&#x27;s too frequent.</span></span><br><span class="line"><span class="attr">delay</span> = <span class="number">0</span> <span class="comment"># ms</span></span><br><span class="line"><span class="comment"># Stop running old binary when build errors occur.</span></span><br><span class="line"><span class="attr">stop_on_error</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># Send Interrupt signal before killing process (windows does not support this feature)</span></span><br><span class="line"><span class="attr">send_interrupt</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># Delay after sending Interrupt signal</span></span><br><span class="line"><span class="attr">kill_delay</span> = <span class="number">500</span> <span class="comment"># ms</span></span><br><span class="line"><span class="comment"># Add additional arguments when running binary (bin/full_bin). Will run &#x27;./tmp/main hello world&#x27;.</span></span><br><span class="line"><span class="attr">args_bin</span> = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="comment"># Show log time</span></span><br><span class="line"><span class="attr">time</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[color]</span></span><br><span class="line"><span class="comment"># Customize each part&#x27;s color. If no color found, use the raw app log.</span></span><br><span class="line"><span class="attr">main</span> = <span class="string">&quot;magenta&quot;</span></span><br><span class="line"><span class="attr">watcher</span> = <span class="string">&quot;cyan&quot;</span></span><br><span class="line"><span class="attr">build</span> = <span class="string">&quot;yellow&quot;</span></span><br><span class="line"><span class="attr">runner</span> = <span class="string">&quot;green&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[misc]</span></span><br><span class="line"><span class="comment"># Delete tmp directory on exit</span></span><br><span class="line"><span class="attr">clean_on_exit</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-2-七米老师的模板"><a href="#4-2-七米老师的模板" class="headerlink" title="4.2 七米老师的模板"></a>4.2 七米老师的模板</h4><blockquote><p>下面是七米老师提供的air的模板内容<a href="https://www.liwenzhou.com/posts/Go/live_reload_with_air/">中文版本</a></p></blockquote><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [Air](https://github.com/cosmtrek/air) TOML 格式的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="comment"># 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下</span></span><br><span class="line"><span class="attr">root</span> = <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="attr">tmp_dir</span> = <span class="string">&quot;tmp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"><span class="comment"># 只需要写你平常编译使用的shell命令。你也可以使用 `make`</span></span><br><span class="line"><span class="comment"># Windows平台示例: cmd = &quot;go build -o tmp\main.exe .&quot;</span></span><br><span class="line"><span class="attr">cmd</span> = <span class="string">&quot;go build -o ./tmp/main .&quot;</span></span><br><span class="line"><span class="comment"># 由`cmd`命令得到的二进制文件名</span></span><br><span class="line"><span class="comment"># Windows平台示例：bin = &quot;tmp\main.exe&quot;</span></span><br><span class="line"><span class="attr">bin</span> = <span class="string">&quot;tmp/main&quot;</span></span><br><span class="line"><span class="comment"># 自定义执行程序的命令，可以添加额外的编译标识例如添加 GIN_MODE=release</span></span><br><span class="line"><span class="comment"># Windows平台示例：full_bin = &quot;tmp\main.exe&quot;</span></span><br><span class="line"><span class="attr">full_bin</span> = <span class="string">&quot;APP_ENV=dev APP_USER=air ./tmp/main&quot;</span></span><br><span class="line"><span class="comment"># 监听以下文件扩展名的文件.</span></span><br><span class="line"><span class="attr">include_ext</span> = [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;tpl&quot;</span>, <span class="string">&quot;tmpl&quot;</span>, <span class="string">&quot;html&quot;</span>]</span><br><span class="line"><span class="comment"># 忽略这些文件扩展名或目录</span></span><br><span class="line"><span class="attr">exclude_dir</span> = [<span class="string">&quot;assets&quot;</span>, <span class="string">&quot;tmp&quot;</span>, <span class="string">&quot;vendor&quot;</span>, <span class="string">&quot;frontend/node_modules&quot;</span>]</span><br><span class="line"><span class="comment"># 监听以下指定目录的文件</span></span><br><span class="line"><span class="attr">include_dir</span> = []</span><br><span class="line"><span class="comment"># 排除以下文件</span></span><br><span class="line"><span class="attr">exclude_file</span> = []</span><br><span class="line"><span class="comment"># 如果文件更改过于频繁，则没有必要在每次更改时都触发构建。可以设置触发构建的延迟时间</span></span><br><span class="line"><span class="attr">delay</span> = <span class="number">1000</span> <span class="comment"># ms</span></span><br><span class="line"><span class="comment"># 发生构建错误时，停止运行旧的二进制文件。</span></span><br><span class="line"><span class="attr">stop_on_error</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># air的日志文件名，该日志文件放置在你的`tmp_dir`中</span></span><br><span class="line"><span class="attr">log</span> = <span class="string">&quot;air_errors.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="comment"># 显示日志时间</span></span><br><span class="line"><span class="attr">time</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[color]</span></span><br><span class="line"><span class="comment"># 自定义每个部分显示的颜色。如果找不到颜色，使用原始的应用程序日志。</span></span><br><span class="line"><span class="attr">main</span> = <span class="string">&quot;magenta&quot;</span></span><br><span class="line"><span class="attr">watcher</span> = <span class="string">&quot;cyan&quot;</span></span><br><span class="line"><span class="attr">build</span> = <span class="string">&quot;yellow&quot;</span></span><br><span class="line"><span class="attr">runner</span> = <span class="string">&quot;green&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[misc]</span></span><br><span class="line"><span class="comment"># 退出时删除tmp目录</span></span><br><span class="line"><span class="attr">clean_on_exit</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="二、net-x2F-http包"><a href="#二、net-x2F-http包" class="headerlink" title="二、net&#x2F;http包"></a>二、net&#x2F;http包</h2><blockquote></blockquote><h3 id="1、net包介绍"><a href="#1、net包介绍" class="headerlink" title="1、net包介绍"></a>1、net包介绍</h3><h2 id="三、time包"><a href="#三、time包" class="headerlink" title="三、time包"></a>三、time包</h2><blockquote><p>时间概念解释</p></blockquote><blockquote><p><strong>GMT</strong>：Greenwich Mean Time [[1]</p><p>格林威治标准时间 ; 英国伦敦格林威治定为0°经线开始的地方，地球每15°经度 被分为一个时区，共分为24个时区，相邻时区相差一小时；例: 中国北京位于东八区，GMT时间比北京时间慢8小时。</p></blockquote><blockquote><p><strong>UTC</strong>: Coordinated Universal Time</p><p>世界协调时间；经严谨计算得到的时间，精确到秒，误差在0.9s以内， 是比GMT更为精确的世界时间</p></blockquote><blockquote><p><strong>DST</strong>: Daylight Saving Time</p><p>夏季节约时间，即夏令时；是为了利用夏天充足的光照而将时间调早一个小时，北美、欧洲的许多国家实行夏令时；</p></blockquote><blockquote><p><strong>CST</strong>:</p><p>四个不同时区的缩写：</p><ol><li>Central Standard Time (USA) UT-6:00   美国标准时间</li><li>Central Standard Time (Australia) UT+9:30  澳大利亚标准时间</li><li>China Standard Time UT+8:00     中国标准时间</li><li>Cuba Standard Time UT-4:00     古巴标准时间</li></ol></blockquote><h3 id="1、获取当前时间"><a href="#1、获取当前时间" class="headerlink" title="1、获取当前时间"></a>1、获取当前时间</h3><blockquote><p>用来表示时间，可以通过<code>time.Now()</code>函数获取本地的时间(东八区)，以及年、月、日等对象信息</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">&quot;now:%v\n&quot;</span>, now) <span class="comment">// now:2022-02-20 22:00:21.9037896 +0800 CST m=+0.002991401</span></span><br><span class="line">year := now.Year()</span><br><span class="line">fmt.Printf(<span class="string">&quot;year:%v\n&quot;</span>, year) </span><br><span class="line"></span><br><span class="line">month := now.Month()</span><br><span class="line">fmt.Printf(<span class="string">&quot;month:%v\n&quot;</span>, month)</span><br><span class="line"></span><br><span class="line">day := now.Day()</span><br><span class="line">fmt.Printf(<span class="string">&quot;day:%v\n&quot;</span>, day)</span><br><span class="line"></span><br><span class="line">hour := now.Hour()</span><br><span class="line">fmt.Printf(<span class="string">&quot;hour:%v\n&quot;</span>, hour)</span><br><span class="line"></span><br><span class="line">minute := now.Minute()</span><br><span class="line">fmt.Printf(<span class="string">&quot;minute:%v\n&quot;</span>, minute)</span><br><span class="line"></span><br><span class="line">second := now.Second()</span><br><span class="line">fmt.Printf(<span class="string">&quot;second:%v\n&quot;</span>, second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、获取时间戳"><a href="#2、获取时间戳" class="headerlink" title="2、获取时间戳"></a>2、获取时间戳</h3><blockquote><p>时间戳是最长用的一个时间格式</p><p>表示从1970年至当前时间的总毫秒数，被称为<code>unix时间戳</code></p><p>使用<code>now.Unix()</code>获取当前时间戳</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line"><span class="comment">// 秒时间戳</span></span><br><span class="line">timeStamp1 := now.Unix()</span><br><span class="line">fmt.Printf(<span class="string">&quot;timeStamp1:%v\n&quot;</span>, timeStamp1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 毫秒时间戳</span></span><br><span class="line">timeStamp2 := (now.Unix()) * <span class="number">1000</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;timeStamp2:%v\n&quot;</span>, timeStamp2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 纳秒时间戳</span></span><br><span class="line">timeStamp3 := now.UnixNano()</span><br><span class="line">fmt.Printf(<span class="string">&quot;timeStamp3:%v\n&quot;</span>, timeStamp3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、时间间隔常量"><a href="#3、时间间隔常量" class="headerlink" title="3、时间间隔常量"></a>3、时间间隔常量</h3><blockquote><p><code>time</code>包可以用来快速获取一个时间的常量</p><p>时间间隔只有时、分、秒，没有天、年、日</p></blockquote><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220220221753457.png" class="" title="image-20220220221753457"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 时间间隔秒数, 1秒</span></span><br><span class="line">sec := time.Second</span><br><span class="line">fmt.Printf(<span class="string">&quot;sec:%v\n&quot;</span>, sec) <span class="comment">// 1s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间间隔分, 1分</span></span><br><span class="line">min := time.Minute</span><br><span class="line">fmt.Printf(<span class="string">&quot;min:%v\n&quot;</span>, min) <span class="comment">// 1m0s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间间隔小时, 1小时</span></span><br><span class="line">hour := time.Hour</span><br><span class="line">fmt.Printf(<span class="string">&quot;hour:%v\n&quot;</span>, hour) <span class="comment">// 1h0m0s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-时间后延Add"><a href="#3-1-时间后延Add" class="headerlink" title="3.1 时间后延Add"></a>3.1 时间后延Add</h4><blockquote><p>时间可以往后延续</p><p><code>now.Add()</code>函数传参里就是对应的时间数，可以是时分秒</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 时间间隔小时, 1小时</span></span><br><span class="line">hour := time.Hour</span><br><span class="line">fmt.Printf(<span class="string">&quot;hour:%v\n&quot;</span>, hour) <span class="comment">// 1h0m0s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 24小时以后，需要先拿到当前时间，再去当前时间的基础上再添加</span></span><br><span class="line">now := time.Now()</span><br><span class="line">afterTime := now.Add(<span class="number">24</span> * (time.Hour))</span><br><span class="line">fmt.Printf(<span class="string">&quot;afterTime:%v\n&quot;</span>, afterTime)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-时间格式化"><a href="#3-2-时间格式化" class="headerlink" title="3.2 时间格式化"></a>3.2 时间格式化</h4><h5 id="3-2-1-当前时间转换为字符串时间"><a href="#3-2-1-当前时间转换为字符串时间" class="headerlink" title="3.2.1 当前时间转换为字符串时间"></a>3.2.1 当前时间转换为字符串时间</h5><blockquote><p><code>go</code>语言中使用时间模块的<code>Format</code>进行格式化，但是不是常见的<code>%Y-%m-%d %X</code>，而是用<code>20061234</code>来表示，因为<code>go</code>语言诞生于2006年1月2号15点04分</p><p>时间格式化是将时间对象转换为字符串类型时间</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 于常见格式对比</span></span><br><span class="line">Y   mdHMS</span><br><span class="line"><span class="number">2006</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 15:04:05表示24小时计时法</span></span><br><span class="line"><span class="comment">// 03:04:05表示12小时计时法，可以添加AM/PM用来表示上午或下午</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化时间</span></span><br><span class="line">str1 := now.Format(<span class="string">&quot;2006-01-02 03:04&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str1:%v\n&quot;</span>, str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 15:04:05表示24小时计时法</span></span><br><span class="line"><span class="comment">// 03:04:05表示12小时计时法，可以添加AM/PM用来表示上午或下午</span></span><br><span class="line">str2 := now.Format(<span class="string">&quot;2006/01/02 15:04:05&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str2:%v\n&quot;</span>, str2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-字符串时间转换为时间戳-parse-x2F-ParseInLocation"><a href="#3-2-2-字符串时间转换为时间戳-parse-x2F-ParseInLocation" class="headerlink" title="3.2.2 字符串时间转换为时间戳(parse&#x2F;ParseInLocation)"></a>3.2.2 字符串时间转换为时间戳(parse&#x2F;ParseInLocation)</h5><blockquote><p><code>time.Parse()</code> 按照对应的格式解析字符串类型的时间，再转换为时间戳</p><p><code>Parse</code>函数：</p><ul><li>解析一个格式化的时间字符串并返回它代表的时间</li><li>如果缺少表示时区的信息，Parse会将时区设置为UTC<ul><li>当解析具有时区缩写的时间字符串时，如果该时区缩写具有已定义的时间偏移量，会使用该偏移量。如果时区缩写是”UTC”，会将该时间视为UTC时间，不考虑Location</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// timeObj 是返回了字符串类型的时间格式</span></span><br><span class="line">timeObj, err := time.Parse(<span class="string">&quot;2006-01-02&quot;</span>, <span class="string">&quot;2010-10-10&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;parse time failed:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;timeObj:%v\n&quot;</span>, timeObj) <span class="comment">// 2010-10-10 00:00:00 +0000 UTC</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;timeObj:%v\n&quot;</span>, timeObj.Unix()) <span class="comment">// 1286668800</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>time.ParseInLocation()</code>和<code>time.Parse()</code>的区别</p><ul><li>第一，当缺少时区信息时，Parse将时间解释为UTC时间，而ParseInLocation将返回值的Location设置为loc，即作为本地的时区</li><li>第二，当时间字符串提供了时区偏移量信息时，Parse会尝试去匹配本地时区，而ParseInLocation会去匹配loc</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ParseInLocation源码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseInLocation</span><span class="params">(layout, value <span class="type">string</span>, loc *Location)</span></span> (Time, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">layout: 布局;安排，用来指定时间的格式</span></span><br><span class="line"><span class="comment"> value: 需要转换的时间字符串</span></span><br><span class="line"><span class="comment"> loc: 指定时区</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>下面代码可以看出来:</p><ul><li><code>Parse</code>函数转换出来的时区是<code>+0000 UTC</code>时间，不是东八区</li><li><code>time.LoadLocation</code>先加载时区，再将获取的时区值传递给<code>ParseInLocation</code>函数，这样转换出来的就是东八区时间</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nowTime := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">&quot;nowTime:%v\n\n&quot;</span>, nowTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动指定一个时间，计算差值</span></span><br><span class="line">specTime := <span class="string">&quot;2019-12-22 12:12:12&quot;</span></span><br><span class="line">specTimeFmt, _ := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, specTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到specTimeFmt:2022-02-22 13:12:12 +0000 UTC， 默认不是东八区时间</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;specTimeFmt:%v\n&quot;</span>, specTimeFmt)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先加载时区，东八区</span></span><br><span class="line">loc, _ := time.LoadLocation(<span class="string">&quot;Asia/ShangHai&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再将时区传递给ParseInLoaction函数，这样转换出来的时间格式时区也是东八区</span></span><br><span class="line">specTimeFmtNew, _ := time.ParseInLocation(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, specTime, loc)</span><br><span class="line">fmt.Printf(<span class="string">&quot;\nspecTimeFmtNew:%v\n&quot;</span>, specTimeFmtNew)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-3-时间戳转换为字符串时间"><a href="#3-2-3-时间戳转换为字符串时间" class="headerlink" title="3.2.3 时间戳转换为字符串时间"></a>3.2.3 时间戳转换为字符串时间</h5><blockquote><p>使用<code>time.Unix(时间戳, 0)</code>转为字符串可读的时间格式</p><ul><li><code>0</code>表示一个标志位</li><li><code>time.Unix()</code>函数返回的对象继续可以调用<code>Format</code>函数进行时间格式化</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line">timeStamp1 := now.Unix()</span><br><span class="line">fmt.Printf(<span class="string">&quot;timeStamp1:%v\n&quot;</span>, timeStamp1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳转换为字符串时间</span></span><br><span class="line">cu := time.Unix(timeStamp1, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;cu:%v\n&quot;</span>, cu) <span class="comment">// 2022-02-20 22:50:47 +0800 CST</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cu对象继续调用Format方法进行格式化时间</span></span><br><span class="line">fcu := cu.Format(<span class="string">&quot;2006/01/02 15:04:05&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fcu:%v\n&quot;</span>, fcu) <span class="comment">// 2022/02/20 22:50:47</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、time-Sleep"><a href="#4、time-Sleep" class="headerlink" title="4、time.Sleep"></a>4、time.Sleep</h3><blockquote><p>下面是<code>Sleep</code>的源码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sleep源码</span></span><br><span class="line"><span class="comment">// Sleep pauses the current goroutine for at least the duration d.</span></span><br><span class="line"><span class="comment">// A negative or zero duration causes Sleep to return immediately.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sleep</span><span class="params">(d Duration)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Duration源码</span></span><br><span class="line"><span class="comment">// A Duration represents the elapsed time between two instants</span></span><br><span class="line"><span class="comment">// as an int64 nanosecond count. The representation limits the</span></span><br><span class="line"><span class="comment">// largest representable duration to approximately 290 years.</span></span><br><span class="line"><span class="keyword">type</span> Duration <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">minDuration Duration = <span class="number">-1</span> &lt;&lt; <span class="number">63</span></span><br><span class="line">maxDuration Duration = <span class="number">1</span>&lt;&lt;<span class="number">63</span> - <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>从源码可以看出来，Sleep函数需要传入的形参类型是<code>Duration</code>，所以不能将一个<code>int</code>类型的变量传给它，需要进行转换</p><p>直接在<code>Sleep()</code>函数里只写数字，表示单位是<code>纳秒</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 时间间隔</span></span><br><span class="line">n := <span class="number">5</span></span><br><span class="line"><span class="comment">// 不能直接给Sleep里传入time.Sleep(n)，需要先进行类型转换</span></span><br><span class="line"><span class="comment">// 下面是休息了5s</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;5s前开始了:%v\n&quot;</span>, time.Now())</span><br><span class="line">time.Sleep(time.Duration(n) * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;5s后结束了:%v\n&quot;</span>, time.Now())</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;3s前开始了:%v\n&quot;</span>, time.Now())</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;3s后结束了:%v\n&quot;</span>, time.Now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220220230924765.png" class="" title="image-20220220230924765"><h3 id="5、时间差Sub"><a href="#5、时间差Sub" class="headerlink" title="5、时间差Sub"></a>5、时间差Sub</h3><blockquote><p>利用<code>Sub</code>函数可以快速计算出两个时间的差值</p><p>需要注意的是，<code>Sub</code>时，开始时间、结束时间的时区一定要一致</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间差值 := 结束时间.Sub(开始时间)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nowTime := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">&quot;nowTime:%v\n&quot;</span>, nowTime)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 今天和两天后的时间差</span></span><br><span class="line">dt := afterTime.Sub(nowTime)</span><br><span class="line">fmt.Printf(<span class="string">&quot;dt:%v\n&quot;</span>, dt)</span><br></pre></td></tr></table></figure><h2 id="四、filepath包"><a href="#四、filepath包" class="headerlink" title="四、filepath包"></a>四、filepath包</h2><blockquote><p>文档地址：<a href="https://pkg.go.dev/path/filepath">https://pkg.go.dev/path/filepath</a></p></blockquote><h2 id="五、os包"><a href="#五、os包" class="headerlink" title="五、os包"></a>五、os包</h2><blockquote><p><a href="https://pkg.go.dev/os">os包</a>提供了操作系统函数的不依赖平台的接口。设计为Unix风格的，虽然错误处理是go风格的；失败的调用会返回错误值而非错误码。</p><p>通常错误值里包含更多信息:</p><ul><li>例如，如果某个使用一个文件名的调用（如Open、Stat）失败了，打印错误时会包含该文件名，错误类型将为*PathError，其内部可以解包获得更多信息。</li><li>os包的接口规定为在所有操作系统中都是一致的。非公用的属性可以从操作系统特定的<a href="http://godoc.org/syscall">syscall</a>包获取。</li></ul></blockquote><h2 id="六、类型转换包"><a href="#六、类型转换包" class="headerlink" title="六、类型转换包"></a>六、类型转换包</h2><blockquote><p>Go语言中可以对基础数据类型与字符串之间进行相互转换</p></blockquote><h3 id="1、string方法"><a href="#1、string方法" class="headerlink" title="1、string方法"></a>1、string方法</h3><blockquote><p>string是go的内置方法，不需要引包，直接调用即可</p><p>string方法不能将数字转换为string</p><ul><li>下面代码里因为string会拿着传进来的数字根据utf-8编码去找97对应的符号了，所以是a</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="type">int32</span>(<span class="number">97</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// string方法不能将数字转换为string，因为string会拿着传进来的数字根据utf-8编码去找97对应的符号了，所以是a</span></span><br><span class="line">ret := <span class="type">string</span>(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v\n&quot;</span>, ret) <span class="comment">// &quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、fmt包"><a href="#2、fmt包" class="headerlink" title="2、fmt包"></a>2、fmt包</h3><blockquote><p>fmt.Sprintf支持类型转换，比如：转换数字为string</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="type">int32</span>(<span class="number">97</span>)</span><br><span class="line"><span class="comment">// fmt.Sprintf转换数字为string</span></span><br><span class="line">ret1 := fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret1 = %#v\n&quot;</span>, ret1) <span class="comment">// &quot;97&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、strconv包"><a href="#3、strconv包" class="headerlink" title="3、strconv包"></a>3、strconv包</h3><blockquote><p>strconv包实现了基本数据类型和其(其是指基本数据类型)字符串之间的相互转换</p></blockquote><h4 id="3-1-ParseInt字符串转数字"><a href="#3-1-ParseInt字符串转数字" class="headerlink" title="3.1 ParseInt字符串转数字"></a>3.1 ParseInt字符串转数字</h4><blockquote><p>使用<code>ParseInt</code>方法进行转换，返回的值的类型都是<code>int64</code></p><ul><li>需要注意的是，<code>ParseInt</code>方法里的<code>bitSize</code>如果指定为了32位，返回结果是int64，那么可以用int32再把结果从int64强制转换为int32，这样结果精度就不会丢</li><li>当bitSize为0时，表示是int类型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ParseInt interprets a string s in the given base (0, 2 to 36) and</span></span><br><span class="line"><span class="comment">// bit size (0 to 64) and returns the corresponding value i.</span></span><br><span class="line"><span class="comment">// ParseInt在给定的base（0，2到36）和 bit 大小（0到64）中解释一个字符串s，并返回相应的值i。</span></span><br><span class="line"><span class="comment">// 位数（0-64），并返回相应的值i。</span></span><br><span class="line"><span class="comment">// The string may begin with a leading sign: &quot;+&quot; or &quot;-&quot;.</span></span><br><span class="line"><span class="comment">// 字符串可以以一个前导符号开始。&quot;+&quot;或&quot;-&quot;。</span></span><br><span class="line"><span class="comment">// If the base argument is 0, the true base is implied by the string&#x27;s</span></span><br><span class="line"><span class="comment">// prefix following the sign (if present): 2 for &quot;0b&quot;, 8 for &quot;0&quot; or &quot;0o&quot;,</span></span><br><span class="line"><span class="comment">// 16 for &quot;0x&quot;, and 10 otherwise. Also, for argument base 0 only,</span></span><br><span class="line"><span class="comment">// underscore characters are permitted as defined by the Go syntax for</span></span><br><span class="line"><span class="comment">// integer literals.</span></span><br><span class="line"><span class="comment">// 如果基数参数为0，则真正的基数是由字符串的</span></span><br><span class="line"><span class="comment">// 符号后面的前缀（如果存在）：2代表 &quot;0b&quot;，8代表 &quot;0 &quot;或 &quot;0o&quot;。</span></span><br><span class="line"><span class="comment">// 16代表 &quot;0x&quot;，否则就是10。另外，仅对参数base 0而言。</span></span><br><span class="line"><span class="comment">// 允许使用下划线字符，这是由Go的语法定义的</span></span><br><span class="line"><span class="comment">// 整数字元。</span></span><br><span class="line"><span class="comment">// The bitSize argument specifies the integer type</span></span><br><span class="line"><span class="comment">// that the result must fit into. Bit sizes 0, 8, 16, 32, and 64</span></span><br><span class="line"><span class="comment">// correspond to int, int8, int16, int32, and int64.</span></span><br><span class="line"><span class="comment">// If bitSize is below 0 or above 64, an error is returned.</span></span><br><span class="line"><span class="comment">// 比特尺寸参数指定了结果必须符合的整数类型。</span></span><br><span class="line"><span class="comment">// 结果必须符合的整数类型。比特大小为0、8、16、32和64</span></span><br><span class="line"><span class="comment">// 对应于int、int8、int16、int32和int64。</span></span><br><span class="line"><span class="comment">// 如果bitSize低于0或高于64，将返回一个错误。</span></span><br><span class="line"><span class="comment">// The errors that ParseInt returns have concrete type *NumError</span></span><br><span class="line"><span class="comment">// and include err.Num = s. If s is empty or contains invalid</span></span><br><span class="line"><span class="comment">// digits, err.Err = ErrSyntax and the returned value is 0;</span></span><br><span class="line"><span class="comment">// if the value corresponding to s cannot be represented by a</span></span><br><span class="line"><span class="comment">// signed integer of the given size, err.Err = ErrRange and the</span></span><br><span class="line"><span class="comment">// returned value is the maximum magnitude integer of the</span></span><br><span class="line"><span class="comment">// appropriate bitSize and sign.</span></span><br><span class="line"><span class="comment">// ParseInt返回的错误有具体类型*NumError</span></span><br><span class="line"><span class="comment">// 如果s是空的或者包含无效的数字，err.Er就会返回错误。</span></span><br><span class="line"><span class="comment">// err.Err = ErrSyntax，返回值为0。</span></span><br><span class="line"><span class="comment">// 如果对应于s的值不能由给定的有符号整数表示</span></span><br><span class="line"><span class="comment">// 如果s对应的值不能由给定大小的有符号整数表示，err.Err = ErrRange，返回值为0。</span></span><br><span class="line"><span class="comment">// err.Err = ErrRange，并且返回值是最大量级的整数。</span></span><br><span class="line"><span class="comment">// 适当的bitSize和符号。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseInt</span><span class="params">(s <span class="type">string</span>, base <span class="type">int</span>, bitSize <span class="type">int</span>)</span></span> (i <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> fnParseInt = <span class="string">&quot;ParseInt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, syntaxError(fnParseInt, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pick off leading sign.</span></span><br><span class="line">s0 := s</span><br><span class="line">neg := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span> &#123;</span><br><span class="line">s = s[<span class="number">1</span>:]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">neg = <span class="literal">true</span></span><br><span class="line">s = s[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert unsigned and check range.</span></span><br><span class="line"><span class="keyword">var</span> un <span class="type">uint64</span></span><br><span class="line">un, err = ParseUint(s, base, bitSize)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err.(*NumError).Err != ErrRange &#123;</span><br><span class="line">err.(*NumError).Func = fnParseInt</span><br><span class="line">err.(*NumError).Num = s0</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bitSize == <span class="number">0</span> &#123;</span><br><span class="line">bitSize = IntSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cutoff := <span class="type">uint64</span>(<span class="number">1</span> &lt;&lt; <span class="type">uint</span>(bitSize<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">if</span> !neg &amp;&amp; un &gt;= cutoff &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">int64</span>(cutoff - <span class="number">1</span>), rangeError(fnParseInt, s0)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> neg &amp;&amp; un &gt; cutoff &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="type">int64</span>(cutoff), rangeError(fnParseInt, s0)</span><br><span class="line">&#125;</span><br><span class="line">n := <span class="type">int64</span>(un)</span><br><span class="line"><span class="keyword">if</span> neg &#123;</span><br><span class="line">n = -n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 从字符串中解析对应的数字数据，字符串不能有非数字的字符</span></span><br><span class="line">str := <span class="string">&quot;100&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// str是需要转换的字符串</span></span><br><span class="line">    <span class="comment">// 10表示转换成10进制</span></span><br><span class="line">    <span class="comment">// 64表示结果必须符合的整数类型，也就是10进制的64位</span></span><br><span class="line">ret, err := strconv.ParseInt(str, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;转换失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v ret type=%T\n&quot;</span>, ret, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">执行结果</span></span><br><span class="line"><span class="comment">ret=100 ret type=int64</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>注意字符串里面不能有非数字的字符，否则会报错</p></blockquote><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220331213432391.png" class="" title="image-20220331213432391"><h4 id="3-2-ParseBool字符串布尔值转成布尔值"><a href="#3-2-ParseBool字符串布尔值转成布尔值" class="headerlink" title="3.2 ParseBool字符串布尔值转成布尔值"></a>3.2 ParseBool字符串布尔值转成布尔值</h4><blockquote><p><code>ParseBool</code>将字符串的布尔值转为真正的布尔值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 从字符串中解析对应的数字数据，字符串不能有非数字的字符</span></span><br><span class="line">s := <span class="string">&quot;true&quot;</span></span><br><span class="line">ret, _ := strconv.ParseBool(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v ret_type=%T\n&quot;</span>, ret, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220331215741171.png" class="" title="image-20220331215741171"><h4 id="3-4-ParseFloat字符串浮点型转为浮点型"><a href="#3-4-ParseFloat字符串浮点型转为浮点型" class="headerlink" title="3.4 ParseFloat字符串浮点型转为浮点型"></a>3.4 ParseFloat字符串浮点型转为浮点型</h4><blockquote><p><code>ParseFloat</code>需要传入<code>bitSize</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 从字符串中解析对应的数字数据，字符串不能有非数字的字符</span></span><br><span class="line">s := <span class="string">&quot;3.1415&quot;</span></span><br><span class="line">ret, _ := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v ret_type=%T\n&quot;</span>, ret, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220331220000832.png" class="" title="image-20220331220000832"><h4 id="3-5-Atoi字符串转数字"><a href="#3-5-Atoi字符串转数字" class="headerlink" title="3.5 Atoi字符串转数字"></a>3.5 Atoi字符串转数字</h4><blockquote><p>strconv包里有个<code>Atoi</code>方法，专门用来将字符串转换为数字</p><ul><li><code>A</code>表示字符串<ul><li>因为Go语言是从C语言发展出来，C语言中没有字符串，只有字符，A是字符的数组，所以A用来表示字符串</li></ul></li><li><code>i</code>表示int整型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 从字符串中解析对应的数字数据，字符串不能有非数字的字符</span></span><br><span class="line">str := <span class="string">&quot;100&quot;</span></span><br><span class="line">ret, err := strconv.Atoi(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;转换失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v ret_type=%T\n&quot;</span>, ret, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220331215400222.png" class="" title="image-20220331215400222"><h4 id="3-6-ItoA数字转字符串"><a href="#3-6-ItoA数字转字符串" class="headerlink" title="3.6 ItoA数字转字符串"></a>3.6 ItoA数字转字符串</h4><blockquote><p>将数字转换为字符串，只有一个返回值，没有err返回</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// strconv</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 从字符串中解析对应的数字数据，字符串不能有非数字的字符</span></span><br><span class="line">s := <span class="number">100</span></span><br><span class="line">ret := strconv.Itoa(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v ret_type=%T\n&quot;</span>, ret, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/10/24/golang/go_%E5%B8%B8%E7%94%A8%E5%8C%85/go_%E5%B8%B8%E7%94%A8%E5%8C%85/image-20220331215554288.png" class="" title="image-20220331215554288"><h2 id="七、context包"><a href="#七、context包" class="headerlink" title="七、context包"></a>七、context包</h2><blockquote><p>context官方库文档：<a href="https://pkg.go.dev/context">https://pkg.go.dev/context</a></p></blockquote><blockquote></blockquote><h2 id="八、errors包"><a href="#八、errors包" class="headerlink" title="八、errors包"></a>八、errors包</h2><h2 id="九、log包"><a href="#九、log包" class="headerlink" title="九、log包"></a>九、log包</h2><h2 id="十、io包"><a href="#十、io包" class="headerlink" title="十、io包"></a>十、io包</h2><h2 id="十一、encoding包"><a href="#十一、encoding包" class="headerlink" title="十一、encoding包"></a>十一、encoding包</h2><h2 id="x、rand包"><a href="#x、rand包" class="headerlink" title="x、rand包"></a>x、rand包</h2><blockquote><p>rand模块可以用来生成随机数，是<code>math</code>包里的<code>rand</code>方法</p><p>注意：</p><ul><li>生成随机数时，需要有一个种子，否则每次生成的随机数都是一样的</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rand源码</span></span><br><span class="line"><span class="comment">// Intn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n)</span></span><br><span class="line"><span class="comment">// from the default Source.</span></span><br><span class="line"><span class="comment">// It panics if n &lt;= 0.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Intn</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> globalRand.Intn(n) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Intn用来生成一个整数的随机数，从代码注释来看是属于：左包含右不包含</span></span><br></pre></td></tr></table></figure><h3 id="1、生成随机整数"><a href="#1、生成随机整数" class="headerlink" title="1、生成随机整数"></a>1、生成随机整数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandNum</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 种子为了每次生成的随机数不一样，否则会出现每次运行得到的随机数都是一样的</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">randNum := rand.Intn(<span class="number">19</span>)</span><br><span class="line"><span class="keyword">return</span> randNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandEleBySlice</span><span class="params">(a []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;input slice is empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取随机数</span></span><br><span class="line"><span class="comment">// 种子为了每次生成的随机数不一样，否则会出现每次运行得到的随机数都是一样的</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">randEle := rand.Intn(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">return</span> a[randEle]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">randNum := getRandNum()</span><br><span class="line">fmt.Printf(<span class="string">&quot;randNum: %v\n&quot;</span>, randNum)</span><br><span class="line"></span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">randEle := getRandEleBySlice(a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%v\n&quot;</span>, randEle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、猜数字案例"><a href="#2、猜数字案例" class="headerlink" title="2、猜数字案例"></a>2、猜数字案例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRandNum</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 种子为了每次生成的随机数不一样，否则会出现每次运行得到的随机数都是一样的</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">randNum := rand.Intn(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> randNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">guessNumGame</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 生成一个随机数</span></span><br><span class="line">guessNum := getRandNum()</span><br><span class="line">ops := <span class="number">3</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;请猜一个0-10的数字，只有%v次机会~\n&quot;</span>, ops)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= ops; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;&gt;&gt;&gt;第%d次猜数字&lt;&lt;&lt;\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputNum <span class="type">int</span></span><br><span class="line">fmt.Print(<span class="string">&quot;请猜一个数字:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;inputNum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> inputNum &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;输入的数字不在0-10之间&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> inputNum &gt; guessNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;猜大了&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> inputNum &lt; guessNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;猜小了&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;猜对了，随机数是:&quot;</span>, guessNum)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt;= ops &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v次机会已经用完~\n&quot;</span>, ops)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 猜数字</span></span><br><span class="line">guessNumGame()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="x、go-doc"><a href="#x、go-doc" class="headerlink" title="x、go doc"></a>x、go doc</h2><blockquote><p><a href="https://www.kancloud.cn/cattong/go_command_tutorial/261351">https://www.kancloud.cn/cattong/go_command_tutorial/261351</a></p><ul><li><p>常用来查看当前go文件的文档</p></li><li><p>godoc可以快速查看对应模块的文档</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go常用包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go常用包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go微服务</title>
      <link href="/2022/10/24/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1/go%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/10/24/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1/go%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Go微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="/2022/09/21/git/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/21/git/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h2><blockquote><p>git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p></blockquote><blockquote><p>Git官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><ul><li>Git是一个免费且开源的分布式版本控制系统，旨在以高效的方式处理从小型到大型项目的所有内容。</li><li>Git学习起来简单，占用空间小，性能极快。它通过本地分支廉价、方便的暂存区和多工作流等功能，超越了Subversion、CVS、Perforce和ClearCase等SCM工具</li></ul></blockquote><img src="/2022/09/21/git/git%E4%BD%BF%E7%94%A8/branching-illustration@2x.png" class="" title="img"><h2 id="二、Git使用"><a href="#二、Git使用" class="headerlink" title="二、Git使用"></a>二、Git使用</h2><h3 id="1、本地仓库操作"><a href="#1、本地仓库操作" class="headerlink" title="1、本地仓库操作"></a>1、本地仓库操作</h3><h4 id="1-1-创建git仓库"><a href="#1-1-创建git仓库" class="headerlink" title="1.1 创建git仓库"></a>1.1 创建git仓库</h4><blockquote><p>在本地创建git仓库</p><ul><li>创建git仓库以后，在当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了</li><li>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在对应项目的目录下</span></span><br><span class="line">git  init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看隐藏的.git目录</span></span><br><span class="line"><span class="built_in">ls</span> -la</span><br></pre></td></tr></table></figure><img src="/2022/09/21/git/git%E4%BD%BF%E7%94%A8/image-20240426112200269.png" class="" title="image-20240426112200269"><h4 id="1-2-添加文件到git仓库"><a href="#1-2-添加文件到git仓库" class="headerlink" title="1.2 添加文件到git仓库"></a>1.2 添加文件到git仓库</h4><blockquote><p>本步骤仅仅是添加文档到本地的git仓库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文件到Git仓库，分两步：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步，注意，可反复多次使用，添加多个文件；</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令</span></span><br><span class="line">git commit -m &lt;message&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3、查看仓库状态"><a href="#1-3、查看仓库状态" class="headerlink" title="1.3、查看仓库状态"></a>1.3、查看仓库状态</h4><blockquote><p>查看工作区的状态</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="1-4-查看git日志"><a href="#1-4-查看git日志" class="headerlink" title="1.4 查看git日志"></a>1.4 查看git日志</h4><blockquote><p>查看从最近到最远的提交日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="1-5-回退版本"><a href="#1-5-回退版本" class="headerlink" title="1.5 回退版本"></a>1.5 回退版本</h4><h5 id="1-5-1-查看当前HEAD"><a href="#1-5-1-查看当前HEAD" class="headerlink" title="1.5.1 查看当前HEAD"></a>1.5.1 查看当前HEAD</h5><blockquote><p>HEAD指向的版本就是当前版本，可以看到当前HEAD指向master分支</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><img src="/2022/09/21/git/git%E4%BD%BF%E7%94%A8/image-20240426112903563.png" class="" title="image-20240426112903563"><h5 id="1-5-2-回退版本"><a href="#1-5-2-回退版本" class="headerlink" title="1.5.2 回退版本"></a>1.5.2 回退版本</h5><blockquote><p>假设当前的HEAD是master，但当在master上修改了内容，之后不想要修改的内容了，想回退到master的修改前的状态，就需要回退版本到原始master</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时HEAD指向master，下面命令表示回退到master原始版本</span></span><br><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><blockquote><p>另外–hard后面可以跟任意commitId，都可以回退到制定的提交版本，commitId可以从git log中找到</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># commit 后面一长串就是commitId</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0   </span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><blockquote><p>commitId版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard eaadf4e3</span><br></pre></td></tr></table></figure><p>1.5.3 查看历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog查看命令历史，以便确定要回到未来的哪个版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/08/03/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/08/03/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h2 id="二、TCP"><a href="#二、TCP" class="headerlink" title="二、TCP"></a>二、TCP</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/224595048">https://zhuanlan.zhihu.com/p/224595048</a></p><p><a href="https://zhuanlan.zhihu.com/p/28894266">https://zhuanlan.zhihu.com/p/28894266</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NetWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go与gRPC</title>
      <link href="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、RPC协议"><a href="#一、RPC协议" class="headerlink" title="一、RPC协议"></a>一、RPC协议</h2><blockquote><p><a href="https://www.jianshu.com/p/5ade587dbc58">https://www.jianshu.com/p/5ade587dbc58</a></p><p><a href="https://zhuanlan.zhihu.com/p/506415782">https://zhuanlan.zhihu.com/p/506415782</a></p><p><a href="https://www.cnblogs.com/wongbingming/p/11086773.html">https://www.cnblogs.com/wongbingming/p/11086773.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/524902149">https://zhuanlan.zhihu.com/p/524902149</a></p></blockquote><h3 id="1、RPC概念"><a href="#1、RPC概念" class="headerlink" title="1、RPC概念"></a>1、RPC概念</h3><blockquote><p>RPC（Remote Procedure Call Protocol）是远程过程调用的缩写，通俗的说就是调用远处服务器的一个函数，与之相对应的是本地函数调用</p><p>PRC的理解：</p><ul><li>像调用本地函数一样，去调用远程服务器上的函数</li><li>进程间通信–应用层协议(http协议同层)，底层使用TCP实现</li></ul></blockquote><blockquote><p>一般调用函数时，最常见的就是本地调用和RPC调用，下面就来说说二者的区别</p></blockquote><h3 id="2、本地调用"><a href="#2、本地调用" class="headerlink" title="2、本地调用"></a>2、本地调用</h3><blockquote><p>当在本地调用代码时，就是定义函数，然后函数名()调用</p><p>下面代码：</p><ul><li>先定义了一个<code>useError</code>函数</li><li>然后在main函数中调用</li><li>这是在本地调用的方式</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;example.com/studygo/cerror&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useError</span><span class="params">(x, y <span class="type">uint8</span>)</span></span> (<span class="type">uint8</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">10</span> &#123;</span><br><span class="line">err := cerror.New(<span class="string">&quot;x小于0&quot;</span>, <span class="string">&quot;2022-08-08&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x + y, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u1, err := useError(<span class="number">9</span>, <span class="number">12</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;u1:%v ,u1 type:%T\n&quot;</span>, u1, u1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;err:%v ,err type:%T\n&quot;</span>, err, err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20220810233821783.png" class="" title="image-20220810233821783"><blockquote><ul><li>本地过程调用发生在同一进程中的，所以可以正常调用</li><li>但是我们无法直接在另一个构建的程序直接调用上面代码中的<code>userError</code>函数，因为它们是两个程序，内存空间是相互隔离的</li></ul></blockquote><h3 id="3、RPC调用"><a href="#3、RPC调用" class="headerlink" title="3、RPC调用"></a>3、RPC调用</h3><blockquote><p>RPC调用解决了什么问题</p><ul><li>为了解决类似远程、跨内存空间、的函数&#x2F;方法调用</li><li>比起以往的通过HTTP的Restful-API风格调用，使用RPC能够让我们调用远程方法像调用本地方法一样无差别<ul><li>基于RESTful风格的API通常是基于HTTP协议，传输数据采用JSON等文本协议</li><li>RPC可以使用TCP协议，传输数据采用二进制协议来说，相比RESTful的API来说性能会更好</li></ul></li></ul></blockquote><blockquote><p>实现RPC的步骤以及办法</p><ul><li>确定要执行的函数？ <ul><li>在本地调用中，函数主体通过函数指针函数指定，然后调用对应的函数，编译器通过函数指针函数自动确定被调用函数在内存中的位置。</li><li>在 RPC 中，调用不能通过函数指针完成，因为它们的内存地址可能完全不同。<ul><li>调用方和被调用方都需要维护一个{ function &lt;-&gt; ID }映射表，以确保调用正确的函数。</li></ul></li></ul></li><li>如何传递调用的参数？ <ul><li>本地过程调用中传递的参数是通过堆栈内存结构实现的</li><li>RPC不能直接使用内存传递参数，因此参数或返回值需要在传输期间序列化并转换成字节流，因为网络传输都是使用的二进制格式，所以需要序列化或反序列化</li></ul></li><li>如何进行网络传输？ <ul><li>函数的调用方和被调用方通常是通过网络连接的</li><li>function ID 和序列化字节流需要通过网络传输<ul><li>只要能完成调用，调用方和被调用方就不受现有特定网络协议的限制。</li><li>比如有的RPC框架使用TCP协议，有的的使用HTTP协议</li></ul></li></ul></li></ul></blockquote><h4 id="3-1-rpc包实现rpc调用步骤"><a href="#3-1-rpc包实现rpc调用步骤" class="headerlink" title="3.1 rpc包实现rpc调用步骤"></a>3.1 rpc包实现rpc调用步骤</h4><blockquote><p>go语言内置的net&#x2F;rpc包可以通过网络导出一个需要被远程调用的对象方法</p><ul><li>编写一个需要被远程调用的对象方法<ul><li>所以导出对象和对象方法都需要首字母大写</li></ul></li><li>rpc服务器注册一个对象，暴露到外部网络可见，并且服务名称就是被导出的对象类型的名称</li><li>接着对象的导出方法就可以支持远程调用访问</li></ul></blockquote><h4 id="3-2-rpc代码调用示例"><a href="#3-2-rpc代码调用示例" class="headerlink" title="3.2 rpc代码调用示例"></a>3.2 rpc代码调用示例</h4><h5 id="3-2-1-rpc服务端代码"><a href="#3-2-1-rpc服务端代码" class="headerlink" title="3.2.1 rpc服务端代码"></a>3.2.1 rpc服务端代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义导出对象结构体</span></span><br><span class="line"><span class="keyword">type</span> SayHiService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义导出对象的方法，建议定义为指针接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SayHiService)</span></span> SayGreet(sayStr <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;我说啦：:%v\n&quot;</span>, sayStr)</span><br><span class="line">*reply = <span class="string">&quot;你好呀，&quot;</span> + sayStr</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  RpcSayHiService := <span class="built_in">new</span>(SayHiService)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册rpc服务</span></span><br><span class="line">_ = rpc.Register(RpcSayHiService)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用TCP协议s</span></span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;listen tcp rpc err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line">fmt.Printf(<span class="string">&quot;conn==&gt;:%v\n&quot;</span>, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;conn rpc err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">rpc.ServeConn(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-rpc客户端代码"><a href="#3-2-2-rpc客户端代码" class="headerlink" title="3.2.2 rpc客户端代码"></a>3.2.2 rpc客户端代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">address := <span class="string">&quot;127.0.0.1:1234&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 与服务端使用tcp建立链接</span></span><br><span class="line">client, err := rpc.Dial(<span class="string">&quot;tcp&quot;</span>, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;client dial err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同步调用服务端函数</span></span><br><span class="line"><span class="keyword">var</span> reply <span class="type">string</span></span><br><span class="line">sayStr := <span class="string">&quot;忠实的仆人&quot;</span></span><br><span class="line">err = client.Call(<span class="string">&quot;SayHiService.SayGreet&quot;</span>, sayStr, &amp;reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;client call err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;reply val:%v\n&quot;</span>, reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、RPC原理图"><a href="#4、RPC原理图" class="headerlink" title="4、RPC原理图"></a>4、RPC原理图</h3><blockquote><p>下图来自李文周老师博客</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/rpc04.png" class="" title="rpc"><blockquote><ol><li>服务调用方（client）以本地调用方式调用服务；</li><li>client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；</li><li>client stub找到服务地址，并将消息发送到服务端；</li><li>server 端接收到消息；</li><li>server stub收到消息后进行解码；</li><li>server stub根据解码结果调用本地的服务；</li><li>本地服务执行并将结果返回给server stub；</li><li>server stub将返回结果打包成能够进行网络传输的消息体；</li><li>按地址将消息发送至调用方；</li><li>client 端接收到消息；</li><li>client stub收到消息并进行解码；</li><li>调用方得到最终结果</li></ol><p>使用RPC框架的目标是只需要关心第1步和最后1步，中间的其他步骤统统封装起来，让使用者无需关心。例如社区中各式RPC框架（grpc、thrift等）就是为了让RPC调用更方便。</p></blockquote><h2 id="二、gRPC框架"><a href="#二、gRPC框架" class="headerlink" title="二、gRPC框架"></a>二、gRPC框架</h2><blockquote><p>从第一章可以看出来go内置的rpc包就可以实现rpc功能，不过go社区提供了比较成熟的RPC框架，来简化平时使用RPC的一些步骤，后面的章节来学习理解gRPC框架</p></blockquote><h3 id="1、gRPC是什么"><a href="#1、gRPC是什么" class="headerlink" title="1、gRPC是什么"></a>1、gRPC是什么</h3><blockquote><p>gRPC官网：<a href="https://grpc.io/docs/what-is-grpc/introduction/">https://grpc.io/docs/what-is-grpc/introduction/</a></p></blockquote><blockquote><p>从gRPC官网介绍可以得知gRPC是做什么用的？</p><ul><li>在gRPC中，客户端应用程序可以直接调用不同机器上的服务器应用程序的方法，就像它是一个本地对象一样，使你更容易创建分布式应用程序和服务。</li><li>就像许多RPC系统一样，gRPC是围绕着定义服务(Interface Definition Language)的想法，指定可以远程调用的方法及其参数和返回类型。</li><li>在服务器端，服务器实现这个接口并运行gRPC服务器来处理客户端的调用。</li><li>在客户端，客户端有一个存根（在某些语言中被称为只是一个客户端），提供与服务器相同的方法。</li></ul></blockquote><blockquote><p>gRPC客户端和服务器可以在各种环境中运行并相互交谈–从谷歌内部的服务器到你自己的桌面–并且可以用gRPC支持的任何语言编写。</p><p>因此，举例来说，你可以很容易地用Java创建一个gRPC服务器，客户端用Go、Python或Ruby。</p><p>此外最新的谷歌API将有gRPC版本的接口，让你轻松地在你的应用程序中建立谷歌功能。</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/landing-2.svg" class="" title="Concept Diagram"><blockquote><p>上图来自gRPC官网，从上图可以看出：</p><ul><li>客户端（gRPC Stub）在自己的程序中调用某个函数或者方法，此时发起了RPC调用<ul><li>对请求信息使用Protobuf进行对象序列化压缩</li></ul></li><li>服务端（gRPC Server）收到请求信息以后，解码请求体，进行业务逻辑处理并返回<ul><li>对响应结果使用Protobuf进行对象序列化压缩</li></ul></li><li>客户端接收到服务端响应结果后，解码请求体。<ul><li>回调被调用的A方法，唤醒正在被等待响应（阻塞）的客户端调用并返回响应结果</li></ul></li></ul></blockquote><h3 id="2、Protobuf介绍"><a href="#2、Protobuf介绍" class="headerlink" title="2、Protobuf介绍"></a>2、Protobuf介绍</h3><blockquote><p>在<code>gRPC是什么</code>这一小节中，反复提到Protobuf这个名词，那Protobuf是什么？gRPC与Protobuf的关系是什么？如何使用Protobuf？是我们接下来需要探讨的事情</p></blockquote><h4 id="2-1-Protobuf是什么"><a href="#2-1-Protobuf是什么" class="headerlink" title="2.1 Protobuf是什么"></a>2.1 Protobuf是什么</h4><blockquote><p>Protobuf官网：<a href="https://protobuf.dev/overview/">https://protobuf.dev/overview/</a></p></blockquote><blockquote><p>Protobuf介绍</p><ul><li><p>Protocol Buffers是一种语言中立、平台中立的可扩展机制，用于序列化结构化数据</p></li><li><p>Protocol Buffers提供了一种语言中立、平台中立、可扩展的机制，用于以向前兼容和向后兼容的方式序列化结构化数据。</p></li><li><p>它就像JSON，只是它更小、更快，而且能生成本地语言绑定。</p></li><li><p>你只需定义一次你希望你的数据如何被结构化，然后你就可以使用特殊生成的源代码，轻松地从各种数据流和使用各种语言写入和读取你的结构化数据。</p></li><li><p>Protocol Buffers是定义语言（在.proto文件中创建）、proto编译器生成的与数据接口的代码、特定语言的运行库以及写入文件（或通过网络连接发送）的数据的序列化格式的组合</p></li></ul></blockquote><blockquote><p>Protobuf解决了什么问题？</p><ul><li>Protocol Buffers为大小不超过几兆字节的类型化、结构化数据包提供了一种序列化格式，该格式适用于短暂的网络通信和长期的数据存储。</li><li>Protocol Buffers可以用新的信息进行扩展，而不会使现有的数据失效或需要更新代码。</li><li>Protocol Buffers是谷歌最常使用的数据格式。它们被广泛用于服务器间的通信以及磁盘上的数据存档存储。</li><li>Protocol Buffers的信息和服务由工程师编写的.proto文件描述。</li></ul></blockquote><blockquote><p>Protobuf的作用与特点</p><ul><li>Protocol Buffers是任何需要以语言中立、平台中立、可扩展的方式序列化结构化、类似记录、类型化数据的情况的理想选择。它们最常被用于定义通信协议（与gRPC一起）和数据存储。</li><li>使用Protocol Buffers的一些优点包括：<ul><li>紧凑的数据存储</li><li>快速解析</li><li>在许多编程语言中可用<ul><li>Dart、Go、C++、C#、Java、Kotlin、Objective-C、PHP、Python、Ruby</li><li>由于Dart和Go语言是谷歌公司出品的语言，所以这两个语言的protoc编译器是由谷歌公司维护的</li><li>本笔记只探讨Go语言，这里是Go语言的编译器插件：<a href="https://github.com/protocolbuffers/protobuf-go">https://github.com/protocolbuffers/protobuf-go</a></li></ul></li><li>通过自动生成的类来优化功能</li><li>跨语言的兼容性</li><li>用任何支持的编程语言编写的代码都可以读取相同的信息。<ul><li>你可以让一个平台上的Java程序从一个软件系统中捕获数据，根据.proto定义将其序列化，然后在另一个平台上运行的单独的Python应用程序中从该序列化数据中提取特定值</li></ul></li></ul></li></ul></blockquote><blockquote><p>对于Protobuf的介绍先到这里，需要更详细的信息可以查看Protobuf官网</p></blockquote><h4 id="2-2-gRPC与Protobuf关系"><a href="#2-2-gRPC与Protobuf关系" class="headerlink" title="2.2 gRPC与Protobuf关系"></a>2.2 gRPC与Protobuf关系</h4><blockquote><p>默认情况下，gRPC使用谷歌成熟的开源机制Protocol Buffers来序列化结构化数据（尽管它也可以用于其他数据格式，如JSON）</p><p>这就说明gRPC使用的是Protobuf进行序列化数据的，那么就需要熟悉对Protobuf的使用</p></blockquote><h4 id="2-3-Protobuf编译器安装"><a href="#2-3-Protobuf编译器安装" class="headerlink" title="2.3 Protobuf编译器安装"></a>2.3 Protobuf编译器安装</h4><blockquote><p>protobuf编译器的作用，就是根据定义的.proto文件，编译出对应编程语言的代码文件</p><p>protobuf官方安装参考文档：<a href="https://grpc.io/docs/protoc-installation/">https://grpc.io/docs/protoc-installation/</a></p><p>如果按照上述文档安装，我们无法安装想要的protobuf指定版本，那么就需要去下载指定版本的protobuf，然后放置到自己电脑的PATH中</p><p>编写此文档时，protobuf编译器使用的版本是<code>v3.20.0</code></p><p>下载地址在github中找到：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230411134346630.png" class="" title="image-20230411134346630"><blockquote><p>在下载地址页面下载适合你平台的预编译好的二进制文件（<code>protoc-&lt;version&gt;-&lt;platform&gt;.zip</code>），下面是不同版本的解释</p></blockquote><table><thead><tr><th>版本</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protobuf-all-3.20.0.zip">protobuf-all-3.20.0.zip</a></td><td>这是未编译成可执行的protobuf二进制程序的源文件，一般不选择这个</td></tr><tr><td><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-osx-aarch_64.zip">protoc-3.20.0-osx-aarch_64.zip</a></td><td>适用于Mac ARM 64位系统，可执行的protobuf二进制程序</td></tr><tr><td><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-osx-x86_64.zip">protoc-3.20.0-osx-x86_64.zip</a></td><td>适用于Mac Intel 64位系统，可执行的protobuf二进制程序</td></tr><tr><td><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-win64.zip">protoc-3.20.0-win64.zip</a></td><td>适用Windows 64位系统，可执行的protobuf二进制程序</td></tr><tr><td><a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.20.0/protoc-3.20.0-linux-x86_64.zip">protoc-3.20.0-linux-x86_64.zip</a></td><td>适用Linux 64位系统，可执行的protobuf二进制程序</td></tr></tbody></table><blockquote><p>编写此文档时使用的macos系统，电脑芯片是Intel的，所以选择<code>protoc-3.20.0-osx-x86_64.zip</code>这个版本</p><p>下载上面版本以后，解压并配置bin目录到环境变量中，查看protoc的版本</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230411220304072.png" class="" title="image-20230411220304072"><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/protoc_help.jpg" class="" title="image-20230918190257191"><blockquote><p>从上面可以看出，当运行help出现的语言参数，说明protoc本身已经内置该语言对应的编译插件，无需安装再安装对应语言的编译插件，但是go语言的编译插件是由谷歌公司单独维护的，所以需要单独安装</p><p><a href="https://github.com/protocolbuffers/protobuf-go">GO protobuf仓库</a></p></blockquote><h4 id="2-4-Protobuf语法版本"><a href="#2-4-Protobuf语法版本" class="headerlink" title="2.4 Protobuf语法版本"></a>2.4 Protobuf语法版本</h4><blockquote><p>官方的建议：</p><ul><li>虽然Protocol Buffers已经向开源用户提供了一段时间，但官方的大多数例子都使用了Protocol Buffers第3版（proto3），它的语法稍微简化，有一些有用的新功能，并支持更多的语言。</li><li>Proto3目前有Java、C++、Dart、Python、Objective-C、C#、一个ite-runtime（Android Java）、Ruby和JavaScript版本，来自protocol buffers GitHub repo，以及来自golang&#x2F;protobuf官方软件包的Go语言生成器，还有更多语言正在开发中。</li><li>可以在proto3语言指南和每种语言的参考文档中找到更多信息。参考文档还包括一个.proto文件格式的正式规范</li><li>一般来说，虽然可以使用proto2（目前默认的Protocol Buffers），但官方建议使用proto3与gRPC，因为它可以让你使用全部的gRPC支持的语言，以及避免proto2客户端与proto3服务器之间的兼容性问题。</li></ul></blockquote><h3 id="3、Protobuf语法"><a href="#3、Protobuf语法" class="headerlink" title="3、Protobuf语法"></a>3、Protobuf语法</h3><blockquote><p>下面文档来自proto3版本语法文档：<a href="https://protobuf.dev/programming-guides/proto3/">https://protobuf.dev/programming-guides/proto3/</a></p></blockquote><h4 id="3-1-首行语法声明"><a href="#3-1-首行语法声明" class="headerlink" title="3.1 首行语法声明"></a>3.1 首行语法声明</h4><blockquote><p>下面是官方提供的第一个示例，定义一个消息类型</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意：</p><ul><li>文件的第一行指定使用的是proto3语法，如果不这样做，Protocol Buffers编译器会认为你使用的是proto2</li><li>第一行指定语法必须是文件中第一行非空的、非注释的行</li><li>每一句都以英文的<code>;</code>结束</li></ul></blockquote><h4 id="3-2-注释语法"><a href="#3-2-注释语法" class="headerlink" title="3.2 注释语法"></a>3.2 注释语法</h4><blockquote><p>在<code>.proto</code> 文件中, 使用C&#x2F;C++-风格的<code>//</code>and<code>/* ... */</code>语法来表示注释</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个消息</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int32</span> result_per_page = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-Message类型"><a href="#3-3-Message类型" class="headerlink" title="3.3 Message类型"></a>3.3 Message类型</h4><blockquote><p>Message类型可以理解为go中的结构体，承载请求消息的字段和响应消息的字段</p><p>文档参考：<a href="https://protobuf.dev/programming-guides/proto3/#simple">https://protobuf.dev/programming-guides/proto3/#simple</a></p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int32</span> result_per_page = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出：</p><ul><li>指定了三个字段（变量名与值对）每个字段代表你想在这种类型的消息中包含的数据</li><li>每个字段都有一个名称和一个类型。<ul><li>query变量的类型是一个字符串</li><li>page_number和result_per_page类型是整型</li></ul></li></ul></blockquote><h5 id="3-3-1-声明字段编号"><a href="#3-3-1-声明字段编号" class="headerlink" title="3.3.1 声明字段编号"></a>3.3.1 声明字段编号</h5><blockquote><p>从前面定义的message中，可以看到每个变量等号右边都有数字，数字就是message类型中变量的编号</p><ul><li>在 Protocol Buffers（protobuf）中，等号右边的数字（如 1、2、3）表示字段的唯一标识符（Tag），这些标识符在编码消息时用于标记字段。它们在整个消息定义中必须是唯一的。</li><li>每个字段有一个唯一的数字标识符，这是在序列化和反序列化过程中使用的。</li><li>此标识符并不会影响消息字段的顺序，但它们在定义.proto 文件时必须是唯一的。</li><li>在更新.proto 文件时，请注意：不要更改现有字段的标识符，因为这会破坏向后兼容性。当需要为消息添加新字段时，可以分配一个新的、尚未使用过的标识符。</li></ul><p>注意：</p><ul><li>字段编号的值范围限定为 1 ~ 536870911（不包括 19000 到 19999 区间的保留值）<ul><li>字段编号 19,000 至 19,999 保留给协议缓冲区实现。如果在报文中使用了这些保留字段编号，协议缓冲区编译器将发出报警。</li></ul></li><li>最常设置的字段应使用字段编号1至15。较低的字段编号值在导线格式中占用的空间较少。<ul><li>例如，字段编号范围为 1 至 15 的字段编号只需一个字节进行编码</li><li>16 至 2047 范围内的字段编号需要两个字节</li></ul></li><li>重复使用字段编号会使解码线格式消息变得模糊，其实就是导致解码时不知道该用哪个字段</li></ul></blockquote><h5 id="3-3-2-指定字段标签"><a href="#3-3-2-指定字段标签" class="headerlink" title="3.3.2 指定字段标签"></a>3.3.2 指定字段标签</h5><blockquote><p>字段标签支持：</p><ul><li><p>optional：</p><ul><li><p>字段已设置，包含一个显式设置或从电文中解析的值。它将被序列化到电文中。</p></li><li><p>字段未设置，将返回默认值。它不会被序列化到数据线上。</p></li><li><p>您可以检查该值是否已明确设置。</p></li></ul></li><li><p>repeated：该字段类型可以在格式良好的报文中重复零次或多次。重复值的顺序将被保留。</p></li><li><p>map：这是一个成对的键&#x2F;值字段类型。有关此字段类型的更多信息，请参阅<a href="https://protobuf.dev/programming-guides/encoding/#maps">map</a>。</p></li><li><p>注意：</p><ul><li>如果没有应用显式字段标签，则默认使用字段标签，称为 “隐式字段存在”。</li><li>(格式良好的报文可以有 0 个或 1 个这种字段（但不能多于 1 个）。</li><li>您也无法确定这种类型的字段是否是从电文中解析出来的。</li><li>隐式存在字段将被序列化到电文中，除非它是默认值。有关这方面的更多信息，请参阅字段存在。</li><li>在 proto3 中，标量数字类型的重复字段默认使用打包编码。</li></ul><p>参考：<a href="https://protobuf.dev/programming-guides/proto3/#field-labels">https://protobuf.dev/programming-guides/proto3/#field-labels</a></p></li></ul></blockquote><blockquote><p>TODO：这一部分暂时没用用到，等后续用到再来补充知识</p></blockquote><h5 id="3-3-3-多个message类型"><a href="#3-3-3-多个message类型" class="headerlink" title="3.3.3 多个message类型"></a>3.3.3 多个message类型</h5><blockquote><p>在一个<code>.proto</code>文件中，可以存在多个message，比如有requestMessage，那就可以定义responseMessage</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int32</span> result_per_page = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="type">string</span> result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-4-删除字段"><a href="#3-3-4-删除字段" class="headerlink" title="3.3.4 删除字段"></a>3.3.4 删除字段</h5><blockquote><p>下面为官网翻译，了解到时再来补充</p><p>删除字段如果操作不当，删除字段可能会导致严重问题。</p><ul><li>当您不再需要非必填字段，并且已从客户端代码中删除所有引用时，您可以从报文中删除字段定义。但必须保留已删除的字段编号。如果不保留字段编号，开发人员将来有可能重新使用该编号。</li><li>您还应保留字段名称，以便继续解析消息的 JSON 和 TextFormat 编码。</li></ul></blockquote><h5 id="3-3-5-Proto变量类型与Go变量类型"><a href="#3-3-5-Proto变量类型与Go变量类型" class="headerlink" title="3.3.5 Proto变量类型与Go变量类型"></a>3.3.5 Proto变量类型与Go变量类型</h5><blockquote><p>在.proto文件中消息类型声明的变量类型与go语言对应的消息类型是有映射规则的，下面是最常用的几个类型的映射</p><p>注意：</p><ul><li>在官方文档中对应proto变量类型未找到int类型的说明，所以暂时先理解为proto定义整型时不支持int类型</li></ul></blockquote><table><thead><tr><th align="center"><strong>.proto中类型</strong></th><th align="center"><strong>Go中类型</strong></th></tr></thead><tbody><tr><td align="center">int32</td><td align="center">int32</td></tr><tr><td align="center">int64</td><td align="center">int64</td></tr><tr><td align="center">bool</td><td align="center">bool</td></tr><tr><td align="center">string</td><td align="center">string</td></tr><tr><td align="center">bytes</td><td align="center">[]bytes</td></tr><tr><td align="center">float</td><td align="center">float32</td></tr><tr><td align="center">double</td><td align="center">float64</td></tr></tbody></table><blockquote><p>proto文件中声明的变量默认值和Go里面不同变量类型的默认值类似</p><ul><li>对于string，默认值是空字符串</li><li>对于bytes，默认值是空字节</li><li>对于bool，默认值是false</li><li>对于int32、int64等整型类型，默认值是零</li></ul></blockquote><h5 id="3-3-6-字段类型为message类型"><a href="#3-3-6-字段类型为message类型" class="headerlink" title="3.3.6 字段类型为message类型"></a>3.3.6 字段类型为message类型</h5><blockquote><p>message支持可以把一个message类型当成某一个字段的类型</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="comment">// 把Result消息作为results字段的类型</span></span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义了Result消息体</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Result</span> &#123;</span><br><span class="line">  <span class="type">string</span> url = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> title = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-7-message嵌套"><a href="#3-3-7-message嵌套" class="headerlink" title="3.3.7 message嵌套"></a>3.3.7 message嵌套</h5><blockquote><p>message类型可以在其他消息类型中定义和使用已有的消息类型，就形成了message嵌套</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="type">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要在嵌套message类型之外的其他message中，使用被嵌套的message类型，则语法Parent.Type</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="type">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SomeOtherMessage</span> &#123;</span><br><span class="line">  <span class="comment">// 使用上面的SearchResponse中的Result类型</span></span><br><span class="line">  SearchResponse.Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>嵌套的层数，这块需要编写proto文件时特别关注，</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">Outer</span> &#123;                  <span class="comment">// Level 0</span></span><br><span class="line">  <span class="keyword">message </span><span class="title class_">MiddleAA</span> &#123;  <span class="comment">// Level 1</span></span><br><span class="line">    <span class="keyword">message </span><span class="title class_">Inner</span> &#123;   <span class="comment">// Level 2</span></span><br><span class="line">      <span class="type">int64</span> ival = <span class="number">1</span>;</span><br><span class="line">      <span class="type">bool</span>  booly = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">MiddleBB</span> &#123;  <span class="comment">// Level 1</span></span><br><span class="line">    <span class="keyword">message </span><span class="title class_">Inner</span> &#123;   <span class="comment">// Level 2</span></span><br><span class="line">      <span class="type">int32</span> ival = <span class="number">1</span>;</span><br><span class="line">      <span class="type">bool</span>  booly = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-8-枚举类型"><a href="#3-3-8-枚举类型" class="headerlink" title="3.3.8 枚举类型"></a>3.3.8 枚举类型</h5><blockquote><p>待补充</p><p><a href="https://protobuf.dev/programming-guides/proto3/#enum">https://protobuf.dev/programming-guides/proto3/#enum</a></p></blockquote><h4 id="3-4-定义服务"><a href="#3-4-定义服务" class="headerlink" title="3.4 定义服务"></a>3.4 定义服务</h4><blockquote><ul><li>可以在.proto文件中定义一个RPC服务接口，协议缓冲区编译器将会在你选择的语言中生成服务接口代码和存根。</li><li>当想定义一个RPC服务，包含一个接收你的SearchRequest并返回SearchResponse的方法</li><li>可以在你的.proto文件中像下面这样定义：</li></ul></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">service </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Search(SearchRequest) <span class="keyword">returns</span> (SearchResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>rpc方法中的参数、返回值只能有一个，如果有多个字段需要返回，那就定义到message类型中</li><li>service在go语言中表示需要实现接口类型</li><li>建议service后的服务名、rpc方法名都首字母大写，这也符合go语言首字母大写表示公共方法，其它包可以导入访问到</li></ul></blockquote><h4 id="3-5-导入proto文件"><a href="#3-5-导入proto文件" class="headerlink" title="3.5 导入proto文件"></a>3.5 导入proto文件</h4><blockquote><p>用到再来补充</p></blockquote><blockquote><p>导入定义 在上述例子中，Result消息类型在与SearchResponse相同的文件中定义 - 如果你想要使用的作为字段类型的消息类型已经在其他的.proto文件中定义了呢？</p><p>你可以通过导入它们来使用其他.proto文件中的定义。要导入另一个.proto的定义，你需要在文件的顶部添加一个import语句：</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;myproject/other_protos.proto&quot;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，你只能使用直接导入的.proto文件中的定义。然而，有时你可能需要将.proto文件移动到新的位置。</p><p>你可以在旧位置放置一个占位符.proto文件，使用import public的概念，将所有的导入转发到新的位置，而不是直接移动.proto文件，并在一次更改中更新所有的调用位置。</p><p>注意，Java中不提供public import功能。</p><p>可以在任何导入包含import public声明的proto的代码中依赖import public依赖。例如：</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new.proto</span></span><br><span class="line"><span class="comment">// 所有的定义都移动到这里</span></span><br><span class="line"><span class="comment">// old.proto</span></span><br><span class="line"><span class="comment">// 这是所有客户端都在导入的proto。</span></span><br><span class="line"><span class="keyword">import</span> public <span class="string">&quot;new.proto&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;other.proto&quot;</span>;</span><br><span class="line"><span class="comment">// client.proto</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;old.proto&quot;</span>;</span><br><span class="line"><span class="comment">// 你使用来自old.proto和new.proto的定义，但不使用other.proto</span></span><br></pre></td></tr></table></figure><blockquote><p>协议编译器在使用-I&#x2F;–proto_path标志指定的一系列目录中搜索导入的文件。如果没有给出标志，它会在调用编译器的目录中查找。一般情况下，你应该将–proto_path标志设置为你的项目的根目录，并且对所有的导入使用完全限定的名字。</p></blockquote><h3 id="4、go与gRPC工具"><a href="#4、go与gRPC工具" class="headerlink" title="4、go与gRPC工具"></a>4、go与gRPC工具</h3><blockquote><p>在第三节的<code>Protobuf语法</code>中介绍了protobuf的语法，学习到了Message、服务的定义，这节来熟悉go根据.proto文件生成.pb代码、生成gRPC代码</p></blockquote><h4 id="4-1、相关工具介绍"><a href="#4-1、相关工具介绍" class="headerlink" title="4.1、相关工具介绍"></a>4.1、相关工具介绍</h4><blockquote><p>生成grpc的代码时，需要用到 protoc 、protoc-gen-go  、protoc-gen-go-grpc 、grpc 这几个库</p></blockquote><h5 id="4-1-1-protoc编译器"><a href="#4-1-1-protoc编译器" class="headerlink" title="4.1.1 protoc编译器"></a>4.1.1 protoc编译器</h5><blockquote><ul><li><strong>protoc</strong>编译器 <ul><li>这是 Protocol Buffers 编译器（<code>protoc</code> 命令）。</li><li>它能够根据 .proto 文件生成各种编程语言（如 Go、Python、Java 等）的数据结构、序列化和反序列化代码。</li><li>这个编译器非常重要，因为它是 Protocol Buffers 为各种编程语言生成代码的核心工具。</li></ul></li></ul></blockquote><blockquote><ul><li>protoc编译器重要参数<ul><li>-IPATH<ul><li>–proto_path&#x3D;PATH 表示的是我们要在哪个路径下搜索<code>.proto</code>文件，这个参数既可以用<code>-I</code>指定，也可以使用<code>--proto_path=</code>指定，可能多次指定，将按顺序搜索目录。</li><li>如果不指定该参数，则默认在<strong>当前路径</strong>下进行搜索。</li><li>如果在这些目录中都找不到，将检查 –descriptor_set_in 描述符所需的proto文件</li></ul></li></ul></li></ul></blockquote><h5 id="4-1-2-protoc-gen-go插件"><a href="#4-1-2-protoc-gen-go插件" class="headerlink" title="4.1.2 protoc-gen-go插件"></a>4.1.2 protoc-gen-go插件</h5><blockquote><p>为什么有这个插件？</p><ul><li>非内置的语言支持就得自己单独安装语言插件</li><li>从<code>proto --help</code>命令看出，protoc没有内置go语言的插件，那么就需要单独安装go语言插件，另外可以看到其它语言都是类似<code>--java_out=OUT_DIR</code>、<code>--php_out=OUT_DIR</code>这样的，那么在编译go代码时，命令就应该是<code>--go_out=OUT_DIR</code>，表示生成go的pb文件的路径</li></ul></blockquote><blockquote><p>插件的作用：</p><ul><li><code>protoc-gen-go</code>将 .proto 文件中声明的消息和枚举类型转换为 Go 语言中的数据结构，并实现序列化和反序列化方法。</li><li>重要提示：纯粹用来生成pb序列化相关的文件，不再承载gRPC代码生成功能</li><li>这个插件是为 Go 语言开发者提供的，用于生成 Go 语言的 Protocol Buffers 代码。</li></ul></blockquote><h5 id="4-1-3-protoc-gen-go-grpc插件"><a href="#4-1-3-protoc-gen-go-grpc插件" class="headerlink" title="4.1.3 protoc-gen-go-grpc插件"></a>4.1.3 protoc-gen-go-grpc插件</h5><blockquote><ul><li>这也是一个protoc插件，主要用来生成gRPC相关代码</li><li>基于.proto文件声明的服务接口，这个插件为 gRPC 自动生成对应的客户端和服务端代码。这使得开发者可以只关心业务逻辑，而无需操心底层的网络通信实现。</li><li><code>protoc-gen-go-grpc</code> 插件与 <code>protoc-gen-go</code> 插件配合使用，提供完整的 gRPC Go 语言编程支持。</li></ul></blockquote><h5 id="4-1-4-gRPC库"><a href="#4-1-4-gRPC库" class="headerlink" title="4.1.4 gRPC库"></a>4.1.4 gRPC库</h5><blockquote><ul><li><code>grpc</code> 库提供了 gRPC 框架的核心实现，包括客户端、服务端及拦截器等一系列功能。在编写实际的 gRPC 代码时，需要用到这个库（如调用 API、处理底层网络操作等）。</li><li>对于 Go 语言，<code>grpc</code> 库对应的包路径是 <code>google.golang.org/grpc</code>。这些组件在 gRPC 开发过程中扮演着不同的角色。</li><li><code>protoc</code> 和相应的插件（<code>protoc-gen-go</code> 和 <code>protoc-gen-go-grpc</code>）用于根据 .proto 文件生成客户端和服务端的代码；而 <code>grpc</code> 库提供了 gRPC 运行时的核心实现。在执行 gRPC 调用时，我们需要使用由这些组件生成的代码，以及基于 <code>grpc</code> 库的核心功能。</li></ul></blockquote><h4 id="4-2-protoc-gen-go插件单独使用"><a href="#4-2-protoc-gen-go插件单独使用" class="headerlink" title="4.2 protoc-gen-go插件单独使用"></a>4.2 protoc-gen-go插件单独使用</h4><blockquote><p>从上面对于插件的介绍可以知道，protoc-gen-go插件纯粹用来生成pb序列化相关的文件，那么可以先单独使用protoc-gen-go插件来看看会生成什么内容</p></blockquote><blockquote><p><code>protoc-gen-go</code>插件的安装命令如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新版</span></span><br><span class="line">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本</span></span><br><span class="line">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.3.0</span><br></pre></td></tr></table></figure><h5 id="4-2-1-定义-proto文件"><a href="#4-2-1-定义-proto文件" class="headerlink" title="4.2.1 定义.proto文件"></a>4.2.1 定义.proto文件</h5><blockquote><p>定义订单的proto文件，名称为：order.proto</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义包名</span></span><br><span class="line"><span class="keyword">package</span> order;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义go包名</span></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;lytest.com/orders&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义订单请求消息</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">OrderRequest</span> &#123;</span><br><span class="line">  <span class="type">int64</span> uid = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int64</span> goodsId = <span class="number">2</span>;</span><br><span class="line">  <span class="type">string</span> userName = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义订单响应消息</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">OrderResponse</span> &#123;</span><br><span class="line">  <span class="type">int64</span> orderId = <span class="number">1</span>;</span><br><span class="line">  <span class="type">bool</span> payResult = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义订单RPC服务</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">OrderService</span>&#123;</span><br><span class="line">  <span class="comment">// GetOrderInfo rpc方法，用来获取订单信息</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetOrderInfo(OrderRequest) <span class="keyword">returns</span> (OrderResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-编译-proto文件"><a href="#4-2-2-编译-proto文件" class="headerlink" title="4.2.2 编译.proto文件"></a>4.2.2 编译.proto文件</h5><blockquote><p>接下来就是对上面的.proto文件进行编译，生成go的pb序列化相关的文件，</p><p>下面命令是使用 <code>protoc</code>（即Protocol Buffers编译器）对.proto文件进行编译，生成 Go 代码的命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path=src --go_out=goods_demo --go_opt=paths=source_relative order.proto</span><br></pre></td></tr></table></figure><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920000603469.png" class="" title="image-20230920000603469"><blockquote><ul><li><code>--proto_path=src</code>：这是指定.proto文件的源文件路径。<ul><li>这里是指.proto文件路径为当前目录（项目）下的 <code>src</code> 文件夹，也就是上面order.proto文件所在的目录</li><li>当指定了–proto_path&#x3D;src参数，那么表示<code>order.proto</code>文件一定是在src这个目录中，在命令最后指定proto文件时，就不需要显明的写<code>src/order.proto</code>了，，只写order.proto即可，因为已经–proto_path&#x3D;src指定了proto文件所在的目录了</li><li>当不指定这个参数时，会以当前执行<code>procto</code>命令所在的当前目录为order.proto文件所在的目录，如果order.proto文件不在执行proto命令时的当前目录，就会提示proto文件不存在的报错</li></ul></li></ul></blockquote><blockquote><ul><li><code>--go_out=goods_demo</code>：这是指定Go代码的输出目录。<ul><li>这里将编译后的Go文件输出到goods_demo目录，当–go_out指定的目录不存在，则会提示目录不存在的报错，所以在执行命令前创建好即可</li><li>这个参数不能省略，否则会报错提示:”缺少输出的指令的错误”</li></ul></li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920001012137.png" class="" title="image-20230920001012137"><blockquote><p>–go_opt：主要是给proto-gen-go插件设定插件参数，有三个参数可以设置：</p><ul><li>paths&#x3D;import</li><li>module&#x3D;$PREFIX（不常用）</li><li>paths&#x3D;source_relative</li></ul></blockquote><blockquote><ul><li>–go_opt&#x3D;paths&#x3D;import<ul><li>生成的文件会按proto文件中指定的<code>optional go_package</code>声明的路径来生成，以斜杠(&#x2F;)表示一层目录</li><li>如上面order.proto文件中声明了<code>option go_package = &quot;lytest.com/orders&quot;;</code>，且–go_out&#x3D;goods_demo，那么生成的pb文件就会在这个目录下：goods_demo&#x2F;lytest.com&#x2F;orders</li><li>如果没有指定生成pb文件时不指定这个参数<code>--go_opt=paths=import</code>，那pathsimport是–go_out的默认参数</li></ul></li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920002116761.png" class="" title="image-20230920002116761"><blockquote><ul><li>–go_opt&#x3D;paths&#x3D;source_relative：<ul><li><code>source_relative</code>：表示生成的pb.go文件将使用与源.proto文件所在的相对路径，但是也分情况<ul><li>当–go_out&#x3D;. 等号后面的点表示生成pb.go文件的存放目录为源文件所在的目录，那么生成的pb.go文件就会和源.porto文件在同一个目录，也就是在：src目录下有<code>order.proto</code>、<code>order.pb.go</code>两个文件</li><li>当–go_out&#x3D;goods_demo 等号后面的目录表示pb.go文件的存放目录为指定的goods_demo目录(需要goods_demo目录存在)，那么生成的pb.go文件所在目录为：goods_demo&#x2F;order.pb.go</li></ul></li></ul></li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920003848148.png" class="" title="image-20230920003848148"><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920003950209.png" class="" title="image-20230920003950209"><blockquote><ul><li><code>order.proto</code>：这是源.proto 文件名称<ul><li>源文件可以指定一个或多个</li></ul></li></ul></blockquote><h5 id="4-2-3-编译的pb-go文件解析"><a href="#4-2-3-编译的pb-go文件解析" class="headerlink" title="4.2.3 编译的pb.go文件解析"></a>4.2.3 编译的pb.go文件解析</h5><blockquote><p>从上面protoc命令我们仅得到了order.pb.go文件，没有gRPC相关的文件，生成gRPC文件需要<code>protoc-gen-go-grpc</code>插件支持，下节介绍，本小节来看看我们生成的order.pb.go文件内容</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920004422062.png" class="" title="image-20230920004422062"><blockquote><ul><li>从上面的注释看到protoc、protoc-gen-go的版本，源.proto文件的名称是<code>order.proto</code></li><li>接着看到一个注释：”&#x2F;&#x2F; 定义包名”，这个注释是从order.proto中的package order上方来的，且在order.proto文件中还声明pb文件的包名为&#96;option go_package &#x3D; lytest.com&#x2F;orders，从order.pb.go代码中也看到当前包名为斜杠后的orders</li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920004954938.png" class="" title="image-20230920004954938"><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920005218946.png" class="" title="image-20230920005218946"><blockquote><p>上面可以看到：</p><ul><li>在proto中定义的OrderRequest消息、OrderResponse消息会转换为go语言的结构体，并且字段都变为首字母大写，且还加了<code>protobuf</code>、<code>json</code>的结构体tag</li><li>下面是对上面生成go结构体字段的protobuf标签解释如下：<ul><li>varint： 表示这个字段的数据类型是变长的整数类型。</li><li>1： 这是这个字段在 protobuf 消息中的序号，也称作字段编号(field number)，每个字段都有一个唯一的编号，protobuf 不关心字段的名字，而是通过这个编号来标识字段的。</li><li>opt： 表示这是一个可选字段（optional）。在 proto3 中，所有的字段都是可选的，这个可选实际上是相对于 proto2 中的 required（必选）字段而言的。</li><li>name&#x3D;uid： 在 protobuf 中，这个字段的名字为 “uid”。</li><li>proto3： 表示这是 protobuf v3 的字段。</li></ul></li><li>结构体字段的 json 标签解释如下：<ul><li>uid：在转为 JSON 时，这个字段的名字为 “uid”。</li><li>omitempty：如果这个字段为 0值（对于整型是0，对于字符串是空字符串，对于布尔型是false等等），那么在转为 JSON 时就忽略（省略）该字段。</li></ul></li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920005411842.png" class="" title="image-20230920005411842"><blockquote><p>另外在源.proto文件中还定义了一个OrderService，但是编译生成的pb.go文件没有改部分的代码，能搜到的只是图中的注释，看来pb.go仅仅是生成message消息对应的结构体，对定义的服务不会生成代码</p></blockquote><blockquote><p>总结：</p><ul><li>源proto文件中的message消息会生成go中的对应的结构体</li><li>源.proto文件中定义了的rpc 服务，在只编译生成pb.go文件时不会生成rpc服务的代码</li></ul></blockquote><h4 id="4-3-protoc-gen-go与protoc-gen-go-grpc插件搭配使用"><a href="#4-3-protoc-gen-go与protoc-gen-go-grpc插件搭配使用" class="headerlink" title="4.3 protoc-gen-go与protoc-gen-go-grpc插件搭配使用"></a>4.3 protoc-gen-go与protoc-gen-go-grpc插件搭配使用</h4><blockquote><p>从4.2小节可以得知，使用protoc-gen-go插件只能生成pb文件，仅仅用作序列化和反序列化，生成grpc相关的代码，还需要protoc-gen-go-grpc插件</p></blockquote><blockquote><p>安装protoc-gen-go-grpc插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2</span><br></pre></td></tr></table></figure><h5 id="4-3-1-定义-protoc文件"><a href="#4-3-1-定义-protoc文件" class="headerlink" title="4.3.1 定义.protoc文件"></a>4.3.1 定义.protoc文件</h5><blockquote><p>定义的proto文件和4.2.1小节中的一样，不做重复说明</p></blockquote><h5 id="4-3-2-编译-proto文件"><a href="#4-3-2-编译-proto文件" class="headerlink" title="4.3.2 编译.proto文件"></a>4.3.2 编译.proto文件</h5><blockquote><p>因为从4.2小节中，可以得知，protoc-gen-go插件只能生成仅仅序列化的pb.go文件，gRPC相关的go代码文件需要protoc-gen-go-grpc插件，所以编译命令中需要指定使用protoc-gen-go-grpc插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path=src --go_out=goods_demo  --go_opt=paths=source_relative --go-grpc_out=goods_demo --go-grpc_opt=paths=source_relative src/order.proto</span><br></pre></td></tr></table></figure><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920011945861.png" class="" title="image-20230920011945861"><blockquote><p>从上面的命令可以看到，使用了下面几个参数：</p><ul><li>–go-grpc_out参数：指定gRPC代码生成的路径</li><li>–go-grpc_opt参数和–go_opt一致，不做重复解释</li></ul></blockquote><blockquote><p>从上图看出，我们把pb.go和xx_grpc.pb.go文件都生成在了goods_demo目录。</p><p>至于编译proto文件为go代码的参数使用就灵活多变，根据具体场景去使用</p></blockquote><h5 id="4-3-3-编译的xx-grpc-pg-go文件解析"><a href="#4-3-3-编译的xx-grpc-pg-go文件解析" class="headerlink" title="4.3.3 编译的xx_grpc.pg.go文件解析"></a>4.3.3 编译的xx_grpc.pg.go文件解析</h5><blockquote><p>注意：</p><ul><li>proto编译gRPC代码时，会同时把gRPC的server端代码和client端代码都自动生成</li><li>需要自己去单独实现server端的RPC方法，然后由client端来调用，这块具体要看下节解释</li></ul></blockquote><blockquote><p>从上面编译的goods_demo&#x2F;order_grpc.pb.go文件，来看看编译的内容是什么</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920234409837.png" class="" title="image-20230920234409837"><blockquote><ul><li>可以看到首部的注释内容和编译出来的order.pb.go文件中的一致</li><li>包名也是orders，和order.pb.go文件的包名也一致，那么外部调用时，既可以调用order.pb.go的序列化代码，还可以调用order_grpc.pb.go中的gRPC代码，因为都属于同一个orders包，也是因为都是从同一个源.proto文件生成的</li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230920234746370.png" class="" title="image-20230920234746370"><blockquote><p>可以看到根据源.proto文件的定义的OrderService服务，生成了如下内容</p><ul><li>OrderServiceServer接口类型<ul><li>OrderServiceServer是OrderService服务的服务器API。</li><li>所有rpc方法实现都必须内嵌UnimplementedOrderServiceServer结构体（是为了保证UnimplementedOrderServiceServer结构体也是OrderServiceServer接口类型）中以保证向前兼容性，这块是由proto编译时自动完成，不需要我们人为手动去实现接口的方法</li><li>接口中有2个需要实现的方法<ul><li>GetOrderInfo方法，方法中的第一个参数为context（用来传递上下文，不在此解释），第二个参数和我们在源.proto的rpc方法定义的参数一样，返回值也是一样，还多了一个error。</li><li>mustEmbedUnimplementedOrderServiceServer方法，中文翻译过来：“必须嵌入未实现的订单服务”，作用是为了向后兼容，这块在下节解释</li></ul></li></ul></li><li>UnimplementedOrderServiceServer结构体，从名字翻译到中文来看”未实现的OrderServiceServer”，那就说明需要我们人为手动去实现这个结构体，而且结构体还有两个方法：<ul><li>GetOrderInfo方法，这个方法中都是空，没有具体的业务逻辑，看来是需要把业务逻辑实现在这个方法里</li><li>mustEmbedUnimplementedOrderServiceServer方法是个空</li><li>从go接口定义来看，UnimplementedOrderServiceServer结构体实现了OrderServiceServer接口类型的两个方法，那么UnimplementedOrderServiceServer结构体的类型也可以是OrderServiceServer接口类型（隐式实现）</li></ul></li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921001211232.png" class="" title="image-20230921001211232"><blockquote><p>前面提到过proto编译gRPC代码时，会同时把gRPC的server端代码和client端代码都自动生成，已经介绍完server端代码了，那来介绍下gRPC的client代码，可以看到根据源.proto文件定义的OrderService服务，生成了如下的client端内容</p><ul><li>OrderServiceClient接口类型<ul><li>表示是OrderServiceClient是OrderService服务的客户端API</li><li>接口中有1个需要实现的方法<ul><li>GetOrderInfo方法，方法中的第一个参数为context（用来传递上下文，不在此解释），第二个参数有一个和我们在源.proto中定义的一样，第三个参数为可变长参数，用来传一个gRPC库内置的一些方法，返回值也是一样，还多了一个error</li></ul></li></ul></li><li>orderServiceClient结构体，这是客户端调用时使用的结构体<ul><li>orderServiceClient结构体的初始化方法NewOrderServiceClient来初始化客户端，并且入参为grpc.ClientConnInterface类型，看来是需要传入一个gRPC客户端连接进来，由客户端连接进行后续的操作</li><li>GetOrderInfo方法，这个方法里写好了客户端调用的逻辑，这块是gRPC自己生成好的，我们不需要修改，只需要在客户端调用时，按参数传参即可</li><li>从从go接口定义来看，orderServiceClient结构体实现了OrderServiceClient接口类型的方法，那么orderServiceClient结构体就可以是OrderServiceClient接口类型了（隐式实现）</li></ul></li><li>为什么orderServiceClient结构体要实现OrderServiceClient接口类型？<ul><li>因为orderServiceClient结构体的初始化方法NewOrderServiceClient的返回值是OrderServiceClient接口类型，而且在外部调用时，肯定会调用NewOrderServiceClient初始化方法，没法调用到orderServiceClient结构体，因为orderServiceClient结构体首字母是小写的</li></ul></li></ul></blockquote><blockquote><p>至此对编译生成的xx_grpc.pb.go文件解析就到这里，文件中的其余代码我们先不用关注</p></blockquote><h3 id="5、gRPC交互模式"><a href="#5、gRPC交互模式" class="headerlink" title="5、gRPC交互模式"></a>5、gRPC交互模式</h3><h4 id="5-1-Simple-RPC"><a href="#5-1-Simple-RPC" class="headerlink" title="5.1 Simple RPC"></a>5.1 Simple RPC</h4><blockquote><p>客户端发送请求，服务端响应请求，一问一答的模式在gRPC里叫做<code>Simple RPC</code> (也称<code>Unary RPC)</code>，这也是最基本的一种gRPC交互方式，下面介绍下<code>Simple RPC</code>这种方式如何使用</p></blockquote><h5 id="5-1-1-前置知识"><a href="#5-1-1-前置知识" class="headerlink" title="5.1.1 前置知识"></a>5.1.1 前置知识</h5><blockquote><p>在使用gRPC之前，先补充一个必须了解或者熟悉的知识点，那就是结构体嵌套，为什么这么说呢？</p><ul><li>从4.3.3小节可以看出，生成的gRPC的Server端和Client代码中，大量用到了接口、结构，</li><li>在讲到生成Server端代码时，发现生成的结构体、rpc方法都是未实现的，需要我们自己去实现，那么在一个已有的结构体、结构体方法的前提下，想对它实现，能想到就是继承，但是在go中没有继承的概念，那就是结构体嵌套</li><li>也就是说我们实现gPRC的Server端时，需要定义自己的结构体来嵌套gRPC生成的结构体和结构体方法，因为有了结构体嵌套了，那嵌套的结构体本身就有个被嵌套结构体的类型和方法，就和python中的父子继承逻辑一样，就可以对被嵌套的结构体的方法进行重写（编写属于我们的业务逻辑），那达成实现了被嵌套结构体方法的目的</li></ul></blockquote><h5 id="5-1-2-编写自己的server端"><a href="#5-1-2-编写自己的server端" class="headerlink" title="5.1.2 编写自己的server端"></a>5.1.2 编写自己的server端</h5><blockquote><p>到此我们就需要去实现自己的server代码，编写自己的server端最好管理在新的文件或目录里，不要和gRPC生成的代码混在一起</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ordersSvr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">orders <span class="string">&quot;example.com/studygo/grpc_study/goods_demo&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderService 嵌套了orders.UnimplementedOrderServiceServer</span></span><br><span class="line"><span class="keyword">type</span> OrderService <span class="keyword">struct</span> &#123;</span><br><span class="line">orders.UnimplementedOrderServiceServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewOrderService</span><span class="params">()</span></span> *OrderService &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;OrderService&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写GetOrderInfo方法，实现我们的业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *OrderService)</span></span> GetOrderInfo(c context.Context, orderReq *orders.OrderRequest) (*orders.OrderResponse, <span class="type">error</span>) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;orderReq is : %#+v\n&quot;</span>, orderReq)</span><br><span class="line">log.Printf(<span class="string">&quot;context is : %#+v\n&quot;</span>, c)</span><br><span class="line">md, _ := metadata.FromIncomingContext(c)</span><br><span class="line">traceId := md[<span class="string">&quot;traceid&quot;</span>][<span class="number">0</span>]</span><br><span class="line">log.Printf(<span class="string">&quot;context val is : %#+v\n&quot;</span>, traceId)</span><br><span class="line">uid := orderReq.Uid</span><br><span class="line"><span class="keyword">if</span> uid == <span class="number">0</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;uid为0，traceId: %v&quot;</span>, traceId)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;uid为0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> payRet <span class="type">bool</span></span><br><span class="line"><span class="keyword">if</span> orderReq.GoodsId &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(orderReq.UserName) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;goodsId为0且userName为空，traceId: %v&quot;</span>, traceId)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;goodsId为0且userName为空&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">payRet = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> &amp;orders.OrderResponse&#123;</span><br><span class="line">OrderId:   uid + <span class="number">10</span>,</span><br><span class="line">PayResult: payRet,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解释：</p><ul><li>首先导入了编译生成的gRPC的orders_grpc.pb.go文件中的相关代码</li><li>定义了OrderService结构体，嵌套了orders_grpc.pb.go中需要被实现的UnimplementedOrderServiceServer结构体，并且OrderService结构体还重写了UnimplementedOrderServiceServer结构体的GetOrderInfo方法，编写了我们自己的业务逻辑</li></ul></blockquote><h5 id="5-1-3-启动gRPC服务"><a href="#5-1-3-启动gRPC服务" class="headerlink" title="5.1.3 启动gRPC服务"></a>5.1.3 启动gRPC服务</h5><blockquote><p>server端需要实现的功能编写完以后，就可以注册启动gRPC服务了</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">orders <span class="string">&quot;example.com/studygo/grpc_study/goods_demo&quot;</span></span><br><span class="line">ordersSvr <span class="string">&quot;example.com/studygo/grpc_study/orders&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建tcp链接，拿到一个tcp的listener</span></span><br><span class="line">port := <span class="number">9999</span></span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;localhost:%d&quot;</span>, port))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个grpc服务，并且没有服务注册，而且也没有开始接收gRPC请求</span></span><br><span class="line">gRpcSvr := grpc.NewServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个我们编写的NewOrderService服务对象</span></span><br><span class="line">orderService := ordersSvr.NewOrderService()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给grpc服务注册orders服务，需要传入一个gRPC服务对象，以及我们实现的orderService对象</span></span><br><span class="line">orders.RegisterOrderServiceServer(gRpcSvr, orderService)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serve在监听器lis上接受传入的连接，为每个连接创建一个新的ServerTransport和服务goroutine。服务goroutine读取gRPC请求，然后调用注册的处理器来回复它们。当lis.Accept因致命错误失败时，Serve返回。当这个方法返回时，lis将被关闭。</span></span><br><span class="line">log.Printf(<span class="string">&quot;gRPC server running at: %v\n&quot;</span>, port)</span><br><span class="line">err = gRpcSvr.Serve(lis)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;start gRpc Serve err:%v&quot;</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码说明：</p><ul><li>先用net包创建了一个tcp连接，获取到一个网络监听器(network listener)</li><li>然后使用grpc.NewServer创建gPRC服务，返回值是gRPC的Server类型，Server是gRPC server来为gRPC请求服务的</li><li>然后需要实例化我们自己编写的server端，拿到我们定义的OrderService对象</li></ul></blockquote><blockquote><ul><li>到这里时网络监听(network listener)创建成功了、gRPC服务也创建好了，那就需要给gRPC服务注册我们自己编写的gRPC服务，也就是OrderService</li><li>在编译好的gRPC代码中有一个RegisterOrderServiceServer方法就是用来注册gRPC服务的，下面是源码</li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921221347170.png" class="" title="image-20230921221347170"><blockquote><p>第一个参数是grpc.ServiceRegistrar接口类型，那要给RegisterOrderServiceServer方法第一个参数传值，就需要传一个满足grpc.ServiceRegistrar接口类型的变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是grpc.ServiceRegistrar接口的源码</span></span><br><span class="line"><span class="comment">// ServiceRegistrar 包装了一个支持服务注册的单个方法。它使用户能够将除 grpc.Server 之外的具体类型传递给由IDL生成的代码导出的服务注册方法。</span></span><br><span class="line"><span class="keyword">type</span> ServiceRegistrar <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// RegisterService 将服务及其实现注册到实现此接口的具体类型。</span></span><br><span class="line">    <span class="comment">// 一旦服务器开始服务，它可能不会被调用。desc描述了服务及其方法和处理器。</span></span><br><span class="line">    <span class="comment">// impl 是传递给方法处理器的服务实现</span></span><br><span class="line">RegisterService(desc *ServiceDesc, impl <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那就可以把grpc.NewServer()生成的gRPC server对象传给第一个参数</p><p>为什么说grpc.NewServer()的返回值可以是grpc.ServiceRegistrar接口类型？</p><ul><li>首先grpc.NewServer()方法返回的是gRPC.Server类型（结构体类型），但是Server结构体实现了grpc.ServiceRegistrar接口的RegisterService方法，所以可以传给第一个参数</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是gRPC.Server实现的RegisterService方法源码</span></span><br><span class="line"><span class="comment">// RegisterService 将服务及其实现注册到gRPC服务器。它是从IDL生成的代码中调用的。这必须在调用gRPC进行Serve之前被调用。如果ss非空（用于传统代码）,则会检查其类型以确保其实现了sd.HandlerType。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> RegisterService(sd *ServiceDesc, ss <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> ss != <span class="literal">nil</span> &#123;</span><br><span class="line">ht := reflect.TypeOf(sd.HandlerType).Elem()</span><br><span class="line">st := reflect.TypeOf(ss)</span><br><span class="line"><span class="keyword">if</span> !st.Implements(ht) &#123;</span><br><span class="line">logger.Fatalf(<span class="string">&quot;grpc: Server.RegisterService found the handler of type %v that does not satisfy %v&quot;</span>, st, ht)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.register(sd, ss)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921223325793.png" class="" title="image-20230921223325793"><blockquote><p>第二个参数是源.proto文件生成gRPC代码中的OrderServiceServer接口类型，从之前的小节知识我们很容易知道，我们自己编写的server端实现了OrderServiceServer接口，那就把我们自己编写的server实例化的orderService传给第二个参数就可以了</p><p>那源.proto文件生成gRPC代码中的有没有我们可以给传的参数？</p><ul><li>没有，而且生成的代码中的UnimplementedOrderServiceServer结构体仅仅是实现了OrderServiceServer接口类型，但是没有实际的业务逻辑代码（比如GetOrderInfo），所以即使传了UnimplementedOrderServiceServer结构体也没有用</li></ul></blockquote><blockquote><p>接着就是启动gRPC服务，使用grpc.NewServer()生成的gRPC server对象，再调用serve方法来启动gRPC服务</p><ul><li>从Serve方法源码中可以看出，使用for死循环来监听tcp链接，然后处理gRPC请求。</li><li>这也是gRPC服务启动后会一直处于运行中，等待客户端来发起请求，然后处理请求返回远程调用结果</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是Serve源码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Serve(lis net.Listener) <span class="type">error</span> &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// for死循环启动tcp连接监听</span></span><br><span class="line"><span class="keyword">for</span> &#123;   </span><br><span class="line">rawConn, err := lis.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ne, ok := err.(<span class="keyword">interface</span> &#123;</span><br><span class="line">Temporary() <span class="type">bool</span></span><br><span class="line">&#125;); ok &amp;&amp; ne.Temporary() &#123;</span><br><span class="line"><span class="keyword">if</span> tempDelay == <span class="number">0</span> &#123;</span><br><span class="line">tempDelay = <span class="number">5</span> * time.Millisecond</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempDelay *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> max := <span class="number">1</span> * time.Second; tempDelay &gt; max &#123;</span><br><span class="line">tempDelay = max</span><br><span class="line">&#125;</span><br><span class="line">s.mu.Lock()</span><br><span class="line">s.printf(<span class="string">&quot;Accept error: %v; retrying in %v&quot;</span>, err, tempDelay)</span><br><span class="line">s.mu.Unlock()</span><br><span class="line">timer := time.NewTimer(tempDelay)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line"><span class="keyword">case</span> &lt;-s.quit.Done():</span><br><span class="line">timer.Stop()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">s.mu.Lock()</span><br><span class="line">s.printf(<span class="string">&quot;done serving; Accept = %v&quot;</span>, err)</span><br><span class="line">s.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.quit.HasFired() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">tempDelay = <span class="number">0</span></span><br><span class="line"><span class="comment">// Start a new goroutine to deal with rawConn so we don&#x27;t stall this Accept</span></span><br><span class="line"><span class="comment">// loop goroutine.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Make sure we account for the goroutine so GracefulStop doesn&#x27;t nil out</span></span><br><span class="line"><span class="comment">// s.conns before this conn can be added.</span></span><br><span class="line">s.serveWG.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">s.handleRawConn(lis.Addr().String(), rawConn)</span><br><span class="line">s.serveWG.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-4-启动gRPC客户端"><a href="#5-1-4-启动gRPC客户端" class="headerlink" title="5.1.4 启动gRPC客户端"></a>5.1.4 启动gRPC客户端</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line">orders <span class="string">&quot;example.com/studygo/grpc_study/goods_demo&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genUUID</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">uuidStr := uuid.New().String()</span><br><span class="line">uuidStrList := strings.Split(uuidStr, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> uuidStrList[<span class="built_in">len</span>(uuidStrList)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">creds := insecure.NewCredentials()</span><br><span class="line"><span class="comment">// 连接gRPC服务， 拿到一个连接</span></span><br><span class="line">conn, err := grpc.Dial(<span class="string">&quot;:9999&quot;</span>, grpc.WithTransportCredentials(creds))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;连接gRPC服务失败: %v\n&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行完关闭连接</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用连接去执行本地gRPC方法 先根据创建的连接拿到一个gRPC的客户端</span></span><br><span class="line">client := orders.NewOrderServiceClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用client对象的方法，就像是调用grpc服务中本地方法一样</span></span><br><span class="line">orderReq := &amp;orders.OrderRequest&#123;</span><br><span class="line">Uid:      <span class="number">50</span>,</span><br><span class="line">GoodsId:  <span class="number">10</span>,</span><br><span class="line">UserName: <span class="string">&quot;风情万种&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的ctx</span></span><br><span class="line">md := metadata.New(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;traceId&quot;</span>: fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, genUUID())&#125;)</span><br><span class="line">ctx := metadata.NewOutgoingContext(context.Background(), md)</span><br><span class="line"></span><br><span class="line">info, orderErr := client.GetOrderInfo(ctx, orderReq)</span><br><span class="line"><span class="keyword">if</span> orderErr != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;client调用方法失败: %v\n&quot;</span>, orderErr.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;client调用GetOrderInfo获取到的结果:%#+v\n&quot;</span>, info)</span><br><span class="line">log.Printf(<span class="string">&quot;client调用GetOrderInfo获取到的info.OrderId:%#+v\n&quot;</span>, info.OrderId)</span><br><span class="line">log.Printf(<span class="string">&quot;client调用GetOrderInfo获取到的info.PayResult:%#+v\n&quot;</span>, info.PayResult)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户端的代码相对来说就比较简单好理解</p><ul><li>grpc.Dial()用来连接gRPC服务，并且使用defer在调用完以后关闭本次rpc请求，保证连接的安全释放</li><li>需要注意，连接gRPC服务时，需要传证书保证传输安全，但是一开始我们没有证书，那就需要先略过传输证书，但是如果不传证书，启动gRPC客户端时就会有如下报错，提示需要设置证书</li></ul></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921225115649.png" class="" title="image-20230921225115649"><blockquote><p>那gRPC也考虑到了这一点，给我们提供了禁用传输安全证书的方法，也就是表示不需要传证书也可以发起gRPC连接，主要会用到如下2个方法</p><ul><li>grpc.WithInsecure方法，但是这个方法在gRPC的1.55版本中被废弃了，推荐使用gRPC.WithTransportCredentials 和 insecure.NewCredentials()</li><li>gRPC.WithTransportCredentials方法，需要传credentials.TransportCredentials类型参数，使用insecure.NewCredentials()返回的就是credentials.TransportCredentials类型，传给gRPC.WithTransportCredentials方法即可</li></ul></blockquote><blockquote><ul><li><p>然后调用源.proto文件中的客户端代码，即NewOrderServiceClient方法拿到客户端对象，需要把第一步创建的gRPC连接作为第一个参数传进去</p></li><li><p>客户端对象就可以调用它的GetOrderInfo方法</p><ul><li>GetOrderInfo方法需要传递的参数其实就是源.proto中定义的OrderRequest类型，即编译生成gRPC的go代码中的OrderRequest结构体</li><li>GetOrderInfo方法还会把调用结果返回，类型是编译生成gRPC的go代码中的OrderResponse结构体</li></ul></li></ul></blockquote><blockquote><p>下面就是一次gRPC调用过程的截图</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921230725733.png" class="" title="image-20230921230725733"><h5 id="5-1-5-gRPC调用传值"><a href="#5-1-5-gRPC调用传值" class="headerlink" title="5.1.5 gRPC调用传值"></a>5.1.5 gRPC调用传值</h5><blockquote><p>从上面代码可以看到:</p><ul><li>无论是客户端调用、还是服务端重写GetOrderInfo方法，第一个参数都是context</li><li>客户端调用时，给context设置值，然后gRPC服务端的context可以接收到客户端传过来的值，那就可以做日志的链路追踪，可以根据traceId，追踪到每一次调用的请求以及响应，对查问题有很大帮助</li><li>在gRPC中不能直接用go的context包来设置值，因为只会在客户端运行时生效，不会传递到gRPC请求中的</li><li>而是需要用grpc封装的metadata包来传值，这样gRPC服务端才可以接收到客户端设置在context中的值<ul><li>metadata.NewOutgoingContext方法返回的也是一个context对象，那就可以作为第一个参数来传递</li><li>metadata.FromIncomingContext方法来解析传递过来的值</li></ul></li></ul><p>参考：<a href="https://www.yht7.com/news/264670">https://www.yht7.com/news/264670</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genUUID</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">uuidStr := uuid.New().String()</span><br><span class="line">uuidStrList := strings.Split(uuidStr, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> uuidStrList[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端设置需要传递的值，NewOutgoingContext方法返回的是context.Context类型</span></span><br><span class="line">...</span><br><span class="line">md := metadata.New(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;traceId&quot;</span>: fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, genUUID())&#125;)</span><br><span class="line">ctx := metadata.NewOutgoingContext(context.Background(), md)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端从客户端传递的context中解析值，FromIncomingContext方法返回的是map[string][]string</span></span><br><span class="line"><span class="comment">// 需要注意取值的索引</span></span><br><span class="line">md, _ := metadata.FromIncomingContext(c)</span><br><span class="line">traceId := md[<span class="string">&quot;traceid&quot;</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>下面就客户端把traceId传给了gRPC服务端</p></blockquote><img src="/2022/08/01/golang/go_grpc/go_grpc%E4%BD%BF%E7%94%A8/image-20230921232050062.png" class="" title="image-20230921232050062"><blockquote><p>注意：</p><ul><li>在客户端使用metadata.New方法设置需要传递的值时，即使设置值的key为小驼峰格式(xxXX格式)，服务端解析传递的值的key时，会把key解析为全小写，这一点需要留意，否则会出现服务端解析不到值的情况</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go与GRPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> gRPC </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element_UI学习</title>
      <link href="/2022/07/25/web_dev/element_ui%E5%AD%A6%E4%B9%A0/element_ui%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/25/web_dev/element_ui%E5%AD%A6%E4%B9%A0/element_ui%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Element-UI"><a href="#一、Element-UI" class="headerlink" title="一、Element-UI"></a>一、Element-UI</h2><blockquote><p>官网：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><p>黑马程序员：</p><p><a href="https://www.bilibili.com/video/BV1x64y1S7S7?p=31&spm_id_from=pageDriver&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1x64y1S7S7?p=31&spm_id_from&#x3D;pageDriver&amp;vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="1、Element-UI介绍"><a href="#1、Element-UI介绍" class="headerlink" title="1、Element-UI介绍"></a>1、Element-UI介绍</h3><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Element_UI学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> Element_UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS语法</title>
      <link href="/2022/07/08/web_dev/javascript%E7%AC%94%E8%AE%B0/js%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/08/web_dev/javascript%E7%AC%94%E8%AE%B0/js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JS介绍"><a href="#一、JS介绍" class="headerlink" title="一、JS介绍"></a>一、JS介绍</h2><h3 id="1、js概念"><a href="#1、js概念" class="headerlink" title="1、js概念"></a>1、js概念</h3><blockquote><p>javascript是脚本语言，浏览器会有一个js解释器，对js代码逐行进行解释后执行</p><p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=271&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=271&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p><p>ES6语法：</p><p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=9">https://www.bilibili.com/video/BV1uK411H7on?p=9</a></p></blockquote><h3 id="2、js组成"><a href="#2、js组成" class="headerlink" title="2、js组成"></a>2、js组成</h3><blockquote><p>js由三部分组成，如下三部分</p><ul><li>ECMAScript： javascript语法，规定了js的编程语法和基础核心知识，是所有浏览器需要保持的一个标准</li><li>DOM：页面文档对象模型</li><li>BOM：浏览器对象模型，控制浏览器的行为，弹出弹窗、打开页面等等、</li></ul></blockquote><h3 id="3、js的位置"><a href="#3、js的位置" class="headerlink" title="3、js的位置"></a>3、js的位置</h3><ul><li><p>有三种写法，详细看代码，分为行内、内嵌、外部js</p></li><li><p>注意：外部js的两个<code>script</code>标签之间不可以写内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>day2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 内嵌式js</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;内嵌式js&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 行内式js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点我了&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 外链式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、js注释"><a href="#4、js注释" class="headerlink" title="4、js注释"></a>4、js注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单行注释:  </span><br><span class="line">// 单行注释</span><br><span class="line"></span><br><span class="line">多行注释: </span><br><span class="line">/* 多行注释*/</span><br></pre></td></tr></table></figure><h3 id="5、js输入输出"><a href="#5、js输入输出" class="headerlink" title="5、js输入输出"></a>5、js输入输出</h3><blockquote><p>alert(‘msg’):  浏览器的弹出框</p><p>console.log(‘msg’): 控制台打印输出</p><p>prompt(‘msg’): 浏览器提示输入</p></blockquote><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><blockquote><ul><li><p>声明变量：  <code>var  age;</code></p></li><li><p><code>var</code>是<code>js</code>的一个关键字，用来声明变量（<code>variable</code>变量的意思），使用这个关键字，会自动分配内存空间</p></li><li><p>变量初始化：先声明再赋值</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  age;</span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><blockquote><p>变量只声明不赋值：返回结果是<code>undefined</code>，表示没有给值，是未定义的变量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  age;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>变量不声明不赋值直接使用会报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tr); <span class="comment">// 提示 tr没有被定义的报错</span></span><br></pre></td></tr></table></figure><ul><li>变量直接赋值使用不声明，可以使用，不过不推荐该方法，应该要用关键字<code>var</code>来声明变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qq = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(qq);</span><br></pre></td></tr></table></figure><ul><li>更新变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  age;</span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><ul><li>变量交换值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp; <span class="comment">// 临时变量</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.将tmp等于num1的值</span></span><br><span class="line">tmp = num1;</span><br><span class="line"><span class="comment">// 2.将num1等于num2的值</span></span><br><span class="line">num1 = num2</span><br><span class="line"><span class="comment">// 3.将num2等于tmp的值</span></span><br><span class="line">num2 = tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出num1、num2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><blockquote><p>js的数据类型是在程序运行时自动判断的，也就是自动推导数据类型</p><p>js数据类型分类：</p><ul><li>简单数据类型：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code></li><li>复杂数据类型：<code>Object</code></li></ul></blockquote><h4 id="2-1-数值型number"><a href="#2-1-数值型number" class="headerlink" title="2.1 数值型number"></a>2.1 数值型number</h4><blockquote><p>包含整型和浮点型，默认值是<code>0</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字型最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字型最小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面内容作为了解</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">Infinity</span>);  <span class="comment">// 无穷大</span></span><br><span class="line"><span class="title function_">alert</span>(-<span class="title class_">Infinity</span>);  <span class="comment">// 无穷小</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="title class_">NaN</span>);  <span class="comment">// 非数字，Not a Number</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isNaN(variable) 这个方法用来判断非数字，并且返回一个值，如果是数字，返回false，不是数字，返回的是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">123</span>)) <span class="comment">// 输出false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;test nova&#x27;</span>)); <span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure><h4 id="2-2-布尔类型boolean"><a href="#2-2-布尔类型boolean" class="headerlink" title="2.2 布尔类型boolean"></a>2.2 布尔类型boolean</h4><blockquote><p>布尔类型，结果为<code>true</code>、<code>false</code>对应数字<code>1</code>和<code>0</code>，可以用来加法运算</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true  表示真</span></span><br><span class="line"><span class="keyword">var</span> flag_t = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag_t); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// false 表示假</span></span><br><span class="line"><span class="keyword">var</span> flag_f = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag_f); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔类型参与运算，true = 1，false = 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure><h4 id="2-3-字符串型String"><a href="#2-3-字符串型String" class="headerlink" title="2.3 字符串型String"></a>2.3 字符串型String</h4><blockquote><p>字符串类型，需要带引号</p><p><code>\n</code> 表示换行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;这是一个字符串\n变量&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 输出: 这是一个字符串变量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串的长度</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;我是谁&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串的拼接</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;harry&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;potter&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = str1 + str2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3); <span class="comment">// 输出：harrypotter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串的拼接，只要有字符串和其他类型拼接，都会展示为字符串类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span> + <span class="string">&#x27;jim&#x27;</span>); <span class="comment">// 输出: 12jim</span></span><br></pre></td></tr></table></figure><h4 id="2-4-undefined"><a href="#2-4-undefined" class="headerlink" title="2.4 undefined"></a>2.4 undefined</h4><blockquote><p><code>var age;</code>只声明变量不赋值，就是未定义类型，此时<code>age</code>的值是<code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age + <span class="string">&#x27;ko&#x27;</span>); <span class="comment">// 输出: undefinedko</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined和数字相加，不是一个数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age + <span class="number">1</span>); <span class="comment">// 输出 NaN</span></span><br></pre></td></tr></table></figure><h4 id="2-5-null类型"><a href="#2-5-null类型" class="headerlink" title="2.5 null类型"></a>2.5 null类型</h4><blockquote><p><code>var age=null;</code>声明变量是一个空值，默认值是<code>null</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age + <span class="string">&#x27;ko&#x27;</span>); <span class="comment">// 输出: nullko</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null和数字相加，输出数字，空值表示完全是空的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age + <span class="number">1</span>); <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure><h4 id="2-6-检测数据类型"><a href="#2-6-检测数据类型" class="headerlink" title="2.6 检测数据类型"></a>2.6 检测数据类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age); <span class="comment">// 输出: number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age_1 = <span class="string">&#x27;this is js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_1); <span class="comment">// 输出: string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age_2 = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_2); <span class="comment">// 输出: Boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age_3;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_3); <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age_4 = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_4); <span class="comment">// 输出: object (后面再学对象时有用)</span></span><br></pre></td></tr></table></figure><h3 id="3、数据类型转换"><a href="#3、数据类型转换" class="headerlink" title="3、数据类型转换"></a>3、数据类型转换</h3><h4 id="3-1-转换为字符型"><a href="#3-1-转换为字符型" class="headerlink" title="3.1 转换为字符型"></a>3.1 转换为字符型</h4><blockquote><p><code>age.toString()</code> 不常用</p><p><code>String(age)</code>不常用</p><p> <code>+</code>号拼接,数字加一个空字符串，就可以变为字符串类型（<font style="color: red">常用</font>）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toString() 不常用</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age.<span class="title function_">toString</span>());  <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age.<span class="title function_">toString</span>());  <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String() 不常用</span></span><br><span class="line"><span class="keyword">var</span> age_1 = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(age_1));  <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_1.<span class="title function_">toString</span>());  <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// +号拼接,数字加一个空字符串，就可以变为字符串类型</span></span><br><span class="line"><span class="keyword">var</span> age_2 = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> age_3 = age + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age_3);  <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_3);  <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h4 id="3-2-转换为数字"><a href="#3-2-转换为数字" class="headerlink" title="3.2 转换为数字"></a>3.2 转换为数字</h4><ul><li><code>parseInt(string)</code> 转换为整数型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parseInt(string) 转换为整数型，得到的是一个整数</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sex_int= <span class="built_in">parseInt</span>(sex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex_int);  <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> sex_int); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt(string) 只会取整数部分，不会走四舍五入</span></span><br><span class="line"><span class="keyword">var</span> sex_1 = <span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="keyword">var</span> sex_2 = <span class="string">&#x27;3.94&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(sex_1)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(sex_2)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseInt(string) 可以用来取像素整数，只会取到数字部分，但是开头是非数字的取时会显示为非数字，结果为NaN</span></span><br><span class="line"><span class="keyword">var</span> sex_3 = <span class="string">&#x27;314px&#x27;</span></span><br><span class="line"><span class="keyword">var</span> sex_4 = <span class="string">&#x27;rem314px&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(sex_3)); <span class="comment">// 314</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(sex_4)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li><code>parseFloat(string)</code>转换为浮点型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parseFloat(string) 转换为浮点型，得到的是一个整数</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sex_int= <span class="built_in">parseFloat</span>(sex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex_int);  <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> sex_int); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseFloat(string) 转换为浮点型，不会走四舍五入</span></span><br><span class="line"><span class="keyword">var</span> sex_1 = <span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="keyword">var</span> sex_2 = <span class="string">&#x27;3.94&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(sex_1)); <span class="comment">// 3.14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(sex_2)); <span class="comment">// 3.94</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseFloat(string) 可以用来取像素整数，只会取到数字部分，但是开头是非数字的取时会显示为非数字，结果为NaN</span></span><br><span class="line"><span class="keyword">var</span> sex_3 = <span class="string">&#x27;314.34px&#x27;</span></span><br><span class="line"><span class="keyword">var</span> sex_4 = <span class="string">&#x27;rem314.34px&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(sex_3)); <span class="comment">// 314.34</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(sex_4)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><ul><li>隐式转换为数字，支持 <code>-</code>、<code>*</code>、<code>/</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="string">&#x27;12&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age_int = age - <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age_int); <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age_int); <span class="comment">// number </span></span><br></pre></td></tr></table></figure><h4 id="3-3-转换为布尔类型"><a href="#3-3-转换为布尔类型" class="headerlink" title="3.3 转换为布尔类型"></a>3.3 转换为布尔类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;this is js&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">13</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h3><h4 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h4><blockquote><p>就是<code>加</code>、<code>减</code>、<code>乘</code>、<code>除</code>、<code>取余</code>、<code>浮点数</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> - <span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> * <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 取余</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> % <span class="number">1</span>); <span class="comment">// 0  </span></span><br><span class="line"><span class="comment">// 浮点数相加会有精度问题，不建议浮点数直接相加</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><h4 id="4-2-表达式和返回值"><a href="#4-2-表达式和返回值" class="headerlink" title="4.2 表达式和返回值"></a>4.2 表达式和返回值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1+1 是表达式，1+1 的结果是2 2是返回值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="4-3-前置递增运算符"><a href="#4-3-前置递增运算符" class="headerlink" title="4.3 前置递增运算符"></a>4.3 前置递增运算符</h4><blockquote><p>格式： <code>++num</code></p><p>定义： 让一个变量自己<code>+1</code></p><p>概念：<code>++num</code>在运算时，先加<code>1</code>，再返回值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始变量自己+1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = num + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述变法比较麻烦，可以用 ++num(前置递增运算符)</span></span><br><span class="line"><span class="comment">// ++num 等同于 num = num +1</span></span><br><span class="line"><span class="keyword">var</span> num_2 = <span class="number">2</span>;</span><br><span class="line">++num_2</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num_2);  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ++num在运算时，先加1，再返回值</span></span><br><span class="line"><span class="keyword">var</span> num_3 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面结果是5，因为++num_3 + 1 运算时是先进行了+1，此时</span></span><br><span class="line"><span class="comment">// ++num_3 的值是4，4再+1就是5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num_3 + <span class="number">1</span>);  <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num_3); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="4-3-后置递增运算符-常用"><a href="#4-3-后置递增运算符-常用" class="headerlink" title="4.3 后置递增运算符(常用)"></a>4.3 后置递增运算符(<font style='color:red'>常用</font>)</h4><blockquote><p>格式： <code>num++</code></p><p>定义： 让一个变量自己<code>+1</code></p><p>概念：<code>num++</code>在运算时，先返回<code>num</code>原值，再<code>+1</code></p><p>需要注意: 当 <code>num++ </code>单独使用时，返回值和<code>num++</code>效果一样，不单独使用时，num++<code>返回的是</code>num&#96;这个变量的原值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当num++单独使用时,效果和++num一样,所以下面这个表达式的结果是10+1=11,此时num=11</span></span><br><span class="line">num++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面用num++ + 2时，num++先返回原值，此时num的原值就是11，所以下面的表达式结果就是11+2=13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++ + <span class="number">2</span>); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h4 id="4-4-比较运算符"><a href="#4-4-比较运算符" class="headerlink" title="4.4 比较运算符"></a>4.4 比较运算符</h4><blockquote><p>大于： <code>&gt;</code></p><p>小于： <code>&gt;</code></p><p>大于等于： <code>&gt;=</code></p><p>小于等于： <code>&lt;=</code></p><p>等于2个等于号： <code>==</code> ，默认会进行数据类型转换，会把字符串类型转换为数字型</p><p>不等于： <code>!=</code></p><p>全等：<code>===</code>，两个比较的值和数据类型一样，才是true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大于 &gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">4</span>); <span class="comment">//false  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于 &gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于等于 &gt;=</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">4</span>); <span class="comment">//false  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于等于 &lt;=</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt;= <span class="number">4</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等于2个等于号 == ，默认会进行数据类型转换，会把字符串类型转换为数字型，属于隐式转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> == <span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum&#x27;</span> == <span class="string">&#x27;bob&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> == <span class="number">13</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> == <span class="string">&#x27;13&#x27;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> == <span class="string">&#x27;13px&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> == <span class="string">&#x27;rem13px&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等于 !=</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> != <span class="number">5</span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum&#x27;</span> != <span class="string">&#x27;bob&#x27;</span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> != <span class="number">13</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> != <span class="string">&#x27;13&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> != <span class="string">&#x27;13px&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> != <span class="string">&#x27;rem13px&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全等 ===</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> === <span class="number">5</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum&#x27;</span> === <span class="string">&#x27;bob&#x27;</span>); <span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> === <span class="number">13</span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span> === <span class="string">&#x27;13&#x27;</span>); <span class="comment">//false </span></span><br></pre></td></tr></table></figure><h4 id="4-5-逻辑运算符"><a href="#4-5-逻辑运算符" class="headerlink" title="4.5 逻辑运算符"></a>4.5 逻辑运算符</h4><blockquote><p>逻辑与：代码符号<code>&amp;&amp;</code>，表示and的意思</p><p>逻辑或：代码符号<code>||</code>，表示or的意思</p><p>逻辑非：代码符号<code>!</code>，表示not的意思</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑与：代码符号 &amp;&amp; ，表示and的意思，两侧都为true，结果才是true，只要有一侧为false，结果为false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">4</span> &gt; <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">4</span> &lt; <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑或：代码符号 ||，表示or的意思，两侧都为false，结果才是false，只要有一侧为true，结果为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">3</span> &lt; <span class="number">5</span> || <span class="number">4</span> &gt; <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="number">3</span> &lt; <span class="number">5</span> || <span class="number">4</span> &lt; <span class="number">5</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑非：代码符号 ！，表示not的意思，表示非的意思，会将true的变为false，然后把false变为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( !(<span class="number">4</span> &gt; <span class="number">5</span>) ); <span class="comment">// true  4大于5 是false，然后逻辑非加上，就变成了true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( !(<span class="number">4</span> &lt; <span class="number">5</span>) ); <span class="comment">// false 4小于5 是true，然后逻辑非加上，就变成了false</span></span><br></pre></td></tr></table></figure><ul><li>逻辑与运算符号的中断&#x2F;短路逻辑</li></ul><blockquote><p>原理：当有多个表达值时，左边的表达式值可以确定结果时，就不需要计算右边的表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是中断，所以逻辑运算符后面的不再进行计算</span></span><br><span class="line"><span class="comment">// 如果表达式1为真，则返回表达式2   如果表达式1为假，则返回表达式1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span>); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">456</span>); <span class="comment">// 0在js中表示false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">1</span> + <span class="number">2</span> &amp;&amp; <span class="number">456</span> + <span class="number">789</span>); <span class="comment">// 0在js中表示false</span></span><br></pre></td></tr></table></figure><ul><li>逻辑或运算符号的中断&#x2F;短路逻辑</li></ul><blockquote><p>原理：当有多个表达值时，左边的表达式值可以确定结果时，则返回左边的表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是中断，所以逻辑运算符后面的不再进行计算</span></span><br><span class="line"><span class="comment">// 如果表达式1为真，则返回表达式1   如果表达式1为假，则返回表达式2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || <span class="number">456</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">456</span>); <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="number">1</span> + <span class="number">2</span> || <span class="number">456</span> + <span class="number">789</span>); <span class="comment">// 3，因为0是false，所以此时返回1+2的结果3，但是3是true，所以和（456+789）或的时候返回3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || num++);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 0 因为上面的逻辑或运算，由于123是true，所以返回了123，后面的num++不会运行，所以num的值仍是0</span></span><br></pre></td></tr></table></figure><h4 id="4-6-赋值运算符"><a href="#4-6-赋值运算符" class="headerlink" title="4.6 赋值运算符"></a>4.6 赋值运算符</h4><blockquote><p>直接赋值：<code>=</code></p><p>加减一个数后再赋值：<code>+=</code>、<code>-=</code></p><p>乘除取模后再赋值：<code>*=</code>、<code>/=</code>、<code>%=</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// num++ 和 += 的区别</span></span><br><span class="line"><span class="comment">// num++ 只能每次加+1</span></span><br><span class="line"><span class="comment">//  += 可以每次加N</span></span><br><span class="line"><span class="comment">// -= 、*= 、 /= 、 %= 同理</span></span><br><span class="line"><span class="keyword">var</span> num_t = <span class="number">3</span>;</span><br><span class="line">num_t += <span class="number">3</span> <span class="comment">// 每次可以+3，等同于  num_t = num_t + 3  , num_t = 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num_t); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="4-7-运算符优先级"><a href="#4-7-运算符优先级" class="headerlink" title="4.7 运算符优先级"></a>4.7 运算符优先级</h4><blockquote><p>优先级  运算符解释  符号</p><p>1  小括号：<code>()</code> </p><p>2  一元运算符 <code>++</code> <code>--</code> <code>!</code></p><p>3  算数运算符 先<code>*</code>   <code>/</code>    <code>%</code>后 <code>+</code> <code>-</code></p><p>4  比较运算符  <code>&gt;</code> <code>&gt;=</code> <code>&lt;=</code></p><p>5  相等运算符  <code>==</code> <code>!=</code> <code>===</code> <code>!==</code></p><p>6  逻辑运算符 条件表示式有<code>&amp;&amp;</code>和<code>||</code>先计算<code>&amp;&amp;</code> 再计算<code>||</code></p><p>7  赋值运算符 <code>=</code></p><p>8 逗号运算符 <code>,</code>   </p></blockquote><h2 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h2><blockquote><p>分支流程控制和其他编程语言相同，不做过多介绍，只记录语法</p></blockquote><h3 id="1、if-else分支"><a href="#1、if-else分支" class="headerlink" title="1、if-else分支"></a>1、if-else分支</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if 格式，条件表达式为true，执行if判断里的语句代码，条件表达式为false，则执行else代码</span></span><br><span class="line"><span class="comment">// if (条件表达式) &#123;</span></span><br><span class="line"><span class="comment">//   statement;    </span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//   statement</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">3</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3 &gt; 1&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3 &lt; 1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output  : &#x27;3 &gt; 1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>案例：判断闰年</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="number">2013</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&#x27;年是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&#x27;年不是闰年&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// 2013年不是闰年</span></span><br></pre></td></tr></table></figure><h3 id="2、if-else-if-else-语句"><a href="#2、if-else-if-else-语句" class="headerlink" title="2、if-else if -else 语句"></a>2、if-else if -else 语句</h3><blockquote><p>这个是多条件语句</p><p><code>else if</code>是需要跟一个条件表达式的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year &gt; <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;90 score&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (year &gt; <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;80 score&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;小于80score&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// 80 score</span></span><br></pre></td></tr></table></figure><h3 id="3、三元表达式"><a href="#3、三元表达式" class="headerlink" title="3、三元表达式"></a>3、三元表达式</h3><blockquote><p>用来做一些简单的<code>if-else</code>判断</p><p>格式： 条件表示式 ? 表达式1 : 表达式2</p><p>解释：条件表达式为真，则返回表达式1的值，如果条件表达式为假，则返回表达式2的值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = sum &gt; <span class="number">6</span> ? <span class="string">&#x27;大于6&#x27;</span> : <span class="string">&#x27;小于6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// 大于6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字补0,大于10不用补0.小于10需要补0</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> ret = num &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + num : num;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);  <span class="comment">// 09</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ret); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="4、switch语句"><a href="#4、switch语句" class="headerlink" title="4、switch语句"></a>4、switch语句</h3><blockquote><p>解释：多个值来匹配<code>case</code></p><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">va1ue1</span>:</span><br><span class="line">    statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">va1ue2</span>:</span><br><span class="line">    statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">  statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>语法注意事项：</p><ul><li><code>switch</code>语句里的表达式是一个准确的值，经常是一个变量</li><li>与<code>case</code>后面的值匹配时是全等匹配，既需要判断值是否相等，还要看数据类型是否相等</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;2&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;9&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;not found!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>switch</code>和<code>if - else</code>的区别<ul><li><code>switch</code>语句处理<code>case</code>比较确定的情况，<code>if else </code>更灵活，用于处理判断(大于、小于等判断条件)</li><li><code>switch</code>语句进行条件判断后直接执行程序的语句，效率高，<code>if else</code>语句条件的判断条件比较多，需要不断进行匹配</li><li><code>switch</code>语句适用于分支比较多的情况，<code>if-else</code>适用于分支较少的情况</li></ul></li></ul><h3 id="5、循环语句"><a href="#5、循环语句" class="headerlink" title="5、循环语句"></a>5、循环语句</h3><h4 id="5-1-for-循环"><a href="#5-1-for-循环" class="headerlink" title="5.1 for 循环"></a>5.1 for 循环</h4><blockquote><p><code>for</code>循环语句格式</p><p>for循环的里条件表达式条件走完以后，就会退出循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i = &#x27;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ouput:</span></span><br><span class="line"><span class="comment">// i = 0</span></span><br><span class="line"><span class="comment">// i = 1</span></span><br><span class="line"><span class="comment">// i = 2</span></span><br><span class="line"><span class="comment">// i = 3</span></span><br><span class="line"><span class="comment">// i = 4</span></span><br><span class="line"><span class="comment">// i = 5</span></span><br><span class="line"><span class="comment">// i = 6</span></span><br><span class="line"><span class="comment">// i = 7</span></span><br><span class="line"><span class="comment">// i = 8</span></span><br><span class="line"><span class="comment">// i = 9</span></span><br><span class="line"><span class="comment">// i = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环里使用if判断</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">9</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i = &#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// i = 10</span></span><br></pre></td></tr></table></figure><ul><li>求1…100的整数和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">     sum += i; <span class="comment">// 等价于sum = sum + i; </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure><ul><li>求1…100的所有数的平均值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">     sum += i; <span class="comment">// 等价于sum = sum + i; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> avg = sum / <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(avg); <span class="comment">// 50.5</span></span><br></pre></td></tr></table></figure><ul><li>求1..100的奇数和偶数的和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// odd是奇数，even是偶数</span></span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        even += i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        odd += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = odd + even;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure><ul><li>求1…100的能被3整除的数字之和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// odd是奇数，even是偶数</span></span><br><span class="line"><span class="keyword">var</span> enu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        enu += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(enu); <span class="comment">// 1683</span></span><br></pre></td></tr></table></figure><ul><li>for循环求学生成绩总数和平均成绩</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环求学生成绩总数和平均成绩</span></span><br><span class="line"><span class="keyword">var</span> stu_num = <span class="title function_">prompt</span>(<span class="string">&#x27;输入学生个数:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> stu_sum_scores = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= stu_num; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> stu_score = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>);</span><br><span class="line">    stu_sum_scores += <span class="built_in">parseFloat</span>(stu_score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu_score_avg = stu_sum_scores / stu_num;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;学生总成绩:&#x27;</span> + stu_sum_scores); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;学生的平均成绩:&#x27;</span> + stu_score_avg); </span><br></pre></td></tr></table></figure><ul><li>画星星</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小星星的个数</span></span><br><span class="line"><span class="keyword">var</span> stu_num = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> star_fmt = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= stu_num; i++)&#123;</span><br><span class="line">    star_fmt += <span class="string">&#x27;⭐️&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star_fmt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ouput:</span></span><br><span class="line"><span class="comment">// ⭐️⭐️⭐️⭐️⭐️</span></span><br></pre></td></tr></table></figure><h4 id="5-2-for嵌套循环"><a href="#5-2-for嵌套循环" class="headerlink" title="5.2 for嵌套循环"></a>5.2 for嵌套循环</h4><blockquote><ul><li>语法格式：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (外层初始化变量; 外层的条件表达式; 外层的操作表达式) &#123;</span><br><span class="line">   <span class="keyword">for</span> (里层初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span><br><span class="line">            statement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环嵌套：<ul><li>外层循环执行一次，里层循环全部执行一次</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是外层的第&#x27;</span> + i + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是里层的第&#x27;</span> + j + <span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 这是外层的第0次</span></span><br><span class="line"><span class="comment">// 这是里层的第0次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是外层的第1次</span></span><br><span class="line"><span class="comment">// 这是里层的第0次</span></span><br><span class="line"><span class="comment">// 这是里层的第1次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是外层的第2次</span></span><br><span class="line"><span class="comment">// 这是里层的第0次</span></span><br><span class="line"><span class="comment">// 这是里层的第1次</span></span><br><span class="line"><span class="comment">// 这是里层的第2次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是外层的第3次</span></span><br><span class="line"><span class="comment">// 这是里层的第0次</span></span><br><span class="line"><span class="comment">// 这是里层的第1次</span></span><br><span class="line"><span class="comment">// 这是里层的第2次</span></span><br><span class="line"><span class="comment">// 这是里层的第3次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是外层的第4次</span></span><br><span class="line"><span class="comment">// 这是里层的第0次</span></span><br><span class="line"><span class="comment">// 这是里层的第1次</span></span><br><span class="line"><span class="comment">// 这是里层的第2次</span></span><br><span class="line"><span class="comment">// 这是里层的第3次</span></span><br><span class="line"><span class="comment">// 这是里层的第4次</span></span><br></pre></td></tr></table></figure><ul><li>打印五行五列玫瑰花</li></ul><blockquote><p>需要定义一个空字符串变量来接收输出的玫瑰花</p><p>这个五行五列可以写活了，使用变量代替接收需要打印多少行多少列</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exper = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123; <span class="comment">// 最外层循环控制打印5行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123; <span class="comment">// 最里层循环控制每行打印5个</span></span><br><span class="line">        exper += <span class="string">&#x27;🌹&#x27;</span>;  <span class="comment">// 使用空字符串将每次循环打印的玫瑰花连接起来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最里层循环结束以后，表示一行打印结束，所以需要给 exper这个字符串加一个换行符，表示重新在新的一行展示新一行玫瑰花，注意这里的换行不能用console.log(&#x27;\n&#x27;)替换，会出现所有玫瑰花全在一行的情况，因为console.log(&#x27;\n&#x27;)只是将当前循环结束后添加了一个空白内容的换行了，最后会看到有很多空白的换行，但是exper这个表达式自身的没有换行，所以需要将exper在每次循环结束都添加一次换行</span></span><br><span class="line">    exper += <span class="string">&#x27;\n&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exper);</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/javascript%E7%AC%94%E8%AE%B0/js%E7%AC%94%E8%AE%B0/image-20210708144302661.png" class="" title="image-20210708144302661"><ul><li>9X9乘法口诀</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exper = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = i * j;</span><br><span class="line">        <span class="keyword">var</span> new_ret = ret &lt; <span class="number">10</span> ? ret + <span class="string">&#x27; &#x27;</span> : ret; </span><br><span class="line">        <span class="keyword">var</span> exper = exper + i + <span class="string">&#x27;*&#x27;</span> + j + <span class="string">&#x27;=&#x27;</span> + new_ret + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            exper += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下图</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/javascript%E7%AC%94%E8%AE%B0/js%E7%AC%94%E8%AE%B0/image-20210708142344674.png" class="" title="image-20210708142344674"><ul><li>打印倒三角</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exper = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">9</span>; j++)&#123;</span><br><span class="line">        exper += <span class="string">&#x27;🌹&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exper += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exper);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/javascript%E7%AC%94%E8%AE%B0/js%E7%AC%94%E8%AE%B0/image-20210708162648053.png" class="" title="image-20210708162648053"><h4 id="5-3-while循环"><a href="#5-3-while循环" class="headerlink" title="5.3 while循环"></a>5.3 while循环</h4><blockquote><p>while 循环，条件表达式为true，则执行循环，否则退出循环</p><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    代码语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内层while循环: num:&#x27;</span> + num);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-do-while循环"><a href="#5-4-do-while循环" class="headerlink" title="5.4 do while循环"></a>5.4 do while循环</h4><blockquote><p><code>do...while</code>是<code>while</code>循环的变体，执行循环前先自己执行一次代码，然后对<code>while</code>中的条件判断语句判断，如果为<code>true</code>，则继续执行<code>while</code>循环，如果为<code>false</code>，则退出循环</p><p>语法格式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125;<span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><p><code>do...while</code>语句会至少执行一次循环代码，再进行<code>while</code>的条件判断循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    num--;</span><br><span class="line">&#125; <span class="keyword">while</span> (num &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="5-5-break关键字"><a href="#5-5-break关键字" class="headerlink" title="5.5 break关键字"></a>5.5 break关键字</h4><blockquote><p><code>break</code>用于退出循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i == 3&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-6-continue关键字"><a href="#5-6-continue关键字" class="headerlink" title="5.6 continue关键字"></a>5.6 continue关键字</h4><blockquote><p><code>continue</code>跳出本次循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i = &#x27;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h3 id="1、数组创建"><a href="#1、数组创建" class="headerlink" title="1、数组创建"></a>1、数组创建</h3><blockquote><ul><li>两种方式：<ul><li>利用<code>new</code>创建数组，学习面向对象再使用</li><li>利用数组字面量创建数组，字面量意思是看到符号就可以知道是什么意思，数组字面量是符号<code>[]</code></li></ul></li><li>数组特点：<ul><li>数组元素可以是任意类型，但是需要以<code>逗号</code>隔开</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建了一个数组</span></span><br><span class="line"><span class="keyword">var</span> nameArr = [<span class="string">&#x27;sam&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;john&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、访问元素"><a href="#2、访问元素" class="headerlink" title="2、访问元素"></a>2、访问元素</h3><blockquote><ul><li>格式：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引值]</span><br></pre></td></tr></table></figure><ul><li>索引值从<code>0</code>开始，访问超过索引值的元素，结果是<code>undefined</code>，因为数组元素不存在，访问就是undefined</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问元素使用 nameArr[索引号]，索引号从0开始</span></span><br><span class="line"><span class="keyword">var</span> nameArr = [<span class="string">&#x27;sam&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;john&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr);  <span class="comment">// [&#x27;sam&#x27;, &#x27;bob&#x27;, &#x27;john&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr[<span class="number">0</span>]); <span class="comment">// sam</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr[<span class="number">1</span>]); <span class="comment">// bob </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr[<span class="number">2</span>]); <span class="comment">// john</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="3、遍历数组"><a href="#3、遍历数组" class="headerlink" title="3、遍历数组"></a>3、遍历数组</h3><blockquote><p>使用<code>for</code>循环遍历数组</p><p>获取数组的长度：<code>Arr.length</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个数组</span></span><br><span class="line"><span class="keyword">var</span> nameArr = [<span class="string">&#x27;sam&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;john&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// i &lt; nameArr.length 不能设置等于，因为索引值从0开始，数组长度总比索引值大于1，所以不能写等于</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameArr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;元素值:&#x27;</span> + nameArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求数组的总和与平均值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    sum += numArr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> avg = sum / numArr.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1到4的总和:&#x27;</span> + sum); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1到4的平均数:&#x27;</span> + avg); <span class="comment">// 2.5</span></span><br></pre></td></tr></table></figure><ul><li>求数组元素的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">99</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max_num = numArr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; numArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max_num &lt; numArr[i]) &#123;</span><br><span class="line">        max_num = numArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max_num); <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><ul><li>数组元素变为字符串用分隔符连接</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">99</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> strArr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sep = <span class="string">&#x27;|&#x27;</span>; <span class="comment">// 连接符，可以设置任何连接符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    strArr += numArr[i] + sep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strArr); <span class="comment">// 1|2|99|35|3|4|</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strArr); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="4、数组新增元素"><a href="#4、数组新增元素" class="headerlink" title="4、数组新增元素"></a>4、数组新增元素</h3><blockquote><ul><li>可通过修改数组的length属性来进行数组扩容<ul><li>length属性是可以读写的，写的权限意思就是可以手动再进行赋值</li></ul></li><li>对数组继续使用索引赋值<ul><li>数组元素的个数为3，想要新增元素，就可以从索引值4开始对数组进行新增赋值</li></ul></li></ul></blockquote><h4 id="4-1-修改数组的length属性"><a href="#4-1-修改数组的length属性" class="headerlink" title="4.1 修改数组的length属性"></a>4.1 修改数组的length属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> numArr_len = numArr.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr_len); <span class="comment">// numArr的长度是4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组长度length属性值来进行修改</span></span><br><span class="line"><span class="comment">// 将numArr的长度从4变为5</span></span><br><span class="line"><span class="comment">// numArr的值是：[ 1, 2, 3, 4, &lt;1 empty item&gt; ]，可以看到长度变为5以后，最后一个元素为&lt;1 empty item&gt;，表示空的元素</span></span><br><span class="line"><span class="comment">// 然后取一下numArr的最后一个的值和类型都为：undefined</span></span><br><span class="line">numArr.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr); <span class="comment">// [ 1, 2, 3, 4, &lt;1 empty item&gt; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> numArr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将numArr的长度从4变为4，numArr的元素不变</span></span><br><span class="line">numArr.<span class="property">length</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将numArr的长度从4变为3，numArr的原来元素个数会从4个变为3个，因为长度变小了，所以丢弃了最后一个元素</span></span><br><span class="line">numArr.<span class="property">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArr); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><h4 id="4-2-修改索引号赋值"><a href="#4-2-修改索引号赋值" class="headerlink" title="4.2 修改索引号赋值"></a>4.2 修改索引号赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> naArr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增元素，也叫追加元素，给索引值增加</span></span><br><span class="line">naArr[<span class="number">3</span>] = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr[<span class="number">3</span>]); <span class="comment">// yellow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给已有的索引值进行追加</span></span><br><span class="line">naArr[<span class="number">1</span>] = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr); <span class="comment">//  [ &#x27;red&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr[<span class="number">1</span>]); <span class="comment">// pink</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要给数组名直接赋值，数组会被直接替换掉</span></span><br><span class="line">naArr = <span class="string">&#x27;sun&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(naArr); <span class="comment">//sun</span></span><br></pre></td></tr></table></figure><h4 id="4-3-筛选数组的元素"><a href="#4-3-筛选数组的元素" class="headerlink" title="4.3 筛选数组的元素"></a>4.3 筛选数组的元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选出大于等于3的元素</span></span><br><span class="line"><span class="comment">// arr.length这个属性是自动变化的，当数组没有元素时为0，数组又元素时会自动计算数量</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [ 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="4-4-反转数组元素"><a href="#4-4-反转数组元素" class="headerlink" title="4.4 反转数组元素"></a>4.4 反转数组元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组翻转</span></span><br><span class="line"><span class="comment">// arr.length这个属性是自动变化的，当数组没有元素时为0，数组又元素时会自动计算数量</span></span><br><span class="line"><span class="comment">// 将旧数组索引号最后一个给新元素的第一个，然后一次类推</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// [ 5, 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><h3 id="1、函数格式"><a href="#1、函数格式" class="headerlink" title="1、函数格式"></a>1、函数格式</h3><blockquote><p>函数格式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  函数名() &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数是做某件事情</p><p>切记：<font style='color: green'>函数只声明不调用是不会被执行的</font></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi, func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// hi, func</span></span><br></pre></td></tr></table></figure><ul><li>函数求<code>1-100</code>的和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure><h3 id="2、函数的参数"><a href="#2、函数的参数" class="headerlink" title="2、函数的参数"></a>2、函数的参数</h3><blockquote><ul><li>函数参数的形式</li><li><code>js</code>中函数不传值，默认的参数值时<code>undefined</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..) &#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数参数的调用时规则，可以看出js的函数很不严谨，会出现形参和实参个数不匹配的问题<ul><li>调用函数传入的参数个数和函数定义时一致，正常输出</li><li>调用函数传入的参数个数大于函数定义时的参数个数，会把多余传入的丢弃掉</li><li>调用函数不传入的参数，函数里面的形参会变为<code>undefined</code></li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi, &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line"><span class="comment">// 调用函数传入的参数个数和函数定义时一致，正常输出</span></span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;bob&#x27;</span>); <span class="comment">// Hi, bob</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数传入的参数个数大于函数定义时的参数个数，会把多余传入的丢弃掉</span></span><br><span class="line"><span class="title function_">hello</span>(<span class="string">&#x27;sam&#x27;</span>, <span class="string">&#x27;john&#x27;</span>); <span class="comment">// Hi, sam</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数不传入的参数，函数执行里面的形参会变为undefined</span></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// Hi, undefined</span></span><br></pre></td></tr></table></figure><ul><li>函数的例子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = a + b;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum = &#x27;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// sum = 7</span></span><br></pre></td></tr></table></figure><h3 id="3、函数的返回值"><a href="#3、函数的返回值" class="headerlink" title="3、函数的返回值"></a>3、函数的返回值</h3><blockquote><ul><li><code>return</code>关键字是函数返回值</li><li><code>return</code>可以接受三元运算符</li><li><code>return</code>表示函数被终止，遇到<code>return</code>后面的代码不会再被执行</li><li><code>return</code>只能返回一个值，有多个值以逗号隔开页只是以最后一个为准，不过我们可以把<code>n</code>个结果值包在一个数组里返回也可以</li><li>如果函数没有<code>return</code>关键字，则返回<code>undefined</code>值</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> z = a + b;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = <span class="title function_">hello</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="4、可变长参数arguments"><a href="#4、可变长参数arguments" class="headerlink" title="4、可变长参数arguments"></a>4、可变长参数<code>arguments</code></h3><blockquote><p>当我们不知道要传入的参数有多少个时，可以用<code>arguments</code>获取到</p><p>所有函数都有一个<code>arguments</code>属性，用来获取所有传入的参数，和<code>python</code>的<code>args</code>&#x2F;<code>kwargs</code>作用一样</p><ul><li><code>arguments</code>是一个伪数组</li><li>伪数组<ul><li>不是真正的数组</li><li>有<code>length</code>属性</li><li>按索引的方式存储</li><li>但是没有数组的<code>push()</code> 、<code>pop()</code> 等方法</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// [Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: 2, &#x27;2&#x27;: 3 &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">arguments</span>); <span class="comment">// object</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>求任意个数的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">getMax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> maxVal = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxVal &lt; <span class="variable language_">arguments</span>[i])&#123;</span><br><span class="line">            maxVal = <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret1 = <span class="title function_">getMax</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret1); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret2 = <span class="title function_">getMax</span>(<span class="number">11</span>,<span class="number">56</span>,<span class="number">43</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret2); <span class="comment">//56</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret3 = <span class="title function_">getMax</span>(<span class="number">10</span>,<span class="number">676</span>,<span class="number">7</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret3); <span class="comment">// 6676</span></span><br></pre></td></tr></table></figure><ul><li>函数反转任意数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = <span class="title function_">reverse</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret); <span class="comment">// [ 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><h3 id="5、函数相互调用"><a href="#5、函数相互调用" class="headerlink" title="5、函数相互调用"></a>5、函数相互调用</h3><blockquote><p>切记：<font style='color: green'>函数只声明不调用是不会被执行的</font></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">boo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;boo func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">boo</span>(); </span><br><span class="line"><span class="comment">// 输出: </span></span><br><span class="line"><span class="comment">// foo func</span></span><br><span class="line"><span class="comment">// boo func</span></span><br></pre></td></tr></table></figure><h3 id="6、函数声明方式"><a href="#6、函数声明方式" class="headerlink" title="6、函数声明方式"></a>6、函数声明方式</h3><blockquote><ul><li><p>方式一</p><ul><li><p>利用函数关键字定义，也叫命名函数</p></li><li><p>&#96;&#96;&#96;js<br>function  函数名() {<br>&#x2F;&#x2F; 函数体<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 方式二</span><br><span class="line"></span><br><span class="line">  - 函数表达式（匿名函数）</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    var  变量名 = function() &#123;</span><br><span class="line">        // 函数体</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><ul><li>匿名函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fu = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是匿名函数&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name:&#x27;</span> + name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fu是变量名，不是函数名</span></span><br><span class="line"><span class="comment">// 函数表达式声明，fu这个变量存的是函数</span></span><br><span class="line"><span class="title function_">fu</span>(<span class="string">&#x27;sam&#x27;</span>); </span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 这是匿名函数</span></span><br><span class="line"><span class="comment">// name:sam</span></span><br></pre></td></tr></table></figure><h3 id="7、作用域"><a href="#7、作用域" class="headerlink" title="7、作用域"></a>7、作用域</h3><blockquote><ul><li><p>就是代码变量在某个范围内起作用和效果，提高程序可靠和减少命名冲突</p></li><li><p>js的作用域(<code>es6</code>之前，我们现在学的是<code>es5</code>语法)：全局作用域和局部作用域</p></li><li><p>全局作用域</p><ul><li><p>整个<code>script</code>标签，或者一个单独的<code>js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>局部作用域</p><ul><li><p>在函数内部的就是局部作用域，只在函数内部起作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 局部作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><h3 id="8、变量作用域"><a href="#8、变量作用域" class="headerlink" title="8、变量作用域"></a>8、变量作用域</h3><blockquote><p>根据作用域不同把变量分为全局变量和局部变量</p></blockquote><ul><li><p>全局变量</p><ul><li>在全局作用下任何位置都可以用的变量，也就是函数外部的变量</li><li>全局变量在函数内部也可以使用</li><li><font style='color: green'>如果在函数内部直接赋值没有声明的变量也叫全局变量，声明变量不带<code>var</code></font></li><li>只有浏览器关闭才会被销毁，比较占内存</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><ul><li>在局部作用域的变量，也就是在函数内部的变量叫局部变量，形参也是局部变量</li><li>但是要注意，如果函数内部声明变量时没有带<code>var</code>关键字，就会变为全局变量</li><li>在函数内部，所在的代码块被执行了，会被初始化，代码块运行结束后，会被销毁，节省内存空间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num_t = <span class="number">10</span>;</span><br><span class="line">    num_q = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果在函数外部引用函数里定义的局部变量，会报引用错误</span></span><br><span class="line"><span class="comment">// ReferenceError: num_t is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num_t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的num_q正常输出为30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num_q); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9、块级作用域"><a href="#9、块级作用域" class="headerlink" title="9、块级作用域"></a>9、块级作用域</h3><blockquote><p><code>js</code>中没有块级作用域，<code>js</code>的作用域只有全局和局部</p><p><code>js</code>在<code>es6</code>语法的时候会新增作用域</p><p>块级作用域：<code>&#123;&#125;</code>、<code>if &#123;&#125;</code>、<code>for &#123;&#125;</code></p><p>也就是说<code>js</code>在块级作用域外面也能访问块级作用域内部的变量</p></blockquote><h3 id="10、作用域链"><a href="#10、作用域链" class="headerlink" title="10、作用域链"></a>10、作用域链</h3><blockquote><p>内部函数访问外部函数的变量，使用链式查找来决定取值，称为就近原则</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bu</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">bu</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出num先从bu函数里面找，没找到就去上层函数fn里去找，如果还没有，就去上层函数fn外部去找，如果仍未找到</span></span><br><span class="line"><span class="comment">// 会报错： ReferenceError: num is not defined</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h2 id="六、代码预解析"><a href="#六、代码预解析" class="headerlink" title="六、代码预解析"></a>六、代码预解析</h2><h3 id="1、预解析"><a href="#1、预解析" class="headerlink" title="1、预解析"></a>1、预解析</h3><blockquote><p><code>js</code>引擎运行<code>js</code>代码分为两步</p><ul><li>一是预解析<ul><li>表示<code>js</code>引擎会把js里所有的<code>var</code>、<code>function</code>提升到当前作用域</li><li>分为变量预解析、函数预解析</li></ul></li><li>二是代码执行<ul><li>按照代码书写的顺序从上往下依次执行</li></ul></li></ul></blockquote><h4 id="1-1-变量预解析"><a href="#1-1-变量预解析" class="headerlink" title="1.1 变量预解析"></a>1.1 变量预解析</h4><blockquote><p>把所有<font style='color: green'>变量声明</font>提升到当前作用域最前面，不提升<font style='color: green'>赋值操作</font></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于下面代码</span></span><br><span class="line"><span class="comment">// 会先上面声明的num提到前面，但是num不提升赋值，所以输出num是undefined</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined</span></span><br><span class="line">num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fu</span>(); <span class="comment">// 输出报错: TypeError: fu is not a function</span></span><br><span class="line"><span class="keyword">var</span> fu = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fu is func&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于如下代码</span></span><br><span class="line"><span class="keyword">var</span> fu;</span><br><span class="line"><span class="title function_">fu</span>(); <span class="comment">// fu 声明下来是一个变量，不是一个函数，所以会报上面的错误TypeError: fu is not a function</span></span><br><span class="line"><span class="keyword">var</span> fu = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fu is func&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-2-函数预解析"><a href="#1-2-函数预解析" class="headerlink" title="1.2 函数预解析"></a>1.2 函数预解析</h4><blockquote><p>把所有<font style='color: green'>函数声明</font>提升到当前作用域最前面，不<font style='color: green'>调用函数</font></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sam&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于如下代码</span></span><br><span class="line"><span class="comment">// 也就是js预解析时会先把函数定义提升到当前作用域最前面，所以调用函数放到函数定义前面也可以执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sam&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><ul><li><p>这样定义函数预解析会出现错误</p><blockquote><p>因为匿名函数的调用必须放在函数定义的下面</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等价于如下代码</span></span><br><span class="line"><span class="keyword">var</span> fu;</span><br><span class="line"><span class="title function_">fu</span>(); <span class="comment">// fu 声明下来是一个变量，不是一个函数，所以会报上面的错误TypeError: fu is not a function</span></span><br><span class="line"><span class="keyword">var</span> fu = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fu is func&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="七、对象"><a href="#七、对象" class="headerlink" title="七、对象"></a>七、对象</h2><h3 id="1、对象定义"><a href="#1、对象定义" class="headerlink" title="1、对象定义"></a>1、对象定义</h3><blockquote><p><code>js</code>中对象时一组无序的相关属性和方法的集合，例如字符串、数字、数组等等</p><p>属性：特征</p><p>方法：行为</p><p><code>js</code>中的对象和<code>python</code>的字典类似，也是一个键值对的数据类型</p></blockquote><h3 id="2、创建对象-字面量"><a href="#2、创建对象-字面量" class="headerlink" title="2、创建对象: 字面量"></a>2、创建对象: 字面量</h3><blockquote><p>创建对象有三种方式</p><ul><li>字面量，也就是花括号<code>&#123;&#125;</code>就表示是个对象</li></ul></blockquote><h4 id="2-1-字面量创建对象"><a href="#2-1-字面量创建对象" class="headerlink" title="2.1 字面量创建对象"></a>2.1 字面量创建对象</h4><blockquote><p>格式： <code>var objs = &#123;&#125;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fo</span> ()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fo func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> personInfo = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fo&#x27;</span>: fo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personInfo); <span class="comment">// &#123; name: &#x27;sam&#x27;, age: 19, sex: &#x27;man&#x27;, fo: [Function: fo] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> personInfo); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="2-2-调用对象的属性"><a href="#2-2-调用对象的属性" class="headerlink" title="2.2 调用对象的属性"></a>2.2 调用对象的属性</h4><blockquote><ul><li>两种调用方式<ul><li>使用点的方式，格式：<code>obj.name</code></li><li>使用中括号，格式：<code>obj[&#39;name&#39;]</code> 和python的字典取值一样</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fo</span> ()&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fo func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> personInfo = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fo&#x27;</span>: fo</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用点的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personInfo.<span class="property">name</span>);  <span class="comment">// sam</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用中括号的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personInfo[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// sam</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象调用函数</span></span><br><span class="line">personInfo.<span class="title function_">fo</span>(); <span class="comment">// fo func</span></span><br></pre></td></tr></table></figure><h3 id="3、创建对象-new-object"><a href="#3、创建对象-new-object" class="headerlink" title="3、创建对象: new object"></a>3、创建对象: <code>new object</code></h3><blockquote><p>利用等号赋值的方式来进行填充数据</p><p>可以用点号或中括号来填充数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fo func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空对象</span></span><br><span class="line"><span class="keyword">var</span> objInfo_1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">var</span> objInfo_2 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用点的方式对空的对象进行填充数据</span></span><br><span class="line">objInfo_1.<span class="property">name</span> = <span class="string">&#x27;sam&#x27;</span>;</span><br><span class="line">objInfo_1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">objInfo_1.<span class="property">sex</span> = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">objInfo_1.<span class="property">fo</span> = fo;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objInfo_1); <span class="comment">// &#123; name: &#x27;sam&#x27;, age: 18, sex: &#x27;man&#x27;, fo: [Function: fo] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objInfo_1); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objInfo_1.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用中括号的方式对空的对象进行填充数据</span></span><br><span class="line">objInfo_2[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;sam&#x27;</span>;</span><br><span class="line">objInfo_2[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span>;</span><br><span class="line">objInfo_2[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">objInfo_2[<span class="string">&#x27;fo&#x27;</span>] = fo;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objInfo_2); <span class="comment">// &#123; name: &#x27;sam&#x27;, age: 18, sex: &#x27;man&#x27;, fo: [Function: fo] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> objInfo_2); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objInfo_2[<span class="string">&#x27;age&#x27;</span>]); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="4、创建对象：构造函数"><a href="#4、创建对象：构造函数" class="headerlink" title="4、创建对象：构造函数"></a>4、创建对象：构造函数</h3><blockquote><ul><li><p>构造函数创建对象的原因：</p><ul><li>上面两种方式只能依次创建一个对象，所以需要使用构造函数创建对象，类比python的面向对象编程，将创建对象里重复的动作抽离出来，变成一个模板来创建多个对象来使用</li><li>利用函数创建对象，可以把重复的部分抽离出来，那这个函数就是构造函数</li><li>但是这个函数不一样，里面封装的不是普通代码，而是对象</li></ul></li><li><p>构造函数定义：</p><ul><li>将对象里面一些相同的属性和方法抽象出来封装到函数里面</li></ul></li><li><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造函数</span></span><br><span class="line"><span class="keyword">function</span> 构造函数()&#123;</span><br><span class="line">  <span class="variable language_">this</span>.属性 = 值;</span><br><span class="line">  <span class="variable language_">this</span>.方法 = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// code;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用构造函数</span></span><br><span class="line"><span class="keyword">new</span> 构造函数();</span><br></pre></td></tr></table></figure><ul><li>构造函数和普通函数在定义没区别</li><li><font style='color: green'>构造函数里的<code>this</code>表示指向当前创建的空对象，和<code>python</code>里面向对象的<code>self</code>一个意思，表示当前创建的对象本身</font></li><li>调用时使用<code>new</code>关键字来调用声明</li><li><font style='color: green'>相当于<code>python</code>面向对象的<code>_ _init_ _</code>方法</font></li></ul></li><li><p>构造函数的规范：</p><ul><li>函数名首字母要大写</li><li>构造函数不需要<code>return</code>就可以返回值</li><li>构造函数返回对象时，会把构造函数名也返回，如下面代码里的<code>Star &#123; name: &#39;sam&#39;, age: 20, sex: &#39;man&#39; &#125;</code></li><li><code>new Star()</code> 就表示创建了一个对象</li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params">song</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;唱了:&#x27;</span> + song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;sam&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj1); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// Star &#123; name: &#x27;sam&#x27;, age: 20, sex: &#x27;man&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// sam</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">sex</span>); <span class="comment">// man</span></span><br><span class="line">obj1.<span class="title function_">sing</span>(<span class="string">&#x27;冰冰&#x27;</span>); <span class="comment">// sam唱了:冰冰</span></span><br></pre></td></tr></table></figure><h4 id="4-1-new执行时会做的什么？"><a href="#4-1-new执行时会做的什么？" class="headerlink" title="4.1 new执行时会做的什么？"></a>4.1 new执行时会做的什么？</h4><blockquote><ol><li>在内存中创建一个空对象</li><li>让<code>this</code>指向这个新的对象</li><li>执行构造函数的代码，给这个对象添加属性和方法</li><li>返回这个对象，注：构造函数不需要<code>return</code></li></ol></blockquote><h3 id="5、遍历对象"><a href="#5、遍历对象" class="headerlink" title="5、遍历对象"></a>5、遍历对象</h3><blockquote><ul><li><p><code>for...in</code>用来遍历对象或数组，常用来遍历对象</p></li><li><p>语法格式：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;sam&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li><code>var k</code>输出的是对象的名，也就是<code>键</code></li><li>在<code>for..in</code>里面，输出值，必须使用中括号方法<code>[]</code>，如果使用点<code>.</code>会输出为<code>undefined</code></li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;sam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">// name age sex</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]); <span class="comment">// 19 sex man</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">k</span>); <span class="comment">// 不能用这个方法，会输出为undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、内置对象Math"><a href="#6、内置对象Math" class="headerlink" title="6、内置对象Math"></a>6、内置对象<code>Math</code></h3><blockquote><p>网址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p><p><strong><code>Math</code></strong> 是一个内置对象，它拥有一些数学常数属性和数学函数方法。<code>Math</code> 不是一个函数对象。</p><p><code>Math</code> 用于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a> 类型。它不支持 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><code>BigInt</code></a>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math 取圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>); <span class="comment">// 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Math 取最大值，取得是传入max的数组最大的那个</span></span><br><span class="line"><span class="comment">// 如果传入max的数组里有字符串，则结果一定是NaN</span></span><br><span class="line"><span class="comment">// 如果不给max传值，则输出负的无穷大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="number">133</span>)); <span class="comment">// 133</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="string">&#x27;num&#x27;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>()); <span class="comment">// -Infinity 负的无穷大</span></span><br></pre></td></tr></table></figure><h4 id="6-1-封装自己Math对象"><a href="#6-1-封装自己Math对象" class="headerlink" title="6.1 封装自己Math对象"></a>6.1 封装自己Math对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装自己的Math对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyMath</span> = &#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.1415</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> maxVal = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; maxVal) &#123;</span><br><span class="line">                maxVal = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">min</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> minVal = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &lt; minVal) &#123;</span><br><span class="line">                minVal = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyMath</span>.<span class="title function_">max</span>(<span class="number">11</span>,<span class="number">2</span>,<span class="number">13</span>)); <span class="comment">// 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyMath</span>.<span class="title function_">min</span>(-<span class="number">90</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// -90</span></span><br></pre></td></tr></table></figure><h4 id="6-2-Math取绝对值"><a href="#6-2-Math取绝对值" class="headerlink" title="6.2 Math取绝对值"></a>6.2 Math取绝对值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取绝对值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;-1&#x27;</span>)); <span class="comment">// 1 隐式转换，会把字符串数字转换成数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;num&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="6-3-向下取整"><a href="#6-3-向下取整" class="headerlink" title="6.3 向下取整"></a>6.3 向下取整</h4><blockquote><p>往小了取值</p><p><code>floor</code>：地板的意思，也就是在我们脚下，所以是取小值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向下取整，取小数数值的最小值，也就是整数部分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="string">&#x27;1.3&#x27;</span>)); <span class="comment">// 1 隐式转换，会把字符串数字转换成数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="string">&#x27;num&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="6-4-向上取整"><a href="#6-4-向上取整" class="headerlink" title="6.4 向上取整"></a>6.4 向上取整</h4><blockquote><p>往大了取值</p><p><code>ceil</code>：天花板的意思，也就是在我们头上，也就是取大的值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向上取整,相当于四舍五入的五入，</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="string">&#x27;1.3&#x27;</span>)); <span class="comment">// 2 隐式转换，会把字符串数字转换成数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="string">&#x27;num&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="6-5-四舍五入"><a href="#6-5-四舍五入" class="headerlink" title="6.5 四舍五入"></a>6.5 四舍五入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 四舍五入，其他数字都是四舍五入，但是.5比较特殊，是往大了取</span></span><br><span class="line"><span class="comment">// 负数的时候，比如-1.5，遇到.5也是往大了取，那就是-1比-2大，所以结果是-1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.6</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="string">&#x27;1.8&#x27;</span>)); <span class="comment">// 2 隐式转换，会把字符串数字转换成数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="string">&#x27;num&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="6-6-随机数"><a href="#6-6-随机数" class="headerlink" title="6.6 随机数"></a>6.6 随机数</h4><blockquote><p><code>Math.random()</code></p><ul><li>取值范围是：<code>[0,1)</code>，取值范围在<code>0</code>到<code>1</code>之间的小数，可以取到<code>0</code></li><li><code>random()</code>函数里面不跟参数</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到一个两数之间的随机整数，包括两个数在内</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomIntInclusive</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandomIntInclusive</span>(<span class="number">1</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机取一个数组的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomIntInclusive</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameArr = [<span class="string">&#x27;花花&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;sam&#x27;</span>,<span class="string">&#x27;中队&#x27;</span>,<span class="string">&#x27;小队&#x27;</span>];</span><br><span class="line">nameIndex = <span class="title function_">getRandomIntInclusive</span>(<span class="number">0</span>, nameArr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameArr[nameIndex]);</span><br></pre></td></tr></table></figure><ul><li>猜数字</li></ul><blockquote><p>需要在html页面中看到效果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 随机取一个数组的值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getRandomIntInclusive</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">        min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> randomInt = <span class="title function_">getRandomIntInclusive</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">guessNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> gueNum = <span class="title function_">prompt</span>(<span class="string">&#x27;输入数字:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (gueNum &gt; randomInt) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;猜大了&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gueNum &lt; randomInt) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;猜小了&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;猜对了:&#x27;</span> + randomInt);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">guessNum</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="7、Date对象"><a href="#7、Date对象" class="headerlink" title="7、Date对象"></a>7、Date对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date里面不跟参数，返回的是当前时间</span></span><br><span class="line"><span class="keyword">var</span> tday = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tday); <span class="comment">// 2021-07-14T10:00:56.874Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串时间用的最多，返回输入的时间</span></span><br><span class="line"><span class="keyword">var</span> birthday1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2021-7-5 17:10:20&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(birthday1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字型时间，返回输入的时间</span></span><br><span class="line"><span class="keyword">var</span> birthday2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2021</span>, <span class="number">7</span>-<span class="number">1</span>, <span class="number">11</span>-<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(birthday2);</span><br></pre></td></tr></table></figure><h4 id="7-1-年月日"><a href="#7-1-年月日" class="headerlink" title="7.1 年月日"></a>7.1 年月日</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化年月日</span></span><br><span class="line"><span class="comment">// 返回当前的年</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前的月,注意得到的月份比当前月小一个月，因为月份范围是[0, 11]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>()); <span class="comment">// 6月，但是当前月是7月</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的是几号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 14号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前星期几,星期从0开始算，</span></span><br><span class="line"><span class="comment">// 0表示星期天</span></span><br><span class="line"><span class="comment">// 1表示星期一</span></span><br><span class="line"><span class="comment">// 2表示星期二</span></span><br><span class="line"><span class="comment">// 3表示星期三</span></span><br><span class="line"><span class="comment">// 4表示星期四</span></span><br><span class="line"><span class="comment">// 5表示星期五</span></span><br><span class="line"><span class="comment">// 6表示星期六</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 3，表示是星期三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回格式: XXXX.XX.XX 星期X</span></span><br><span class="line"><span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">var</span> week = date.<span class="title function_">getDay</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> weekArr = [<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data_str = <span class="string">&#x27;今天是: &#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + weekArr[week];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data_str); <span class="comment">// 今天是: 2021年7月14日 星期三</span></span><br></pre></td></tr></table></figure><h4 id="7-2-时分秒"><a href="#7-2-时分秒" class="headerlink" title="7.2 时分秒"></a>7.2 时分秒</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化 时 分 秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNowTime</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>(); <span class="comment">// 返回当前的小时数，24小时制</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> m = date.<span class="title function_">getMinutes</span>(); <span class="comment">// 返回当前的分钟数</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = date.<span class="title function_">getSeconds</span>(); <span class="comment">// 返回当前的秒数</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> now_time = <span class="string">&quot;现在是:&quot;</span> + h + <span class="string">&quot;:&quot;</span> + m + <span class="string">&quot;:&quot;</span> + s;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(now_time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getNowTime</span>();</span><br></pre></td></tr></table></figure><h2 id="八、ES6语法"><a href="#八、ES6语法" class="headerlink" title="八、ES6语法"></a>八、ES6语法</h2><blockquote><p>ES6语法是在原有JavaScript的语法基础上，进行了加强和优化，所以需要学习下</p><p>目前ES6语法中的面向对象编程在前端的应用场景比较少，所以ES6涉及到面向对象的地方可以先跳过，学习使用函数式编程就可以满足平时的日常开发，因为vue中也有大量应用到了ES6语法</p></blockquote><blockquote><p>黑马程序员ES6语法</p><p><a href="https://www.bilibili.com/video/BV1Kt411w7MP?p=51&spm_id_from=pageDriver&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1Kt411w7MP?p=51&spm_id_from&#x3D;pageDriver&amp;vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><blockquote><p>尚硅谷es6语法</p><p><a href="https://www.bilibili.com/video/BV1uK411H7on?p=44&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1uK411H7on?p=44&vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><blockquote><p><a href="https://www.cnblogs.com/aadd/p/16459898.html">javascript, es6, nodejs, commonJS的区别和联系</a></p><p>这几个概念如果没有仔细读相应的教程或者文档，很容易混淆</p><ul><li><p>这四者的关系是什么？</p><ul><li>ES6，是javascript语言规范，用于规范javascript， 也就是定义javascript语法标准。</li><li>Node.js 是javascript运行时环境（javascript runtime）,主要作用就是可以让javascript脱离浏览器执行。</li><li>commonJS是一个在2014年已经被终止的项目，它的规范让javascript可以实现模块化。Node.js最开始就只支持commonJS的模块化标准，即 require&#x2F;exports， 后来ES6改进了模块化标准为用 import&#x2F;export， 相对前者有更多灵活的用法。</li><li>所以为了让javascript更好的被使用，这三者才会出现， 当然实现ES6标准的不止javascript，还有其他语言，如JScript，ActionScript等脚本语言都是基于ECMAScript标准实现的。</li><li>很多人弄不清楚Node.js到底是不是javascript？<ul><li>不是，javascript是语言，Node.js是javavscript的运行时。</li><li>Node.js 等于 chrome浏览器的V8引擎+一些javascript运行时库。</li></ul></li></ul></li><li><p>Node.js 的出现要解决什么问题？</p><ul><li>Node.js的出现是为了能让javascript脱离浏览器执行。这样javascript就可以操作除了前端功能（DOM）之外的东西–后端服务</li><li>javascript诞生之初的目的是用在web， 由浏览器执行。那么脱离浏览器，javascript就不能执行了吗？ nodejs出现之前，确实是这样的。因为只有浏览器里才有javascript解释器！只有它才知道javascript要怎么执行。既然如此，只要把这个解释器拿出来，再添加一些必要的执行库工具不就可以让javascript脱离浏览器执行了嘛，所以nodejs就诞生了。各家浏览器商都有自己的javascript解释器， nodejs用的是<a href="https://links.jianshu.com/go?to=https://v8.dev/">chrome的V8 javascript引擎</a></li></ul></li><li><p>Node.js（V8）和ES6的关系？</p><ul><li><p><em>Node.js用V8引擎，而V8如果能解析ES6规范的javascript语法，那么Node.js也就能支持相应的语法标准。</em></p><p>  ECMA每发布一个标准，各大浏览器的javascript引擎都会尽量跟上，它们现在大部分都支持了ES5，ES6 还没有被完全支持。而V8对ES6已经高度支持了，也就是说Node.js对ES6也高度支持。</p></li></ul></li></ul><p>其他的区别文章：<a href="https://blog.csdn.net/m0_48076809/article/details/106888814">https://blog.csdn.net/m0_48076809&#x2F;article&#x2F;details&#x2F;106888814</a></p></blockquote><table><thead><tr><th>语言标准</th><th>语言</th><th>javascript runtime</th><th>模块生态系统项目</th></tr></thead><tbody><tr><td>ECMAScript6</td><td>javascript</td><td>Node.js</td><td>CommonJS</td></tr></tbody></table><h3 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h3><h4 id="1-1-let"><a href="#1-1-let" class="headerlink" title="1.1 let"></a>1.1 let</h4><blockquote></blockquote><h4 id="1-2-const"><a href="#1-2-const" class="headerlink" title="1.2 const"></a>1.2 const</h4><h2 id="九、Promise教程"><a href="#九、Promise教程" class="headerlink" title="九、Promise教程"></a>九、Promise教程</h2><blockquote><p>尚硅谷promise教程</p><p><a href="https://www.bilibili.com/video/BV1GA411x7z1/?spm_id_from=333.788.recommend_more_video.0&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1GA411x7z1/?spm_id_from&#x3D;333.788.recommend_more_video.0&amp;vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h2 id="十、axios"><a href="#十、axios" class="headerlink" title="十、axios"></a>十、axios</h2><blockquote><p>尚硅谷axios</p><p><a href="https://www.bilibili.com/video/BV1wr4y1K7tq/?spm_id_from=333.788.recommend_more_video.2&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1wr4y1K7tq/?spm_id_from&#x3D;333.788.recommend_more_video.2&amp;vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><blockquote><p>注意在vue中使用axios时，then里面的回调函数一定要使用箭头函数，不能使用匿名函数，会导致用this取vue的数据源时，this不会指向vm</p><p><a href="http://www.zzvips.com/article/195973.html">http://www.zzvips.com/article/195973.html</a></p><p><strong>匿名函数的指针指向-&gt;函数操作的本身</strong></p><p><strong>箭头函数的指针指向-&gt;组件</strong></p></blockquote><h2 id="十一、node"><a href="#十一、node" class="headerlink" title="十一、node"></a>十一、node</h2><blockquote><p>黑马程序员node</p><p><a href="https://www.bilibili.com/video/BV1a34y167AZ?p=3&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1a34y167AZ?p=3&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML、CSS语法</title>
      <link href="/2022/07/08/web_dev/html%E4%B8%8Ecss/html_css%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/08/web_dev/html%E4%B8%8Ecss/html_css%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、HTML介绍"><a href="#一、HTML介绍" class="headerlink" title="一、HTML介绍"></a>一、HTML介绍</h3><h4 id="1、HTML头部解释"><a href="#1、HTML头部解释" class="headerlink" title="1、HTML头部解释"></a>1、HTML头部解释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Document <span class="keyword">html</span>&gt;</span>: 文档类型声明标签，高速浏览器采用html5版本来显示页面</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#x27;en&#x27;</span>&gt;</span>: 告诉浏览器是一个英文网站</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span>: 必须写，采用UTF-8保存文字，如果不写就会乱码</span><br></pre></td></tr></table></figure><h4 id="2、标题标签"><a href="#2、标题标签" class="headerlink" title="2、标题标签"></a>2、标题标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 每个标题标签都会独占一行</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、段落标签和换行标签"><a href="#3、段落标签和换行标签" class="headerlink" title="3、段落标签和换行标签"></a>3、段落标签和换行标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 每个段落标签都会独占一行</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 换行标签是单标签，break的缩写，强制换行，相当于回车换行</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// 换行标签只是单独开始新的一行，跟段落不一样，段落会插入一些垂直的间距</span><br></pre></td></tr></table></figure><h4 id="4、文本格式化标签"><a href="#4、文本格式化标签" class="headerlink" title="4、文本格式化标签"></a>4、文本格式化标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>字体</span><br><span class="line">    这是<span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span>字体</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    这是<span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span>字体</span><br><span class="line">    这是<span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span>字体</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    这是<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>字体</span><br><span class="line">    这是<span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span>字体</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    这是<span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>字体</span><br><span class="line">    这是<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span>字体</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>下面是展示的样式</p>  <img src="/2022/07/08/web_dev/html%E4%B8%8Ecss/html_css%E7%AC%94%E8%AE%B0/image-20210705185339641.png" class="" title="image-20210705185339641"></li></ul><blockquote><p>重点使用的是加粗和倾斜</p></blockquote><h4 id="5、div和span"><a href="#5、div和span" class="headerlink" title="5、div和span"></a>5、div和span</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// span 和 div 都没有语义，就是一个盒子，用来装内容</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span块<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// div是division的缩写，表示分割、分区，独占一行</span><br><span class="line">// span表示跨度、跨距不会独占一行，是放个小盒子</span><br></pre></td></tr></table></figure><h4 id="6、图像标签"><a href="#6、图像标签" class="headerlink" title="6、图像标签"></a>6、图像标签</h4><blockquote><p><code>img</code>标签，可以用来定义HTML中的图像，是一个单标签，</p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; /&gt;</code></p><p>单词<code>image</code>的缩写，意味图像</p><p><code>src</code>是<code>img</code>标签的必须属性，用来指定图像的路径和文件名</p></blockquote><blockquote><p><font style='color:green'>alt: 图片显示不出来，用文字显示</font></p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; alt=&#39;这是一个图&#39;/&gt;</code></p></blockquote><blockquote><p><font style='color:green'>title: 鼠标放到图像上，提示文字</font></p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; alt=&#39;这是一个图&#39; title=&#39;我是鼠标显示的图&#39;/&gt;</code></p></blockquote><blockquote><p><font style='color: green'>width: 给图像设置宽度，不需要写px像素单位</font></p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; alt=&#39;这是一个图&#39; title=&#39;我是鼠标显示的图&#39; width=&#39;100&#39;/&gt;</code></p></blockquote><blockquote><p><font style='color: green'>height: 给图像设置高度，不需要写px像素单位</font></p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; alt=&#39;这是一个图&#39; title=&#39;我是鼠标显示的图&#39; height=&#39;100&#39;/&gt;</code></p></blockquote><blockquote><p><font style='color: green'>border: 给图像设置边框，不需要写px像素单位</font></p><p>格式：<code>&lt;img  src=&#39;xxx.jpg&#39; alt=&#39;这是一个图&#39; title=&#39;我是鼠标显示的图&#39; border=&#39;10&#39;/&gt;</code></p></blockquote><ul><li>图像的样式后面由css来设置，很少用行内样式设置图像的样式</li></ul><h4 id="7、超链接标签"><a href="#7、超链接标签" class="headerlink" title="7、超链接标签"></a>7、超链接标签</h4>]]></content>
      
      
      <categories>
          
          <category> HTML、CSS语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE笔记</title>
      <link href="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、vue介绍"><a href="#一、vue介绍" class="headerlink" title="一、vue介绍"></a>一、vue介绍</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1zq4y1p7ga?p=75&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1zq4y1p7ga?p=75&vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="1、vue介绍"><a href="#1、vue介绍" class="headerlink" title="1、vue介绍"></a>1、vue介绍</h3><blockquote><p>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>是一套用来构建用户界面的前端框架</p><ul><li>构建用户界面<ul><li>用vue给html中填充数据，非常方便</li></ul></li><li>框架<ul><li>是一套现成的解决方案，用来让程序员遵守欧框架规范编写页面功能</li></ul></li><li>学习重点<ul><li>Vue的用法、指令、组件（对UI结构的复用）、路由、vue</li></ul></li></ul></blockquote><h3 id="2、vue的特性"><a href="#2、vue的特性" class="headerlink" title="2、vue的特性"></a>2、vue的特性</h3><h4 id="2-1-数据驱动视图"><a href="#2-1-数据驱动视图" class="headerlink" title="2.1 数据驱动视图"></a>2.1 数据驱动视图</h4><blockquote><p>在使用了vue的页面里，vue会<code>主动</code>监听数据的<code>变化</code>，然后<code>自动</code>重新渲染页面结构</p><p>这样带来的优点：</p><ul><li>当页面数据发生变化时，页面会自动重新渲染</li></ul><p>注意：</p><ul><li><font color="blue">数据驱动视图是单向的数据绑定</font></li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220711235557934.png" class="" title="image-20220711235557934"><h4 id="2-2-双向数据绑定"><a href="#2-2-双向数据绑定" class="headerlink" title="2.2 双向数据绑定"></a>2.2 双向数据绑定</h4><blockquote><p>双向数据绑定可以服务开发人员在<code>不操作DOM</code>的前提下，<code>自动</code>把想要的数据<code>同步</code>到数据源中</p><p>比如：填写表单时，自动会把页面上输入的内容同步到数据源中</p><p>双向数据绑定的好处：</p><ul><li>如果没有vue，从页面获取数据，需要操作dom，如果需要把数据渲染到页面上，也要操作dom，如果这样的操作很多了，就会很不方便</li><li>有了vue，就可以实现不操作dom，就能做到数据的同步，无论是获取数据，还是渲染数据<ul><li>当js数据有变化时，会自动渲染到页面上</li><li>页面上表单上拿到的数据有变化是，会被vue自动获取到，并更新到js中</li></ul></li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712000158734.png" class="" title="image-20220712000158734"><h3 id="3、了解vue底层原理"><a href="#3、了解vue底层原理" class="headerlink" title="3、了解vue底层原理"></a>3、了解vue底层原理</h3><h4 id="3-1-MVVM"><a href="#3-1-MVVM" class="headerlink" title="3.1 MVVM"></a>3.1 MVVM</h4><blockquote><p>1、MVVM是vue实现数据驱动视图和双向数据绑定的核心原理</p><p>2、MVVM是Model-View-ViewModel的缩写，即模型-视图-视图模型</p><p>3、MVVM三个特性</p><ul><li>Model：表示当前页面渲染时所依赖的数据源，后端传递的数据</li><li>View：表示当前页面所渲染的DOM结构，代表UI组件，负责将数据模型转化成UI展现出来</li><li>ViewModel：表示vue实例，是一个同步View和Model的对象，MVVM模式的核心，是连接Model和View的桥梁</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/mvvm_core.png" class="" title="MVVM"><h4 id="3-2-ViewModel"><a href="#3-2-ViewModel" class="headerlink" title="3.2 ViewModel"></a>3.2 ViewModel</h4><blockquote><p>ViewModel是MVVM的核心，ViewModel把当前页面的数据源(Model)和页面结构(View)连接在一起</p><ol><li>当数据源有变化时，会被ViewModel监听到，ViewModel会根据最新的数据源<code>自动更新</code>页面的结构</li><li>当表单元素的值有变化时，同时也会被ViewModel监听到，ViewModel会把变化后的最新的数据<code>自动同步</code>到Model数据源中</li></ol></blockquote><h2 id="二、vue基础语法"><a href="#二、vue基础语法" class="headerlink" title="二、vue基础语法"></a>二、vue基础语法</h2><h3 id="1、第一行vue代码"><a href="#1、第一行vue代码" class="headerlink" title="1、第一行vue代码"></a>1、第一行vue代码</h3><blockquote><p>需要三个步骤：</p><ol><li>导入vue.js的脚本文件（表示是在导入vue库）</li><li>在页面中声明一个要被vue控制的DOM区域，比如一个div块</li><li>创建vm实例对象（vm是指ViewModel）</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 在页面中声明一个要被vue控制的DOM区域（这里就是View），比如一个div块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;username&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 导入vue.js的脚本文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 实例化一个ViewModel对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.1 指定当前ViewModel实例所控制页面的区域位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.2 指定Model数据源</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;sam&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面代码中，<code>new Vue</code>是表示vue的构造函数，用来实例化一个vue对象（ViewModel对象）</p><ul><li><p><code>new Vue</code>构造函数里的值定义：</p><ul><li><p>el属性是固定写法，表示当前vm实例要控制的是页面某个区域，接收到的值是一个选择器</p><ul><li>el指定的区域就是root根节点</li></ul></li><li><p>data也是固定写法，表示要渲染到页面上的数据</p></li></ul></li><li><p>div里的传值写法</p><ul><li><code>&#123;&#123;username&#125;&#125;</code>表示将vue实例对象里的data里的<code>username</code>渲染到页面上</li><li>从下面就可以看到，data里的数据渲染到了页面上</li></ul></li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712003344784.png" class="" title="image-20220712003344784"><h4 id="1-1-使用工具调试vue"><a href="#1-1-使用工具调试vue" class="headerlink" title="1.1 使用工具调试vue"></a>1.1 使用工具调试vue</h4><blockquote><p>使用<a href="https://devtools.vuejs.org/">Vue Devtools</a>调试工具，就能看到vue的数据了</p><p>可以看到jam就是root根节点，也表示是id为app的div</p><p>上面代码里username是sam，可以在调试工具右边的data里进行数据修改，然后vue又自动渲染数据到页面上，达到了双向数据绑定</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712003836806.png" class="" title="image-20220712003836806"><h3 id="2、vue的指令"><a href="#2、vue的指令" class="headerlink" title="2、vue的指令"></a>2、vue的指令</h3><blockquote><p>指令是vue提供的模板语法，用来帮助开发渲染页面的基本结构</p><p>指令分类：</p><ul><li>内容渲染指令</li><li>属性绑定指令</li><li>事件绑定指令</li><li>双向绑定指令</li><li>条件渲染指令</li><li>列表渲染指令</li></ul></blockquote><h3 id="3、内容渲染指令"><a href="#3、内容渲染指令" class="headerlink" title="3、内容渲染指令"></a>3、内容渲染指令</h3><blockquote><p>该指令用来渲染DOM元素的文本内容</p><p>主要分为三个</p><ul><li>v-text</li><li>{{}}</li><li>v-html</li></ul></blockquote><h4 id="3-1-v-text"><a href="#3-1-v-text" class="headerlink" title="3.1 v-text"></a>3.1 v-text</h4><blockquote><p>将vm实例对象的data里的数据，渲染到页面上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 在页面中声明一个要被vue控制的DOM区域，比如一个div块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 导入vue.js的脚本文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 实例化一个ViewModel对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.1 指定当前vm实例所控制页面的区域位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.2 指定Model数据源</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p><ul><li>v-text会覆盖元素自身原有的值，比如就是将<code>div</code>第二个p标签里的<code>性别</code>替换成了<code>女</code>，但这并不是我们想要的，我们希望在<code>性别</code>后面展示<code>女</code></li><li>这个语法用的很少</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712005504173.png" class="" title="image-20220712005504173"><h4 id="3-2-插值表达式"><a href="#3-2-插值表达式" class="headerlink" title="3.2 插值表达式"></a>3.2 插值表达式</h4><blockquote><p><code>{{}}</code>语法主要用来解决<code>v-text</code>引发的覆盖默认文本内容的问题</p><p><code>{{}}</code>语法叫做插值表达式(英文是：Mustache)</p><p>这个语法用的很多</p></blockquote><blockquote><p>问题解决：</p><p><code>3.2标题</code>为什么要这么写的原因？</p><ul><li><p>因为hexo直接渲染插值表达式会报错，所以需要传入原始值</p></li><li><p>原文地址：<a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 在页面中声明一个要被vue控制的DOM区域，比如一个div块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别: &#123;&#123; gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 导入vue.js的脚本文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 实例化一个ViewModel对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.1 指定当前vm实例所控制页面的区域位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.2 指定Model数据源</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;女&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712005610929.png" class="" title="image-20220712005610929"><h4 id="3-3-v-html"><a href="#3-3-v-html" class="headerlink" title="3.3 v-html"></a>3.3 v-html</h4><blockquote><p>要把包含html标签的字符串数据渲染为页面HTML元素，就需要<code>v-html</code></p><p>使用v-text、差值表达式就会原样输出，只能渲染文本内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 在页面中声明一个要被vue控制的DOM区域，比如一个div块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 导入vue.js的脚本文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 实例化一个ViewModel对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.1 指定当前vm实例所控制页面的区域位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.2 指定Model数据源</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&lt;h3 style=&#x27;color:pink&#x27;&gt;sam&lt;/h3&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712012102695.png" class="" title="image-20220712012102695"><blockquote><p>很清楚能看到，v-html把h3标签渲染到了页面上，因为H3标签里的文本内容的颜色变为设置的pink色</p></blockquote><h4 id="3-4-el属性注意事项"><a href="#3-4-el属性注意事项" class="headerlink" title="3.4 el属性注意事项"></a>3.4 el属性注意事项</h4><blockquote><p>如果有多个相同HTML标签在页面结构中，用vue控制页面时，vue的el属性只会控制第一个同名的HTML标签，其余的都会原样输出，不会进行渲染，所以一般约定成俗的都是使用一个id名叫<code>“app”</code>一个大的div包裹我们需要编写的页面。</p><p>并且在以后的项目中，vue会自动配置控制区域的ID，不用我们手动写</p></blockquote><h3 id="4、属性绑定指令-重要"><a href="#4、属性绑定指令-重要" class="headerlink" title="4、属性绑定指令(重要)"></a>4、属性绑定指令(重要)</h3><blockquote><p>如果需要给元素的属性<code>动态绑定属性值</code>，就需要用到<code>v-bind</code>属性绑定指令</p><p>什么时候使用使用属性绑定指令？</p><ul><li>为元素的属性动态添加值时，就要考虑使用属性绑定指令了</li><li>任何元素需要使用动态值时，就可以使用属性绑定指令，这样属性就可以动态的接收值，达成了动态的展示不同的数据<ul><li>比如要给<code>input</code>的<code>placholder</code>动态绑定值，就在<code>placholder</code>前面加一个<code>v-bind</code>或<code>:</code>，表示<code>placholder</code>属性的值时vue的数据源动态赋予的，达成了复用的效果</li></ul></li></ul><p>这个指令用的非常多</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- v-bind 绑定元素属性的完整写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;placeholderText&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- v-bind 绑定元素属性的省略写法，在元素属性前面不写v-bind，只留下英文的冒号: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholderText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>完整代码示例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue第一天<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind 绑定元素属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;placeholderText&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;placeholderText&quot;</span>: <span class="string">&quot;请输入用户名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果用插值表达式给元素属性绑定值，就会报错，插值表达式内容会原样输出并且控制台报错</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712111704521.png" class="" title="image-20220712111704521"><h3 id="5、JS语法在指令中的使用"><a href="#5、JS语法在指令中的使用" class="headerlink" title="5、JS语法在指令中的使用"></a>5、JS语法在指令中的使用</h3><blockquote><p>在插值表达式和属性绑定指令中都可以添加js语句</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue第一天<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1 + 2 = &#123;&#123; 1 + 2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;</span></span><br><span class="line">            box盒子内容</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;placeholderText&quot;</span>: <span class="string">&quot;请输入用户名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;index&quot;</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712132326072.png" class="" title="image-20220712132326072"><blockquote><p>可以看到当鼠标放到box盒子内容上时，提示了title内容，内容就是拼接的<code>box + index</code></p></blockquote><h3 id="6、事件绑定指令"><a href="#6、事件绑定指令" class="headerlink" title="6、事件绑定指令"></a>6、事件绑定指令</h3><blockquote><p>vue中的<code>v-on</code>事件绑定指令，用来协助为DOM元素绑定事件监听，绑定的及时可执行函数</p></blockquote><h4 id="6-1-v-on语法"><a href="#6-1-v-on语法" class="headerlink" title="6.1 v-on语法"></a>6.1 v-on语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on绑定事件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 语法为：v-on:事件名称=&quot;事件处理函数名称&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue第一天<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;subCount&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;count&quot;</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 完整写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">addCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add count&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> -= <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sub count&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-methods中函数写法"><a href="#6-2-methods中函数写法" class="headerlink" title="6.2 methods中函数写法"></a>6.2 methods中函数写法</h4><blockquote><p>在vue的实例对象中</p><ul><li>methods里定义处理函数，推荐使用简写写法，就是<code>函数名 小括号 花括号</code></li></ul></blockquote><h4 id="6-3-this访问数据源数据"><a href="#6-3-this访问数据源数据" class="headerlink" title="6.3 this访问数据源数据"></a>6.3 this访问数据源数据</h4><blockquote><p>在vue的methods中定义了处理函数，如何来访问修改vue实例对象中的数据源的数据呢？</p><ul><li>可以使用<code>this</code>关键字<ul><li>类比到python中就是，在同一个实例对象中，可以使用<code>self关键字+点号</code>的方式一直访问这个对象的所有数据和方法，<code>self</code>就表示是这个实例对象本身</li><li>那么在同一个vue实例对象中，就可以用<code>this.数据源中的数据</code>来访问vue实例对象的数据源中的数据</li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;subCount&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;count&quot;</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 完整写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">addCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add count&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sub count&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面代码中，vue实例对象的methods里的addCount方法中打印了<code>vm</code>这个常量，下面是vm的值</p><p>vm值可以看出来</p><ul><li>数据源中的<code>count</code>是vm这个实例对象的一个属性</li><li>数据源中的<code>addCount</code>、<code>subCount</code>是vm这个实例对象的方法</li><li>所以<code>count</code>、<code>addCount</code>、<code>subCount</code>对于vm实例对象来说，都可以用点的方式来调用</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220712165856891.png" class="" title="image-20220712165856891"><blockquote><p>既然数据源中的<code>count</code>是<code>vm</code>这个实例对象的一个属性，那么在<code>addCount</code>方法里就可以通过<code>vm.count</code>访问到<code>data</code>里的<code>count</code>值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分代码</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// methods里面定义事件处理函数</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="comment">// 简写写法</span></span><br><span class="line">            <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vm.count的值&quot;</span> + vm.<span class="property">count</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713141257962.png" class="" title="image-20220713141257962"><blockquote><p>不过vue中不推荐使用<code>vm</code>这个实例对象来访问属性或方法，而是使用<code>this</code></p><p>从执行结果可以看到<code>vm</code>和<code>this</code>是<code>全等的</code>，那么就可以用<code>this</code>来代替<code>vm</code>访问<code>vm</code>这个实例对象里的属性和方法</p><p>注意：</p><ul><li>用<code>console.log(vm === this)</code>时，一定不能在括号里再用<code>+号</code>拼接任何内容，否则返回结果是<code>false</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// methods里面定义事件处理函数</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="comment">// 简写写法</span></span><br><span class="line">            <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vm.count的值&quot;</span> + vm.<span class="property">count</span>)</span><br><span class="line">                <span class="comment">// 判断vm是否全等于this</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(vm === <span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713141949894.png" class="" title="image-20220713141949894"><blockquote><p>使用<code>this</code>访问属性，从执行结果来看，<code>this.count</code>和<code>vm.count</code>获取到的值一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分代码</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// methods里面定义事件处理函数</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="comment">// 简写写法</span></span><br><span class="line">            <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vm.count的值&quot;</span> + vm.<span class="property">count</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(vm === <span class="variable language_">this</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this.count:&quot;</span> + <span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713142323371.png" class="" title="image-20220713142323371"><h4 id="6-4-事件绑定传参"><a href="#6-4-事件绑定传参" class="headerlink" title="6.4 事件绑定传参"></a>6.4 事件绑定传参</h4><blockquote><p>在事件绑定时，可以对绑定函数进行传递参数，那么对应的<code>vue</code>实例对象里的<code>methods</code>中定义的事件绑定函数就要定义形参</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因为addCount函数接收一个形参n，那么在调用时就需要传递一个实参，比如2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount(2)&quot;</span>&gt;</span>+n<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// addCount函数接收一个形参n</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += n</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this.count:&quot;</span> + <span class="variable language_">this</span>.<span class="property">count</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713143104644.png" class="" title="image-20220713143104644"><blockquote><p>从上面代码可以看出来，<code>addCount</code>函数接收一个形参n，那么在调用时就需要传递一个实参，比如2，那么每次点击<code>+n</code>这个事件，那么每次的count值都是递增+2</p></blockquote><h4 id="6-5-v-on简写格式"><a href="#6-5-v-on简写格式" class="headerlink" title="6.5 v-on简写格式"></a>6.5 v-on简写格式</h4><blockquote><p>v-on使用的非常多，vue提供了简写方式<code>@</code></p><p>注意：</p><ul><li>原生DOM对象有<code>onclick</code>、<code>oninput</code>、<code>onkeyup</code>等原生事件，替换为vue的事件绑定后，对应的为<ul><li>v-on:click</li><li>v-on:input</li><li>v-on:keyup</li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因为addCount函数接收一个形参n，那么在调用时就需要传递一个实参，比如2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(2)&quot;</span>&gt;</span>+n<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713143351140.png" class="" title="image-20220713143351140"><blockquote><p>执行结果和<code>事件绑定传参</code>看到的结果一样，<code>count</code>的值都是递增+2</p></blockquote><h4 id="6-6-event参数-不常用"><a href="#6-6-event参数-不常用" class="headerlink" title="6.6 $event参数(不常用)"></a>6.6 $event参数(不常用)</h4><h5 id="6-6-1-只有一个形参"><a href="#6-6-1-只有一个形参" class="headerlink" title="6.6.1 只有一个形参"></a>6.6.1 只有一个形参</h5><blockquote><p>当事件绑定函数里有一个形参时：</p><ul><li>此时在div中调用该事件函数，但是<code>不传递任何实参</code>，此时事件函数里的形参值是有一个默认的值，比如时间绑定函数形参定义为<code>e</code>，那么<code>e</code>是的值是<code>MouseEvent</code>，也就是说e有一个自己的默认值<ul><li><code>MouseEvent</code>中有一个<code>target</code>属性，可以对元素进行样式的修改</li></ul></li><li>此时在div中调用该事件函数，但是<code>传递了一个实参</code>，那么上面的默认值就没有了，传进来的实参是什么，那么e就是什么<ul><li>就是传参了，e的值就会被覆盖为传进来的值</li></ul></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件绑定函数有形参时，不传值，那么事件绑定函数默认接收一个e参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// addCount函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> % <span class="number">2</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713230638028.png" class="" title="image-20220713230638028"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713230651420.png" class="" title="image-20220713230651420"><blockquote><p>代码分析:</p><ul><li>代码其实逻辑就是点击按钮时，当<code>count</code>值是偶数时，按钮颜色变为红色，为奇数不变色</li><li>能够看到e其实就是<code>MouseEvent</code>，每次点击时，e的值都同一个</li></ul></blockquote><h5 id="6-6-2-有2个以上形参"><a href="#6-6-2-有2个以上形参" class="headerlink" title="6.6.2 有2个以上形参"></a>6.6.2 有2个以上形参</h5><blockquote><p>vue提供了内置变量，固定写法:<code>$event</code></p><ul><li>既想传入一个实参，还想传<code>MouseEvent</code>参数，那么就可以就在调用事件函数时，将<code>$event</code>传进去</li><li>相应的vue实例对象的methods中，用形参e(约定成俗)来接收就可以了</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值:&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件绑定函数有形参时，不传值，那么事件绑定函数默认接收一个e参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(1, $event)&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// addCount函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addCount</span>(<span class="params">n, e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> += n</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> % <span class="number">2</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>执行结果和只有一个形参一致</p></blockquote><h4 id="6-7-事件修饰符"><a href="#6-7-事件修饰符" class="headerlink" title="6.7 事件修饰符"></a>6.7 事件修饰符</h4><blockquote><p>vue提供了事件修饰符的功能，可以更方便的控制事件</p></blockquote><table><thead><tr><th>事件修饰符</th><th>说明</th></tr></thead><tbody><tr><td>.prevent</td><td>阻止默认行为，比如阻止a链接跳转，表单的提交等等</td></tr><tr><td>.stop</td><td>阻止事件冒泡（当页面有父子关系的标签时，只想打印子标签里面的内容，如果没有阻止，就会在打印子里面的内容时，也把父标签的内容也打印出来，为了不出现这种情况，就需要阻止事件冒泡）</td></tr></tbody></table><h4 id="6-8-按键修饰符"><a href="#6-8-按键修饰符" class="headerlink" title="6.8 按键修饰符"></a>6.8 按键修饰符</h4><blockquote><p>监听键盘事件时，需要判断详细的按键内容，此时就可以用按键修饰符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当按键是enter时，调用vue实例对象中的submit()方法</span></span><br><span class="line">&lt;input @keyup.<span class="property">enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 当按键是esc时，调用vue实例对象中的clearInput()方法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clearInput&quot;</span>&gt;</span> </span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        提交数据:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;subData&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span> 清空数据:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clearInput&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按了回车enter键&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clearInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按了清除esc键&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713235122466.png" class="" title="image-20220713235122466"><h3 id="7、双向绑定"><a href="#7、双向绑定" class="headerlink" title="7、双向绑定"></a>7、双向绑定</h3><h4 id="7-1-v-model用法"><a href="#7-1-v-model用法" class="headerlink" title="7.1 v-model用法"></a>7.1 v-model用法</h4><blockquote><p>vue提供了<code>v-model双向数据绑定</code>指令，用来在不操作DOM的前提下，快速获取表单数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;sam&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220713235608487.png" class="" title="image-20220713235608487"><blockquote><p>上述代码分析：</p><ul><li>p标签中的username值来自于data中的username，同时给p标签设置了一个<code>v-model</code>属性，并且指向了username<ul><li>首先页面会将data里的username值渲染到页面上</li><li>当input输入框中的内容有改变时，vue会实时感知到，然后逆向再渲染到p标签中，这样data中的username值就变成了在input输入框中输入的内容，这样达到了不操作DOM就采集到表单标签的值的功能，这样vue实例里就可以通过<code>this</code>访问到实时更新的值</li></ul></li></ul><p>注意：</p><ul><li>表单元素才可以使用<code>v-model</code><ul><li>表单元素有：<ul><li>input输入框</li><li>textarea(大文本输入框)</li><li>select（下拉选择框标签）</li></ul></li></ul></li></ul></blockquote><h4 id="7-2-v-model在select使用"><a href="#7-2-v-model在select使用" class="headerlink" title="7.2 v-model在select使用"></a>7.2 v-model在select使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;subData&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;sam&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;city:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">city</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714001206382.png" class="" title="image-20220714001206382"><h4 id="7-3-v-model修饰符"><a href="#7-3-v-model修饰符" class="headerlink" title="7.3 v-model修饰符"></a>7.3 v-model修饰符</h4><blockquote><p>为了对用户输入内容更方便处理，v-model提供了三个修饰符</p></blockquote><table><thead><tr><th>修饰符</th><th>作用说明</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值转为数值类型</td></tr><tr><td>.trim</td><td>自动过滤用户输入的首尾空白字符</td></tr><tr><td>.lazy</td><td>在“change”时而非“input”时更新</td></tr></tbody></table><h5 id="7-3-1-number修饰符"><a href="#7-3-1-number修饰符" class="headerlink" title="7.3.1 number修饰符"></a>7.3.1 number修饰符</h5><blockquote><p>当从input获取到的值转为int时，就可以用number</p><p>下面的加法例子，如果没有<code>.number</code>修饰符，那么再输入其他数字，结果就会变为字符串拼接而不是加法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&#x27;n1&#x27;</span>&gt;</span> + <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&#x27;n1&#x27;</span>&gt;</span> = <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; n1 + n2 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n1</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n2</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714002119320.png" class="" title="image-20220714002119320"><h5 id="7-3-2-trim修饰符"><a href="#7-3-2-trim修饰符" class="headerlink" title="7.3.2 trim修饰符"></a>7.3.2 trim修饰符</h5><blockquote><p>将表单获取的数据，去除首尾空白字符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&#x27;username&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;getUserName&#x27;</span>&gt;</span>获取用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714002706450.png" class="" title="image-20220714002706450"><h5 id="7-3-3-lazy修饰符"><a href="#7-3-3-lazy修饰符" class="headerlink" title="7.3.3 lazy修饰符"></a>7.3.3 lazy修饰符</h5><blockquote><p>当输入内容只想在失去焦点时才同步给vue，那么就可以使用<code>.lazy</code>修饰符，因为vue双向绑定实时的，每次更新肯定会有性能损耗，当不需要这样，就可以使用lazy</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&#x27;username&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;getUserName&#x27;</span>&gt;</span>获取用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714002922976.png" class="" title="image-20220714002922976"><h3 id="8、条件渲染指令"><a href="#8、条件渲染指令" class="headerlink" title="8、条件渲染指令"></a>8、条件渲染指令</h3><blockquote><p>条件渲染指令可以根据条件来控制DOM的显示与隐藏</p><p>有两个指令：</p><ul><li>v-if</li><li>v-show</li></ul></blockquote><h4 id="8-1-v-if"><a href="#8-1-v-if" class="headerlink" title="8.1 v-if"></a>8.1 v-if</h4><blockquote><p><code>v-if</code>原理：每次动态创建或移除元素，实现元素的显示和隐藏</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&#x27;flag&#x27;</span>&gt;</span>这是被v-if控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103146845.png" class="" title="image-20220714103146845"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103158870.png" class="" title="image-20220714103158870"><blockquote><p>从上面控制台的vue列和Elements列可以看出，当flag为true时，v-if的p标签就显示出来了</p><p>那把flag改为false时，可以看到整个v-if的p标签直接被移除了</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103408859.png" class="" title="image-20220714103408859"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103340885.png" class="" title="image-20220714103340885"><h4 id="8-2-v-show"><a href="#8-2-v-show" class="headerlink" title="8.2 v-show"></a>8.2 v-show</h4><blockquote><p><code>v-show</code>原理：动态为元素添加或移除<code>display: none</code>样式，实现元素的显示和隐藏</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&#x27;flag&#x27;</span>&gt;</span>这是被v-show控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods里面定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103445240.png" class="" title="image-20220714103445240"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103506521.png" class="" title="image-20220714103506521"><blockquote><p>从上面控制台的vue列和Elements列可以看出，当flag为true时，v-show的p标签就显示出来了</p><p>那把flag改为false时，可以看到整个v-show的p标签没有被移除，而是加了<code>display: none</code>的属性达到隐藏的效果</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103612563.png" class="" title="image-20220714103612563"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220714103624008.png" class="" title="image-20220714103624008"><h4 id="8-3-v-else-if"><a href="#8-3-v-else-if" class="headerlink" title="8.3 v-else-if"></a>8.3 v-else-if</h4><blockquote><p>相当于是用v-if的一个分支，但是必须要和<code>v-if</code>配套使用，否则不会被识别</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;count === 1&quot;</span>&gt;</span>1级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;count === 2&quot;</span>&gt;</span>2级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;count === 3&quot;</span>&gt;</span>3级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220725232754842.png" class="" title="image-20220725232754842"><h3 id="9、列表渲染指令"><a href="#9、列表渲染指令" class="headerlink" title="9、列表渲染指令"></a>9、列表渲染指令</h3><h4 id="9-1-v-for"><a href="#9-1-v-for" class="headerlink" title="9.1 v-for"></a>9.1 v-for</h4><blockquote><p>主要是用来将数组循环渲染成一个列表的结构</p><p>v-for用<code>item in items</code>形式的语法</p><ul><li><code>items</code>是待循环的数组</li><li><code>item</code>是被循环的每一项</li></ul><p>需要循环哪个DOM结构，就给那个页面结构加v-for，所以v-for在标签元素的后面紧跟，就代表需要循环标签元素，所以一定注意需要跟在<code>&lt;标签元素</code>的后面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 举例</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userinfos&quot;</span>&gt;</span>name: &#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># vue代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">userinfo</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Sam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Jam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br></pre></td></tr></table></figure><h4 id="9-2-v-for支持索引"><a href="#9-2-v-for支持索引" class="headerlink" title="9.2 v-for支持索引"></a>9.2 v-for支持索引</h4><blockquote><p>v-for支持可选的第二个参数，也就是当前项的索引</p><p><code>(item, index) in items</code></p><p>注意：</p><ul><li>v-for中的<code>item</code>项和<code>index</code>索引都是形参，所以可以替换成别的形参名</li><li>索引是按需添加，不强制</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 举例</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in userinfos&quot;</span>&gt;</span>index:&#123;&#123; index &#125;&#125;, name: &#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># vue代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">userinfo</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Sam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Jam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in userinfo&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>索引:&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue/vue_v2.6.14.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;el&quot;</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">userinfo</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Sam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Jam&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220725234559909.png" class="" title="image-20220725234559909"><h4 id="9-3-v-for推荐添加key"><a href="#9-3-v-for推荐添加key" class="headerlink" title="9.3 v-for推荐添加key"></a>9.3 v-for推荐添加key</h4><blockquote><p>vue官方推荐，只要用到了v-for指令，那么一定要绑定一个<code>:key</code>属性，</p><p>key值注意事项：</p><ul><li>对于key的值只能是字符串或数字类型</li><li>并且key的值不能重复，否则会报<code>Duplicate keys detected</code>的错误</li><li>并且尽量以<code>当前循环项的id</code>作为<code>key</code>的值</li><li>不推荐<code>index</code>作为key的值，会出现数据错乱<ul><li>原因是如果添加数据时，添加数据成功以后，当前数据的索引值会变化，所以索引就不唯一了，并且和数据不是唯一绑定的，只有id才是和数据唯一绑定的</li></ul></li><li>指定key可以提升性能，放置列表错乱</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- v-for绑定key属性， 推荐以id作为key的值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in userinfo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>索引:&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、npm使用"><a href="#三、npm使用" class="headerlink" title="三、npm使用"></a>三、npm使用</h2><h3 id="1、npm使用虚拟环境"><a href="#1、npm使用虚拟环境" class="headerlink" title="1、npm使用虚拟环境"></a>1、npm使用虚拟环境</h3><blockquote><p>npm可以像python一样，使用虚拟环境来管理多个版本的node，可以在电脑中安装多个版本的node以及npm，方便我们使用</p><p>nvm就是一款可以支持多个版本node和npm的工具，官网:<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p></blockquote><blockquote><p>下图是nvm安装的情况，可以看到有个”- &gt;”表示当前使用的npm版本，当然nvm可以使用其他版本，具体使用查看nvm的官方地址即可</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529212053843.png" class="" title="image-20230529212053843"><h3 id="2、nrm管理镜像仓库"><a href="#2、nrm管理镜像仓库" class="headerlink" title="2、nrm管理镜像仓库"></a>2、nrm管理镜像仓库</h3><blockquote><p>nrm是用来对npm的镜像仓库进行管理的工具，官网：<a href="https://github.com/Pana/nrm">https://github.com/Pana/nrm</a></p></blockquote><blockquote><p>对于nrm查看镜像列表没有显示星号的解决办法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开安装nrm目录下找到cli.<span class="property">js</span>，一般是在虚拟环境的目录：~<span class="regexp">/.nvm/</span>versions/node/v16<span class="number">.20</span><span class="number">.0</span>/lib/node_module/nrm</span><br><span class="line"># 找到如下代码，将&amp;&amp;换成||，然后保存退出</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_">hasOwnProperty</span>(customRegistries, name) &amp;&amp; (name <span class="keyword">in</span> registries || customRegistries[name].<span class="property">registry</span> === registry.<span class="property">registry</span>)) &#123;</span><br><span class="line">                    registry[<span class="variable constant_">FIELD_IS_CURRENT</span>] = <span class="literal">true</span>;</span><br><span class="line">                    customRegistries[name] = registry;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><blockquote><p>星号表示当前的npm镜像仓库是什么，我们可以对其进行增加，后续切换镜像仓库会非常方便</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529212549870.png" class="" title="image-20230529212549870"><h3 id="3、查看npm的仓库镜像源"><a href="#3、查看npm的仓库镜像源" class="headerlink" title="3、查看npm的仓库镜像源"></a>3、查看npm的仓库镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529213919046.png" class="" title="image-20230529213919046"><h2 id="四、vue-cli介绍"><a href="#四、vue-cli介绍" class="headerlink" title="四、vue-cli介绍"></a>四、vue-cli介绍</h2><h3 id="1、vue-cli介绍"><a href="#1、vue-cli介绍" class="headerlink" title="1、vue-cli介绍"></a>1、vue-cli介绍</h3><blockquote><p>vue-cli是vue.js开发的标准工具，简化基于webpack创建工程化vue项目的过程</p><p>网址：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></blockquote><blockquote><p>以下来源于vue-cli官网</p><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。</li><li>一个运行时依赖 (@vue&#x2F;cli-service)，该依赖：<ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li></ul><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p></blockquote><h4 id="1-1-vue-cli组件"><a href="#1-1-vue-cli组件" class="headerlink" title="1.1 vue-cli组件"></a>1.1 vue-cli组件</h4><blockquote><p>Vue CLI 有几个独立的部分——如果你看到了我们的<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue">源代码</a>，你会发现这个仓库里同时管理了多个单独发布的包。</p></blockquote><h5 id="1-1-1-CLI"><a href="#1-1-1-CLI" class="headerlink" title="1.1.1 CLI"></a>1.1.1 CLI</h5><blockquote><p>CLI (<code>@vue/cli</code>) 是一个全局安装的 npm 包，提供了终端里的 <code>vue</code> 命令。它可以通过 <code>vue create</code> 快速搭建一个新项目，或者直接通过 <code>vue serve</code> 构建新想法的原型。你也可以通过 <code>vue ui</code> 通过一套图形化界面管理你的所有项目。我们会在接下来的指南中逐章节深入介绍。</p></blockquote><h5 id="1-1-2-CLI服务"><a href="#1-1-2-CLI服务" class="headerlink" title="1.1.2 CLI服务"></a>1.1.2 CLI服务</h5><blockquote><p>CLI 服务 (<code>@vue/cli-service</code>) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 <code>@vue/cli</code> 创建的项目中。</p><p>CLI 服务是构建于 <a href="http://webpack.js.org/">webpack</a> 和 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> 之上的。它包含了：</p><ul><li>加载其它 CLI 插件的核心服务；</li><li>一个针对绝大部分应用优化过的内部的 webpack 配置；</li><li>项目内部的 <code>vue-cli-service</code> 命令，提供 <code>serve</code>、<code>build</code> 和 <code>inspect</code> 命令</li></ul></blockquote><h3 id="2、vue-cli安装和卸载"><a href="#2、vue-cli安装和卸载" class="headerlink" title="2、vue-cli安装和卸载"></a>2、vue-cli安装和卸载</h3><h4 id="2-1-vue-cli安装"><a href="#2-1-vue-cli安装" class="headerlink" title="2.1 vue-cli安装"></a>2.1 vue-cli安装</h4><blockquote><p>安装vue-cli需要对node有版本要求</p><p>Vue CLI 4.x</p><ul><li>需要<a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)</li><li>可以使用 <a href="https://github.com/tj/n">n</a>，<a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727132545206.png" class="" title="image-20220727132545206"><blockquote><p>如果已经安装过了，会提示下方报错</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727131119691.png" class="" title="image-20220727131119691"><blockquote><p>安装之后，就可以在命令行中访问 vue 命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</span></span><br><span class="line">vue</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727132629020.png" class="" title="image-20220727132629020"><blockquote><p>还可以用这个命令来检查其版本是否正确</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727132657452.png" class="" title="image-20220727132657452"><h4 id="2-2-vue-cli卸载"><a href="#2-2-vue-cli卸载" class="headerlink" title="2.2 vue-cli卸载"></a>2.2 vue-cli卸载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue-cli2版本</span></span><br><span class="line">npm uninstall vue-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue-cli3版本</span></span><br><span class="line">npm uninstall @vue/cli -g</span><br></pre></td></tr></table></figure><h3 id="3、vue初体验"><a href="#3、vue初体验" class="headerlink" title="3、vue初体验"></a>3、vue初体验</h3><h4 id="3-1-创建第一个vue项目"><a href="#3-1-创建第一个vue项目" class="headerlink" title="3.1 创建第一个vue项目"></a>3.1 创建第一个vue项目</h4><blockquote><p>使用vue-cli创建工程化的vue项目，vue2项目和vue3项目创建的步骤一模一样，就是vue版本选择时不同，所以下面的步骤是以vue2为例子来创建vue项目，vue3也同样适用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入需要存放项目的目录，使用命令行来创建vue项目，注意create后面跟的就是项目的文件夹名称</span></span><br><span class="line">vue create tester-tools</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727133457863.png" class="" title="image-20220727133457863"><blockquote><p>可以看到有两个提示</p><ul><li>第一个提示是询问我们需要更换npm的镜像源吗？可以选否</li><li>第二个提示是询问<code>pick a preset</code>，表示<code>请选择预设</code>，可以用上下箭头选择<ul><li>如果选择<code>Default ([Vue 3] babel, eslint) </code>，会自动安装vue3，并安装<code>babel、eslint</code></li><li>如果选择<code>Default ([Vue 2] babel, eslint) </code>，会自动安装vue2，并安装<code>babel、eslint</code></li></ul></li><li>建议选择<code>Manually select features</code>，表示手动选择需要的功能，这样定制更高</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727133956649.png" class="" title="image-20220727133956649"><blockquote><p>可以看到有很多选项，有选中的表示已经选择了该功能</p><ul><li>Babel解决js兼容性，必须<code>选中</code></li><li>TypeScript是微软的一种js语言，可以<code>不选</code></li><li>Progressive Web App (PWA) Support是渐进式的框架，可以<code>不选</code></li><li>Router是路由，可以<code>不选</code></li><li>Vuex，可以<code>不选</code></li><li>CSS Pre-processors是css预处理器，建议<code>选中</code>，<ul><li>使用空格就可以选中</li></ul></li><li>Linter &#x2F; Formatter是代码风格，可以<code>不选</code><ul><li>如果团队中有人用双引号，有人用单引号，那么这个工具就会报错，项目跑步起来，所以这个插件建议不安装</li></ul></li><li>Unit Testing是单元测试，可以<code>不选</code></li><li>E2E Testing是端对端测试，可以<code>不选</code></li></ul><p>最终选择完的结果如下</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727134848045.png" class="" title="image-20220727134848045"><blockquote><p>选择好以后，按<code>回车</code>进行下一步，会提示选择vue的版本</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727134950708.png" class="" title="image-20220727134950708"><blockquote><p>选择CSS预处理，这里选择<code>less</code>后回车</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727135106581.png" class="" title="image-20220727135106581"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529211111443.png" class="" title="image-20230529211111443"><blockquote><p>接下来继续提示下面的插件的配置文件想放到package.json，还是放到插件的独立的配置文件</p><ul><li>这里建议选择插件的独立的配置文件，这样可以更加独立的维护</li><li>因为package.json是项目依赖的管理文件，肯定不希望这些插件的配置信息在里面</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727135415371.png" class="" title="image-20220727135415371"><blockquote><p>此时会提示：是否想当前预设保存给未来的项目，这里可以选择否，输入<code>N</code>，后面创建vue项目可以自定义选择别的插件</p><ul><li>也可以选择<code>y</code>，当前配置就会给后面创建项目的时候来使用</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727135533651.png" class="" title="image-20220727135533651"><blockquote><p>接着会提示，选择安装依赖的包管理器，可选<code>Yarn</code>或<code>NPM</code>，这里可以选择<code>NPM</code></p><p>选择<code>NPM</code>后，就会开始创建项目了</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727135923350.png" class="" title="image-20220727135923350"><blockquote><p>到这第一个vue项目就创建好了</p></blockquote><h4 id="3-2-运行第一个vue项目"><a href="#3-2-运行第一个vue项目" class="headerlink" title="3.2 运行第一个vue项目"></a>3.2 运行第一个vue项目</h4><blockquote><p>从上面的创建好vue项目后的提示可以看到提示了我们如何运行项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> tester-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line">$ npm run serve</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727140349959.png" class="" title="image-20220727140349959"><blockquote><p>从上面的启动项目可以看出来</p><ul><li>vue项目先启动了开发服务器<ul><li>从这句话就可以看出来：<code>INFO  Starting development server...</code></li></ul></li><li>应用运行在本地和网络地址也提示出来了<br>- Local:<a href="http://localhost:8080/">http://localhost:8080/</a><br>  - 表示本机IP和端口<br>- Network: <a href="http://10.1.108.84:8080/">http://10.1.108.84:8080</a><br>  - 表示网络IP和端口</li></ul></blockquote><blockquote><p>那访问下本机的IP和端口，看下我们创建的第一个vue项目，浏览器打开<code>http://localhost:8080/</code></p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727140704208.png" class="" title="image-20220727140704208"><blockquote><p>可以看到浏览器打开是VUE的默认欢迎页面，那么我们的第一个vue项目就启动成功了</p><p>注意：</p><ul><li><code>npm run serve</code>这个窗口不要关闭，关闭了上面访问<code>http://localhost:8080/</code>就无法访问了</li></ul></blockquote><h4 id="3-3-vue项目结构"><a href="#3-3-vue项目结构" class="headerlink" title="3.3 vue项目结构"></a>3.3 vue项目结构</h4><blockquote><p>上面我们成功的创建并启动了第一个vue项目，下面来分析下vue项目的目录结构，更加充分了解vue项目</p><p>从下面截图可以看出，vue项目基本分为下面几个目录</p><ul><li>node_modules</li><li>public</li><li>src</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727141741534.png" class="" title="image-20220727141741534"><h5 id="3-3-1-src目录"><a href="#3-3-1-src目录" class="headerlink" title="3.3.1 src目录"></a>3.3.1 src目录</h5><blockquote><p>src目录，见名知意也知道是<code>source</code>源码的意思，表示所有写的代码都在这个目录下</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727150745362.png" class="" title="image-20220727150745362"><blockquote><p>src目录的目录结构</p><ul><li><p>assets目录</p><ul><li>项目中的静态资源，包括图片、css样式表</li></ul></li><li><p>components（<code>重要</code>）</p><ul><li>将<code>封装好</code>、<code>可复用</code>的组件放到<code>components</code>目录中</li></ul></li><li><p>App.vue</p><ul><li>项目的根组件</li><li>定义页面的UI结构</li></ul></li><li><p>main.js</p><ul><li>是项目入口文件，整个项目运行时，优先运行<code>main.js</code></li></ul></li></ul></blockquote><h5 id="3-3-2-public目录"><a href="#3-3-2-public目录" class="headerlink" title="3.3.2 public目录"></a>3.3.2 public目录</h5><blockquote><p>public目录，公共目录，里面存储了存放公共内容的目录，常见的内容有</p><ul><li><code>favicon.ico</code>，网站的icon</li><li><code>index.html</code>，单页面项目，所有内容都是在<code>index.html</code>里面</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;欢迎来到VUE项目&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到里面有div，id是app，就和实例化vue里传递给<code>el</code>属性的值是同一个，vue控制的就是这个<code>div</code>块</p></blockquote><h5 id="3-3-3-node-modules目录"><a href="#3-3-3-node-modules目录" class="headerlink" title="3.3.3 node_modules目录"></a>3.3.3 node_modules目录</h5><blockquote><p>下载的第三方包的存储目录，所以这个目录尽量不需要传到git管理仓库，否则项目目录的磁盘占用会很大</p></blockquote><h4 id="3-4-vue运行流程"><a href="#3-4-vue运行流程" class="headerlink" title="3.4 vue运行流程"></a>3.4 vue运行流程</h4><blockquote><p>工程化的vue项目，vue的功能</p><ul><li>核心概念：通过<code>src/main.js</code>将<code>src/components/App.vue</code>的页面UI结构渲染到<code>index.html</code>的指定区域中<ul><li><code>App.vue</code>用来编写需要被渲染的模板结构</li><li><code>index.html</code>中预留一个<code>el</code>区域</li><li><code>main.js</code>把<code>App.vue</code>的页面UI结构渲染到<code>index.html</code>预留的<code>el</code>区域</li></ul></li></ul></blockquote><blockquote><p>下面是vue2中的main.js的文件内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是src/main.js文件的内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入App.vue组件，将来要把App.vue中的模板结构渲染到html页面中去</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vue实例对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 把render函数指向的组件，渲染到html页面中去</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下面是vue3中的main.js的文件内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue包，得到createApp</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下面是src&#x2F;components&#x2F;App.vue文件的内容</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt; --&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;欢迎来到VUE项目&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 下面代码是public/index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 这里是需要被渲染的div区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ul><li>main.js中的render函数把<code>App.vue</code>的页面结构渲染给<code>index.html</code>时，<code>render函数</code>本质会将<code>App.vue</code>里UI结构，完全替换index.html里的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>这一块，相当于是全部替换了，此时去查看页面结构，会发现没有id为<code>app</code>的div块，显示的页面结构是<code>App.vue</code>里的页面结构内容</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727162915860.png" class="" title="image-20220727162915860"><h5 id="3-4-1-main-js中的vue实例对象"><a href="#3-4-1-main-js中的vue实例对象" class="headerlink" title="3.4.1 main.js中的vue实例对象"></a>3.4.1 main.js中的vue实例对象</h5><blockquote><ul><li><p>vue实例vue对象时，都会传一个<code>el</code>属性指向<code>#app</code></p></li><li><p>但是在<code>main.js</code>中这个属性没有了，但是可以看到render函数后面有一个<code>$mount(“#app”)</code></p><ul><li><code>$mount(“#app”)</code>作用就是和<code>el</code>属性都完全一样的，表示绑定了id为app的div块</li></ul></li></ul></blockquote><h2 id="五、组件-component"><a href="#五、组件-component" class="headerlink" title="五、组件(component)"></a>五、组件(component)</h2><h3 id="1、vue组件化开发"><a href="#1、vue组件化开发" class="headerlink" title="1、vue组件化开发"></a>1、vue组件化开发</h3><h4 id="1-1-vue组件化开发"><a href="#1-1-vue组件化开发" class="headerlink" title="1.1 vue组件化开发"></a>1.1 vue组件化开发</h4><blockquote><p>根据封装的意思，将页面上可<code>重用</code>的UI结构封装为组件，进而方便项目的开发和维护</p><p>vue本身是支持组件化开发的框架</p><p>vue中规定</p><ul><li>组件的文件后缀名是<code>.vue</code><ul><li>第一个vue项目的<code>src/App.vue</code>这个文件就是一个vue组件</li></ul></li></ul></blockquote><h4 id="1-2-vue组件开发三部曲"><a href="#1-2-vue组件开发三部曲" class="headerlink" title="1.2 vue组件开发三部曲"></a>1.2 vue组件开发三部曲</h4><blockquote><p>每个<code>xxx.vue</code>组件都由3部分组成，分别是：</p><ul><li>template：组件的模板结构</li><li>script：组件的JavaScript行为</li><li>style：组件的样式<ul><li>本质就是组件的css样式</li></ul></li></ul></blockquote><h5 id="1-2-1-组件中的template节点"><a href="#1-2-1-组件中的template节点" class="headerlink" title="1.2.1 组件中的template节点"></a>1.2.1 组件中的template节点</h5><blockquote><p>vue规定每个组件对应的模板结构，需要定义到<code>&lt;template&gt;</code>节点</p><p>注意：</p><ul><li><code>&lt;template&gt;</code>节点是vue提供的容器标签，只能有包裹性质的作用，它不会被渲染为真正的DOM元素</li><li>组件的<code>&lt;template&gt;</code>节点中支持所有的<code>指令语法</code>，比如：<ul><li>插值表达式</li><li>v-bind</li><li>v-on</li><li>v-for等等</li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件第一部分：template</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是index.vue组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一个组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-组件中的script节点"><a href="#1-2-2-组件中的script节点" class="headerlink" title="1.2.2 组件中的script节点"></a>1.2.2 组件中的script节点</h5><blockquote><p>vue规定<code>&lt;script&gt;</code>节点是可选的，可以在<code>&lt;script&gt;</code>节点中封装组件的<code>javascript</code>业务逻辑</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 默认导出，固定写法</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>组件的script节点下name节点</p><p>可以通过name节点为当前组件定义一个名称，在使用vue-devtools进行调试时，自定义组件名称可以很清晰区分出来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 默认导出，固定写法</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="comment">// name表示当前组件的名称，规范为首字母大写</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;MyApp&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>组件的script节点下data节点表示需要被渲染的数据源</p><p>注意事项：</p><ul><li><code>xx.vue</code>组件中的data不能像之前vue实例对象里的一样，不能指向对象</li><li>组件中的data必须是一个函数，然后data这个函数将数据源给返回</li></ul></blockquote><blockquote><p>如果data数据源指向了对象，那么就会报错，报错如下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 默认导出，固定写法</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// data数据源，下面这么写vue会报错</span></span><br><span class="line"><span class="comment">// data指向了一个对象，就会报错</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&quot;sam&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727174142040.png" class="" title="image-20220727174142040"><blockquote><p>需要让data是一个函数，这样组件中的<code>template</code>区域才可拿到正确的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 默认导出，固定写法</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="comment">// data数据源</span></span><br><span class="line">        <span class="comment">// data数据源必须是一个函数</span></span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>: <span class="string">&quot;sam&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727174527920.png" class="" title="image-20220727174527920"><blockquote><p>组件的script节点下methods节点</p><p>组件中定义methods方法和vue实例对象中一样，在<code>methods</code>中定义方法即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是index.vue组件&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;这是我的第一个组件&lt;/p&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;p&gt;用户名&#123;&#123; username &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点击修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 默认导出，固定写法</span><br><span class="line">    export default &#123;</span><br><span class="line">        // data数据源</span><br><span class="line">        // data数据源必须是一个函数</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                username: &quot;修改前是:admin&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // methods中定义方法</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showMsg() &#123;</span><br><span class="line">                this.username = &quot;修改后是:sam&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">        color: deeppink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727175431493.png" class="" title="image-20220727175431493"><blockquote><p>组件中<code>methods</code>里的方法的<code>this</code>是什么？</p><ul><li>在vue组件中，<code>this</code>表示当前组件的实例对象<ul><li>组件的实例对象中也有<code>username</code>属性，那么就可以直接用this来调用</li></ul></li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727175612828.png" class="" title="image-20220727175612828"><h5 id="1-2-3-组件的style节点"><a href="#1-2-3-组件的style节点" class="headerlink" title="1.2.3 组件的style节点"></a>1.2.3 组件的style节点</h5><blockquote><p>vue规定组件内<code>&lt;style&gt;</code>节点是可选的，在<code>&lt;style&gt;</code>节点中编写美化当前组件的UI结构</p><p><code>&lt;style&gt;</code>标签上的lang&#x3D;”css”属性是可选的，表示为所使用的样式语言，默认支持普通css语法，可选less、scss等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    h1 &#123;</span><br><span class="line">        font-<span class="attr">size</span>: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3-vue组件注意事项"><a href="#1-3-vue组件注意事项" class="headerlink" title="1.3 vue组件注意事项"></a>1.3 vue组件注意事项</h4><h5 id="1-3-1-vue组件的唯一根节点"><a href="#1-3-1-vue组件的唯一根节点" class="headerlink" title="1.3.1 vue组件的唯一根节点"></a>1.3.1 vue组件的唯一根节点</h5><blockquote><p>在vue2.x中，<code>&lt;template&gt;</code>只能有一个根节点，否则会报错</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 下面在组件的template中定义了两个div，就会报错</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是index.vue组件&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;这是我的第一个组件&lt;/p&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;p&gt;用户名&#123;&#123; username &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点击修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;!-- 这里是第二个div，但是会报错 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;第二个div&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727231603798.png" class="" title="image-20220727231603798"><blockquote><p>在vue3.x中，<code>&lt;template&gt;</code>支持定义多个根节点</p></blockquote><h5 id="1-3-2-启动less语法"><a href="#1-3-2-启动less语法" class="headerlink" title="1.3.2 启动less语法"></a>1.3.2 启动less语法</h5><blockquote><p>在创建vue工程化项目时，选择了less插件，那如何在vue组件中启用less呢？如下代码</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">color</span>: deeppink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="2、组件的使用"><a href="#2、组件的使用" class="headerlink" title="2、组件的使用"></a>2、组件的使用</h3><h4 id="2-1-组件关系"><a href="#2-1-组件关系" class="headerlink" title="2.1 组件关系"></a>2.1 组件关系</h4><blockquote><p>组件创建好以后，彼此之间是相互独立的，不存在父子关系</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727232531377.png" class="" title="image-20220727232531377"><blockquote><p>组件嵌套后，才产生了父子关系、兄弟关系</p><ul><li>组件A嵌套了组件B和组件C，组件A和（组件B、组件C）是父子关系</li><li>组件B和组件C是兄弟关系</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727232734321.png" class="" title="image-20220727232734321"><blockquote><p>vue中注册组件分为下面两种方式</p><ul><li>全局注册：被全局注册的组件，可在全局任何一个组件内使用</li><li>局部注册：被局部注册的组件，只能在当前注册的范围内使用</li></ul></blockquote><h4 id="2-2-使用组件三步骤"><a href="#2-2-使用组件三步骤" class="headerlink" title="2.2 使用组件三步骤"></a>2.2 使用组件三步骤</h4><blockquote><p>当组件写好以后，如何使用组件有三个步骤</p><ul><li>步骤一：在组件(<code>xxx.vue</code>的<code>script</code>节点中)中使用import语法导入需要的组件</li><li>步骤二：在组件(<code>xxx.vue</code>的<code>script</code>节点中)中使用components节点注册组件</li><li>步骤三：在组件(<code>xxx.vue</code>的<code>template</code>节点中)中以标签形式使用注册的组件</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 步骤3：以标签形式使用注册的组件 --&gt;</span><br><span class="line">    &lt;Card&gt;&lt;/Card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 步骤1：导入components目录下的自定义组件</span><br><span class="line">import Card from &#x27;@/components/Card.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 步骤2：在components节点下注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    Card</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220727234712929.png" class="" title="image-20220727234712929"><blockquote><p>需要注意事项是：</p><ul><li>步骤1中导入组件的<code>@</code>符号，是表示从项目的<code>./src</code>目录开始查找组件，这个是webpack里的内容，vue使用<code>@</code>很有好的自定义了这个快捷方式，表示从<code>./src</code>目录下开始导入<code>components</code>目录里的组件</li><li>步骤2中在<code>components</code>节点注册组件时，只写了<code>Card</code>，表示<code>&#123;“Card”:“Card”&#125;</code>，就是说这个对象的key和value都是一样的，那就可以简写为<code>Card</code></li></ul></blockquote><blockquote><p>推荐vscode插件：</p><ul><li><p>Path Autocomplete</p><ul><li><p>使用这个插件时，一定要记得vscode打开的是项目目录，比如项目根目录名字叫<code>tester-tool</code>，那么就需要用vscode打开这个目录，不能打开上一级，否则这个插件无法提示components路径</p></li><li><p>在vscode的settings.json中配置如下</p><ul><li><p>“path-autocomplete.extensionOnImport”: true,</p><p> ​    “path-autocomplete.pathMappings”: {</p><p> ​        “@”: “${folder}&#x2F;src”</p><p> ​    }</p></li></ul></li></ul></li><li><p>Vuter</p></li></ul></blockquote><h5 id="2-2-1-全局注册组件"><a href="#2-2-1-全局注册组件" class="headerlink" title="2.2.1 全局注册组件"></a>2.2.1 全局注册组件</h5><blockquote><p>在vue项目的<code>main.js</code>入口文件中，通过<code>Vue.component()</code>方法来注册全局组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入需要全局注册的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Count.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line"><span class="comment">// 参数1：字符串格式，表示组件的”注册名称“</span></span><br><span class="line"><span class="comment">// 参数2：导入的需要被全局注册的组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;Count&quot;</span>, <span class="title class_">Count</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220728001832174.png" class="" title="image-20220728001832174"><blockquote><p>全局注册组件</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220728003835277.png" class="" title="image-20220728003835277"><blockquote><p>在根组件App调用组件Left、Right组件</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220728004101194.png" class="" title="image-20220728004101194"><blockquote><p>上面代码中：</p><ul><li>Count组件被注册为全局组件</li><li>根组件App引入了组件Left、组件Right</li><li>组件Left、组件Right中又分别引入了全局组件Count</li></ul><p>最终页面展示的效果</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20220728004134774.png" class="" title="image-20220728004134774"><h5 id="2-2-3-局部注册组件"><a href="#2-2-3-局部注册组件" class="headerlink" title="2.2.3 局部注册组件"></a>2.2.3 局部注册组件</h5><blockquote><p>在单独的组件A中的<code>components</code>节点下注册了组件B，那么组件B只能在当前组件A中使用，不能被其他组件C使用，组件B就是私有组件</p></blockquote><h5 id="2-2-4-组件注册名称写法"><a href="#2-2-4-组件注册名称写法" class="headerlink" title="2.2.4 组件注册名称写法"></a>2.2.4 组件注册名称写法</h5><blockquote><p>在进行组件注册时，定义组件注册名称的方式有：</p><ul><li>使用keybab-case命名法，俗称短横线命名法，比如：my-swiper、my-date等</li><li>使用PascalCase命名法，俗称帕斯卡命名法或大驼峰命名法，比如MySwiper等</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Swiper.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;./components/test.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用keybab-case命名法</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&quot;my-test&quot;</span>, <span class="title class_">Swiper</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用PascalCase命名法</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&quot;MySwiper&quot;</span>, <span class="title class_">Swiper</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过name属性注册组件</p><ul><li>在注册组件期间，除了可以直接提供组件的注册名称外，还可以把组件的name属性作为注册后组件的名称</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swiper.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;Swiper&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Swiper.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用PascalCase命名法，使用组件的name属性来声明组件注册名称</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="title class_">Swiper</span>.<span class="property">name</span>, <span class="title class_">Swiper</span>)</span><br></pre></td></tr></table></figure><h5 id="2-2-5-组件样式冲突"><a href="#2-2-5-组件样式冲突" class="headerlink" title="2.2.5 组件样式冲突"></a>2.2.5 组件样式冲突</h5><blockquote><p>在<code>.vue</code>组件中的样式会全局生效，因此会造成多个组件之间的样式冲突问题，导致的根本原因：</p><ul><li>所有组件的DOM结构，都是基于唯一的index.html页面进行渲染</li><li>每个组件的样式，都会影响整个index.html页面的DOM结构</li></ul></blockquote><blockquote><p>为每个组件分配唯一的自定义属性，在编写组件样式，使用属性选择器来控制样式的作用域，但是每个组件都要写唯一自定义属性，比较麻烦</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swiper.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="comment">// 添加自定义属性 data-v-001</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">data-v-001</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">data-v-001</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;Swiper&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  // 用过中括号的属性选择器，来防止组件之间的样式冲突问题</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  // 给每个组件分配的自定义属性都是唯一的</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.box</span><span class="selector-attr">[data-v-001]</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>vue为了解决上述出现的问题，vue为style节点提供了<code>scoped</code>属性，从而防止组件的样式冲突问题</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在App.vue组件中注册UserList.vue组件，可以看到在App.vue中的p标签设置了color属性</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是App.vue<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">UserList</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注册UserList.vue组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">UserList</span> <span class="keyword">from</span> <span class="string">&#x27;./components/UserList.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">UserList</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"> <span class="selector-tag">p</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">   <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserList.vue组件，也有个p标签设置了color属性</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;uname&#125;&#125;，年龄：&#123;&#123;age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>点击抽奖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&quot;UserList&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">uname</span>: <span class="string">&quot;sam&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">age</span>: <span class="number">19</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给style节点设置了scoped属性，防止组件之间的样式冲突</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">p</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: brown;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: brown;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>从渲染的html结构来看，vue的style节点设置了一个scoped属性以后，vue会自动给组件设置了一个唯一的自定义属性，用来防止组件之间的样式冲突问题</p><p>可以看到UserList.vue组件有了一个data-v-4a3fa6b9的属性，不需要我们手动再去写自定义的唯一属性了</p><p>并且后面的的data-v-7ba5bd90这个属性是父组件里的唯一自定义属性</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230126195857912.png" class="" title="image-20230126195857912"><h5 id="2-2-6-x2F-deep-x2F-样式穿透"><a href="#2-2-6-x2F-deep-x2F-样式穿透" class="headerlink" title="2.2.6 &#x2F;deep&#x2F;样式穿透"></a>2.2.6 &#x2F;deep&#x2F;样式穿透</h5><blockquote><p>如果给当前组件的style节点添加了scoped属性，则当前组件的样式对其子组件是不生效的，如果想让某些样式对子组件生效，可以使用&#x2F;deep&#x2F;深度选择器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="comment">// 先给当前组件设置样式</span></span><br><span class="line">  h3 &#123;</span><br><span class="line">    <span class="attr">color</span>: pink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在给子组件里的标签将对应样式透传下去</span></span><br><span class="line"> /deep/ h3&#123;</span><br><span class="line">   <span class="attr">color</span>: pink;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-组件props属性"><a href="#2-3-组件props属性" class="headerlink" title="2.3 组件props属性"></a>2.3 组件props属性</h4><blockquote><p>props是组件的<code>自定义属性</code>，组件的调用者可以通过props属性将数据传递到子组件内部，供子组件内部进行使用</p><p>props作用：父组件通过<code>props</code>向子组件传递要展示的数据</p><p>props好处：提高组件的复用性</p></blockquote><h5 id="2-3-1-props属性基本使用"><a href="#2-3-1-props属性基本使用" class="headerlink" title="2.3.1 props属性基本使用"></a>2.3.1 props属性基本使用</h5><blockquote><p>在封装vue组件是，可以把动态的数据项声明为props自定义属性，自定义属性可以在当前组件的模板结构中直接被使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法结构</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 组件的自定义属性</span></span><br><span class="line">  <span class="comment">// 父组件传递给 当前组件的数据，必须在 props 节点中声明</span></span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;自定义属性A&#x27;</span>, <span class="string">&#x27;自定义属性B&#x27;</span>, <span class="string">&#x27;其它自定义属性...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在封装通用组件的时候，合理的使用<code>props</code>属性可以极大提高组件复用性</p><ul><li>上面这句话怎么理解更好呢？<ul><li>比如封装了一个组件A，组件B和组件C地方都用到了这个组件A，但是希望组件B和组件C给组件A传进去的值是不一样，使用props属性，就可以在组件B和组件C调用组件A，传进去不同的值，后面的动态路由就可以使用props进行传参</li></ul></li><li>props作为自定义属性，允许调用者通过自定义属性，给当前组件指定初始值<ul><li>这句话理解为调用封装好的组件时，调用格式为<code>&lt;组件名&gt;&lt;/组件名&gt;</code>，封装好的组件有props属性时，就可以再调用的时候，将props里定义的属性拿过来到调用格式里当做属性，格式会变为<code>&lt;组件名 props中的属性&gt;&lt;/组件名&gt;</code>，表示设置组件的props属性的默认值</li></ul></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Count.vue组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;count&quot;&gt;</span><br><span class="line">      &lt;p&gt;组件Count&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;count:&#123;&#123; init &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button @click=&quot;addCount&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 自定义props属性的初始化值</span><br><span class="line">  props: [&quot;init&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>从上面的Count组件中可以看到props自定义属性，那么调用Count组件方就可以使用这些自定义属性了</p><p>比如Left.vue中就以标签形式调用Count组件，并且给Count组件标签中添加Count组件的props自定义属性init</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Left.vue组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;p&gt;这是Left组件&lt;/p&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      // 这里首先Count被注册为全局组件了</span><br><span class="line">      // 然后Count组件有一个自定义的init属性</span><br><span class="line">      &lt;Count init=&quot;9&quot;&gt;&lt;/Count&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此时打开浏览器页面查看Left.vue结构，从下面可以看到Left组件中的Count组件的props中的init自定义属性值就是传进去的9，但是要注意的是，此时的init值的类型是字符串，那么在页面操作Left组件的<code>+</code>号操作，可以看到Count组件中的加法结果其实是字符串拼接了，因为init值是字符串9，每次+1都和<code>9</code>这个字符串拼接</p></blockquote><blockquote><p>注意：</p><ul><li>父组件传递给了子组件中未声明的props属性，则传递进来的这些props属性会被忽略，无法被子组件使用<ul><li>比如子组件的props只有<code>title</code>属性，但是父组件调用子组件时，还给子组件传了<code>title</code>和<code>author</code>属性，那么子组件只能使用<code>title</code>属性，不能使用<code>author</code>属性</li></ul></li></ul></blockquote><h5 id="2-3-2-动态绑定props属性"><a href="#2-3-2-动态绑定props属性" class="headerlink" title="2.3.2 动态绑定props属性"></a>2.3.2 动态绑定props属性</h5><blockquote><p>外界组件调用方想动态的给封装好的组件的props自定义属性传值时，就可以对props的值使用属性绑定指令(v-bind)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Left.vue组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">      &lt;p&gt;这是Left组件&lt;/p&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      // 这里首先Count被注册为全局组件了</span><br><span class="line">      // 然后使用属性绑定指定，动态的进行props属性绑定，提高了组件的复用性</span><br><span class="line">      &lt;Count :title=&quot;info.title&quot; :author=&quot;&#x27;post by&#x27; + info.author&quot;&gt;&lt;/Count&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return: &#123;</span><br><span class="line">            info: &#123;</span><br><span class="line">                &quot;title&quot;: &quot;vue的用法&quot;,</span><br><span class="line">                &quot;author&quot;: &quot;sam&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529223231193.png" class="" title="image-20230529223231193"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529223253244.png" class="" title="image-20230529223253244"><h5 id="2-3-3-props的大小写命名"><a href="#2-3-3-props的大小写命名" class="headerlink" title="2.3.3 props的大小写命名"></a>2.3.3 props的大小写命名</h5><blockquote><p>组件中如果使用”camelCase（驼峰命名法）”声明了props属性的名称，则有两种方式可以绑定属性的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>发布时间：&#123;&#123; pubTime &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;Count&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">props</span>: [<span class="string">&#x27;pubTime&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!- - 方式<span class="number">1</span>：使用<span class="string">&quot;驼峰命名&quot;</span>的形式为组件绑定属性的值&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">my-post</span> <span class="attr">pubTime</span>=<span class="string">&quot;&quot;</span><span class="attr">1999</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">my-post</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!- - 方式<span class="number">2</span>: 使用<span class="string">&quot;短横线分隔命名&quot;</span>的形式为组件绑定属性的值&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">my-post</span> <span class="attr">pub-time</span>=<span class="string">&quot;&quot;</span><span class="attr">1999</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">my-post</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-组件props验证"><a href="#2-4-组件props验证" class="headerlink" title="2.4 组件props验证"></a>2.4 组件props验证</h4><h5 id="2-4-1-对象类型的props节点"><a href="#2-4-1-对象类型的props节点" class="headerlink" title="2.4.1 对象类型的props节点"></a>2.4.1 对象类型的props节点</h5><blockquote><p>在2.3小节的<code>组件props属性</code>中，我们在子组件中的props属性使用的是列表形式，无法对props属性进行数据类型的校验</p><p>vue组件除了使用列表形式的props属性，还可以使用对象类型的props属性节点，来对每个props属性的数据类型进行校验</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Count&quot;</span>,</span><br><span class="line">  <span class="comment">// props: [&#x27;title&#x27;, &#x27;author&#x27;]</span></span><br><span class="line">  <span class="comment">// 通过对象类型的props节点，指定每个props属性的数据类型</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529230244948.png" class="" title="image-20230529230244948"><blockquote><p>如果传递给子组件的props属性的数据类型和子组件中定义的props属性的数据类型不一致，就会在浏览器的console调试面板中有提示告警信息</p><p>可以看到提示了<code>Invalid prop</code>，无效的prop，表示期望是<code>Boolean</code>，但实际得到了<code>String</code></p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529230411326.png" class="" title="image-20230529230411326"><h5 id="2-4-2-基础类型的检查"><a href="#2-4-2-基础类型的检查" class="headerlink" title="2.4.2 基础类型的检查"></a>2.4.2 基础类型的检查</h5><blockquote><p>可以为组件的prop属性指定基础的校验类型，从而防止组件的使用者为其绑定一个错误的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是比较常见的基础数据类型，前5中使用比较多</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 基础数据类型</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title1</span>: <span class="title class_">String</span>, <span class="comment">// 字符串类型</span></span><br><span class="line">    <span class="attr">title2</span>: <span class="title class_">Number</span>, <span class="comment">// 数字类型</span></span><br><span class="line">    <span class="attr">title3</span>: <span class="title class_">Boolean</span>, <span class="comment">// 布尔值类型</span></span><br><span class="line">    <span class="attr">title4</span>: <span class="title class_">Array</span>, <span class="comment">// 数组类型</span></span><br><span class="line">    <span class="attr">title5</span>: <span class="title class_">Object</span>, <span class="comment">// 对象类型</span></span><br><span class="line">    <span class="attr">title6</span>: <span class="title class_">Date</span>, <span class="comment">// 日期类型</span></span><br><span class="line">    <span class="attr">title7</span>: <span class="title class_">Function</span>, <span class="comment">// 函数类型</span></span><br><span class="line">    <span class="attr">title8</span>: <span class="title class_">Symbol</span>, <span class="comment">// 符号类型</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-4-3-多个可能的类型"><a href="#2-4-3-多个可能的类型" class="headerlink" title="2.4.3 多个可能的类型"></a>2.4.3 多个可能的类型</h5><blockquote><p>可以对某一个prop属性指定多个数据类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 基础数据类型</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title1</span>: [<span class="title class_">String</span>,<span class="title class_">Boolean</span>,<span class="title class_">Number</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-4-4-必填项校验"><a href="#2-4-4-必填项校验" class="headerlink" title="2.4.4 必填项校验"></a>2.4.4 必填项校验</h5><blockquote><p>如果组件的某个prop属性是必填项，必须要让组件调用者为其传递属性的值，需要通过配置对象的形式，为prop属性定义验证规则</p><p>注意：</p><ul><li>当prop属性的required为true时，表示当前属性的值时必填项，如果调用者没有指定该属性的值，就会在console中报错</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用&quot;配置对象&quot;的形式，来为title定义&quot;验证规则&quot;</span></span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// 当前属性的值必须是字符串类型</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 当前属性的值必须是必填项</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529231643567.png" class="" title="image-20230529231643567"><h5 id="2-4-5-属性默认值"><a href="#2-4-5-属性默认值" class="headerlink" title="2.4.5 属性默认值"></a>2.4.5 属性默认值</h5><blockquote><p>封装组件时，可以为某个prop属性指定默认值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用&quot;配置对象&quot;的形式，来为title定义&quot;验证规则&quot;</span></span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// 当前属性的值必须是字符串类型</span></span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;vue是最棒的！&quot;</span> <span class="comment">// 当前属性的默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529231940456.png" class="" title="image-20230529231940456"><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529231832938.png" class="" title="image-20230529231832938"><h5 id="2-4-6-自定义验证函数"><a href="#2-4-6-自定义验证函数" class="headerlink" title="2.4.6 自定义验证函数"></a>2.4.6 自定义验证函数</h5><blockquote><p>在封装组件时，可以为prop属性定义自定义的验证函数，从而对prop属性进行精准控制</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用&quot;配置对象&quot;的形式，来为title定义&quot;验证规则&quot;</span></span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// 当前属性的值必须是字符串类型</span></span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;vue是最棒的！&quot;</span>,</span><br><span class="line">      <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// title属性的值，必须匹配下面的列表中的任意一个</span></span><br><span class="line">        <span class="comment">// 如果没有匹配的，则函数返回值为false，表示验证失败，反之为true表示验证通过</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;vue1&quot;</span>, <span class="string">&quot;vue2&quot;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果组件调用方出传的prop的属性值不是validator函数中return列表的任意一个，则报错</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230529234402504.png" class="" title="image-20230529234402504"><h4 id="2-5-组件的计算属性"><a href="#2-5-组件的计算属性" class="headerlink" title="2.5 组件的计算属性"></a>2.5 组件的计算属性</h4><blockquote><p>计算属性本质上是一个函数，可以实时监听data中数据的变化，并return一个计算后的新值，提供给组件渲染</p><p>计算属性需要以<code>函数</code>的形式声明到组件的<code>computed</code>选项中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; count &#125;&#125; + 2 = &#123;&#123; add &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 计算属性：监听 data函数中的count值的变化，自动计算出 count + 2 的新值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230530230903502.png" class="" title="image-20230530230903502"><blockquote><p>注意：</p><ul><li>计算属性侧重于得到一个计算的结果，所以计算属性中必须使用<code>return</code>返回计算的新值</li><li>计算属性必须定义在computed节点中</li><li>计算属性必须是一个function函数</li><li>计算属性必须有返回值</li><li>计算属性必须当做普通属性返回</li></ul></blockquote><h4 id="2-6-组件的watch侦听器"><a href="#2-6-组件的watch侦听器" class="headerlink" title="2.6 组件的watch侦听器"></a>2.6 组件的watch侦听器</h4><blockquote><p>watch侦听器是允许开发者监视数据的变化，从而对数据的变化做特定的操作，比如监听用户名的变化而发起请求，判断用户名是否可用</p></blockquote><h5 id="2-6-1-watch侦听器的基本用法"><a href="#2-6-1-watch侦听器的基本用法" class="headerlink" title="2.6.1 watch侦听器的基本用法"></a>2.6.1 watch侦听器的基本用法</h5><blockquote><p>需要在watch节点下，定义自己的侦听器，也就是声明属于自己的侦听函数方法</p><p>我们需要监听哪个值的变化，那就把需要监听的值的名字拿过来当成函数名，写在watch节点下，然后watch侦听器的侦听函数的形参列表，第一个值是”变化后的新值”，第二值是”变化之前的旧值”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; count &#125;&#125; + 2 = &#123;&#123; add &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入了：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  姓名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听 data函数 中 msg值的变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// msg函数的形参列表，第一个值是&quot;变化后的新值&quot;，第二值是&quot;变化之前的旧值&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">msg</span>(<span class="params">newVal, oldVal</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal:&quot;</span> + newVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal:&quot;</span> + oldVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230530233715930.png" class="" title="image-20230530233715930"><blockquote><p>每次input框输入完成以后，就会打印出新值和旧值，特别适合用来做用户名、商品名等唯一性的校验，比如给用户名、商品名进行侦听，每次变化时就发起ajax请求，由接口返回用户名、商品名是否可用</p></blockquote><h5 id="2-6-2-immediate选项"><a href="#2-6-2-immediate选项" class="headerlink" title="2.6.2 immediate选项"></a>2.6.2 immediate选项</h5><blockquote><p>默认情况下，组件在初次加载完成后不会调用watch侦听器，如果想让watch侦听器在组件初始化时就被立即调用，那么可以使用<code>immediate</code>选项</p><ul><li>比如组件的data中某个变量被watch侦听了，并且这个变量有初始值，如果组件首次加载，但是侦听器中的侦听函数是不会被调用的，所以就需要<code>immediate</code>选项来让组件侦听器在组件初始化时就可以使用</li></ul></blockquote><blockquote><p>注意：</p><ul><li>需要被监听的值不是函数了，而是一个对象，并且对象中有一个固定的<code>handler</code>函数，表示来接受值的前后变化</li><li>在被监听值的对象中定义<code>immediate: true</code>，表示组件加载完成后立即调用一次当前msg的watch侦听器</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入了：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  姓名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&quot;admin&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听 data函数 中 msg值的变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// msg就变成了一个对象，而不是函数了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在msg对象中有一个固定的写法handler，当 msg变化时，就自动调用handler函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal:&quot;</span> + newVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldVal:&quot;</span> + oldVal);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 表示组件加载完成后立即调用一次当前msg的watch侦听器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230530235311494.png" class="" title="image-20230530235311494"><blockquote><p>从上面代码可以看出：</p><ul><li>data的msg初始值是admin，并且对msg值设置了侦听器以及<code>immediate</code>为true</li><li>那么刷新页面后，组件加载完毕，会自动调用一次msg值的侦听器，我们在console中就看到<code>newVal:admin</code>和”oldVal:undefined”<ul><li>为什么”oldVal”的值是undefined?<ul><li>因为是组件加载完毕后就调用msg的侦听器函数，那么msg的初始值admin就是组件获取到的最新值，那么msg的旧值没有自定义，所以就是undefined</li></ul></li></ul></li></ul></blockquote><h5 id="2-6-3-deep选项"><a href="#2-6-3-deep选项" class="headerlink" title="2.6.3 deep选项"></a>2.6.3 deep选项</h5><blockquote><p>当watch侦听的是一个对象时，如果对象中的某些值发生了变化，则无法被侦听到，此时需要使用deep属性</p><p>注意：</p><ul><li>当侦听器的hanler函数的旧值用不到，就可以在handler函数中不传第二个oldVal</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  姓名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model.<span class="property">trim</span>=<span class="string">&quot;user.name&quot;</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">user</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;sam&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听 data函数 中 user对象值的变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">user</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在user对象中有一个固定的写法handler，当 user中的值变化时，就自动调用handler函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newVal));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (newVal.<span class="property">name</span> === <span class="string">&quot;vue3&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户名可用:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newVal));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 表示组件加载完成后立即调用一次当前msg的watch侦听器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">deep</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531102811860.png" class="" title="image-20230531102811860"><blockquote><p>从上面代码看出：</p><ul><li>当对user对象的侦听器设置了deep为true以后，当user对象的name发生了变化时，那就会自动调用handler函数，并且当name等于”vue3”时，还执行了user侦听器函数中if语句的console函数</li></ul></blockquote><h5 id="2-6-4-监听对象单个属性的变化"><a href="#2-6-4-监听对象单个属性的变化" class="headerlink" title="2.6.4 监听对象单个属性的变化"></a>2.6.4 监听对象单个属性的变化</h5><blockquote><p>监听对象时，如果我们设置了true，那么任何对象的任意一个值发生了变化，那么都会调用一次侦听器，我们只想让单个属性发生变化才进行侦听，就需要对单个属性设置侦听器了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年龄+1&quot;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 仅仅监听 data函数 中 user对象的name值的变化</span></span><br><span class="line">    <span class="string">&quot;user.name&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// 在user对象中有一个固定的写法handler，当 user中的name值变化时，就自动调用handler函数</span></span><br><span class="line">      <span class="comment">// name的值就是newVal</span></span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal:&quot;</span> + newVal);</span><br><span class="line">        <span class="keyword">if</span> (newVal === <span class="string">&quot;vue3&quot;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户名可用:&quot;</span> + newVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 表示组件加载完成后立即调用一次当前的watch侦听器</span></span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-6-5-计算属性和侦听器的区别"><a href="#2-6-5-计算属性和侦听器的区别" class="headerlink" title="2.6.5 计算属性和侦听器的区别"></a>2.6.5 计算属性和侦听器的区别</h5><blockquote><p>计算属性和侦听器侧重的应用场景不同</p><ul><li>计算属性侧重于监听多个值的变化，得到return一个新值</li><li>侦听器侧重于监听单个数据的变化，最终执行我们设置的逻辑，并且不需要任何返回值</li></ul></blockquote><h4 id="2-7-组件的生命周期"><a href="#2-7-组件的生命周期" class="headerlink" title="2.7 组件的生命周期"></a>2.7 组件的生命周期</h4><blockquote><p>组件的运行过程如下图所示，其中组件运行最关键的就是”以标签形式使用组件”</p><p>组件的生命周期是指：组件从【创建】-【运行(渲染)】-【销毁】的整个过程，主要是组件的运行时间段</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531230609579.png" class="" title="image-20230531230609579"><h5 id="2-7-1-生命周期函数"><a href="#2-7-1-生命周期函数" class="headerlink" title="2.7.1 生命周期函数"></a>2.7.1 生命周期函数</h5><blockquote><p>vue为组件内置了不同时刻的生命周期函数，生命周期函数会随着组件的运行而自动调用</p><ul><li>当组件在内存中被创建以后，会自动调用<code>created</code>函数</li><li>当组件被成功渲染到页面上以后，会自动调用<code>mounted</code>函数</li><li>当组件被销毁完成以后，会自动调用<code>unmounted</code>函数</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示生命周期的组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">LifeCycle</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">LifeCycle</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hiddenLifeCycle&quot;</span>&gt;</span>点我隐藏LifeCycle组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showLifeCycle&quot;</span>&gt;</span>点我显示LifeCycle组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">LifeCycle</span> <span class="keyword">from</span> <span class="string">&quot;@/components/LifeCycle&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Left&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">LifeCycle</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flag</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">hiddenLifeCycle</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">showLifeCycle</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">button</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是LifeCycle组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;LifeCycle&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created: LifeCycle组件在内存中创建成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted: LifeCycle组件第一次被渲染成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;unmounted: LifeCycle组件被销毁了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531232414015.png" class="" title="image-20230531232414015"><blockquote><p>上面的代码很好理解，在Left组件中对于LifeCycle组件是否展示设置了一个flag标志位来控制，如果不显示，设置为false，显示设置为true</p></blockquote><blockquote><ul><li><p>当首次进入页面时，会看到console控制台输出了”created: LifeCycle组件在内存中创建成功了”和”mounted: LifeCycle组件第一次被渲染成功了”，表示组件创建以及渲染成功</p></li><li><p>当点击隐藏LifeCycle组件时，console出现了”unmounted: LifeCycle组件被销毁了”，表示切换了LifeCycle组件，那么就触发了组件的销毁函数</p></li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531232551225.png" class="" title="image-20230531232551225"><blockquote><p>当点击”显示LifeCycle组件”时，又会看到console控制台输出了”created: LifeCycle组件在内存中创建成功了”和”mounted: LifeCycle组件第一次被渲染成功了”，表示组件创建以及渲染成功，表示组件又再次被创建了以及渲染成功了，因为看到了LifeCycle组件的p标签的文字</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531232909198.png" class="" title="image-20230531232909198"><h5 id="2-7-2-监听组件的data数据更新"><a href="#2-7-2-监听组件的data数据更新" class="headerlink" title="2.7.2 监听组件的data数据更新"></a>2.7.2 监听组件的data数据更新</h5><blockquote><p>当组件的<code>data</code>数据更新以后，vue会自动重新渲染组件的DOM结构，从而保证view视图展示的数据和Model数据源一致，当组件重新被渲染完成后，会自动调用update函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Left组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">LifeCycle</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">LifeCycle</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hiddenLifeCycle&quot;</span>&gt;</span>点我隐藏LifeCycle组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showLifeCycle&quot;</span>&gt;</span>点我显示LifeCycle组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">LifeCycle</span> <span class="keyword">from</span> <span class="string">&quot;@/components/LifeCycle&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Left&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">LifeCycle</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flag</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">hiddenLifeCycle</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">showLifeCycle</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 组件重新被渲染以后，会自动调用update函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Left组件的data发生了变化，自动调用了update函数&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">button</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230531233432521.png" class="" title="image-20230531233432521"><blockquote><p>还是以<code>2.7.1</code>小节的Left和LifeCycle组件代码为例，仅在Left组件新增了update函数，因为我们在Left组件中定义了两个方法：hiddenLifeCycle和showLifeCycle，并且这两个方法对data数据源中的flag进行了修改，那么在页面上操作时，因为对data数据源进行了修改，那么Left组件就会自动调用update函数，就是我们在console控制台看到的内容</p></blockquote><h5 id="2-7-3-生命周期主要函数"><a href="#2-7-3-生命周期主要函数" class="headerlink" title="2.7.3 生命周期主要函数"></a>2.7.3 生命周期主要函数</h5><table><thead><tr><th align="center">生命周期函数</th><th align="center">执行时机</th><th align="center">所属阶段</th><th align="center">执行次数</th><th align="center">场景</th></tr></thead><tbody><tr><td align="center">created</td><td align="center">组件在内容中创建完毕后</td><td align="center">创建阶段</td><td align="center">唯一1次</td><td align="center">适合组件刚被创建就获取初始数据</td></tr><tr><td align="center">mounted</td><td align="center">组件初次在页面中渲染完毕后</td><td align="center">创建阶段</td><td align="center">唯一1次</td><td align="center">操作DOM结构</td></tr><tr><td align="center">updated</td><td align="center">组件在页面中重新被渲染完毕后</td><td align="center">运行阶段</td><td align="center">0或多次</td><td align="center">-</td></tr><tr><td align="center">unmounted</td><td align="center">组件在页面或内容中销毁后</td><td align="center">销毁阶段</td><td align="center">唯一1次</td><td align="center">-</td></tr></tbody></table><blockquote><p>下图是vue官网的组件生命周期示意图：<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram">https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram</a></p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/lifecycle.16e4c08e.png" class="" title="img"><h4 id="2-8-组件关系"><a href="#2-8-组件关系" class="headerlink" title="2.8 组件关系"></a>2.8 组件关系</h4><h5 id="2-8-1-父向子传值"><a href="#2-8-1-父向子传值" class="headerlink" title="2.8.1 父向子传值"></a>2.8.1 父向子传值</h5><h5 id="2-8-2-子向父传值"><a href="#2-8-2-子向父传值" class="headerlink" title="2.8.2 子向父传值"></a>2.8.2 子向父传值</h5><h4 id="2-9-插槽"><a href="#2-9-插槽" class="headerlink" title="2.9 插槽"></a>2.9 插槽</h4><h2 id="六、vue路由"><a href="#六、vue路由" class="headerlink" title="六、vue路由"></a>六、vue路由</h2><blockquote><p>前端路由指的就是Hash地址与组件之间的对应关系</p><p>不同组件之间的切换需要通过前端路由来实现</p></blockquote><h3 id="1、路由工作方式"><a href="#1、路由工作方式" class="headerlink" title="1、路由工作方式"></a>1、路由工作方式</h3><blockquote><p>路由变化过程：</p><ol><li>用户点击了页面了的路由链接</li><li>导致了URL地址栏中的Hash值发生了变化</li><li>前端路由监听到了Hash地址的变化</li><li>前端路由把当前Hash地址对应的组件渲染到浏览器中</li></ol></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230127215524192.png" class="" title="image-20230127215524192"><h4 id="1-2-路由原理"><a href="#1-2-路由原理" class="headerlink" title="1.2 路由原理"></a>1.2 路由原理</h4><blockquote><p>使用锚链接模拟路由</p><p>使用锚点每次点击的时候，都会将a链接中的href中的路由拼接到浏览器地址栏的后面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#b1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#b2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#b3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#b1&quot;</span>&gt;</span>b1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#b2&quot;</span>&gt;</span>b2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#b3&quot;</span>&gt;</span>b3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;b1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;b2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;b3&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230127223940280.png" class="" title="image-20230127223940280"><blockquote><p>location这个属性可以拿到当前页面的链接以及Hash地址</p><ul><li>location.href表示当前路由</li><li>location.hash表示hash地址，从地址栏的#号开始包含#号，表示hash地址</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230127224058733.png" class="" title="image-20230127224058733"><h3 id="2、vue-router"><a href="#2、vue-router" class="headerlink" title="2、vue-router"></a>2、vue-router</h3><h4 id="2-1-vue-router介绍"><a href="#2-1-vue-router介绍" class="headerlink" title="2.1 vue-router介绍"></a>2.1 vue-router介绍</h4><blockquote><p>vue-router是vue给出的路由解决方案，只能在vue项目中使用</p></blockquote><blockquote><p>vue-router的版本</p><ul><li>vue-router3.x只能结合vue2使用，地址：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></li><li>vue-router4.x只能结合vue3使用，地址：<a href="https://next.router.vuejs.org/">https://next.router.vuejs.org/</a></li></ul></blockquote><h4 id="2-2-vue-router4-x使用步骤"><a href="#2-2-vue-router4-x使用步骤" class="headerlink" title="2.2 vue-router4.x使用步骤"></a>2.2 vue-router4.x使用步骤</h4><blockquote><p>1、在项目中安装vue-router</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@next -S</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230130181514845.png" class="" title="image-20230130181514845"><blockquote><p>2、定义路由组件</p><ul><li>在项目中定义好需要路由控制的组件</li></ul></blockquote><blockquote><p>3、声明路由链接和占位符</p><ul><li>使用<code>&lt;router-link&gt;</code>标签来声明路由链接(用来代替普通的a标签)，并使用<code>&lt;router-view&gt;</code>标签来声明路由占位符，占位符就是需要在哪里展示组件，就声明到什么位置</li><li>使用<code>&lt;router-link&gt;</code>声明路由标签时，里面的<code>to</code>属性指定路由时，不需要显式的写成<code>#/home</code>，vue会自动给to属性的路由前面拼接<code>#</code></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;app-box&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是App根组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 声明路由链接 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 路由声明占位符 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>4、创建路由模块</p><ul><li>在项目中创建<code>router.js</code>路由模块，并在<code>router.js</code>中按照如下步骤创建获得路由的实例对象<ol><li>从vue-router中按需导入两个方法<ol><li>createRouter 方法适用于创建路由的实例对象</li><li>createWebHashHistory 用于指定路由的工作模式，hash模式</li></ol></li><li>导入需要使用路由控制的组件</li><li>创建路由实例对象</li><li>向外共享路由实例对象</li></ol></li><li>下面的文件名为<code>router.js</code>，可以放在component文件夹下，需要注意导入组件时的路径</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从vue-router中按需导入两个方法</span></span><br><span class="line"><span class="comment">// createRouter 方法适用于创建路由的实例对象</span></span><br><span class="line"><span class="comment">// createWebHashHistory 用于指定路由的工作模式，hash模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Goods</span> <span class="keyword">from</span> <span class="string">&#x27;./Goods.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路由实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><blockquote><p>5、导入并挂载路由模块</p><ul><li>在项目根目录下，vue2是main.js文件，vue3是main.ts文件，导入第4步创建的路由模块</li><li>然后按如下代码进行路由挂载</li></ul><p>注意：</p><ul><li>在vue3中，默认使用了typescript语法，所以在main.ts导入router时，会报错：”Could not find a declaration file for module ‘.&#x2F;components&#x2F;router.js’. ‘xxxxx  implicitly has an ‘any’ type.”</li><li>解决办法：在项目根目录下的tsconfig.json文件中的compilerOptions节点添加”noImplicitAny”: false，即可</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;./components/router.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载app</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-路由重定向"><a href="#2-3-路由重定向" class="headerlink" title="2.3 路由重定向"></a>2.3 路由重定向</h4><blockquote><p>重定向是指在访问地址A时，强制跳转至地址B，从而展示地址B组件的内容页面</p><p>通过路由规则的<code>redirect</code>属性，可以来指定一个新的路由地址</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从vue-router中按需导入两个方法</span></span><br><span class="line"><span class="comment">// createRouter 方法适用于创建路由的实例对象</span></span><br><span class="line"><span class="comment">// createWebHashHistory 用于指定路由的工作模式，hash模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Goods</span> <span class="keyword">from</span> <span class="string">&#x27;./Goods.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// redirect重定向，访问&#x27;/&#x27;会自动重定向到&#x27;/home&#x27;路由</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="2-4-路由高亮"><a href="#2-4-路由高亮" class="headerlink" title="2.4 路由高亮"></a>2.4 路由高亮</h4><blockquote><p>被激活的路由链接高亮有两种方式</p><ul><li>被激活的路由链接，默认会应用一个叫<code>router-link-active</code>的类名，可以在编写高亮样式时，使用该类名选择器为激活的路由链接编写高亮样式</li><li>使用自定义的路由高亮class类<ul><li>在路由文件中，也就是声明路由的位置，添加<code>linkActiveClass</code>属性，指定一个自定义的类名，就会替换掉默认的<code>router-link-active</code>类名</li></ul></li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 使用默认的`router-link-active`的类名编写高亮样式</span><br><span class="line"><span class="selector-class">.router-link-active</span>&#123;</span><br><span class="line">  backgroud-<span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建路由实例对象中设置自定义的路由激活时使用的类名</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    // 通过history指定路由工作模式</span><br><span class="line">    history: <span class="built_in">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    // 默认的router-link-active会被覆盖掉</span><br><span class="line">    linkActiveClass: <span class="string">&#x27;router-class&#x27;</span>,</span><br><span class="line">      </span><br><span class="line">    // 通过router数组指定路由规则</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">&quot;/&quot;</span>, component: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">&quot;/pay-moon-box&quot;</span>, component: PayMoonBox &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-5-嵌套路由"><a href="#2-5-嵌套路由" class="headerlink" title="2.5 嵌套路由"></a>2.5 嵌套路由</h4><h5 id="2-5-1-子路由声明"><a href="#2-5-1-子路由声明" class="headerlink" title="2.5.1 子路由声明"></a>2.5.1 子路由声明</h5><blockquote><p>嵌套路由就是组件中嵌套组件再嵌套组件，那么最里面的组件的路由就是嵌套路由</p></blockquote><blockquote><p>如下图：</p><ul><li>App组件中嵌套主页组件，主页组件嵌套列表组件</li><li>那么列表组件的路由就是:&#x2F;home&#x2F;list</li><li>那么列表组件的路由就是嵌套路由</li></ul></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230301222037167.png" class="" title="image-20230301222037167"><blockquote><p>那么如何声明嵌套路由呢？</p><ul><li>使用<code>children</code>属性去声明嵌套的子路由</li><li>在<code>children</code>属性的<code>path</code>声明子路由时，官方推荐不在路由前面加<code>/</code>，直接写路由的内容即可</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在项目的router.js中</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="comment">// 声明子路由</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&#x27;list&#x27;</span>, <span class="attr">component</span>: <span class="title class_">List</span> &#125;, <span class="comment">// 访问/home/list时，展示List组件</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在router.js声明完路由以后，那就需要在Home组件中声明<code>router-link</code>和占位符<code>router-view</code>了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Home组件声明跳转路由</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/list&quot;</span>&gt;</span>列表路由<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="2-5-2-默认子路由"><a href="#2-5-2-默认子路由" class="headerlink" title="2.5.2 默认子路由"></a>2.5.2 默认子路由</h5><blockquote><p>添加默认子路由有两种那个方式</p><ul><li>在<code>router.js</code>文件中使用<code>redirect</code>属性，重定向到需要的路由</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在项目的router.js中</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home/list1&#x27;</span>,</span><br><span class="line">            <span class="comment">// 声明子路由</span></span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&#x27;list1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">List1</span> &#125;, <span class="comment">// 访问/home/list1时，展示List1组件</span></span><br><span class="line">            &#123; <span class="attr">path</span>:<span class="string">&#x27;list2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">List2</span> &#125;, <span class="comment">// 访问/home/list1时，展示List2组件</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>当进入&#x2F;home路由时，默认进入&#x2F;home&#x2F;list1路由</p></blockquote><h4 id="2-6-动态路由"><a href="#2-6-动态路由" class="headerlink" title="2.6 动态路由"></a>2.6 动态路由</h4><blockquote><p>动态路由是指把Hash地址中可变部分定义为参数项，提高路由重复性使用</p><p>在<code>vue-router</code>中使用<code>英文冒号(:)</code>来定义路由的参数项</p></blockquote><blockquote><p>动态路由理解：</p><ul><li>就是在跳转链接时，链接上有些参数可以动态拼接，比如：id</li><li>动态路由可以理解为后端路由上查询不同id时拼接的路由，只不过现在变为了前端也支持动态路由</li></ul></blockquote><h5 id="2-6-1-动态路由配置"><a href="#2-6-1-动态路由配置" class="headerlink" title="2.6.1 动态路由配置"></a>2.6.1 动态路由配置</h5><blockquote><p>下面是在router中这是动态路由参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在router.js中声明路由的动态参数</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/goods/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125; <span class="comment">// id为动态获取的值</span></span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2-6-2-动态路由的参数获取"><a href="#2-6-2-动态路由的参数获取" class="headerlink" title="2.6.2 动态路由的参数获取"></a>2.6.2 动态路由的参数获取</h5><blockquote><p>下面在组件中获取动态路由传递过来的参数和值</p><p>在通过动态路由匹配的方式渲染出来的组件中，可以使用<code>$route.params</code>对象访问到动态匹配的参数值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中获取传递过来的动态参数</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>动态参数id：&#123;&#123; $route.params &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>下面是获取到的数据示例</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230601152042740.png" class="" title="image-20230601152042740"><h5 id="2-6-3-使用props接收动态路由参数"><a href="#2-6-3-使用props接收动态路由参数" class="headerlink" title="2.6.3 使用props接收动态路由参数"></a>2.6.3 使用props接收动态路由参数</h5><blockquote><p>为了便于获取路由参数，vue-router允许在路由规则中开启props传参</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Left&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在项目的router.js中</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 通过history指定路由工作模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过router数组指定路由规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&quot;/left/:id&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Left</span>,</span><br><span class="line">            <span class="comment">// 在路由中开启props传参</span></span><br><span class="line">            <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><blockquote><p>在路由指向的组件中使用props获取动态路由参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Left&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">LifeCycle</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用props接收动态路由参数的好处</p><ul><li>可以在路由指向的组件中使用<code>this.</code>的方式获取到动态路由参数，那么就可以将动态路由参数的值传给methos节点的函数里、生命周期函数里，这样通用性更强，</li></ul></blockquote><h5 id="2-6-4-路径参数和查询参数获取"><a href="#2-6-4-路径参数和查询参数获取" class="headerlink" title="2.6.4 路径参数和查询参数获取"></a>2.6.4 路径参数和查询参数获取</h5><blockquote><p>在vue组件中，在<code>script</code>节点下，可以使用<code>this.$route</code>获取到路径参数和查询参数，都是对象类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>);</span><br><span class="line">  &#125;,    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230602131422364.png" class="" title="image-20230602131422364"><blockquote><p>从上图可以看出，打印<code>this.$route</code>，可以看到</p><ul><li>路径参数是在<code>params</code>这个对象中</li><li>查询参数是在<code>query</code>这个对象中</li></ul><p>所以获取动态路由的参数时，按需获取就可以了</p></blockquote><h4 id="2-7-路由导航"><a href="#2-7-路由导航" class="headerlink" title="2.7 路由导航"></a>2.7 路由导航</h4><h5 id="2-7-1-声明式导航"><a href="#2-7-1-声明式导航" class="headerlink" title="2.7.1 声明式导航"></a>2.7.1 声明式导航</h5><blockquote><p>通过点击链接跳转导航的方式，叫做声明式导航，比如：</p><ul><li>普通网页中点击<a>链接、vue项目中点击<router-link>都属于声明式导航</li></ul></blockquote><h5 id="2-7-2-编程式导航"><a href="#2-7-2-编程式导航" class="headerlink" title="2.7.2 编程式导航"></a>2.7.2 编程式导航</h5><blockquote><p>通过调用API实现导航的方式，叫做编程式导航，比如：</p><ul><li>普通网页调用location.href跳转到新页面的方式，叫做编程式导航</li></ul></blockquote><blockquote><p>在vue-router提供了编程式导航的API</p><ul><li>this.$router.push(‘hash地址’)：跳转到指定Hash地址，从而展示对应的组件页面</li><li>this.$router.go(数值n)：实现导航历史的前进、后退</li></ul></blockquote><h5 id="2-7-3-router-push"><a href="#2-7-3-router-push" class="headerlink" title="2.7.3 $router.push"></a>2.7.3 $router.push</h5><blockquote><p>在组件中跳转另一个组件，使用编程式导航</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Left组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是Left组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;jumpCycle&quot;</span>&gt;</span>跳转至LifeCycle组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Left&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flag</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用push跳转至指定的组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">jumpCycle</span>(<span class="params"></span>)&#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了：this.$router.push(&#x27;/life-cycle&#x27;) &quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/life-cycle&#x27;</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">button</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LifeCycle组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是LifeCycle组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;LifeCycle&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created: LifeCycle组件在内存中创建成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted: LifeCycle组件第一次被渲染成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;unmounted: LifeCycle组件被销毁了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>从下图看出，在Left组件的页面点击button跳转了到LifeCycle组件页面</p></blockquote><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230602133239630.png" class="" title="image-20230602133239630"><h5 id="2-7-4-router-go"><a href="#2-7-4-router-go" class="headerlink" title="2.7.4 $router.go"></a>2.7.4 $router.go</h5><blockquote><p>可以回退或者前进页面</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LifeCycle组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是LifeCycle组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>回到Left组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;LifeCycle&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 增加回退页面，回到上一页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了：this.$router.go(-1)&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created: LifeCycle组件在内存中创建成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted: LifeCycle组件第一次被渲染成功了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;unmounted: LifeCycle组件被销毁了&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230602133731588.png" class="" title="image-20230602133731588"><blockquote><p>可以看出跳转到LifeCycle组件以后，点击”回到Left组件”按钮，又跳转回到了Left组件</p></blockquote><h4 id="2-8-导航守卫"><a href="#2-8-导航守卫" class="headerlink" title="2.8 导航守卫"></a>2.8 导航守卫</h4><blockquote><p>导航守卫可以控制路由的访问权限，即对需要登录的路由访问时，需要先登录，登陆成功以后再去访问</p></blockquote><h5 id="2-8-1-声明全局导航守卫"><a href="#2-8-1-声明全局导航守卫" class="headerlink" title="2.8.1 声明全局导航守卫"></a>2.8.1 声明全局导航守卫</h5><blockquote><p>全局导航守卫回拦截每个路由规则，并对每个路由进行访问权限的控制</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在项目的router.js中</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;...&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 函数，声明&quot;全局前置守卫&quot;</span></span><br><span class="line"><span class="comment">// fn 必须是一个函数，每次拦截到路由的请求，都会调用 fn 进行处理，fn也叫&quot;守卫方法&quot;，一般使用箭头函数来代替fn函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;导航守卫函数...&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230604175900961.png" class="" title="image-20230604175900961"><h5 id="2-8-2-全局守卫的3个形参"><a href="#2-8-2-全局守卫的3个形参" class="headerlink" title="2.8.2 全局守卫的3个形参"></a>2.8.2 全局守卫的3个形参</h5><blockquote><p>全局导航守卫可以接收3个形参，分别为to、from、next</p><ul><li>to：表示目标路由对象，也就是页面当前访问的路由</li><li>form：当前导航正要离开的路由对象，也就是当前访问的路由的上一级路由是从什么</li><li>next：放行函数<ul><li>如果在beforeEach的守卫访问方法中不声明next参数，那么beforeEach中不需要调用next方法，所有路由都可以放行</li><li>如果在beforeEach的守卫访问方法中声明了next参数，那么beforeEach就需要调用next方法对路由进行放行，否则不允许访问任何一个路由</li></ul></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 函数，声明&quot;全局前置守卫&quot;</span></span><br><span class="line"><span class="comment">// fn 必须是一个函数，每次拦截到路由的请求，都会调用 fn 进行处理，fn也叫&quot;守卫方法&quot;</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;导航守卫函数...&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to:&#x27;</span>, to)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from:&#x27;</span>, <span class="keyword">from</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/2022/07/08/web_dev/vue/vue%E7%AC%94%E8%AE%B0/image-20230604181313336.png" class="" title="image-20230604181313336"><h5 id="2-8-3-next函数的调用方式"><a href="#2-8-3-next函数的调用方式" class="headerlink" title="2.8.3 next函数的调用方式"></a>2.8.3 next函数的调用方式</h5><blockquote><p>直接全部放行：next()</p><p>强制让路由停留在当前页面：next(false)</p><p>强制让路由跳转到登录页面：next(‘&#x2F;login’)</p></blockquote><blockquote><p>下面是示例，结合token展示最简单的路由守卫</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由处理</span></span><br><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 函数，声明&quot;全局前置守卫&quot;</span></span><br><span class="line"><span class="comment">// fn 必须是一个函数，每次拦截到路由的请求，都会调用 fn 进行处理，fn也叫&quot;守卫方法&quot;</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/left&quot;</span> &amp;&amp; !token) &#123;</span><br><span class="line">        <span class="comment">// 需要访问登录页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未登录，跳转登录中...&quot;</span>)</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接放行</span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Login组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  用户名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;LoginFunc&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">username</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">LoginFunc</span>() &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, <span class="variable language_">this</span>.<span class="property">username</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>下面是另外一个全局导航守卫的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果访问登录页面，放行</span></span><br><span class="line">    <span class="keyword">if</span> ( to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) <span class="keyword">return</span> <span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取token值</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="comment">// token失效的话，跳转登录页面</span></span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="comment">// 需要访问登录页面</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未登录，跳转登录中...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// token有效则直接放行</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python异步编程</title>
      <link href="/2022/06/28/python/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/28/python/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/python%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、异步编程原理"><a href="#一、异步编程原理" class="headerlink" title="一、异步编程原理"></a>一、异步编程原理</h2><h3 id="1、I-x2F-O概念"><a href="#1、I-x2F-O概念" class="headerlink" title="1、I&#x2F;O概念"></a>1、I&#x2F;O概念</h3><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/572120426">https://zhuanlan.zhihu.com/p/572120426</a></p></blockquote><blockquote><p>什么是I&#x2F;O？</p><ul><li>顾名思义，它所指的是Input&#x2F;Output，即输入&#x2F;输出，对文件实现输入&#x2F;输出称为I&#x2F;O</li><li>I&#x2F;O操作的基本对象为文件<ul><li>文件既可以是设备文件，也可以是普通文件。</li><li>Linux系统中，I&#x2F;O的类型可以分为标准I&#x2F;O与文件I&#x2F;O。标准I&#x2F;O和文件I&#x2F;O是为了实现对文件读写而封装的两套不同的用户程序编程接口。<ul><li>标准I&#x2F;O采用间接系统调用（库函数）的方式实现对文件的读写。</li><li>文件I&#x2F;O采用直接系统调用的方式实现对文件的读写。</li></ul></li><li>同时针对I&#x2F;O的操作模式，也实现了阻塞I&#x2F;O、非阻塞I&#x2F;O、多路复用I&#x2F;O以及异步I&#x2F;O，这四种典型的模型。</li></ul></li></ul></blockquote><blockquote><p>I&#x2F;O不会占用CPU！！！</p><p>I&#x2F;O（Input&#x2F;Output）就是指输入输出操作，包括读写磁盘、网络传输、键盘输入等。</p><p>在很多时候，I&#x2F;O操作涉及到与外部设备（如硬盘、网络接口等）的通信，需要等待外部设备响应或数据传输完成，等待过程称为阻塞（Blocking），在这个过程中，不需要一直占用CPU，CPU可以去做其他事情。</p><p>同时，操作系统也提供了一些异步（Asynchronous）I&#x2F;O操作的方式，可以在I&#x2F;O操作进行的同时进行其他操作，提高系统效率。</p><p>因此，I&#x2F;O操作不会一直占用CPU，但会占用一定的系统资源。</p><p><a href="https://www.zhihu.com/tardis/bd/ans/2963372182?source_id=1001">https://www.zhihu.com/tardis/bd/ans/2963372182?source_id=1001</a></p></blockquote><blockquote><p>I&#x2F;O概述</p><p><a href="https://blog.csdn.net/weixin_48120109/article/details/116245336">https://blog.csdn.net/weixin_48120109/article/details/116245336</a></p></blockquote><blockquote><p>关于I&#x2F;O——内存与CPU与磁盘之间的关系</p><p><a href="https://blog.csdn.net/weixin_43381316/article/details/125407298">https://blog.csdn.net/weixin_43381316/article/details/125407298</a></p></blockquote><blockquote><p>Linux高级系统编程— I&#x2F;O— I&#x2F;O的基本概念、Linux标准I&#x2F;O</p><p><a href="https://zhuanlan.zhihu.com/p/572120426">https://zhuanlan.zhihu.com/p/572120426</a></p></blockquote><h3 id="2、协程简介"><a href="#2、协程简介" class="headerlink" title="2、协程简介"></a>2、协程简介</h3><blockquote><p>协程（coroutine）</p><ul><li>不是计算机本身提供的能力，而是通过程序员自己人为通过代码创建实现的</li><li>也叫做<font style="color:blue;font-weight:700">微线程</font>，是一种用户态内的上下文切换技术<ul><li>本质就是通过一个线程实现代码块互相切换执行</li></ul></li></ul></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><p>以下是ChatGPT4的回答</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在Python中，异步编程主要利用的是协程（coroutines），这是用于I/O密集型任务的一种编程模型。协程利用的是单线程内部的上下文切换，而不是多线程或者多进程。异步编程的关键就在于，当我们遇到I/O等待时，如网络请求、数据库查询等，该协程将被挂起，CPU则去处理其它的协程，这样就大大提高了效率。</span><br><span class="line"></span><br><span class="line">当你说的“事件<span class="number">1</span>需要时间执行的操作继续执行”，你可能是在理解协程如何继续执行已经开始但被阻塞的任务。这里面涉及到了Python的事件循环（event loop）。当你的协程开始进行I/O操作时，如读写文件，查询数据库等，这个操作会告诉事件循环我现在要开始一个可能要阻塞一段时间的任务了，然后它就会<span class="string">&quot;让出&quot;</span>CPU，切换去执行其他的协程。当那个I/O操作完成时，事件循环会自动地切换回来，让这个协程从阻塞的地方继续执行下去。</span><br><span class="line"></span><br><span class="line">对于Python的协程，需要一个事件循环来驱动它继续运行。Python标准库下的 asyncio 就提供了事件循环的实现，当有I/O等待发生时，如 asyncio.sleep，在等待过程中它会把CPU让给事件循环，由事件循环决定去执行哪个协程。</span><br><span class="line"></span><br><span class="line">所以对于你的问题，“为啥事件<span class="number">1</span>需要时间执行的操作还可以继续执行”，实际上是事件循环在协程挂起后继续驱动其他协程运行，当那个I/O操作完成后，事件循环再切换回来，继续执行之前的协程。因此，在等待I/O的时候并没有阻塞进程，而是用来执行其他任务了，这样就提高了程序的并发性。</span><br><span class="line"></span><br><span class="line">希望这个解答能解决你的疑惑。如果还有其他问题，欢迎继续提问。</span><br></pre></td></tr></table></figure><h2 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h2><h3 id="2、普通代码执行"><a href="#2、普通代码执行" class="headerlink" title="2、普通代码执行"></a>2、普通代码执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;this is f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;this is f2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果就是依次显示</span></span><br><span class="line">this <span class="keyword">is</span> f1</span><br><span class="line">this <span class="keyword">is</span> f2</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出，是依次执行的代码，这样相当于是串联的，这样效率比较低下</p></blockquote><h3 id="3、python实现协程的几种方法"><a href="#3、python实现协程的几种方法" class="headerlink" title="3、python实现协程的几种方法"></a>3、python实现协程的几种方法</h3><blockquote><p>协程的官方文档：<a href="https://docs.python.org/zh-cn/3.7/library/asyncio-task.html">https://docs.python.org/zh-cn/3.7/library/asyncio-task.html</a></p></blockquote><blockquote><p>协程实现的几种方法</p><ol><li>greenlet：是一个比较早期的模块</li><li>yield关键字：表示是一个生成器</li><li>asyncio装饰器：在python3.4中使用，后面会在3.10中移除</li><li>async、await关键字：python3.5+ 推荐使用的，后续版本也会持续使用</li></ol></blockquote><h4 id="3-1-greenlet"><a href="#3-1-greenlet" class="headerlink" title="3.1 greenlet"></a>3.1 greenlet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 3.2 yield</span></span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h4 id="3-3-asyncio装饰器"><a href="#3-3-asyncio装饰器" class="headerlink" title="3.3 asyncio装饰器"></a>3.3 asyncio装饰器</h4><blockquote><p>官方解释：<a href="https://docs.python.org/zh-cn/3.7/library/asyncio-task.html#generator-based-coroutines">asyncio装饰器</a></p><p>对基于生成器的协程的支持 <strong>已弃用</strong> 并计划在 Python 3.10 中移除。</p><p>基于生成器的协程是 async&#x2F;await 语法的前身。它们是使用 <code>yield from</code> 语句创建的 Python 生成器，可以等待 Future 和其他协程。</p><p>基于生成器的协程应该使用 <a href="https://docs.python.org/zh-cn/3.7/library/asyncio-task.html#asyncio.coroutine"><code>@asyncio.coroutine</code></a> 装饰，虽然这并非强制。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注解 对基于生成器的协程的支持 已弃用 并计划在 Python <span class="number">3.10</span> 中移除。</span><br><span class="line">基于生成器的协程是 <span class="keyword">async</span>/<span class="keyword">await</span> 语法的前身。它们是使用 <span class="keyword">yield</span> <span class="keyword">from</span> 语句创建的 Python 生成器，可以等待 Future 和其他协程。</span><br><span class="line"></span><br><span class="line">基于生成器的协程应该使用 @asyncio.coroutine 装饰，虽然这并非强制。</span><br></pre></td></tr></table></figure><h3 id="4、async关键字实现协程示例"><a href="#4、async关键字实现协程示例" class="headerlink" title="4、async关键字实现协程示例"></a>4、async关键字实现协程示例</h3><blockquote><p>本质：可以通过人为控制，在函数代码之间进行切换</p></blockquote><blockquote></blockquote><h2 id="三、FastAPI"><a href="#三、FastAPI" class="headerlink" title="三、FastAPI"></a>三、FastAPI</h2><blockquote><p><a href="https://github.com/zhanymkanov/fastapi-best-practices#7-dont-make-your-routes-async-if-you-have-only-blocking-io-operations">https://github.com/zhanymkanov/fastapi-best-practices#7-dont-make-your-routes-async-if-you-have-only-blocking-io-operations</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Zap日志库</title>
      <link href="/2022/05/25/golang/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/25/golang/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Zap介绍与安装"><a href="#一、Zap介绍与安装" class="headerlink" title="一、Zap介绍与安装"></a>一、Zap介绍与安装</h2><h3 id="1、zap介绍"><a href="#1、zap介绍" class="headerlink" title="1、zap介绍"></a>1、zap介绍</h3><blockquote><p>zap是uber公司开源的一款日志库，主要使用<code>Golang</code>语言编写，目前在<a href="https://github.com/uber-go/zap">github</a>上已经有15k+以上的星星，具有速度快、支持结构化、分级的特点</p></blockquote><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/zap/">https://www.liwenzhou.com/posts/Go/zap/</a></p></blockquote><h3 id="2、zap安装"><a href="#2、zap安装" class="headerlink" title="2、zap安装"></a>2、zap安装</h3><blockquote><p>注意：zap只支持Go当前的两个最新的小版本</p><p>该笔记使用时是<code>Go1.17版本</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u go.uber.org/zap</span><br></pre></td></tr></table></figure><h2 id="二、Zap使用"><a href="#二、Zap使用" class="headerlink" title="二、Zap使用"></a>二、Zap使用</h2><h3 id="1、zap特点"><a href="#1、zap特点" class="headerlink" title="1、zap特点"></a>1、zap特点</h3><blockquote><p><a href="https://github.com/uber-go/zap">Zap</a>是非常快的、结构化的，分日志级别的Go日志库。</p><ul><li>它同时提供了结构化日志记录和printf风格的日志记录</li><li>它非常的快</li></ul></blockquote><h3 id="2、zap性能"><a href="#2、zap性能" class="headerlink" title="2、zap性能"></a>2、zap性能</h3><blockquote><p>来自于github的zap官方库数据</p><p>对于在热路径中记录的应用程序来说，基于反射的序列化和字符串格式化是非常昂贵的–它们是CPU密集型的，并且会进行许多小的分配。换句话说，使用编码&#x2F;json和fmt.Fprintf来记录大量的interface{}s会使你的应用程序变慢。</p><p>Zap采取了一种不同的方法。它包括一个无反射、零分配的JSON编码器，基本的Logger努力避免序列化开销和尽可能的分配。通过在这个基础上构建高级的SugaredLogger，Zap让用户选择何时需要计算每一次分配，何时喜欢更熟悉的、松散类型的API。</p><p>正如它自己的基准测试套件所衡量的那样，zap不仅比同类的结构化日志包更有性能，而且还比标准库更快。像所有的基准测试一样，请谨慎对待这些测试。</p></blockquote><img src="/2022/05/25/golang/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/image-20220612213749516.png" class="" title="image-20220612213749516"><img src="/2022/05/25/golang/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/go_zap%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/image-20220612213815355.png" class="" title="image-20220612213815355"><h3 id="3、zap日志器分类"><a href="#3、zap日志器分类" class="headerlink" title="3、zap日志器分类"></a>3、zap日志器分类</h3><blockquote><p>Zap提供了两种类型的日志记录器—<code>Sugared Logger</code>和<code>Logger</code>。</p><p>在性能很好但不是很关键的上下文中，使用<code>SugaredLogger</code>。它比其他结构化日志记录包快4-10倍，并且支持结构化和printf风格的日志记录。</p><p>在每一微秒和每一次内存分配都很重要的上下文中，使用<code>Logger</code>。它甚至比<code>SugaredLogger</code>更快，内存分配次数也更少，但它只支持强类型的结构化日志记录。</p></blockquote><h4 id="3-1-Logger"><a href="#3-1-Logger" class="headerlink" title="3.1 Logger"></a>3.1 Logger</h4><blockquote><p>注意事项：</p><ul><li>通过调用<code>zap.NewProduction()</code>&#x2F;<code>zap.NewDevelopment()</code>或者<code>zap.Example()</code>创建一个Logger。</li><li>上面的每一个函数都将创建一个logger。唯一的区别在于它将记录的信息不同。例如production logger默认记录调用函数信息、日期和时间等。</li><li>通过Logger调用Info&#x2F;Error等。</li><li>默认情况下日志都会打印到应用程序的console界面。</li></ul></blockquote><h4 id="3-2-Sugared-Logger"><a href="#3-2-Sugared-Logger" class="headerlink" title="3.2 Sugared Logger"></a>3.2 Sugared Logger</h4>]]></content>
      
      
      <categories>
          
          <category> Go Zap日志库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Zap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Viper使用</title>
      <link href="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、viper介绍与安装"><a href="#一、viper介绍与安装" class="headerlink" title="一、viper介绍与安装"></a>一、viper介绍与安装</h2><h3 id="1、什么是viper？"><a href="#1、什么是viper？" class="headerlink" title="1、什么是viper？"></a>1、什么是viper？</h3><blockquote><p>地址：<a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a></p></blockquote><blockquote><p>Viper是一个完整的Go应用程序(包括Twelve-Factor App)的配置解决方案，它被设计为在应用程序中工作，并能处理所有类型的配置需求和格式。它支持:</p><ul><li>设置默认值</li><li>读取JSON、TOML、YAML、HCL、envfile和Java properties格式的配置文件</li><li>实时监控和重读配置文件（可选)</li><li>从环境变量中读取</li><li>从远程配置系统（etcd或Consul）中读取、监控配置变化</li><li>从命令行参数读取</li><li>从缓冲区读取</li><li>显式配置值</li><li>Viper可以被认为是一个注册表，满足你所有的应用配置需求。</li></ul></blockquote><h3 id="2、viper的特点"><a href="#2、viper的特点" class="headerlink" title="2、viper的特点"></a>2、viper的特点</h3><blockquote><p>为什么选择Viper？</p><ul><li><p>在构建一个现代化的应用程序时，你不想担心配置文件的格式；你想专注于构建一个出色的软件。Viper就是来帮助你的。</p></li><li><p>Viper为你做以下工作。</p><ol><li><p>查找、加载和解除JSON、TOML、YAML、HCL、INI、envfile或Java属性格式的配置文件。</p></li><li><p>提供一种机制，为你的不同配置选项设置默认值。</p></li><li><p>提供一种机制，为通过命令行标志指定的选项设置覆盖值。</p></li><li><p>提供一个别名系统，在不破坏现有代码的情况下轻松重命名参数。</p></li><li><p>使得用户提供的命令行或配置文件与默认值相同时，可以很容易地分辨出来。</p></li><li><p>Viper使用以下优先顺序。每一项都优先于它下面的项目。</p><ul><li><p>显式调用Set设置值</p></li><li><p>命令行参数(flag)</p></li><li><p>环境变量</p></li><li><p>配置文件</p></li><li><p>key&#x2F;value存储</p></li><li><p>默认值</p></li></ul></li></ol></li><li><p>重要提示：Viper配置的键(key)是不区分大小写的。目前正在讨论如何使之成为可选项。</p></li></ul></blockquote><h3 id="3、viper安装"><a href="#3、viper安装" class="headerlink" title="3、viper安装"></a>3、viper安装</h3><blockquote><p>注意: Viper使用Go Modules来管理依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure><h2 id="二、viper使用"><a href="#二、viper使用" class="headerlink" title="二、viper使用"></a>二、viper使用</h2><h3 id="1、viper初始化配置"><a href="#1、viper初始化配置" class="headerlink" title="1、viper初始化配置"></a>1、viper初始化配置</h3><blockquote><p>viper使用的时候，需要先进行初始化配置</p></blockquote><h4 id="1-1-设置默认值"><a href="#1-1-设置默认值" class="headerlink" title="1.1 设置默认值"></a>1.1 设置默认值</h4><blockquote><p>”一个好的配置系统应该支持默认值。键不需要默认值，但如果没有通过配置文件、环境变量、远程配置或命令行标志（flag）设置键，则默认值非常有用。“这句话来自官网翻译</p><p>从<code>SetDefault</code>方法注释可以看出来：</p><ul><li>SetDefault对于一个键来说是不分大小写的</li><li>默认值只在用户没有通过flag、config或ENV提供值时使用</li></ul><p>具体的使用场景后面再说，目前来说先给配置上</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetDefault源码</span></span><br><span class="line"><span class="comment">// SetDefault sets the default value for this key.</span></span><br><span class="line"><span class="comment">// SetDefault is case-insensitive for a key.</span></span><br><span class="line"><span class="comment">// Default only used when no value is provided by the user via flag, config or ENV.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetDefault</span><span class="params">(key <span class="type">string</span>, value <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123; v.SetDefault(key, value) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">viper.SetDefault(<span class="string">&quot;conf&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-配置初始化方式一"><a href="#1-2-配置初始化方式一" class="headerlink" title="1.2 配置初始化方式一"></a>1.2 配置初始化方式一</h4><h5 id="1-2-1-SetConfigName"><a href="#1-2-1-SetConfigName" class="headerlink" title="1.2.1 SetConfigName"></a>1.2.1 SetConfigName</h5><blockquote><p>配置文件名称:</p><ul><li>如果配置文件全名叫“xxx.yaml”:<ul><li><code>SetConfigName</code>方法可以只写<code>xxx</code>(配置文件名，不写后缀)，然后需要继续调用<code>SetConfigType</code>方法写上<code>xxx</code>配置文件的后缀<code>yaml</code>，这样才算将配置文件传入正确</li></ul></li><li>如果配置文件的名称中没有扩展名，更要配置<code>SetConfigType</code>方法中配置<code>配置文件格式</code>，告诉<code>viper</code>以哪种配置文件格式来解析配置文件</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetConfigName sets name for the config file.</span></span><br><span class="line"><span class="comment">// Does not include extension.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetConfigName</span><span class="params">(in <span class="type">string</span>)</span></span> &#123; v.SetConfigName(in) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件叫config.yaml</span></span><br><span class="line"><span class="comment">// 需要调用SetConfigType传入配置文件的类型</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-2-2-SetConfigType"><a href="#1-2-2-SetConfigType" class="headerlink" title="1.2.2 SetConfigType"></a>1.2.2 SetConfigType</h5><blockquote><p>设置配置文件的格式</p><ul><li>如果配置文件的名称中有扩展名(如“config.yaml”)，一定需要配置此项</li><li>如果配置文件的名称中没有扩展名(如“config”)，一定需要配置此项</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetConfigType sets the type of the configuration returned by the</span></span><br><span class="line"><span class="comment">// remote source, e.g. &quot;json&quot;.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetConfigType</span><span class="params">(in <span class="type">string</span>)</span></span> &#123; v.SetConfigType(in) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件叫config.yaml</span></span><br><span class="line"><span class="comment">// 需要调用SetConfigType传入配置文件的类型</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-2-3-AddConfigPath"><a href="#1-2-3-AddConfigPath" class="headerlink" title="1.2.3 AddConfigPath"></a>1.2.3 AddConfigPath</h5><blockquote><p>AddConfigPath用来添加配置文件路径的，告诉<code>viper</code>从哪里开始找配置文件</p><ul><li>AddConfigPath用来添加路径，使的viper可以从传入的路径来搜索配置文件</li><li>AddConfigPath方法可以被调用多次，添加多个搜索路径</li></ul><p>注意：</p><ul><li>如果配置文件和配置初始化的代码文件<code>在同一个路径</code>下，可以写成相对路径<ul><li>比如文件夹a，文件夹a里面有config.yaml、readConf.go</li><li>那么AddConfigPath里写成<code>./a</code></li></ul></li><li>如果配置文件和配置初始化的代码文件<code>不在同一个路径</code>下，可以写成相对路径比如：<ul><li>文件夹a，文件夹a里面有config.yaml</li><li>文件夹b，文件夹b里面有readConf.go</li><li>文件夹a和文件夹b处于同级目录</li><li>那么readConf.go里的AddConfigPath里写成<code>./a</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AddConfigPath adds a path for Viper to search for the config file in.</span></span><br><span class="line"><span class="comment">// Can be called multiple times to define multiple search paths.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddConfigPath</span><span class="params">(in <span class="type">string</span>)</span></span> &#123; v.AddConfigPath(in) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">viper.AddConfigPath(<span class="string">&quot;./viper_demo/&quot;</span>)</span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>AddConfigPath是根据传入的路径查找绝对路径的，从AddConfigPath源码就可以看出来</li><li>调用链：<ul><li>使用viper.AddConfigPath(‘.&#x2F;viper_demo’)调用的是viper包里的AddConfigPath方法</li><li>viper包里的AddConfigPath方法本身调用的是viper包中viper结构体的AddConfigPath方法</li><li>在viper包中viper结构体的AddConfigPath方法里调用了absPathify方法</li><li>abdPathify方法中调用了go内置的filepath.Abs(inPath)方法，inPath就是我们调用传入的<code>./viper_demo</code>这个值<ul><li>filepath.Abs()是以传入的路径寻找绝对路径，其实默认的就是寻找根目录，因为filepath.Abs()方法里调用的就是<code>PWD</code>命令</li></ul></li></ul></li></ul></blockquote><blockquote><p>所以使用viper.AddConfigPath(‘.&#x2F;viper_demo’)填写conf文件路径时，一定要注意此时的绝对路径是跟目录，也就是最终viper包查找conf文件的路径是<code>绝对路径+./viper_demo</code>路径，绝对路径从是根文件夹开始的</p></blockquote><blockquote><p>当使用goland开发的时候，此时绝对路径是项目的工作目录路径，即使项目中创建了N个子目录，最里层的目录中有个文件中viper代码调用了viper.AddConfigPath(‘.&#x2F;viper_demo’)，此时查找配置的路径仍是项目的工作目录，而不是最里层文件夹所在的路径，所以需要传入conf路径的时候，一定要注意绝对路径是在哪里，并且在这种模式下go build出来的二进制文件也是从项目的工作目录开始查找配置文件路径</p></blockquote><blockquote><p>当使用命令行构建时，获取到绝对路径不是项目的工作目录，而是当前文件所处的文件夹路径，如果还是按goland中写的，就会出现找不到配置文件路径的问题，这个需要注意</p></blockquote><h4 id="1-3-配置初始化方式二"><a href="#1-3-配置初始化方式二" class="headerlink" title="1.3 配置初始化方式二"></a>1.3 配置初始化方式二</h4><h5 id="1-3-1-SetConfigFile"><a href="#1-3-1-SetConfigFile" class="headerlink" title="1.3.1 SetConfigFile"></a>1.3.1 SetConfigFile</h5><blockquote><p>SetConfigFile需要明确地定义了配置文件的路径、名称和扩展名。</p><p>当指定了以后，viper将使用指定的配置文件，而不检查任何的配置路径。</p><p>也就是说这种配置方式相当于一步到位配置好了配置文件初始化</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetConfigFile explicitly defines the path, name and extension of the config file.</span></span><br><span class="line"><span class="comment">// Viper will use this and not check any of the config paths.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetConfigFile</span><span class="params">(in <span class="type">string</span>)</span></span> &#123; v.SetConfigFile(in) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viper.SetConfigFile(<span class="string">&quot;./viper_demo/db_conf.yaml&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-4-查找与读取配置文件"><a href="#1-4-查找与读取配置文件" class="headerlink" title="1.4 查找与读取配置文件"></a>1.4 查找与读取配置文件</h4><blockquote><p>上面介绍了两种配置初始化方式，个人觉得配置<code>初始化方式一</code>更加灵活一些，比较推荐使用</p><p>配置初始化好了以后，就可以读取配置了</p></blockquote><h5 id="1-4-1-ReadInConfig方法"><a href="#1-4-1-ReadInConfig方法" class="headerlink" title="1.4.1 ReadInConfig方法"></a>1.4.1 ReadInConfig方法</h5><blockquote><p>ReadInConfig会查找并从磁盘里加载配置文件，包括<code>key/value</code>通过定义的路径查找</p><p>读取成功以后，就可以获取配置文件内容了</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadInConfig will discover and load the configuration file from disk</span></span><br><span class="line"><span class="comment">// and key/value stores, searching in one of the defined paths.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadInConfig</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> v.ReadInConfig() &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件的部分代码</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取conf配置文件失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-读取不到配置文件处理"><a href="#1-4-2-读取不到配置文件处理" class="headerlink" title="1.4.2 读取不到配置文件处理"></a>1.4.2 读取不到配置文件处理</h5><blockquote><p>可以对配置文件在读取不到时，作进一步的更详细的错误处理</p><ul><li>可以处理没有找到的文件的错误</li><li>如果文件找了，那可以是viper解析的错误</li></ul><p>这样处理会读取配置文件会更具体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">_, ok := err.(viper.ConfigFileNotFoundError)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件时未找到:%v\n&quot;</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件已找到，读取内容时错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取配置文件成功&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-4-3-读取配置文件正确示例"><a href="#1-4-3-读取配置文件正确示例" class="headerlink" title="1.4.3 读取配置文件正确示例"></a>1.4.3 读取配置文件正确示例</h5><blockquote><p>下面是读取正确的</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220525231840025.png" class="" title="image-20220525231840025"><h5 id="1-4-4-配置文件找不到信息"><a href="#1-4-4-配置文件找不到信息" class="headerlink" title="1.4.4 配置文件找不到信息"></a>1.4.4 配置文件找不到信息</h5><blockquote><p>下面是当配置文件找不到时的错误提示</p><p>可以看到报错提示是<code>db_conf</code>在后面的路径没有找到</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220525232108075.png" class="" title="image-20220525232108075"><h5 id="1-4-5-配置文件内容格式错误"><a href="#1-4-5-配置文件内容格式错误" class="headerlink" title="1.4.5 配置文件内容格式错误"></a>1.4.5 配置文件内容格式错误</h5><blockquote><p>当配置文件路径正确，但是配置文件里面的内容格式出错时</p><p>就会提示内容有报错</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220525232333300.png" class="" title="image-20220525232333300"><h4 id="1-5-初始化与读取配置完整示例"><a href="#1-5-初始化与读取配置完整示例" class="headerlink" title="1.5 初始化与读取配置完整示例"></a>1.5 初始化与读取配置完整示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line">viper.SetDefault(<span class="string">&quot;conf&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是读取配置文件</span></span><br><span class="line"><span class="comment">// 配置文件名称，无扩展名</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;db_conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要配置此项，指定配置文件类型</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找配置文件所在路径，可以加很多个</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./conf/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">_, ok := err.(viper.ConfigFileNotFoundError)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件时未找到:%v\n&quot;</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件已找到，读取内容时错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取配置文件成功&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、viper获取配置文件里的值"><a href="#2、viper获取配置文件里的值" class="headerlink" title="2、viper获取配置文件里的值"></a>2、viper获取配置文件里的值</h3><h4 id="2-1-获取值的方法"><a href="#2-1-获取值的方法" class="headerlink" title="2.1 获取值的方法"></a>2.1 获取值的方法</h4><blockquote><p>Viper提供了下面这些方法根据值类型获取值，具体内部实现可以去看源码</p><p>需要注意：</p><ul><li>Get方法获取到map类型的值时，没法使用中括号里面填写key来获取对应value，会提示空接口类型不支持索引的报错</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Get(key <span class="type">string</span>) : <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetBool(key <span class="type">string</span>) : <span class="type">bool</span></span><br><span class="line">GetFloat64(key <span class="type">string</span>) : <span class="type">float64</span></span><br><span class="line">GetInt(key <span class="type">string</span>) : <span class="type">int</span></span><br><span class="line">GetIntSlice(key <span class="type">string</span>) : []<span class="type">int</span></span><br><span class="line">GetString(key <span class="type">string</span>) : <span class="type">string</span></span><br><span class="line">GetStringMap(key <span class="type">string</span>) : <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">GetStringMapString(key <span class="type">string</span>) : <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">GetStringSlice(key <span class="type">string</span>) : []<span class="type">string</span></span><br><span class="line">GetTime(key <span class="type">string</span>) : time.Time</span><br><span class="line">GetDuration(key <span class="type">string</span>) : time.Duration</span><br><span class="line">IsSet(key <span class="type">string</span>) : <span class="type">bool</span></span><br><span class="line">AllSettings() : <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-IsSet方法校验key存在"><a href="#2-2-IsSet方法校验key存在" class="headerlink" title="2.2 IsSet方法校验key存在"></a>2.2 IsSet方法校验key存在</h4><blockquote><p>需要注意的是：每一个Get方法在找不到值的时候都会返回零值(nil)，有些场景为了能够保证能够读取正确的值，从而避免不必要的问题出现，那么就提供了IsSet方法，用来校验给定的键(key)是否存在</p><p>上面的这些Get方法都适用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IsSet方法</span></span><br><span class="line"><span class="comment">// IsSet checks to see if the key has been set in any of the data locations.</span></span><br><span class="line"><span class="comment">// IsSet is case-insensitive for a key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSet</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> v.IsSet(key) &#125;</span><br></pre></td></tr></table></figure><blockquote><p>从IsSet方法的代码注释可以看出来：</p><ul><li>IsSet检查键是否在任何数据位置被设置过<ul><li>key存在，返回True</li><li>key不存在，返回False</li></ul></li><li>IsSet对于一个键是不分大小写的</li></ul></blockquote><h4 id="2-3-常用获取值的方法"><a href="#2-3-常用获取值的方法" class="headerlink" title="2.3 常用获取值的方法"></a>2.3 常用获取值的方法</h4><h5 id="2-3-1-Get方法"><a href="#2-3-1-Get方法" class="headerlink" title="2.3.1 Get方法"></a>2.3.1 Get方法</h5><blockquote><p>Get方法用来根据传入的key获取配置文件里的值</p><ul><li><p>Get可以检索任何给定使用的键的值</p><ul><li>返回的是一个空接口类型的值</li><li>如果是map类型，则不能使用map的中括号里放key找值</li></ul></li><li><p><code>对于一个键，Get是不区分大小写的</code></p></li><li><p>Get的行为是返回与第一个</p></li><li><p>设置的地方相关的值。Viper将按照以下顺序进行检查。</p><ul><li>override, flag, env, config file, key&#x2F;value store, default</li><li>获取返回一个接口。对于一个特定的值，请使用Get 方法中的一种。</li></ul></li><li><p>当找不到值的时候，会返回一个零值</p><ul><li>所以为了检查给定的键是否存在，viper提供了IsSet方法</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get方法</span></span><br><span class="line"><span class="comment">// Get can retrieve any value given the key to use.</span></span><br><span class="line"><span class="comment">// Get is case-insensitive for a key.</span></span><br><span class="line"><span class="comment">// Get has the behavior of returning the value associated with the first</span></span><br><span class="line"><span class="comment">// place from where it is set. Viper will check in the following order:</span></span><br><span class="line"><span class="comment">// override, flag, env, config file, key/value store, default</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Get returns an interface. For a specific value use one of the Get____ methods.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123; <span class="keyword">return</span> v.Get(key) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分代码</span></span><br><span class="line"><span class="comment">// 通过IsSet先判断get的key是否存在</span></span><br><span class="line">keyExist := viper.IsSet(<span class="string">&quot;ports&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> keyExist &#123;</span><br><span class="line">port := viper.Get(<span class="string">&quot;port&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到port:%v\n&quot;</span>, port)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;获取port key不存在&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key存在</span></span><br><span class="line">host := viper.Get(<span class="string">&quot;host&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到host:%v  Type:%T\n&quot;</span>, host, host)</span><br><span class="line"></span><br><span class="line"><span class="comment">// key name存在, 但是输入错误的key为names</span></span><br><span class="line">name := viper.Get(<span class="string">&quot;names&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到name:%v  Type:%T\n&quot;</span>, name, name)</span><br></pre></td></tr></table></figure><blockquote><p>配置文件里的内容</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220526004036761.png" class="" title="image-20220526004036761"><blockquote><p>执行结果分析</p><ul><li>使用IsSet()先进行key是否判断：<ul><li>当输入的<code>key</code>为<code>ports</code>时，在配置文件中是没有这个key的，所以<code>keyExist</code>是<code>false</code>，所以走到了else分支</li></ul></li><li>不使用IsSet()先进行key是否判断<ul><li>当输入的<code>key</code>为<code>host</code>时，在配置文件中是<code>有</code>这个key的，所以能打印出他的值为<code>127.0.0.1</code></li><li>当输入的<code>key</code>为<code>names</code>时，在配置文件中是<code>没有</code>这个key的，所以打印出来是<code>nil</code>，表示空值</li></ul></li></ul></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220526004100996.png" class="" title="image-20220526004100996"><h5 id="2-3-2-GetString方法"><a href="#2-3-2-GetString方法" class="headerlink" title="2.3.2 GetString方法"></a>2.3.2 GetString方法</h5><blockquote><p>GetString以字符串形式返回与键相关的值。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetString returns the value associated with the key as a string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetString</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">string</span> &#123; <span class="keyword">return</span> v.GetString(key) &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initViperCnf</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line">viper.SetDefault(<span class="string">&quot;conf&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是读取配置文件</span></span><br><span class="line"><span class="comment">// 配置文件名称，无扩展名</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;db_conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要配置此项，指定配置文件类型</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找配置文件所在路径，可以加很多个</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./conf/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">_, ok := err.(viper.ConfigFileNotFoundError)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件时未找到:%v\n&quot;</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件已找到，读取内容时错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取配置文件成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件热加载</span></span><br><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置文件内容变更以后会回调该函数</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;监测到配置文件内容发生 %s 动作，文件位置:%s\n&quot;</span>, e.Op, e.Name)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkKeyExists</span><span class="params">(key <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">keyExists := viper.IsSet(key)</span><br><span class="line"><span class="keyword">if</span> keyExists &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 初始化Viper配置</span></span><br><span class="line">initViperCnf()</span><br><span class="line"></span><br><span class="line"><span class="comment">// key name存在</span></span><br><span class="line">nameKey := checkKeyExists(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> nameKey &#123;</span><br><span class="line">name := viper.GetString(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到name:%#v  Type:%T\n&quot;</span>, name, name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到name不存在:%#v&quot;</span>, nameKey)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入错误的key为names key names不存在</span></span><br><span class="line">namesKey := checkKeyExists(<span class="string">&quot;names&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> namesKey &#123;</span><br><span class="line">names := viper.GetString(<span class="string">&quot;names&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到names:%#v  Type:%T\n&quot;</span>, names, names)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到names不存在:%#v&quot;</span>, namesKey)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220530083131838.png" class="" title="image-20220530083131838"><blockquote><p>从上面的代码分析：</p><ul><li>定义了一个checkKeyExists是否存在的方法来校验key是否存在</li><li>输入了存在的key-&gt;<code>name</code>，viper是可以正确拿到值</li><li>输入了存在的key-&gt;&#96;names，viper不可以正确拿到值，但是返回了零值</li></ul></blockquote><h3 id="3、反序列化配置文件到结构体"><a href="#3、反序列化配置文件到结构体" class="headerlink" title="3、反序列化配置文件到结构体"></a>3、反序列化配置文件到结构体</h3><blockquote><p>在大型web项目中，一般都会将项目配置(项目的端口)、数据库配置(host、用户名、密码、端口)、redis配置(用户名、密码)等写入到配置文件中，那么从配置文件中获取值最方便的就是使用结构体去映射，viper提供了常用的两个方法来映射配置信息到结构体中</p><ul><li>vp.Unmarshal</li><li>vp.UnmarshalKey</li></ul></blockquote><h4 id="3-1-vp-Unmarshal"><a href="#3-1-vp-Unmarshal" class="headerlink" title="3.1 vp.Unmarshal"></a>3.1 vp.Unmarshal</h4><blockquote><p>一般是将如下配置文件中的内容映射到结构体，即是key-value格式，直接对应了需要被反序列化的结构体字段</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20230214134326486.png" class="" title="image-20230214134326486"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义需要反序列化的结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserName <span class="type">string</span></span><br><span class="line">Age      <span class="type">int</span></span><br><span class="line">Hobby    []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写反序列化的方法，方法中调用vp.unmarshal</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDataToNewStruct</span><span class="params">(confStruct <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">err := viper.Unmarshal(&amp;confStruct)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;解析conf数据到%v错误:%v&quot;</span>, confStruct, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行解析</span></span><br><span class="line"><span class="keyword">var</span> u1 User</span><br><span class="line">_ = ReadDataToNewStruct(&amp;u1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;u1 ==&gt; %#+v\n&quot;</span>, u1)</span><br></pre></td></tr></table></figure><blockquote><p>解析出来的结果如下</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20230214143226332.png" class="" title="image-20230214143226332"><h4 id="3-2-vp-UnmarshalKey"><a href="#3-2-vp-UnmarshalKey" class="headerlink" title="3.2 vp.UnmarshalKey"></a>3.2 vp.UnmarshalKey</h4><blockquote><p>如下配置文件中的内容映射到结构体，也是key-value格式，不过最外层有个大key，value才是对应的需要解析到的结构体，需要使用大key才能找到需要被解析到结构体的字段以及值</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20230214143744634.png" class="" title="image-20230214143744634"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义需要反序列化的结构体</span></span><br><span class="line"><span class="keyword">type</span> DatabaseCon <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="type">string</span></span><br><span class="line">User     <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">DbName   <span class="type">string</span></span><br><span class="line">Port     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RedisCon <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">Port     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写反序列化的方法，方法中调用vp.unmarshalKey，需要传入大key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDataToStruct</span><span class="params">(key <span class="type">string</span>, confStruct <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">err := viper.UnmarshalKey(key, &amp;confStruct)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;解析conf数据到%v错误:%v&quot;</span>, confStruct, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行解析，反序列化到一个结构体中</span></span><br><span class="line"><span class="keyword">var</span> db DatabaseCon</span><br><span class="line">err := ReadDataToStruct(<span class="string">&quot;mysql&quot;</span>, &amp;db)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;db ==&gt; %#+v\n&quot;</span>, db)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redis RedisCon</span><br><span class="line">_ = ReadDataToStruct(<span class="string">&quot;redis&quot;</span>, &amp;redis)</span><br><span class="line">fmt.Printf(<span class="string">&quot;redis ==&gt; %#+v\n&quot;</span>, redis)</span><br></pre></td></tr></table></figure><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20230214143644892.png" class="" title="image-20230214143644892"><h3 id="4、配置文件支持热加载"><a href="#4、配置文件支持热加载" class="headerlink" title="4、配置文件支持热加载"></a>4、配置文件支持热加载</h3><blockquote><p>Viper支持在程序运行时实时读取配置文件的功能，这也就是热加载，不需要重新启动服务，而是在服务运行时，自动重新加载最新的配置内容</p><ul><li>viper可以实时的去读取配置文件的更新，而且不会错误任何内容</li><li>viper实现热加载的两个方法<ul><li>WatchConfig()</li><li>OnConfigChange() : 这个方法可选用，这个方法提供了一个回调函数，可以在每次配置文件内容有修改时，通知我们</li></ul></li><li>一定要确保<code>watchConfig</code>前面的代码添加了所有的配置文件路径</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加配置文件热加载代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line">viper.SetDefault(<span class="string">&quot;conf&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是读取配置文件</span></span><br><span class="line"><span class="comment">// 配置文件名称，无扩展名</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;db_conf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要配置此项，指定配置文件类型</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找配置文件所在路径，可以加很多个</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./conf/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">_, ok := err.(viper.ConfigFileNotFoundError)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件时未找到:%v\n&quot;</span>,err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取配置文件已找到，读取内容时错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取配置文件成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件热加载</span></span><br><span class="line">viper.WatchConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(e fsnotify.Event)</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置文件内容变更以后会回调该函数</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;监测到配置文件内容发生 %s 动作，文件位置:%s\n&quot;</span>, e.Op, e.Name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用死循环，模拟程序一直在长期运行，然后修改配置文件</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">nowTime := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">&quot;程序运行中:%v\n&quot;</span>, nowTime)</span><br><span class="line"><span class="comment">// 间隔3s</span></span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动程序后，修改配置文件内容后，会提示有修改配置文件内容提示，并且重新加载最新的内容</p></blockquote><img src="/2022/05/24/golang/go_viper%E4%BD%BF%E7%94%A8/go_viper%E4%BD%BF%E7%94%A8/image-20220526001137129.png" class="" title="image-20220526001137129"><h3 id="5、使用环境变量"><a href="#5、使用环境变量" class="headerlink" title="5、使用环境变量"></a>5、使用环境变量</h3><blockquote><p>viper完全支持环境变量，有五种方法可以和ENV配合使用</p><ul><li><code>AutomaticEnv()</code></li><li><code>BindEnv(string...) : error</code></li><li><code>SetEnvPrefix(string)</code></li><li><code>SetEnvKeyReplacer(string...) *strings.Replacer</code></li><li><code>AllowEmptyEnv(bool)</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go Viper使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Viper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Redis使用</title>
      <link href="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建Redis环境"><a href="#一、搭建Redis环境" class="headerlink" title="一、搭建Redis环境"></a>一、搭建Redis环境</h2><blockquote><p>前言：使用Docker 来搭建Redis环境</p><p>镜像官网：<a href="https://hub.docker.com/_/redis">https://hub.docker.com/_&#x2F;redis</a></p></blockquote><h3 id="1-创建redis容器"><a href="#1-创建redis容器" class="headerlink" title="1. 创建redis容器"></a>1. 创建redis容器</h3><h4 id="1-1-创建redis容器命令"><a href="#1-1-创建redis容器命令" class="headerlink" title="1.1 创建redis容器命令"></a>1.1 创建redis容器命令</h4><blockquote><p>使用redis-cli客户端连接方式创建redis容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建redis容器</span></span><br><span class="line">docker run -idt --name redisly -p 6379:6379 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令参数解释</span></span><br><span class="line">-idt: i表示可以进行交互，t表示开启一个<span class="built_in">tty</span>终端，d表示在后台运行容器</span><br><span class="line">--name: 表示自定义容器名，进入容器时可以使用该名字进入</span><br><span class="line">--<span class="built_in">rm</span>: 表示创建redis容器时候，如果存在redis 、redis-cli先删除再创建</span><br><span class="line">-p: 表示将容器内端口映射到宿主机的端口</span><br></pre></td></tr></table></figure><h4 id="1-2-创建无密码redis容器"><a href="#1-2-创建无密码redis容器" class="headerlink" title="1.2 创建无密码redis容器"></a>1.2 创建无密码redis容器</h4><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20220523234632172.png" class="" title="image-20220523234632172"><h3 id="2-连接redis服务端"><a href="#2-连接redis服务端" class="headerlink" title="2. 连接redis服务端"></a>2. 连接redis服务端</h3><h4 id="2-1-redis-cli命令介绍"><a href="#2-1-redis-cli命令介绍" class="headerlink" title="2.1 redis-cli命令介绍"></a>2.1 redis-cli命令介绍</h4><blockquote><p><code>redis</code>服务器可以通过<code>redis-cli</code>工具进行连接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">// redis-cli --help 帮助文档</span><br><span class="line">redis-cli 6.0.1</span><br><span class="line"></span><br><span class="line">Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]</span><br><span class="line">  -h &lt;hostname&gt;      Server hostname (default: 127.0.0.1).</span><br><span class="line">  -p &lt;port&gt;          Server port (default: 6379).</span><br><span class="line">  -s &lt;socket&gt;        Server socket (overrides hostname and port).</span><br><span class="line">  -a &lt;password&gt;      Password to use when connecting to the server.</span><br><span class="line">                     You can also use the REDISCLI_AUTH environment</span><br><span class="line">                     variable to pass this password more safely</span><br><span class="line">                     (if both are used, this argument takes predecence).</span><br><span class="line">  --user &lt;username&gt;  Used to send ACL style &#x27;AUTH username pass&#x27;. Needs -a.</span><br><span class="line">  --pass &lt;password&gt;  Alias of -a for consistency with the new --user option.</span><br><span class="line">  --askpass          Force user to input password with mask from STDIN.</span><br><span class="line">                     If this argument is used, &#x27;-a&#x27; and REDISCLI_AUTH</span><br><span class="line">                     environment variable will be ignored.</span><br><span class="line">  -u &lt;uri&gt;           Server URI.</span><br><span class="line">  -r &lt;repeat&gt;        Execute specified command N times.</span><br><span class="line">  -i &lt;interval&gt;      When -r is used, waits &lt;interval&gt; seconds per command.</span><br><span class="line">                     It is possible to specify sub-second times like -i 0.1.</span><br><span class="line">  -n &lt;db&gt;            Database number.</span><br><span class="line">  -3                 Start session in RESP3 protocol mode.</span><br><span class="line">  -x                 Read last argument from STDIN.</span><br><span class="line">  -d &lt;delimiter&gt;     Multi-bulk delimiter in for raw formatting (default: \n).</span><br><span class="line">  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).</span><br><span class="line">  --raw              Use raw formatting for replies (default when STDOUT is</span><br><span class="line">                     not a tty).</span><br><span class="line">  --no-raw           Force formatted output even when STDOUT is not a tty.</span><br><span class="line">  --csv              Output in CSV format.</span><br><span class="line">  --stat             Print rolling stats about server: mem, clients, ...</span><br><span class="line">  --latency          Enter a special mode continuously sampling latency.</span><br><span class="line">                     If you use this mode in an interactive session it runs</span><br><span class="line">                     forever displaying real-time stats. Otherwise if --raw or</span><br><span class="line">                     --csv is specified, or if you redirect the output to a non</span><br><span class="line">                     TTY, it samples the latency for 1 second (you can use</span><br><span class="line">                     -i to change the interval), then produces a single output</span><br><span class="line">                     and exits.</span><br><span class="line">  --latency-history  Like --latency but tracking latency changes over time.</span><br><span class="line">                     Default time interval is 15 sec. Change it using -i.</span><br><span class="line">  --latency-dist     Shows latency as a spectrum, requires xterm 256 colors.</span><br><span class="line">                     Default time interval is 1 sec. Change it using -i.</span><br><span class="line">  --lru-test &lt;keys&gt;  Simulate a cache workload with an 80-20 distribution.</span><br><span class="line">  --replica          Simulate a replica showing commands received from the master.</span><br><span class="line">  --rdb &lt;filename&gt;   Transfer an RDB dump from remote server to local file.</span><br><span class="line">  --pipe             Transfer raw Redis protocol from stdin to server.</span><br><span class="line">  --pipe-timeout &lt;n&gt; In --pipe mode, abort with error if after sending all data.</span><br><span class="line">                     no reply is received within &lt;n&gt; seconds.</span><br><span class="line">                     Default timeout: 30. Use 0 to wait forever.</span><br><span class="line">  --bigkeys          Sample Redis keys looking for keys with many elements (complexity).</span><br><span class="line">  --memkeys          Sample Redis keys looking for keys consuming a lot of memory.</span><br><span class="line">  --memkeys-samples &lt;n&gt; Sample Redis keys looking for keys consuming a lot of memory.</span><br><span class="line">                     And define number of key elements to sample</span><br><span class="line">  --hotkeys          Sample Redis keys looking for hot keys.</span><br><span class="line">                     only works when maxmemory-policy is *lfu.</span><br><span class="line">  --scan             List all keys using the SCAN command.</span><br><span class="line">  --pattern &lt;pat&gt;    Useful with --scan to specify a SCAN pattern.</span><br><span class="line">  --intrinsic-latency &lt;sec&gt; Run a test to measure intrinsic system latency.</span><br><span class="line">                     The test will run for the specified amount of seconds.</span><br><span class="line">  --eval &lt;file&gt;      Send an EVAL command using the Lua script at &lt;file&gt;.</span><br><span class="line">  --ldb              Used with --eval enable the Redis Lua debugger.</span><br><span class="line">  --ldb-sync-mode    Like --ldb but uses the synchronous Lua debugger, in</span><br><span class="line">                     this mode the server is blocked and script changes are</span><br><span class="line">                     not rolled back from the server memory.</span><br><span class="line">  --cluster &lt;command&gt; [args...] [opts...]</span><br><span class="line">                     Cluster Manager command and arguments (see below).</span><br><span class="line">  --verbose          Verbose mode.</span><br><span class="line">  --no-auth-warning  Don&#x27;t show warning message when using password on command</span><br><span class="line">                     line interface.</span><br><span class="line">  --help             Output this help and exit.</span><br><span class="line">  --version          Output version and exit.</span><br><span class="line"></span><br><span class="line">Cluster Manager Commands:</span><br><span class="line">  Use --cluster help to list all available cluster manager commands.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  cat /etc/passwd | redis-cli -x set mypasswd</span><br><span class="line">  redis-cli get mypasswd</span><br><span class="line">  redis-cli -r 100 lpush mylist x</span><br><span class="line">  redis-cli -r 100 -i 1 info | grep used_memory_human:</span><br><span class="line">  redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3</span><br><span class="line">  redis-cli --scan --pattern &#x27;*:12345*&#x27;</span><br><span class="line"></span><br><span class="line">  (Note: when using --eval the comma separates KEYS[] from ARGV[] items)</span><br><span class="line"></span><br><span class="line">When no command is given, redis-cli starts in interactive mode.</span><br><span class="line">Type &quot;help&quot; in interactive mode for information on available commands</span><br><span class="line">and settings.</span><br></pre></td></tr></table></figure><h4 id="2-2-redis-cli连接redis服务端"><a href="#2-2-redis-cli连接redis服务端" class="headerlink" title="2.2 redis-cli连接redis服务端"></a>2.2 redis-cli连接redis服务端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接命令，这个命令行工具是单独下载安装的</span></span><br><span class="line">redis-cli -h 127.0.0.1</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20220523234525673.png" class="" title="image-20220523234525673"><h2 id="二、Redis介绍"><a href="#二、Redis介绍" class="headerlink" title="二、Redis介绍"></a>二、Redis介绍</h2><blockquote><p><a href="https://www.runoob.com/redis/redis-intro.html">redis菜鸟教程</a></p></blockquote><h3 id="1、Redis介绍"><a href="#1、Redis介绍" class="headerlink" title="1、Redis介绍"></a>1、Redis介绍</h3><h4 id="1-1-Redis介绍"><a href="#1-1-Redis介绍" class="headerlink" title="1.1 Redis介绍"></a>1.1 Redis介绍</h4><blockquote><p>redis是一个开源的内存数据库</p><p>redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以映照到这些数据类型上</p><p>通过复制、持久化、客户端分片等特性，可以很快捷的把Redis扩展成一个能包含数GB数据、处理百万级别的请求的系统</p></blockquote><blockquote><p>redis应用场景</p><ul><li>缓存系统，减轻主数据库MYSQL压力</li><li>计数场景，比如微博、抖音的关注数和粉丝数</li><li>热门排行榜，需要排序的场景比较适合ZSET</li><li>利用LIST可以实现队列功能</li></ul></blockquote><h4 id="1-2-Redis支持而数据结构"><a href="#1-2-Redis支持而数据结构" class="headerlink" title="1.2 Redis支持而数据结构"></a>1.2 Redis支持而数据结构</h4><blockquote><p>支持的数据类型</p><ul><li><p>字符串</p></li><li><p>哈希</p></li><li><p>列表</p></li><li><p>集合</p></li><li><p>带查询范围的排序集合</p></li><li><p>位图</p></li></ul></blockquote><h4 id="1-3-Redis和Memcached区别"><a href="#1-3-Redis和Memcached区别" class="headerlink" title="1.3 Redis和Memcached区别"></a>1.3 Redis和Memcached区别</h4><blockquote><p>Memcached的值只支持简单的字符串</p><p>Redis支持更丰富的多种数据类型</p><p>Redis性能比Memcached好的多</p><p>Redis支持持久化</p><p>Redis支持master&#x2F;slave模式</p></blockquote><h2 id="三、Golang操作Redis"><a href="#三、Golang操作Redis" class="headerlink" title="三、Golang操作Redis"></a>三、Golang操作Redis</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1FY411d7JF/?p=2&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1FY411d7JF/?p=2&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="1、安装redis依赖库"><a href="#1、安装redis依赖库" class="headerlink" title="1、安装redis依赖库"></a>1、安装redis依赖库</h3><blockquote><p>go使用第三方库<code>github.com/go-redis/redis</code>，是目前使用最多的库之一</p><p>github地址：<a href="https://redis.uptrace.dev/guide/go-redis.html">https://github.com/go-redis/redis</a></p><p>官方文档地址：<a href="https://redis.uptrace.dev/guide/go-redis.html">https://redis.uptrace.dev/guide/go-redis.html</a></p></blockquote><h4 id="1-1-查看redis服务的版本"><a href="#1-1-查看redis服务的版本" class="headerlink" title="1.1 查看redis服务的版本"></a>1.1 查看redis服务的版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info Server</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.2.4</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br></pre></td></tr></table></figure><h4 id="1-2-按redis版本安装依赖库"><a href="#1-2-按redis版本安装依赖库" class="headerlink" title="1.2 按redis版本安装依赖库"></a>1.2 按redis版本安装依赖库</h4><blockquote><p>如果redis服务的版本是6，则需要安装go-redis的v8版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端执行</span></span><br><span class="line">go get github.com/go-redis/redis/v8</span><br></pre></td></tr></table></figure><blockquote><p>如果redis服务的版本是7，则需要安装go-redis的v9版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/go-redis/redis/v9</span><br></pre></td></tr></table></figure><h4 id="1-3、go操作redis的注意事项"><a href="#1-3、go操作redis的注意事项" class="headerlink" title="1.3、go操作redis的注意事项"></a>1.3、go操作redis的注意事项</h4><blockquote><p>导入时需要注意是v8版本的redis</p><p>在设置值，获取值时需要注意传入context上下文</p></blockquote><h4 id="2-1-设置值和获取值快速上手"><a href="#2-1-设置值和获取值快速上手" class="headerlink" title="2.1 设置值和获取值快速上手"></a>2.1 设置值和获取值快速上手</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span>   <span class="comment">// 注意这里导入的是v8版本的redis</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">key := <span class="string">&quot;feet_sam&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">err := redisdb.Set(ctx, key, <span class="string">&quot;1&quot;</span>, <span class="number">3</span> * time.Second).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;set %v error: %v\n&quot;</span>, key, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">val, valErr := redisdb.Get(ctx, key).Result()</span><br><span class="line"><span class="keyword">if</span> valErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(valErr)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;val:%v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222165503687.png" class="" title="image-20221222165503687"><h3 id="2、string类型操作"><a href="#2、string类型操作" class="headerlink" title="2、string类型操作"></a>2、string类型操作</h3><h4 id="2-1-Set方法"><a href="#2-1-Set方法" class="headerlink" title="2.1 Set方法"></a>2.1 Set方法</h4><blockquote><p>设置redis的key、value、过期时间</p><p>Set方法的参数</p><ul><li>ctx context.Context：需要传入上下文</li><li>key string：设置的redis的key</li><li>value interface{}：设置的redis的值</li><li>expiration time.Duration：设置redis的过期时间，传0表示永不过期，传入的类型是time.Duration</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span>   <span class="comment">// 注意这里导入的是v8版本的redis</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">  key := <span class="string">&quot;answer:record&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置值，表示60秒后过期</span></span><br><span class="line">err := redisdb.Set(ctx, key, <span class="string">&quot;1123&quot;</span>, <span class="number">60</span> * time.Second).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;set %v error: %v\n&quot;</span>, key, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Get方法"><a href="#2-2-Get方法" class="headerlink" title="2.2 Get方法"></a>2.2 Get方法</h4><blockquote><p>根据key获取值，使用result方法接收获取到的值，而且会返回一个err</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key := <span class="string">&quot;answer:record&quot;</span></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">val, err := redisdb.Get(ctx, key).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取 %v error: %v\n&quot;</span>, key, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取[%v]的值: %v\n&quot;</span>, key, val)</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20230131184645532.png" class="" title="image-20230131184645532"><blockquote><p>当传入的key在redis中不存在时，err的值：<code>redis: nil</code></p></blockquote><blockquote><p>使用原生redis命令</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用原生redis命令</span></span><br><span class="line">key := <span class="string">&quot;feet_sam&quot;</span></span><br><span class="line">res, _ := redisdb.Do(ctx, <span class="string">&quot;get&quot;</span>, key).Result()</span><br><span class="line">fmt.Printf(<span class="string">&quot;do 方法获取值：%v\n&quot;</span>, res.(<span class="type">string</span>))</span><br></pre></td></tr></table></figure><h4 id="2-3-GetSet方法"><a href="#2-3-GetSet方法" class="headerlink" title="2.3 GetSet方法"></a>2.3 GetSet方法</h4><blockquote><p>设置一个key的值，并返回这个key的旧值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">key := <span class="string">&quot;feet_sam&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先设置一个值</span></span><br><span class="line">err := redisdb.Set(ctx, key, <span class="string">&quot;1&quot;</span>, <span class="number">0</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;set %v error: %v\n&quot;</span>, key, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个新值，并且返回原来的旧值</span></span><br><span class="line">oldVal, _ := redisdb.GetSet(ctx, key, <span class="string">&quot;new_1&quot;</span>).Result()</span><br><span class="line">fmt.Printf(<span class="string">&quot;oldVal: %v\n&quot;</span>, oldVal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222170549559.png" class="" title="image-20221222170549559"><blockquote><p>代码是先Set了<code>feet_name</code>这个key的值为<code>1</code>，然后使用GetSet设置了<code>feet_name</code>这个key的值为<code>new_1</code>,而且GetSet还返回了之前的旧值</p></blockquote><h4 id="2-4-SetNX方法"><a href="#2-4-SetNX方法" class="headerlink" title="2.4 SetNX方法"></a>2.4 SetNX方法</h4><blockquote><p>如果key不存在，则设置这个key的值</p><ul><li>如果这个key之前存在，则返回值是false，并且不会设置新的值，此时key的值还是之前的值</li><li>如果这个key之前不存在，则返回值是true</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一个新值，并且返回原来的旧值</span></span><br><span class="line">ok, err := redisdb.SetNX(ctx, key, <span class="string">&quot;2&quot;</span>, <span class="number">0</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;SetNX %v error: %v\n&quot;</span>, key, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;SetNX ok:%v\n&quot;</span>, ok)</span><br></pre></td></tr></table></figure><h4 id="2-5-MSet方法"><a href="#2-5-MSet方法" class="headerlink" title="2.5 MSet方法"></a>2.5 MSet方法</h4><blockquote><p>批量设置值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err := redisdb.MSet(ctx, <span class="string">&quot;key1&quot;</span>, <span class="number">11</span>, <span class="string">&quot;key2&quot;</span>, <span class="number">22</span>, <span class="string">&quot;key3&quot;</span>, <span class="number">33</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mset err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-MGet方法"><a href="#2-6-MGet方法" class="headerlink" title="2.6 MGet方法"></a>2.6 MGet方法</h4><blockquote><p>批量查询值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>, <span class="comment">// 默认设置为0</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">key1 := <span class="string">&quot;feet_name1&quot;</span></span><br><span class="line">key2 := <span class="string">&quot;feet_name2&quot;</span></span><br><span class="line">key3 := <span class="string">&quot;feet_name3&quot;</span></span><br><span class="line"></span><br><span class="line">err := redisdb.MSet(ctx, key1, <span class="number">11</span>, key2, <span class="number">22</span>, key3, <span class="number">33</span>).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mset err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量获取值</span></span><br><span class="line">vals, err := redisdb.MGet(ctx, key1, key2, key3).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mget err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;mget vals:%v\n&quot;</span>, vals)</span><br><span class="line">fmt.Printf(<span class="string">&quot;mget type:%T\n&quot;</span>, vals)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222175251067.png" class="" title="image-20221222175251067"><blockquote><ul><li>上述代码先批量设置了三个key，分别为key1、key2、key3</li><li>然后使用MGet方法进行批量查询，并且返回值是一个空接口类型的切片</li></ul></blockquote><h4 id="2-7-Incr方法"><a href="#2-7-Incr方法" class="headerlink" title="2.7 Incr方法"></a>2.7 Incr方法</h4><blockquote><p>对一个key的值进行递增，每次都自增1</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// incr每次加1</span></span><br><span class="line">val, err := redisdb.Incr(ctx, <span class="string">&quot;age_sam&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr val:%v\n&quot;</span>, val)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222175828137.png" class="" title="image-20221222175828137"><blockquote><p>从图中可以看到每次值都是+1</p></blockquote><h4 id="2-8-IncrBy方法"><a href="#2-8-IncrBy方法" class="headerlink" title="2.8 IncrBy方法"></a>2.8 IncrBy方法</h4><blockquote><p>递增的时候设置步长，表示每次递增多少，单位为正整数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// incrBy每次加2</span></span><br><span class="line">val, err := redisdb.IncrBy(ctx, <span class="string">&quot;age_sam&quot;</span>, <span class="number">2</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr val:%v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222180046941.png" class="" title="image-20221222180046941"><h4 id="2-9-IncrByFloat方法"><a href="#2-9-IncrByFloat方法" class="headerlink" title="2.9 IncrByFloat方法"></a>2.9 IncrByFloat方法</h4><blockquote><p>key的值每次新增的是一个浮点值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// IncrByFloat每次加0.5</span></span><br><span class="line">val, err := redisdb.IncrByFloat(ctx, <span class="string">&quot;age_sam&quot;</span>, <span class="number">0.5</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr val:%v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/23/golang/go_redis%E4%BD%BF%E7%94%A8/go_redis%E4%BD%BF%E7%94%A8/image-20221222183824098.png" class="" title="image-20221222183824098"><h4 id="2-10-Decr方法"><a href="#2-10-Decr方法" class="headerlink" title="2.10 Decr方法"></a>2.10 Decr方法</h4><blockquote><p>对一个key的值进行递减操作</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decr递减</span></span><br><span class="line">val, err := redisdb.Decr(ctx, <span class="string">&quot;age_sam&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr val:%v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-DecrBy方法"><a href="#2-11-DecrBy方法" class="headerlink" title="2.11 DecrBy方法"></a>2.11 DecrBy方法</h4><blockquote><p>按多少进行递减，并且是可以一直递减到负值的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecrBy递减</span></span><br><span class="line">val, err := redisdb.DecrBy(ctx, <span class="string">&quot;age_sam&quot;</span>, <span class="number">2</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;incr val:%v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-Del方法"><a href="#2-12-Del方法" class="headerlink" title="2.12 Del方法"></a>2.12 Del方法</h4><blockquote><p>删除key操作，并且支持批量删除</p><ul><li>key存在删除，可以进行删除动作</li><li>key不存在删除，也可以进行删除动作</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// del单个删除</span></span><br><span class="line">val, err := redisdb.Del(ctx, <span class="string">&quot;age_sam&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;del err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;del val:%v\n&quot;</span>, val)</span><br><span class="line"></span><br><span class="line">multiDelVal, multErr := redisdb.Del(ctx, <span class="string">&quot;feet_name1&quot;</span>, <span class="string">&quot;feet_name2&quot;</span>, <span class="string">&quot;feet_name3s&quot;</span>).Result()</span><br><span class="line"><span class="keyword">if</span> multErr != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;del multi err:%v\n&quot;</span>, multErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;del multi val:%v\n&quot;</span>, multiDelVal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-13-Expire方法"><a href="#2-13-Expire方法" class="headerlink" title="2.13 Expire方法"></a>2.13 Expire方法</h4><blockquote><p>重新设置key的过期时间</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-redis/redis/v8&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局redis变量</span></span><br><span class="line"><span class="keyword">var</span> redisdb *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">redisdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">Addr: <span class="string">&quot;127.0.0.1:6379&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">DB: <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过期时间，比如10秒后过期</span></span><br><span class="line">err := redisdb.Expire(ctx, <span class="string">&quot;feet_name&quot;</span>, <span class="number">10</span> * time.Second).Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;del err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、hash类型操作"><a href="#3、hash类型操作" class="headerlink" title="3、hash类型操作"></a>3、hash类型操作</h3><h4 id="3-1-HSet方法"><a href="#3-1-HSet方法" class="headerlink" title="3.1 HSet方法"></a>3.1 HSet方法</h4><blockquote><p>根据key和字段名设置字段名的值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go Redis使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发编程</title>
      <link href="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://geektutu.com/post/geeorm-day1.html">https://geektutu.com/post/geeorm-day1.html</a></p></blockquote><h2 id="一、并发编程"><a href="#一、并发编程" class="headerlink" title="一、并发编程"></a>一、并发编程</h2><blockquote><p><code>go</code>天生支持并发，所以并发编程很重要，需要好好理解</p><p><a href="https://mp.weixin.qq.com/s/aN6SuLNzeeeMRYyXWD1V8w">https://mp.weixin.qq.com/s/aN6SuLNzeeeMRYyXWD1V8w</a></p></blockquote><h3 id="1、并发和并行"><a href="#1、并发和并行" class="headerlink" title="1、并发和并行"></a>1、并发和并行</h3><blockquote><p>相关参考资料：</p><p><a href="https://laike9m.com/blog/huan-zai-yi-huo-bing-fa-he-bing-xing,61/">https://laike9m.com/blog/huan-zai-yi-huo-bing-fa-he-bing-xing,61/</a></p><p><a href="https://zhuanlan.zhihu.com/p/145587728">https://zhuanlan.zhihu.com/p/145587728</a></p></blockquote><blockquote><ul><li>并发(Concurrency)<ul><li>并发是同时发生<ul><li>并行指物理上同时执行</li><li>并发的字面意思指的是线程同时开始执行这个事件，后续的执行是串行，还是并行，不确定，依赖于底层的硬件条件和操作系统的调度</li></ul></li><li>并发的“发”<ul><li>这里的发是指，如果有多个线程，都会同一时间先启动，但是线程里内容先不执行，会根据操作系统调度去交替执行</li></ul></li></ul></li><li>并行(Parallelism)<ul><li>并行就是同时执行<ul><li>并行是指线程同时执行这个过程</li><li>并发指能够让多个任务在逻辑上交织执行的程序设计</li></ul></li></ul></li><li>注意：<ul><li>并发和并行都必须是多线程的</li><li>如果这些线程可以被同时执行(执行线程的步骤)，这叫并行</li><li>如果这些线程可以同时启动，但没有同时执行(执行线程的步骤)，这叫并发</li></ul></li></ul></blockquote><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/v2-674f0d37fca4fac1bd2df28a2b78e633_r.jpg" class="" title="preview"><blockquote><p>上图是Erlang之父画的并发、并行的简单理解图</p><ul><li>并发<ul><li>两个队列**<code>交替</code>**使用一个咖啡机</li></ul></li><li>并行<ul><li>两个队列**<code>同时</code>**使用两个咖啡机</li></ul></li><li>注意<ul><li>一个队列对应一个任务(线程)，队列的每个人对应任务的步骤</li><li>并发要处理的任务必须是可分步骤、任务数量大于等于2的</li><li>并行要处理的任务必须是多个处理器(也就是图中的多个咖啡机)</li></ul></li></ul></blockquote><h3 id="2、进程、线程、协程"><a href="#2、进程、线程、协程" class="headerlink" title="2、进程、线程、协程"></a>2、进程、线程、协程</h3><blockquote><p>进程（process）：程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。</p><p>线程（thread）：操作系统基于进程开启的轻量级进程，是操作系统调度执行的最小单位。</p><p>协程（coroutine）：非操作系统提供而是由用户自行创建和控制的用户态‘线程’，比线程更轻量级。</p></blockquote><h2 id="二、goroutine"><a href="#二、goroutine" class="headerlink" title="二、goroutine"></a>二、goroutine</h2><blockquote><p>Go语言中的并发程序主要是通过基于CSP（communicating sequential processes）的goroutine和channel来实现，当然也支持使用传统的多线程共享内存的并发方式。</p></blockquote><h3 id="1、goroutine介绍"><a href="#1、goroutine介绍" class="headerlink" title="1、goroutine介绍"></a>1、goroutine介绍</h3><blockquote><p>Goroutine是Go语言支持并发的核心</p><ul><li>在go语言中可以**<code>同时</code>**创建N个goroutine，非常的简单方便</li><li>Goroutine介绍<ul><li>一个goroutine会以很小的生命周期开始，一般只有2KB</li><li>和操作系统调度线程不同，操作系统是由系统内核调度的，而goroutine是由go在运行时(runtime)调度的</li><li>go在运行时，会进行操作系统资源分配，会把m个goroutine合理地分配给n个操作系统线程，实现m:n的调度机制</li><li>开发人员不需要为go在代码层面维护一个线程池</li></ul></li><li>Goroutine的特点<ul><li>Goroutine 是Go程序中最基本的并发执行单元</li><li>每一个程序都至少包含一个goroutine，也就是main函数的（main goroutine），当go程序创建时，它会默认创建</li><li>go语言不需要自己单独写进程、线程、协程，只需要利用goroutine就可以实现并发</li><li>当需要多个任务并发执行的时候，把任务包装成一个函数，然后开启goroutine去执行，就实现了并发</li></ul></li></ul></blockquote><h3 id="2、开启gouroutine"><a href="#2、开启gouroutine" class="headerlink" title="2、开启gouroutine"></a>2、开启gouroutine</h3><blockquote><p>Go语言中使用goroutine非常简单，只需要在函数或方法调用前加上<code>go</code>关键字就可以创建一个goroutine</p><p>从而让该函数或方法（结构体里的定义的函数就叫方法）在新创建的goroutine中执行，而不是在<code>main goroutine</code>中执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">go</span> 关键字创建goroutine</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addData</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %v\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main程序启动以后，会创建一个主goroutine去执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">x := <span class="number">33</span></span><br><span class="line"><span class="comment">// go关键字单独开启一个goroutine去执行addData函数</span></span><br><span class="line"><span class="keyword">go</span> addData(x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is main func&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行以后会发现，并没有将addData函数里的Printf内容输出</p><p>为什么没有呢？</p><ul><li>go addData(x)表示开启了一个goroutine，但是此时只是刚开启，就好比是刚刚把通道打开了，但是里面的内容还没进去执行</li><li>此时代码继续往下走，执行<code>fmt.Printf(&quot;this is main func&quot;)</code>表示main函数结束了，由main函数启动的goroutine就结束了，此时整个函数就执行完毕了，所以就来不及执行<code>addData</code>里的printf内容</li></ul><p>可以用<code>time.Sleep(time.Second)</code>这样等待<code>go addData()</code>启动并执行完毕，再执行main函数里<code>printf</code>语句，这样就可以看到<code>addData</code>函数里的输出了</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addData</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %v\n&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">x := <span class="number">33</span></span><br><span class="line"><span class="comment">// go关键字单独开启一个goroutine去执行addData函数</span></span><br><span class="line"><span class="keyword">go</span> addData(x)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 使用sleep强制等待新开的goroutine执行完毕，再执行下面的代码</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is main func&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220403220757049.png" class="" title="image-20220403220757049"><h3 id="3、for启动goroutine-闭包"><a href="#3、for启动goroutine-闭包" class="headerlink" title="3、for启动goroutine(闭包)"></a>3、for启动goroutine(闭包)</h3><blockquote><p>上面的都是开启一个goroutine去执行代码，但是我们可以使用for循环开启很多个goroutine</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="number">10</span>; i++&#123;</span><br><span class="line"><span class="comment">// go关键字单独开启一个goroutine去执行匿名函数</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is main func&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220403221849085.png" class="" title="image-20220403221849085"><blockquote><p>从执行结果来看，并不是我们预期的想要的输出1到10，而是输出了<code>8 10</code>这些数字</p><p>为什么会这样呢？</p><ul><li>从for循环里的<code>go</code>关键字后面的匿名函数来看，里面打印了for循环里的<code>i</code>变量，对于一个函数内部的变量从函数外部拿，这就是<code>闭包</code></li><li>由于for循环很快，所以开启10个goroutine的时候，for循环已经执行完了，那么最后传递给匿名函数里的<code>i</code>可能是for循环的最后一个10，或者是中间的某一个，所以就出现了上图的结果<ul><li>这里也反映出了启动goroutine是需要一定时间的，因为从for循环来看，先启动了10个goroutine，才开始执行goroutine里面匿名函数里的打印<code>i</code>功能，而且输出到终端也需要时间，那么就表示了goroutine是都先启动，再执行里面任务，此时的时间差for循环已经执行结束了，最后的i是10，所以就会出现了上面的结果</li><li>如果goroutine能里面启动，立马执行，就不会有这样的问题</li><li>并不是启动一个就输出展示一个</li></ul></li></ul></blockquote><h3 id="4、for启动goroutine-传参"><a href="#4、for启动goroutine-传参" class="headerlink" title="4、for启动goroutine(传参)"></a>4、for启动goroutine(传参)</h3><blockquote><p>从3.2.1里可以看出，<code>for</code>循环启动多个goroutine时，采用闭包传参，会出现多个<code>goroutine</code>接收到的参数值都是一样，这样就不符合我们的需求，所以需要给传参</p><p>从下面代码可以看出，走传参形式给goroutine，那么循环一个就给一个值到goroutine中，这样每次循环的值都会被传到启动的goroutine中，这样就不会有问题</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;i=%v\n&quot;</span>, i)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;main run done!&quot;</span>)</span><br><span class="line">time.Sleep((time.Second) * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220427112458128.png" class="" title="image-20220427112458128"><blockquote><p>但是仔细观察上面的代码，使用了<code>time.Sleep</code>来等待for循环启动的goroutine执行完，十分的不可控，也不优雅</p></blockquote><h3 id="5、sync-WaitGroup"><a href="#5、sync-WaitGroup" class="headerlink" title="5、sync.WaitGroup"></a>5、sync.WaitGroup</h3><blockquote><p>使用<code>sync.WaitGroup</code>来实现goroutine的同步：</p><ul><li><p>sync.WaitGroup是用来创建等待组</p></li><li><p>从源码可以看到WaitGroup不能被拷贝，因为里面是计数器，如果拷贝了，那计数器的值就不一致了，因为WaitGroup是结构体，结构体是值类型，值类型不像指针类型，指针类型可以保持值一致</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A WaitGroup waits for a collection of goroutines to finish.</span></span><br><span class="line"><span class="comment">// The main goroutine calls Add to set the number of</span></span><br><span class="line"><span class="comment">// goroutines to wait for. Then each of the goroutines</span></span><br><span class="line"><span class="comment">// runs and calls Done when finished. At the same time,</span></span><br><span class="line"><span class="comment">// Wait can be used to block until all goroutines have finished.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A WaitGroup must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> WaitGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">noCopy noCopy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.</span></span><br><span class="line"><span class="comment">// 64-bit atomic operations require 64-bit alignment, but 32-bit</span></span><br><span class="line"><span class="comment">// compilers do not ensure it. So we allocate 12 bytes and then use</span></span><br><span class="line"><span class="comment">// the aligned 8 bytes in them as state, and the other 4 as storage</span></span><br><span class="line"><span class="comment">// for the sema.</span></span><br><span class="line">state1 [<span class="number">3</span>]<span class="type">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>涉及到的sync.WaitGroup三个方法，Add()、Wait()、Done()</p></blockquote><blockquote><ul><li>wg.Add()<ul><li>要启动多少个goroutine，就添加多少个计数器，可以一次性加好，也可以在循环里每次挨个加1</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add adds delta, which may be negative, to the WaitGroup counter.</span></span><br><span class="line"><span class="comment">// If the counter becomes zero, all goroutines blocked on Wait are released.</span></span><br><span class="line"><span class="comment">// If the counter goes negative, Add panics.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that calls with a positive delta that occur when the counter is zero</span></span><br><span class="line"><span class="comment">// must happen before a Wait. Calls with a negative delta, or calls with a</span></span><br><span class="line"><span class="comment">// positive delta that start when the counter is greater than zero, may happen</span></span><br><span class="line"><span class="comment">// at any time.</span></span><br><span class="line"><span class="comment">// Typically this means the calls to Add should execute before the statement</span></span><br><span class="line"><span class="comment">// creating the goroutine or other event to be waited for.</span></span><br><span class="line"><span class="comment">// If a WaitGroup is reused to wait for several independent sets of events,</span></span><br><span class="line"><span class="comment">// new Add calls must happen after all previous Wait calls have returned.</span></span><br><span class="line"><span class="comment">// See the WaitGroup example.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span></span> Add(delta <span class="type">int</span>) &#123;</span><br><span class="line">statep, semap := wg.state()</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">_ = *statep <span class="comment">// trigger nil deref early</span></span><br><span class="line"><span class="keyword">if</span> delta &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Synchronize decrements with Wait.</span></span><br><span class="line">race.ReleaseMerge(unsafe.Pointer(wg))</span><br><span class="line">&#125;</span><br><span class="line">race.Disable()</span><br><span class="line"><span class="keyword">defer</span> race.Enable()</span><br><span class="line">&#125;</span><br><span class="line">state := atomic.AddUint64(statep, <span class="type">uint64</span>(delta)&lt;&lt;<span class="number">32</span>)</span><br><span class="line">v := <span class="type">int32</span>(state &gt;&gt; <span class="number">32</span>)</span><br><span class="line">w := <span class="type">uint32</span>(state)</span><br><span class="line"><span class="keyword">if</span> race.Enabled &amp;&amp; delta &gt; <span class="number">0</span> &amp;&amp; v == <span class="type">int32</span>(delta) &#123;</span><br><span class="line"><span class="comment">// The first increment must be synchronized with Wait.</span></span><br><span class="line"><span class="comment">// Need to model this as a read, because there can be</span></span><br><span class="line"><span class="comment">// several concurrent wg.counter transitions from 0.</span></span><br><span class="line">race.Read(unsafe.Pointer(semap))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;sync: negative WaitGroup counter&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> w != <span class="number">0</span> &amp;&amp; delta &gt; <span class="number">0</span> &amp;&amp; v == <span class="type">int32</span>(delta) &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;sync: WaitGroup misuse: Add called concurrently with Wait&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v &gt; <span class="number">0</span> || w == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This goroutine has set counter to 0 when waiters &gt; 0.</span></span><br><span class="line"><span class="comment">// Now there can&#x27;t be concurrent mutations of state:</span></span><br><span class="line"><span class="comment">// - Adds must not happen concurrently with Wait,</span></span><br><span class="line"><span class="comment">// - Wait does not increment waiters if it sees counter == 0.</span></span><br><span class="line"><span class="comment">// Still do a cheap sanity check to detect WaitGroup misuse.</span></span><br><span class="line"><span class="keyword">if</span> *statep != state &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;sync: WaitGroup misuse: Add called concurrently with Wait&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Reset waiters count to 0.</span></span><br><span class="line">*statep = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; w != <span class="number">0</span>; w-- &#123;</span><br><span class="line">runtime_Semrelease(semap, <span class="literal">false</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>wg.Wait()<ul><li>等待计数器减为0，否则会一直等待</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wait blocks until the WaitGroup counter is zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span></span> Wait() &#123;</span><br><span class="line">statep, semap := wg.state()</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">_ = *statep <span class="comment">// trigger nil deref early</span></span><br><span class="line">race.Disable()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">state := atomic.LoadUint64(statep)</span><br><span class="line">v := <span class="type">int32</span>(state &gt;&gt; <span class="number">32</span>)</span><br><span class="line">w := <span class="type">uint32</span>(state)</span><br><span class="line"><span class="keyword">if</span> v == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Counter is 0, no need to wait.</span></span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">race.Enable()</span><br><span class="line">race.Acquire(unsafe.Pointer(wg))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Increment waiters count.</span></span><br><span class="line"><span class="keyword">if</span> atomic.CompareAndSwapUint64(statep, state, state+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> race.Enabled &amp;&amp; w == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Wait must be synchronized with the first Add.</span></span><br><span class="line"><span class="comment">// Need to model this is as a write to race with the read in Add.</span></span><br><span class="line"><span class="comment">// As a consequence, can do the write only for the first waiter,</span></span><br><span class="line"><span class="comment">// otherwise concurrent Waits will race with each other.</span></span><br><span class="line">race.Write(unsafe.Pointer(semap))</span><br><span class="line">&#125;</span><br><span class="line">runtime_Semacquire(semap)</span><br><span class="line"><span class="keyword">if</span> *statep != <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;sync: WaitGroup is reused before previous Wait has returned&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> race.Enabled &#123;</span><br><span class="line">race.Enable()</span><br><span class="line">race.Acquire(unsafe.Pointer(wg))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>wg.Done()<ul><li>完成一个goroutine，等待组的计数器减一</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wg.Done </span></span><br><span class="line"><span class="comment">// Done decrements the WaitGroup counter by one.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span></span> Done() &#123;</span><br><span class="line">wg.Add(<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加了sync后，启动多个goroutine</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// f函数直接结束前，给等待组的计数器-1</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 随机等待n秒</span></span><br><span class="line">time.Sleep(time.Second * time.Duration(rand.Intn(<span class="number">1</span>)))</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 开启goroutine前，先给等待组的计数器+1</span></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> f(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待wg的计数器值减为0</span></span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;main run done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220427120247340.png" class="" title="image-20220427120247340"><blockquote><p>会发现每次打印的数字的顺序都不一致</p><p>这是因为10个<code>goroutine</code>是并发执行的，而<code>goroutine</code>的调度是随机的。</p></blockquote><h3 id="6、goroutine结束时机"><a href="#6、goroutine结束时机" class="headerlink" title="6、goroutine结束时机"></a>6、goroutine结束时机</h3><blockquote><p>goroutine什么时候结束？</p><ul><li>当goroutine对应的函数结束了，那么启动的goroutine就结束了</li><li>在main函数中，当main函数结束了，那么由main函数里启动的goroutine也会结束</li></ul></blockquote><h3 id="7、GMP模型"><a href="#7、GMP模型" class="headerlink" title="7、GMP模型"></a>7、GMP模型</h3><blockquote><p>这块是理论知识，需要多多理解</p><p>参考资料：<a href="https://www.cnblogs.com/sunsky303/p/9705727.html">https://www.cnblogs.com/sunsky303/p/9705727.html</a></p></blockquote><blockquote><p><code>GPM</code>是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统。区别于操作系统调度OS线程。</p><ul><li><code>G</code>很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在P的绑定等信息。</li><li><code>P</code>管理着一组goroutine队列，P里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），P会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他P的队列里抢任务。</li><li><code>M（machine）</code>是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；</li></ul><p>P与M一般也是一一对应的。他们关系是： P管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的P会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M。</p><p>P的个数是通过<code>runtime.GOMAXPROCS</code>设定（最大256），Go1.5版本之后默认为物理线程数。 在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。</p><p>单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，<code>goroutine</code>则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用&#x2F;调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。 另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能。</p></blockquote><h3 id="8、GOMAXPROCS"><a href="#8、GOMAXPROCS" class="headerlink" title="8、GOMAXPROCS"></a>8、GOMAXPROCS</h3><blockquote><ol><li>Go运行时的调度器使用<code>GOMAXPROCS</code>参数来确定需要使用多少个OS线程来同时执行Go代码。<ul><li>默认值是机器上的CPU核心数<ul><li>cpu核心数指的是CPU内核数量,表示一个CPU由多少个核心组成</li><li>例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（GOMAXPROCS是m:n调度中的n）</li></ul></li></ul></li><li>Go语言中可以通过<code>runtime.GOMAXPROCS()</code>函数设置当前程序并发时占用的CPU逻辑核心数。<ul><li>Go1.5版本之前，默认使用的是单核心执行</li><li>Go1.5版本之后，默认使用全部的CPU逻辑核心数</li></ul></li></ol><p><a href="https://blog.csdn.net/zhengyshan/article/details/80641770?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=2">https://blog.csdn.net/zhengyshan/article/details/80641770?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=2</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个任务只有一个逻辑核心，此时是做完一个任务再做另一个任务</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;B:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> a()</span><br><span class="line"><span class="keyword">go</span> b()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;B:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">runtime.GOMAXPROCS(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> a()</span><br><span class="line"><span class="keyword">go</span> b()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、并发控制"><a href="#9、并发控制" class="headerlink" title="9、并发控制"></a>9、并发控制</h3><blockquote><p><a href="https://mp.weixin.qq.com/s/aN6SuLNzeeeMRYyXWD1V8w">https://mp.weixin.qq.com/s/aN6SuLNzeeeMRYyXWD1V8w</a></p></blockquote><h2 id="三、channel"><a href="#三、channel" class="headerlink" title="三、channel"></a>三、channel</h2><h3 id="1、channel介绍"><a href="#1、channel介绍" class="headerlink" title="1、channel介绍"></a>1、channel介绍</h3><blockquote><p>为什么需要设计channel？</p><ul><li>单纯地将函数并发执行是没有意义的，函数与函数间需要交换数据才能体现并发执行函数的意义。</li><li>虽然可以使用共享内存进行数据交换，但是共享内存在不同的<code>goroutine</code>中容易发生竞态问题。</li><li>为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。</li></ul><p>go语言的channel：</p><ul><li><p>Go语言的并发模型是<code>CSP（Communicating Sequential Processes）</code>，提倡<code>通过通信共享内存</code>而不是<code>通过共享内存而实现通信</code></p></li><li><p>推荐使用通过通信共享内存：</p><ul><li>通过通信共享内存，把数据发送给其他人需要使用的人，比如一个管道，这样就不会有问题</li></ul></li><li><p>通过共享内存而实现通信</p><ul><li>使用共享内存来实现数据交换，这个时候就会出现有人读，有人写，就出现了数据竞态问题，这个时候数据交换正常，就要考虑给共享内存里的数据进行加锁，但是这样会有性能损耗，而且会把并行变为串行</li></ul></li><li><p>如果说<code>goroutine</code>是Go程序并发的执行体，<code>channel</code>就是它们之间的连接。</p></li><li><p><code>channel</code>是可以让一个<code>goroutine</code>发送特定值到另一个<code>goroutine</code>的通信机制，这样就实现了通过通信共享内存变量</p></li><li><p>Go 语言中的通道（channel）是一种特殊的类型。</p><ul><li>通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。</li><li>每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型，这一点和切片很像</li></ul></li></ul></blockquote><h3 id="2、channel声明"><a href="#2、channel声明" class="headerlink" title="2、channel声明"></a>2、channel声明</h3><blockquote><p>可以把channel理解为一个管道，遵循先入先出的的顺序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 <span class="keyword">chan</span> 元素类型</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是例子</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="type">int</span> <span class="comment">// 声明一个传递整型的通道</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="type">bool</span> <span class="comment">// 声明一个传递布尔值的通道</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> []<span class="type">int</span> <span class="comment">// 声明一个传递int切片的通道</span></span><br></pre></td></tr></table></figure><h3 id="3、channel类型"><a href="#3、channel类型" class="headerlink" title="3、channel类型"></a>3、channel类型</h3><blockquote><p><code>channel</code>是引用类型，需要初始化才可以使用，也就是开辟空间</p><p>从下面可以看出：</p><ul><li>channel不初始化，它的值就是nil(表示没有开辟内存空间)</li><li>channel的类型是：<code>chan int</code></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义的c1:&lt;nil&gt;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;定义的c1:%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义的c1类型:chan int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;定义的c1类型:%T\n&quot;</span>, c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、channel初始化"><a href="#4、channel初始化" class="headerlink" title="4、channel初始化"></a>4、channel初始化</h3><blockquote><p>channel使用make进行初始化，可以看到初始化以后，c1这个管道就有内存地址，所有channel必须初始化才可以使用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义的c1:&lt;nil&gt;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;定义的c1:%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义的c1类型:chan int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;定义的c1类型:%T\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化的c1:0xc00008c060</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;初始化的c1:%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化的c1类型:chan int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;初始化的c1类型:%T\n&quot;</span>, c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、channel发送值"><a href="#5、channel发送值" class="headerlink" title="5、channel发送值"></a>5、channel发送值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个值给c1这个管道</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="6、channel接收值"><a href="#6、channel接收值" class="headerlink" title="6、channel接收值"></a>6、channel接收值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个值给c1这个管道</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从管道c1里获取值，并用ret变量接收，如果不想接收，可使用匿名变量`_`接收</span></span><br><span class="line">ret := &lt;- c1</span><br></pre></td></tr></table></figure><h3 id="7、channel缓冲区"><a href="#7、channel缓冲区" class="headerlink" title="7、channel缓冲区"></a>7、channel缓冲区</h3><blockquote><p>channel初始化的时候可以不指定缓冲区大小，也可以指定</p><p>区别：</p><ul><li>无缓冲区，必须有人收，才可以发</li><li>有缓冲区，表示可以预存多少个值，当缓冲区存满了，就存不进去了，如果需要存新的值，就需要先从管道拿值，才可以存进行新值</li></ul></blockquote><h4 id="7-1-无缓冲的通道"><a href="#7-1-无缓冲的通道" class="headerlink" title="7.1 无缓冲的通道"></a>7.1 无缓冲的通道</h4><blockquote><p>无缓冲区可以理解为是一个同步的过程，比如打电话给某人，发起打电话，就是给管道发送值，但是没有缓冲区，就表示没有人接，就会一值卡在那里等待，除非有人接了，下面的步骤才可以正常进行</p><p>表示代码在此处阻塞了</p><p>无缓冲的通道既可以用于通信，也可以用于两个 goroutine 的同步</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">c1 &lt;- <span class="number">2</span>  <span class="comment">// 这里就会卡主，夯住了</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;存了值的c1:%v\n&quot;</span>, c1)</span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;取了值的c1:%v\n&quot;</span>, c1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;取出ret:%v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220501214315620.png" class="" title="image-20220501214315620"><blockquote><p>从上面的报错可以看出来：</p><ul><li>所有的goroutine都休眠了，即死锁</li></ul></blockquote><h4 id="7-2-无缓冲区死锁解决"><a href="#7-2-无缓冲区死锁解决" class="headerlink" title="7.2 无缓冲区死锁解决"></a>7.2 无缓冲区死锁解决</h4><blockquote><p>无缓冲区没人接受管道的值，就会出现死锁，死锁以后，如何解决？</p><ul><li>可以在后台启动一个goroutine，来接收给channel发送的值<ul><li>当main函数里的goroutine启动以后，就一直在等待管道里发一个值进来，只要管道发送一个值进行以后，就立马接收</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动一个匿名函数接收管道发送的值，这个goroutine是后台启动的，接收管道的值</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;取出ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">c1 &lt;- <span class="number">2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;存了值的c1:%v\n&quot;</span>, c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220501214754826.png" class="" title="image-20220501214754826"><h4 id="7-3-有缓冲区的通道"><a href="#7-3-有缓冲区的通道" class="headerlink" title="7.3 有缓冲区的通道"></a>7.3 有缓冲区的通道</h4><blockquote><p>通道里放的值应该小一点，如果存string等大存量的值，可以放指针</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line">c1 &lt;- <span class="number">2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1:%vs\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220501215536702.png" class="" title="image-20220501215536702"><h4 id="7-4-缓冲区溢出"><a href="#7-4-缓冲区溢出" class="headerlink" title="7.4 缓冲区溢出"></a>7.4 缓冲区溢出</h4><blockquote><p>当初始化管道时，指定了缓冲区大小，然后给管道里存放值，当超过设置的缓冲区大小时，就存不进去了，就会报错</p><p>因为存满以后，管道就满了，如果没人从管道里取值，就会出现存不进去，代码就卡主的情况</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送第一个值，管道缓冲区占满了</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送第二值时，缓冲区满了，发送值进不去了，就会死锁</span></span><br><span class="line">c1 &lt;- <span class="number">2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1:%vs\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220501215732031.png" class="" title="image-20220501215732031"><h4 id="7-5-通道容量与长度"><a href="#7-5-通道容量与长度" class="headerlink" title="7.5 通道容量与长度"></a>7.5 通道容量与长度</h4><blockquote><p>通道分为：无缓冲的通道、有缓冲的通道</p><p>Go提供内置函数len和cap，可以来查询通道的长度(len)和容量(cap)</p><p>无缓冲的通道的len和cap都是0</p><p>有缓冲的通道的len代表没有被读取的元素个数，cap代表整个通道的容量。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">4</span>)</span><br><span class="line">ch1 ＜— <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(ch1) ==&gt; %v\n&quot;</span>, <span class="built_in">len</span>(ch1))</span><br><span class="line">fmt.Printf(<span class="string">&quot;cap(ch1) ==&gt; %v\n&quot;</span>, <span class="built_in">cap</span>(ch1))</span><br><span class="line"><span class="built_in">close</span>(ch1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230825133121002.png" class="" title="image-20230825133121002"><h3 id="8、channel关闭"><a href="#8、channel关闭" class="headerlink" title="8、channel关闭"></a>8、channel关闭</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// channel关闭，使用内置的close函数关闭通道</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line"><span class="built_in">close</span>(c1)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 塞第一个值</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 塞第二个值</span></span><br><span class="line">c1 &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line"><span class="built_in">close</span>(c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取第一个值</span></span><br><span class="line">&lt;- c1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取第二个值</span></span><br><span class="line">&lt;- c1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再取值</span></span><br><span class="line">ret, ok := &lt;- c1</span><br><span class="line"></span><br><span class="line"><span class="comment">// ret:0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok:false</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ok:%v\n&quot;</span>, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-channel关闭"><a href="#8-1-channel关闭" class="headerlink" title="8.1 channel关闭"></a>8.1 channel关闭</h4><blockquote><ul><li>从通道取值时，可以拿到值和一个布尔值，如果布尔值为true表示值存在，如果布尔值为false，表示值不存在</li><li>取值时通道关闭：<ul><li>当通道缓冲区没有取完时，可以正常取值</li><li>当通道的缓冲区取完时，再从通道获取值，得到的值是通道定义时类型的零值，且返回的布尔值是false，表示值不存在</li></ul></li><li>取值时通道不关闭<ul><li>当通道的缓冲区取完时，再从通道获取值，此时会报错，提示死锁</li><li>可以理解为通道内的值都被取完了，此时还想获取值，就拿不到，代码就阻塞了</li></ul></li></ul></blockquote><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220502002356328.png" class="" title="image-20220502002356328"><h3 id="9、channel练习题"><a href="#9、channel练习题" class="headerlink" title="9、channel练习题"></a>9、channel练习题</h3><blockquote><p>练习题</p><ul><li>步骤1：启动一个goroutine生成100个数发给c1</li><li>步骤2：启动一个goroutine，从c1中取值，计算其平方放到c2中</li><li>步骤3：在main函数中取值，打印出来</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义等待组</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤1：生成100个数发给c1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getChData</span><span class="params">(c1 <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++&#123;</span><br><span class="line"><span class="comment">// 给c1发送值</span></span><br><span class="line">c1 &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要关闭c1通道</span></span><br><span class="line"><span class="built_in">close</span>(c1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤2：从c1中取值，计算其平方放到c2中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recvChData</span><span class="params">(c1, c2 <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;- c1</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">c2 &lt;- v * v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要关闭c2通道</span></span><br><span class="line"><span class="built_in">close</span>(c2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义和初始化c1</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义和初始化c2</span></span><br><span class="line"><span class="keyword">var</span> c2 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给第一个goroutine设置等待组计数器+1</span></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> getChData(c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给第二个goroutine设置等待组计数器+1</span></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> recvChData(c1, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤3：在main函数中取值，打印出来</span></span><br><span class="line"><span class="keyword">for</span> ret := <span class="keyword">range</span> c2&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;c2中的ret: %v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待所有计数器减为0</span></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、单向通道"><a href="#10、单向通道" class="headerlink" title="10、单向通道"></a>10、单向通道</h3><blockquote><p>当一个通道只允许发送值，或者只允许接收值时，就可以使用单向通道</p><p>比如通道作为函数的传参，只允许做一件事</p><p>单向通道快速理解为：”前接后发“</p><p>符号<code>&lt;-</code>在chan前，表示只能接收值，也就是只能从通道里取值</p><p>符号<code>&lt;-</code>在chan后，表示只能发送值，也就是只能给通道发送值</p><p>注意：</p><ul><li>单向通道不是在通道初始化(make函数)的时候定义</li><li>而是在通道定义(使用var关键字)的时候使用</li></ul></blockquote><h4 id="10-1-只允许通道发送值"><a href="#10-1-只允许通道发送值" class="headerlink" title="10.1 只允许通道发送值"></a>10.1 只允许通道发送值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只允许通道发送值，表示不能接收值，只能发送</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(c1 <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义和初始化c1，只允许发送值给c1</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span>&lt;- <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给c1发送值</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从c1取值，就会报错，提示从一个只读通道接收值</span></span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220502003436158.png" class="" title="image-20220502003436158"><h4 id="10-2-只允许通道接收值"><a href="#10-2-只允许通道接收值" class="headerlink" title="10.2 只允许通道接收值"></a>10.2 只允许通道接收值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只允许通道接收值，表示只能接收，不能发送值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(c2 &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义和初始化c1，只允许通道接收值c1</span></span><br><span class="line"><span class="keyword">var</span> c1 &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给c1发送值，但是c1是一个只接收的通道，所以到这里会报错</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220502003746091.png" class="" title="image-20220502003746091"><h3 id="11、channel使用报错汇总"><a href="#11、channel使用报错汇总" class="headerlink" title="11、channel使用报错汇总"></a>11、channel使用报错汇总</h3><blockquote><p><a href="https://www.jianshu.com/p/b886c62e7eb8?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/b886c62e7eb8?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p><p><a href="https://www.jianshu.com/p/cfcc33df4fdb">https://www.jianshu.com/p/cfcc33df4fdb</a></p></blockquote><h4 id="11-1-channel存值非指定类型-报错类型"><a href="#11-1-channel存值非指定类型-报错类型" class="headerlink" title="11.1 channel存值非指定类型(报错类型)"></a>11.1 channel存值非指定类型(报错类型)</h4><blockquote><p>当给channel存的值不是定义channel时的类型，就会报错</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// channel本来是int类型，但是发送了一个string，就会报错</span></span><br><span class="line">c1 &lt;- <span class="string">&quot;sam&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1:%vs\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">ret := &lt;- c1</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220501220020185.png" class="" title="image-20220501220020185"><h4 id="11-2-channel关闭后不能再关闭"><a href="#11-2-channel关闭后不能再关闭" class="headerlink" title="11.2 channel关闭后不能再关闭"></a>11.2 channel关闭后不能再关闭</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel关闭后不能再关闭，会引发<span class="built_in">panic</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义和初始化c1，只允许通道接收值c1</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">c1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给c1发送值</span></span><br><span class="line">c1 &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次关闭</span></span><br><span class="line"><span class="built_in">close</span>(c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1关闭后再关闭c1，会报错</span></span><br><span class="line"><span class="built_in">close</span>(c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220502004944710.png" class="" title="image-20220502004944710"><h3 id="12、channel异常汇总"><a href="#12、channel异常汇总" class="headerlink" title="12、channel异常汇总"></a>12、channel异常汇总</h3><blockquote><p>下表是channel的异常汇总</p></blockquote><table><thead><tr><th>channel</th><th>nil</th><th>非空</th><th>为空</th><th>满载</th><th>没满</th></tr></thead><tbody><tr><td>接收值动作</td><td>阻塞</td><td>接收值正常</td><td>阻塞</td><td>接收值正常</td><td>接收值正常</td></tr><tr><td>发送值动作</td><td>阻塞</td><td>发送值正常</td><td>发送值正常</td><td>阻塞</td><td>发送值正常</td></tr><tr><td>关闭通道</td><td>panic</td><td>关闭成功以后，读完缓冲区的数据，再读取值就是通道类型的零值</td><td>关闭成功以后，此时缓冲区的数据为空，再读取值就是通道类型的零值</td><td>关闭成功以后，读完缓冲区的数据，再读取值就是通道类型的零值</td><td>关闭成功以后，读完缓冲区的数据，再读取值就是通道类型的零值</td></tr></tbody></table><h3 id="13、工作池理解channel"><a href="#13、工作池理解channel" class="headerlink" title="13、工作池理解channel"></a>13、工作池理解channel</h3><blockquote><p>工作池用来巩固通道的理解</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="type">int</span>, result <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> jobs&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;workerId: %d, start job jobVal:%d\n&quot;</span>, id, j)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;workerId: %d, end job jobval:%d\n&quot;</span>, id, j)</span><br><span class="line">result &lt;- j * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动3个goroutine执行任务</span></span><br><span class="line"><span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++&#123;</span><br><span class="line"><span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动5个任务，表示给jobs通道里塞了5个值</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++&#123;</span><br><span class="line">jobs &lt;- j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭jobs通道</span></span><br><span class="line"><span class="built_in">close</span>(jobs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">5</span>; a++&#123;</span><br><span class="line">&lt;- results</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;res=%v\n&quot;, res)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、select使用"><a href="#14、select使用" class="headerlink" title="14、select使用"></a>14、select使用</h3><blockquote><p><code>select</code>可以同时响应多个通道的操作，select的使用类似由于switch语句：</p><ul><li><p>select语句会有一些case分支和default分支</p></li><li><p>每个case会对应一个通道的操作过程，比如接收或发送</p></li><li><p>select会一直等待，当case语句执行完毕，就会执行case语句里的代码</p></li><li><p>select语句能提高代码可读性，如果多个case同时满足，select会随机选择一个，对于没有case的select{}会一直等待中</p></li><li><p>select可以在外面套个循环，表示循环取值</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select语法</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> data := &lt;-ch2:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;- ch1:</span><br><span class="line">fmt.Printf(<span class="string">&quot;x=%v\n&quot;</span>, x)</span><br><span class="line"><span class="keyword">case</span> ch1 &lt;- i:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;default operate&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/golang/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220502142538484.png" class="" title="image-20220502142538484"><h2 id="四、Context"><a href="#四、Context" class="headerlink" title="四、Context"></a>四、Context</h2><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础编程</title>
      <link href="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>高质量代码：不是越少越好，而是让刚入门的小白也能看懂的才是优质代码</p></blockquote><h2 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h2><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;sam&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>变量定义的过程：</p><ul><li>在内存中开辟一片内存空间，将<code>name</code>这个变量的值<code>name</code>存到开辟的内存空间中，将name绑定到<code>sam</code>这个值上，所以<code>name</code>就是<code>sam</code>这个值的引用标签</li><li>变量等号左侧是变量名，变量右侧等号是具体的值才算产生新值，开辟新的内存空间来存值</li><li>x&#x3D;10在内存中的理解<ul><li>栈区：存放的是变量名和内存地址的对应关系，简单理解为变量名存了内存地址</li><li>堆区：存放的是变量名</li></ul></li></ul></blockquote><h4 id="1-1-变量的三大特性"><a href="#1-1-变量的三大特性" class="headerlink" title="1.1 变量的三大特性"></a>1.1 变量的三大特性</h4><blockquote><ul><li>id<ul><li>反映的是变量值的内存地址，是根据变量值计算出来的一串数字，也可以理解为内存地址id</li></ul></li><li>type<ul><li>变量的类型，比如:整型、浮点型、字符串等等</li></ul></li><li>值<ul><li>就是变量值</li></ul></li></ul></blockquote><h4 id="1-2-is和-x3D-x3D"><a href="#1-2-is和-x3D-x3D" class="headerlink" title="1.2 is和&#x3D;&#x3D;"></a>1.2 is和&#x3D;&#x3D;</h4><blockquote><ul><li>is<ul><li>比较的是左右两个值身份id是否相同</li></ul></li><li>&#x3D;&#x3D;<ul><li>比较左右两个值是否相同，是表面上的值，也就是可以看到的值</li></ul></li><li>python解释器在启动时会在内存中加载一个<code>小整数池</code>，在这个整数池内定义的所有变量的id都一样，小整数池范围是:<code>-5~256</code>，这样提高了访问速度，没必要每次赋值都在内存开辟内存空间，这是python自己的优化</li><li>在<code>pycharm</code>中会出现<code>-5~256</code>这个范围外的id也会一样，这是因为<code>pycharm</code>自己做的优化，会将更大范围的整数池加载到内存，这也是<code>pycharm</code>占用大量内存的原因之一</li><li>那到底应该以python解释器的范围为准还是以<code>pycharm</code>为准呢？肯定是以python解释器为准，因为最终运行python代码肯定是用python解释器来运行的，<code>pycharm</code>只是开发工具，将python代码部署到服务器上肯定也是python解释器来运行的</li><li>另外python解释器也有<code>小字符串池</code>概念，也就是在小字符串池的字符串id一样</li></ul></blockquote><h4 id="1-3-常量"><a href="#1-3-常量" class="headerlink" title="1.3 常量"></a>1.3 常量</h4><blockquote><ul><li><p>python没有常量的概念</p></li><li><p>约定成俗的是<code>变量名全大写</code>就是常量</p></li></ul></blockquote><h3 id="2、str字符串"><a href="#2、str字符串" class="headerlink" title="2、str字符串"></a>2、<code>str</code>字符串</h3><blockquote><p>字符串的拼接，使用+号，但是这种形式效率比较低，不推荐使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;sam&quot;</span></span><br><span class="line">sex = <span class="string">&quot;male&quot;</span></span><br><span class="line">info = name + sex</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><h3 id="3、bool布尔值"><a href="#3、bool布尔值" class="headerlink" title="3、bool布尔值"></a>3、<code>bool</code>布尔值</h3><blockquote><ul><li>只有两个值，常用于条件判断<ul><li>true：真</li><li>false：假</li></ul></li></ul></blockquote><h3 id="4、list列表"><a href="#4、list列表" class="headerlink" title="4、list列表"></a>4、list列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;jam&quot;</span>, <span class="string">&quot;tom&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user_list:<span class="subst">&#123;user_list&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5、tuple元组"><a href="#5、tuple元组" class="headerlink" title="5、tuple元组"></a>5、tuple元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_tuple = (<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;jam&quot;</span>, <span class="string">&quot;tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user_tuple:<span class="subst">&#123;user_tuple&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6、字典"><a href="#6、字典" class="headerlink" title="6、字典"></a>6、字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user_dict = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="string">&quot;hobby&quot;</span>: [<span class="string">&quot;feet&quot;</span>, <span class="string">&quot;beet&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;user_dict:<span class="subst">&#123;user_dict&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7、垃圾回收机制"><a href="#7、垃圾回收机制" class="headerlink" title="7、垃圾回收机制"></a>7、垃圾回收机制</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/108683483">https://zhuanlan.zhihu.com/p/108683483</a></p></blockquote><blockquote><ul><li><p>概念</p><ul><li>垃圾回收机制(GC)是python自带的内存管理机制，用来回收不可用的变量值所占用的内存空间</li></ul></li><li><p>为什么要有垃圾回收</p><ul><li>程序运行过程中会申请大量的内存空间，而对于一些无用的内存空间如果不及时清理的话会导致内存使用殆尽（内存溢出），导致程序崩溃，因此管理内存是一件重要且繁杂的事情，而python解释器自带的垃圾回收机制把程序员从繁杂的内存管理中解放出来。</li></ul></li><li><p>原理</p><ul><li>Python的GC模块主要运用了“引用计数”（reference counting）来跟踪和回收垃圾。在引用计数的基础上，还可以通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用的问题，并且通过“分代回收”（generation collection）以空间换取时间的方式来进一步提高垃圾回收的效率。</li></ul></li><li><p>三个特性：</p><ul><li>引用计数</li><li>标记清除</li><li>分代回收</li></ul></li></ul></blockquote><h4 id="1-1-引用计数"><a href="#1-1-引用计数" class="headerlink" title="1.1 引用计数"></a>1.1 引用计数</h4><blockquote><ul><li><p>直接引用</p><ul><li>指的是从栈区出发直接引用到的内存地址。</li></ul></li><li><p>间接引用</p></li><li><p>指的是从栈区出发引用到堆区后，再通过进一步引用才能到达的内存地址。</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表本身被变量名l2直接引用，包含的元素被列表间接引用</span></span><br><span class="line">l2 = [<span class="number">20</span>, <span class="number">30</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 值10被变量名x直接引用</span></span><br><span class="line">x = <span class="number">10</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表本身被变量名l1直接引用，包含的元素被列表间接引用</span></span><br><span class="line">l1 = [x, l2]  </span><br></pre></td></tr></table></figure><h4 id="1-2-标记清除"><a href="#1-2-标记清除" class="headerlink" title="1.2 标记清除"></a>1.2 标记清除</h4><blockquote><p>是为了解决循环引用的缺陷，内存泄露（内存一直被占用无法释放）</p><ul><li>标记<ul><li>通俗地讲就是：<br>栈区相当于“根”，凡是从根出发可以访达（直接或间接引用）的，都称之为“有根之人”，有根之人当活，无根之人当死。</li><li>具体地：标记的过程其实就是，遍历所有的GC Roots对象(栈区中的所有内容或者线程都可以作为GC Roots对象），然后将所有GC Roots的对象可以直接或间接访问到的对象标记为存活的对象，其余的均为非存活对象，应该被清除。</li></ul></li><li>清除<ul><li>将遍历堆中所有的对象，将没有标记的对象全部清除掉。</li></ul></li></ul></blockquote><h4 id="1-3-分代回收"><a href="#1-3-分代回收" class="headerlink" title="1.3  分代回收"></a>1.3  分代回收</h4><blockquote><ul><li><p>主要是为了提高循环引用清除的效率问题</p></li><li><p>分代</p><ul><li>在历经多次扫描的情况下，都没有被回收的变量，gc机制就会认为，该变量是常用变量，gc对其扫描的频率会降低，具体实现原理如下：</li><li>分代指的是根据存活时间来为变量划分不同等级（也就是不同的代）</li><li>新定义的变量，放到新生代这个等级中，假设每隔1分钟扫描新生代一次，<code>如果发现变量依然被引用</code>，那么该对象的权重（权重本质就是个整数）加一，当变量的权重大于某个设定得值（假设为3），会将它移动到更高一级的青春代，青春代的gc扫描的频率低于新生代（扫描时间间隔更长），假设5分钟扫描青春代一次，这样每次gc需要扫描的变量的总个数就变少了，节省了扫描的总时间，接下来，青春代中的对象，也会以同样的方式被移动到老年代中。也就是等级（代）越高，被垃圾回收机制扫描的频率越低</li></ul></li><li><p>回收</p><ul><li>回收依然是使用引用计数作为回收的依据</li><li>垃圾回收机制是在清理垃圾&amp;释放内存的大背景下，允许分代回收以极小部分垃圾不会被及时释放为代价，以此换取引用计数整体扫描频率的降低，从而提升其性能，这是一种以空间换时间的解决方案目录</li></ul></li></ul></blockquote><h3 id="8、编解码"><a href="#8、编解码" class="headerlink" title="8、编解码"></a>8、编解码</h3><blockquote><p><a href="https://www.cnblogs.com/jin-xin/articles/10577131.html#_label14">https://www.cnblogs.com/jin-xin/articles/10577131.html#_label14</a></p></blockquote><blockquote><ul><li>unicode转换为bytes称为编码,也就是encode</li><li>bytes转化为unicode称为解码,也就是decode</li><li>数据在内存中是以unicode编码形式存在，但是当数据用于网络传输或者存储到硬盘，必须以非unicode编码存储（utf-8,gbk等格式，这些格式的编码方式是bytes(字节类型)），数据不止字符串、代码等等都是数据</li><li>用文件编辑器（word，wps,等）编辑文件的时候，从文件将你的数据（此时你的数据是非Unicode（可能是UTF-8，也可能是gbk，这个编码取决于你的编辑器设置））字符被转换为Unicode字符读到内存里，进行相应的编辑，编辑完成后，保存的时候再把Unicode转换为非Unicode（UTF-8，GBK 等）保存到文件。</li></ul></blockquote><h4 id="1-1-str类型"><a href="#1-1-str类型" class="headerlink" title="1.1 str类型"></a>1.1 str类型</h4><blockquote><ul><li>内部编码：unicode</li><li>内容示例<ul><li>英文： ‘sam’</li><li>中文： ‘中国’</li></ul></li><li>组成单位: 字符</li><li>弊端<ul><li>Unicode编码的数据不可以存储到磁盘中，也不能进行网络传输</li></ul></li></ul></blockquote><h4 id="1-2-bytes类型"><a href="#1-2-bytes类型" class="headerlink" title="1.2 bytes类型"></a>1.2 bytes类型</h4><blockquote><ul><li>内部编码：可指定编码（除Unicode之外），比如UTF-8，GBK 等都是bytes字节类型编码</li><li>内容示例<ul><li>英文：b’alex’</li><li>中文：b’\xe4\xb8\xad\xe5\x9b\xbd’</li></ul></li><li>组成单位：字节</li><li>bytes（特殊的字符类型，内部编码： 非unicode，比如：utf-8，gbk）：常用来存储到磁盘或者进行网络传输</li></ul></blockquote><h4 id="1-3-编码转换"><a href="#1-3-编码转换" class="headerlink" title="1.3 编码转换"></a>1.3 编码转换</h4><blockquote><ul><li>bytes类型也称作字节文本，他的主要用途就是网络的数据传输，与数据存储。那么有人问，bytes类型既然与str差不多，而且操作方法也很相似，就是在字符串前面加个b不就行了，python为什么还要这两个数据类型呢？我只用bytes不行么？<ul><li>str类型的数据想要存储到文件或者传输出去，那么直接是不可以的，需要将str数据转化成bytes数据就可以了</li></ul></li></ul></blockquote><blockquote><ul><li>encode：<ul><li>编码，将 str 转化成 bytes类型</li><li>即unicode —编码—&gt; 非unicode（utf-8、gbk等）</li><li>然后进行存储到磁盘或者进行网络传输</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encode称作编码:将 str 转化成 bytes类型</span></span><br><span class="line">s1 = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">b1 = s1.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 转化成utf-8的bytes类型</span></span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># 中国</span></span><br><span class="line"><span class="built_in">print</span>(b1)  <span class="comment"># b&#x27;\xe4\xb8\xad\xe5\x9b\xbd&#x27;</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">b1 = s1.encode(<span class="string">&#x27;gbk&#x27;</span>)  <span class="comment"># 转化成gbk的bytes类型</span></span><br><span class="line"><span class="built_in">print</span>(s1)  <span class="comment"># 中国</span></span><br><span class="line"><span class="built_in">print</span>(b1)  <span class="comment"># b&#x27;\xd6\xd0\xb9\xfa&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>decode：<ul><li>解码，将bytes转化成str类型</li><li>即非unicode（utf-8、gbk等） —解码—&gt; unicode</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是utf-8编码bytes类型的中国,一个中文占了3个字节</span></span><br><span class="line">b1 =  <span class="string">b&#x27;\xe4\xb8\xad\xe5\x9b\xbd&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是gbk编码bytes类型的中国，一个中文占了2个字节</span></span><br><span class="line">b2 =  <span class="string">b&#x27;\xd6\xd0\xb9\xfa&#x27;</span>   </span><br></pre></td></tr></table></figure><blockquote><ul><li>不同编码方式的bytes如何相互转化<ul><li>不同编码方式之间不能直接相互转化，比如gbk-&gt;utf-8，但是可以间接的进行转化，使用unicode作为中间编码</li></ul></li><li>如何将gbk转化为utf-8编码的bytes呢？<ul><li>方法：可以借助unicode编码</li><li>过程：gbk(bytes类型)–&gt;解码–&gt;unicode–编码–&gt;utf-8(bytes类型)</li><li>unicode转换为bytes称为编码,也就是encode</li><li>bytes转化为unicode称为解码,也就是decode</li><li>需要遵循的一点，原始字节数据的编码格式是什么，编解码的格式就必须是什么格式</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是gbk编码bytes类型的&quot;中国&quot;，一个中文占了2个字节</span></span><br><span class="line">b1 = <span class="string">b&#x27;\xd6\xd0\xb9\xfa&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b1,<span class="built_in">type</span>(b1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将b1(bytes)--解码(decode)--&gt;unicode</span></span><br><span class="line">s = b1.decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s,<span class="built_in">type</span>(s)) <span class="comment"># s=中国，type(s)=&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将b1(unicode)--编码(encode)--&gt;utf-8(bytes)</span></span><br><span class="line">b2 = s.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b2,<span class="built_in">type</span>(b2)) <span class="comment"># b2=b&#x27;\xe4\xb8\xad\xe5\x9b\xbd&#x27; ,type(b2)=&lt;class &#x27;bytes&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9、运算符"><a href="#9、运算符" class="headerlink" title="9、运算符"></a>9、运算符</h3><h4 id="1-1-算数运算符"><a href="#1-1-算数运算符" class="headerlink" title="1.1 算数运算符"></a>1.1 算数运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增量赋值</span></span><br><span class="line">age += <span class="number">1</span> <span class="comment"># age = age + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉赋值</span></span><br><span class="line">x,y = y,x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链式赋值</span></span><br><span class="line">x,y,z = <span class="number">10</span>,<span class="number">11</span>,<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压赋值</span></span><br><span class="line">x,y,*_,z = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment"># x = 1</span></span><br><span class="line"><span class="comment"># y = 2</span></span><br><span class="line"><span class="comment"># z = 6</span></span><br><span class="line"><span class="comment"># *_代表3,4,5这三个值</span></span><br></pre></td></tr></table></figure><h4 id="1-2-逻辑运算符"><a href="#1-2-逻辑运算符" class="headerlink" title="1.2 逻辑运算符"></a>1.2 逻辑运算符</h4><blockquote><p><code>not</code>  <code>and</code>  <code>or</code></p><p>优先级: not &gt; and &gt; or</p></blockquote><h4 id="1-3-成员运算符和身份运算符"><a href="#1-3-成员运算符和身份运算符" class="headerlink" title="1.3 成员运算符和身份运算符"></a>1.3 成员运算符和身份运算符</h4><blockquote><ul><li><p>成员运算符</p><ul><li><p>in </p><ul><li><p>判断元素是否存在于列表</p></li><li><p>&#96;&#96;&#96;python<br>111 in  [1,2,3,4,111]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 判断元素是否存在于字典，但是只能判断key，不能判断value</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  &quot;name&quot; in &#123;&quot;name&quot;:&quot;sam&quot;,age:18&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>not in</p><ul><li>判断元素不存在于列表</li></ul></li></ul></li><li><p>身份运算符</p><ul><li>is  判断两个值的内存地址是否相同</li></ul></li></ul></blockquote><h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><h3 id="1、if-else判断"><a href="#1、if-else判断" class="headerlink" title="1、if-else判断"></a>1、if-else判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">20</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;age 大于 20&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;age 小于 20&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、if-elif-else判断"><a href="#2、if-elif-else判断" class="headerlink" title="2、if-elif-else判断"></a>2、if-elif-else判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">20</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;age 大于 20&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age == <span class="number">19</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;age 等于 20&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;age 小于 20&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3、for循环"><a href="#3、for循环" class="headerlink" title="3、for循环"></a>3、for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20230217133254541.png" class="" title="image-20230217133254541"><h3 id="4、while循环"><a href="#4、while循环" class="headerlink" title="4、while循环"></a>4、while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> nums &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;num ==&gt; <span class="subst">&#123;nums&#125;</span>&quot;</span>)</span><br><span class="line">    nums -= <span class="number">1</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20230217133430162.png" class="" title="image-20230217133430162"><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><h3 id="1、为什么要用函数"><a href="#1、为什么要用函数" class="headerlink" title="1、为什么要用函数"></a>1、为什么要用函数</h3><p>1.1、先来看这样一个例子：自己实现Python内置的len方法</p><blockquote><p>len() 是python内置的方法，用来计算列表、元组、字符串的元素个数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;ilovepython&quot;</span></span><br><span class="line">count1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    count1 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count1) <span class="comment"># count1=11</span></span><br><span class="line"></span><br><span class="line">s2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">count2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">    count2 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count2) <span class="comment"># count2=5</span></span><br></pre></td></tr></table></figure><p>1.2、使用for循环遍历字符串、列表、元组，然后使用一个count变量来递增统计循环的次数，循环结束也就拿到了字符串、列表、元素的元素个数，但只要计算一个字符串长度就要写一个for循环，代码被大量重复使用，我们肯定不希望这样来写代码，所以引入了函数概念</p><p>1.3、函数：以功能(完成一件事)为目的，比如登录、注册、len等等，一个函数就是一个功能，随调随用，减少了代码的重复性，增强了代码的可读性</p><p>1.4、将上述自己实现len方法写成函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">len_ly</span>(<span class="params">seqeue</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> seqeue:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;ilovepython&quot;</span></span><br><span class="line">s3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(len_ly(s)) <span class="comment"># 11</span></span><br><span class="line"><span class="built_in">print</span>(len_ly(s3)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>1.5、名字叫len_ly的这个函数就实现随调随用</p><h3 id="2、函数的结构与调用"><a href="#2、函数的结构与调用" class="headerlink" title="2、函数的结构与调用"></a>2、函数的结构与调用</h3><p>2.1、函数的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    结构：</span></span><br><span class="line"><span class="string">        def：关键字，定义函数，以冒号结束</span></span><br><span class="line"><span class="string">        test：函数名，与变量设置相同，具有描述性，</span></span><br><span class="line"><span class="string">        print(&quot;test func&quot;)：函数体，必须以4个空格缩进，函数中尽量不要出现print</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test func&quot;</span>)</span><br></pre></td></tr></table></figure><p>2.2、函数什么时候执行？</p><blockquote><p>函数名：指向的是函数的内存地址</p><p>当遇到  函数名+() ，函数才会被执行!!!，并且是从上到下依次执行函数里的所有内容</p></blockquote><h3 id="3、return函数的返回值"><a href="#3、return函数的返回值" class="headerlink" title="3、return函数的返回值"></a>3、return函数的返回值</h3><p>3.1、return的作用</p><blockquote><ol><li>return 用来将函数的值返回，在函数中遇到return会直接结束函数运行</li><li>return将数据返回给函数的执行者，执行者:函数名+() 表示运行函数</li><li>return单个元素时，以单个元素返回给函数的执行者</li><li>return多个元素时，是以元组形式返回给函数的执行者</li></ol></blockquote><p>3.2、代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    b = <span class="number">4</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">res = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;res=<span class="subst">&#123;res&#125;</span>&#x27;</span>) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>3.3、return的其他注意点</p><blockquote><ol><li>函数里不写return，默认函数返回值就是None</li><li>函数里写了return，但是后面不跟任何元素，返回的是None，其实return作用就是终止函数</li></ol></blockquote><h3 id="4、形参、关键字参数、默认参数"><a href="#4、形参、关键字参数、默认参数" class="headerlink" title="4、形参、关键字参数、默认参数"></a>4、形参、关键字参数、默认参数</h3><p>4.1、函数的形参、实参</p><blockquote><p>形参：函数定义时接收的参数形式</p><p>实参：函数执行传的参数</p></blockquote><p>4.2、位置参数</p><blockquote><p>从左至右，一 一对应来传参</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">name,age,sex</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sex=&quot;</span>,sex)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;xm&quot;</span>,<span class="number">18</span>,<span class="string">&quot;boy&quot;</span>)</span><br><span class="line"><span class="comment"># name= xm</span></span><br><span class="line"><span class="comment"># age= 18</span></span><br><span class="line"><span class="comment"># sex= man</span></span><br></pre></td></tr></table></figure><p>4.3、关键字参数</p><blockquote><p>以键值对的方式传参，传参的顺序可以打乱，但是必须参数名必须一 一对应</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">name,age,sex</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sex=&quot;</span>,sex)</span><br><span class="line"></span><br><span class="line">test(name=<span class="string">&quot;xl&quot;</span>,age=<span class="number">28</span>,sex=<span class="string">&quot;girl&quot;</span>)</span><br><span class="line"><span class="comment"># #name= xl</span></span><br><span class="line"><span class="comment"># age= 28</span></span><br><span class="line"><span class="comment"># sex= girl</span></span><br></pre></td></tr></table></figure><p>4.4、默认参数</p><blockquote><p>给函数定义的形参设置一个值，作为默认值，有默认参数的函数在函数执行时可以不需要对默认参数进行传参，当然给默认参数传了参，会将默认参数的值覆盖掉</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">name,age,sex=<span class="string">&quot;man&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sex=&quot;</span>,sex)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;xm&quot;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment"># name= xm</span></span><br><span class="line"><span class="comment"># age= 18</span></span><br><span class="line"><span class="comment"># sex= man</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;xl&quot;</span>,<span class="number">28</span>,sex=<span class="string">&quot;girl&quot;</span>)</span><br><span class="line"><span class="comment"># #name= xl</span></span><br><span class="line"><span class="comment"># age= 28</span></span><br><span class="line"><span class="comment"># sex= girl</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.6、混合传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">name,age,sex</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age=&quot;</span>,age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sex=&quot;</span>,sex)</span><br><span class="line"></span><br><span class="line">test(name=<span class="string">&quot;xm&quot;</span>,<span class="number">18</span>,sex=<span class="string">&quot;boy&quot;</span>)</span><br></pre></td></tr></table></figure><p>4.7、混合传参的注意点</p><blockquote><p>对于混合传参(关键字参数和位置参数一起传参)，关键字参数一定要在位置参数的后面，则会报错</p></blockquote><h3 id="5、万能参数-args和-kwargs"><a href="#5、万能参数-args和-kwargs" class="headerlink" title="5、万能参数:*args和**kwargs"></a>5、万能参数:*args和**kwargs</h3><p>5.1、可以接收所有的实参，就是万能参数，也叫可变参数，比如: *args,**kwargs</p><p>5.2、*的魔法使用</p><blockquote><p>函数定义时： 代表聚合</p><p>合数调用时：代表打散</p></blockquote><p>5.3、*args：表示可以接收任意个数的位置参数，接收的参数之间以逗号隔开</p><blockquote><ol><li>args 约定成俗的叫法，换成其他名字也没有问题，只不过用的多了都叫这个名字</li><li>一个星号(*)表示聚合，将所有的位置参数聚合成一个元组，赋值给了args</li><li>传入一个列表进去会被当成元组的一个元素</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args=&quot;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args type:&quot;</span>,<span class="built_in">type</span>(args))</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># args= (1, 2, 3)</span></span><br><span class="line"><span class="comment"># args type: &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">test([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) </span><br><span class="line"><span class="comment"># 传入一个列表进去会被当成元组的一个元素</span></span><br><span class="line"><span class="comment"># args= ([1, 2, 3],)</span></span><br><span class="line"><span class="comment"># args type: &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>5.4、**kwargs：</p><blockquote><ol><li>kwargs 约定成俗的叫法，换成其他名字也没有问题，只不过用的多了都叫这个名字</li><li>两个星号(**)表示聚合，将所有的关键字参数聚合成一个字典，赋值给了kwargs</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs=&quot;</span>,kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs type:&quot;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line"></span><br><span class="line">test(sex=<span class="string">&quot;boy&quot;</span>,name=<span class="string">&quot;liming&quot;</span>)</span><br><span class="line"><span class="comment"># kwargs= &#123;&#x27;sex&#x27;: &#x27;boy&#x27;, &#x27;name&#x27;: &#x27;liming&#x27;&#125;</span></span><br><span class="line"><span class="comment"># kwargs type: &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>5.5、正向传参：*args和**kwargs混合使用，位置参数和关键字参数一 一传入到test函数就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args=&quot;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args type:&quot;</span>,<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs=&quot;</span>,kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs type:&quot;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,sex=<span class="string">&quot;boy&quot;</span>,name=<span class="string">&quot;liming&quot;</span>)</span><br><span class="line"><span class="comment"># args= (1, 2, 3)</span></span><br><span class="line"><span class="comment"># args type: &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># kwargs= &#123;&#x27;sex&#x27;: &#x27;boy&#x27;, &#x27;name&#x27;: &#x27;liming&#x27;&#125;</span></span><br><span class="line"><span class="comment"># kwargs type: &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>5.6、逆向传参：在程序已有列表、元祖、字典等对象的前提下，把他们的元素拆开传给函数，逆向参数收集需要在传入的列表、元组参数之前添加一个星号 ，在字典参数之前添加两个星号，不管是一颗星还是两颗星都表示打散传入的参数所有元素，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args=&quot;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args type:&quot;</span>,<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">test1(*a)</span><br><span class="line"><span class="comment"># args= (4, 5, 6)</span></span><br><span class="line"><span class="comment"># args type: &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">test1(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># args= (1, 2, 3)</span></span><br><span class="line"><span class="comment"># args type: &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs=&quot;</span>,kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs type:&quot;</span>,<span class="built_in">type</span>(kwargs))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">b=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lixiao&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">test2(**b)</span><br><span class="line"><span class="comment"># kwargs= &#123;&#x27;name&#x27;: &#x27;lixiao&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="comment"># kwargs type: &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line">    </span><br><span class="line">test2(**&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lixiao&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment"># kwargs= &#123;&#x27;name&#x27;: &#x27;lixiao&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="comment"># kwargs type: &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、函数的名称空间、作用域"><a href="#6、函数的名称空间、作用域" class="headerlink" title="6、函数的名称空间、作用域"></a>6、函数的名称空间、作用域</h3><blockquote><p><a href="https://www.cnblogs.com/jin-xin/articles/10839389.html">名称空间解释</a></p></blockquote><p>6.1、全局名称空间：</p><pre><code>     在python解释器开始执行之后, 就会在内存中开辟一个空间, 每当遇到一个变量的时候, 就把变量名和值之间的关系记录下来, 但是当遇到函数定义的时候, 解释器只是把函数名读入内存, 表示这个函数存在了, 至于函数内部的变量和逻辑, 解释器是不关心的. 也就是说一开始的时候函数只是加载进来, 仅此而已, 只有当函数被调用和访问的时候, 解释器才会根据函数内部声明的变量来进行开辟变量的内部空间. 随着函数执行完毕, 这些函数内部变量占用的空间也会随着函数执行完毕而被清空.      我们首先回忆一下Python代码运行的时候遇到函数是怎么做的，从Python解释器开始执行之后，就在内存中开辟里一个空间，每当遇到一个变量的时候，就把变量名和值之间对应的关系记录下来，但是当遇到函数定义的时候，解释器只是象征性的将函数名读如内存，表示知道这个函数存在了，至于函数内部的变量和逻辑，解释器根本不关心。      等执行到函数调用的时候，Python解释器会再开辟一块内存来储存这个函数里面的内容，这个时候，才关注函数里面有哪些变量，而函数中的变量回储存在新开辟出来的内存中，函数中的变量只能在函数内部使用，并且会随着函数执行完毕，这块内存中的所有内容也会被清空。</code></pre><p>​我们给这个‘存放名字与值的关系’的空间起了一个名字——-命名空间。</p><p>​代码在运行伊始，创建的存储“变量名与值的关系”的空间叫做全局命名空间；</p><p>​在函数的运行中开辟的临时的空间叫做局部命名空间也叫做临时名称空间。</p><p>​现在我们知道了，py文件中，存放变量与值的关系的一个空间叫做全局名称空间，而当执行一个函数时，内存中会临时开辟一个空间，临时存放函数中的变量与值的关系，这个叫做临时名称空间，或者局部名称空间。</p><pre><code> 其实python还有一个空间叫做内置名称空间：内置名称空间存放的就是一些内置函数等拿来即用的特殊的变量：input，print，list等等，所以，我们通过画图捋一下：</code></pre><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/1dbdb473-e660-4707-abc5-b3f4d0f80340-2885684.jpg" class="" title="img"><p>那么这就是python中经常提到的三个空间。</p><p>6.2、总结:</p><blockquote><ol><li><p>全局命名空间–&gt; 我们直接在py文件中, 函数外声明的变量都属于全局命名空间</p></li><li><p>局部命名空间–&gt; 在函数中声明的变量会放在局部命名空间</p></li><li><p>内置命名空间–&gt; 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间</p></li></ol></blockquote><p>6.3、加载顺序：</p><pre><code>     所谓的加载顺序，就是这三个空间加载到内存的先后顺序，也就是这个三个空间在内存中创建的先后顺序，你想想他们能是同时创建么？肯定不是的，那么谁先谁后呢？我们捋顺一下：在启动python解释器之后，即使没有创建任何的变量或者函数，还是会有一些函数直接可以用的比如abs(-1),max(1,3)等等，在启动Python解释器的时候，就已经导入到内存当中供我们使用，所以肯定是先加载内置名称空间，然后就开始从文件的最上面向下一行一行执行，此时如果遇到了初始化变量，就会创建全局名称空间，将这些对应关系存放进去，然后遇到了函数执行时，在内存中临时开辟一个空间，加载函数中的一些变量等等。所以这三个空间的加载顺序为：内置命名空间(程序运行伊始加载)-&gt;全局命名空间(程序运行中：从上到下加载)-&gt;局部命名空间(程序运行中：调用时才加载。</code></pre><p>6.4、取值顺序：</p><pre><code>     取值顺序就是引用一个变量，先从哪一个空间开始引用。这个有一个关键点：从哪个空间开始引用这个变量。我们分别举例说明：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你在全局名称空间引用一个变量，先从全局名称空间引用，全局名# 称空间如果没有，才会向内置名称空间引用。</span></span><br><span class="line"><span class="built_in">input</span> = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>) <span class="comment"># 666</span></span><br><span class="line"><span class="comment"># 如果你在局部名称空间引用一个变量，先从局部名称空间引用，</span></span><br><span class="line"><span class="comment"># 局部名称空间如果没有，才会向全局名称空间引用，全局名称空间在没有，就会向内置名称空间引用。</span></span><br><span class="line"><span class="built_in">input</span> = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>) <span class="comment"># 666</span></span><br><span class="line"><span class="built_in">input</span> = <span class="number">666</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">input</span> = <span class="number">111</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">input</span>) <span class="comment"># 111</span></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>6.5、所以空间的取值顺序与加载顺序是相反的，取值顺序满足的就近原则，从小范围到大范围一层一层的逐步引用。</p><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/bef1149c-e624-4e26-883d-c335b426f6ed-2885684.jpg" class="" title="img"><p>6.6、三个空间</p><p>6.7、作用域</p><ul><li>作用域代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    count = <span class="number">13</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">test() <span class="comment"># 13 </span></span><br><span class="line"><span class="built_in">print</span>(count)  <span class="comment">#12 </span></span><br></pre></td></tr></table></figure><blockquote><p>test函数内部的count属于局部作用域变量，虽然和test函数外部的全局作用域变量重名，但是因为所处的作用域不同，互相不影响，因为这两个是在不同的内存地址空间里</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经典作用域错误</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><ul><li><p>上述代码运行会报错</p></li><li><p>解释如下</p><blockquote><p>局部作用域（比如函数内部）不能改变全局作用域的变量，但是可以引用，也就是在局部作用域里仅仅可以把全局作用域拿过来使用一下，但是不能改变全局作用域的变量</p><p>结论：当python解释器读取到局部作用域时，发现了你对一个变量进行修改的操作，解释器就会认为你再局部作用域已经定义过这个局部变量了，解释器就会从局部去找局部变量，但是没有找到（因为修改的是全局作用域变量），所以报错了</p></blockquote></li><li><p>先看一个简单例子</p></li><li><p>从上面可以看出，b是a的基础上+1，那么b和a的内存地址不一样，就表示a和b是两个变量，映射到函数中也是一样，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外层的num是全局变量</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;外层num:<span class="subst">&#123;<span class="built_in">id</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># 内层的num是在原来的基础上做了+1操作，那么就是一个新的值，指向新的内存地址，需要使用global声明num为全局变量，</span></span><br><span class="line">    <span class="comment"># 如果不声明，那就会在执行test函数时，找不到num这个局部变量，直接抛出异常</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内层num:<span class="subst">&#123;<span class="built_in">id</span>(num)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#　外层alist和内层alist指向的是同一个内存地址空间，所以不需要使用global</span></span><br><span class="line">alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;外层alist:<span class="subst">&#123;<span class="built_in">id</span>(alist)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    alist.append(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内层alist:<span class="subst">&#123;<span class="built_in">id</span>(alist)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 但是内层alist是在alist基础上增加了一些值，那么alist就会指向新的内存地址，是一个新的列表</span></span><br><span class="line">    alist_1 = alist + [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内层alist_1:<span class="subst">&#123;<span class="built_in">id</span>(alist_1)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">test1()</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>在函数中，对于全局变量进行修改时，是否需要global进行说明，是要看是否对全局变量的执行指向进行了修改，也就是修改全局变量后是否指向了的内存地址（新值）</li><li>如果没有产生新值，那么就可以不用global声明，比如可变数据类型</li><li>如果修改了执行，即全局变量指向了一个新地址，那么必须用global来声明</li></ul></li></ul><h3 id="7、高阶函数"><a href="#7、高阶函数" class="headerlink" title="7、高阶函数"></a>7、高阶函数</h3><p>7.1、函数嵌套也就是高阶函数</p><h3 id="8、globals-和-locals"><a href="#8、globals-和-locals" class="headerlink" title="8、globals() 和 locals()"></a>8、globals() 和 locals()</h3><p>8.1、globals() 和 locals()的使用，这两个属于内置函数</p><blockquote><p>globals() :返回的是字典: 字典里面的键值对是全局作用域的所有内容</p><p>locals():返回的是字典: 字典里面的键值对是当前作用域的所有内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">    age=<span class="number">73</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())  <span class="comment"># 返回的是字典: 字典里面的键值对是全局作用域的所有内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())  <span class="comment"># 返回的是字典: 字典里面的键值对是当前作用域的所有内容，也就是test函数这个作用域</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()) <span class="comment"># 返回的是字典: 字典里面的键值对是全局作用域的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>())  <span class="comment"># 返回的是字典: 字典里面的键值对是当前作用域的所有内容，也就是全局作用域</span></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h3 id="9、global关键字作用"><a href="#9、global关键字作用" class="headerlink" title="9、global关键字作用"></a>9、global关键字作用</h3><p>9.1、在局部作用域声明一个全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> name  <span class="comment"># 将局部作用域的name变量声明为全局作用域变量</span></span><br><span class="line">    name = <span class="string">&quot;tom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment"># 因为还没运行func函数，所以name变量还没有从局部作用域变为全局作用域变量，所以会报name is not defined错误</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()) <span class="comment"># 全局作用域内容中没有 name 字段</span></span><br><span class="line">func()  <span class="comment"># 遇到函数名+括号才算运行函数，此时函数里的global name才会生效变为全局作用域变量</span></span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment"># 此时访问name已经变成了全局作用域变量了</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>()) <span class="comment"># 全局作用域内容中有了 name 字段</span></span><br></pre></td></tr></table></figure><p>9.2、修改一个全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count) <span class="comment"># func函数还没运行，所以count还是1</span></span><br><span class="line">func()  <span class="comment"># func函数运行，count由局部作用域变量声明为了全局作用域变量，并且做了count = count + 1 计算，所以全局作用域变量count=2</span></span><br><span class="line"><span class="built_in">print</span>(count) <span class="comment"># 此时count已经变为2</span></span><br></pre></td></tr></table></figure><h3 id="10、nonlocal关键字-使用较少"><a href="#10、nonlocal关键字-使用较少" class="headerlink" title="10、nonlocal关键字(使用较少)"></a>10、nonlocal关键字(使用较少)</h3><p>10.1、不能操作全局变量，运行会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">nonlocal</span> count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">func() </span><br></pre></td></tr></table></figure><p>10.2、局部作用域：内部函数对外层函数的局部变量进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count) <span class="comment"># func函数局部作用域里的count变量仍是1没变</span></span><br><span class="line">    inner() <span class="comment"># inner函数开始执行，并且inner函数使用nonlocal关键字，即inner函数对外层函数的局部变量count进行修改进行了+1</span></span><br><span class="line">    <span class="built_in">print</span>(count) <span class="comment"># 此时inner函数外层函数的count变量已经变成了2</span></span><br><span class="line"></span><br><span class="line">func() <span class="comment"># 结果1和2</span></span><br></pre></td></tr></table></figure><h3 id="11、默认参数、作用域的陷阱"><a href="#11、默认参数、作用域的陷阱" class="headerlink" title="11、默认参数、作用域的陷阱"></a>11、默认参数、作用域的陷阱</h3><p>11.1、默认参数的陷阱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果默认参数指向的是可变数据类型，比如列表，那么无论调用多少次这个默认参数，都是同一个</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,alist=[]</span>):</span><br><span class="line">    alist.append(a)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">10</span>)) <span class="comment"># [10]，只传了一个10进去，那么10就会传入默认参数这个空列表中</span></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">20</span>,[])) <span class="comment">#[20],因为这个传参后面新传了一个空列表进去，那么20就会存到新的空列表中</span></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">30</span>))  <span class="comment">#[10,30] 第三次调用，还是走默认参数的列表，但是因为第一次调用的时候已经将10传进去了，那么就会再把30传进去 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面这三个函数是执行一个打印出一个结果</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果默认参数指向的是可变数据类型，比如列表，那么无论调用多少次这个默认参数，都是同一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,alist=[]</span>):</span><br><span class="line">    alist.append(a)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line">ret1 = func(<span class="number">10</span>) </span><br><span class="line">ret2 = func(<span class="number">20</span>,[])</span><br><span class="line">ret3 = func(<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 这里是上面三个函数都执行完了再打印，那么ret1的值在ret3执行完以后也变得和ret3一样了，因为ret1和ret3共用同一个列表</span></span><br><span class="line"><span class="built_in">print</span>(ret1) <span class="comment"># [10,30]</span></span><br><span class="line"><span class="built_in">print</span>(ret2) <span class="comment">#[20],</span></span><br><span class="line"><span class="built_in">print</span>(ret3)  <span class="comment">#[10,30] </span></span><br></pre></td></tr></table></figure><p>11.2、作用域的陷阱，同6里面的作用域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count = <span class="number">3</span></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><blockquote><p> <code>local variable &#39;count&#39; referenced before assignment</code></p><p>这句话的意思: 局部变量在赋值前被引用</p><p><code>referenced </code>：引用</p><p><code>assignment</code>： 赋值</p></blockquote><ul><li>所以在函数中，如果定义了一个变量，但在定义这个变量之前就对其进行了引用，那么解释器在引用时去找这个变量没有找到就会报错，属于语法问题</li></ul><h3 id="12、函数名应用"><a href="#12、函数名应用" class="headerlink" title="12、函数名应用"></a>12、函数名应用</h3><p>12.1、函数名可以多次赋值引用</p><blockquote><p>函数名：就是一个变量，指向的是函数的内存地址</p><p>当遇到  函数名+() ，函数才会被执行!!!，并且是从上到下依次执行函数里的所有内容</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func) <span class="comment">#  func就是个变量，那么func这个变量的值指向的是函数的内存地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func)) <span class="comment"># 函数类型</span></span><br><span class="line">func() <span class="comment"># 所以这里也可以理解为是函数的内存+()来运行函数，函数名就是个变量，可以取任意名字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">10</span>,<span class="string">&quot;函数名重命名&quot;</span>,<span class="string">&quot;*&quot;</span>*<span class="number">10</span>)</span><br><span class="line">f = func</span><br><span class="line">f1 = f</span><br><span class="line">f2 = f1</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line"></span><br><span class="line">func1 = func <span class="comment"># 这里将func函数名重新指向了func1</span></span><br><span class="line"></span><br><span class="line">func1()  <span class="comment"># 这里执行func1执行的就是func函数</span></span><br></pre></td></tr></table></figure><p>12.2、函数名可以作为容器数据类型的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func2&quot;</span>)</span><br><span class="line"></span><br><span class="line">ll = [func,func1,func2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ll:</span><br><span class="line">    i()</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="keyword">in</span> func</span><br><span class="line"><span class="keyword">in</span> func1</span><br><span class="line"><span class="keyword">in</span> func2</span><br></pre></td></tr></table></figure><p>12.3、函数名可以作为函数的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):  <span class="comment"># x = func</span></span><br><span class="line">    x()   <span class="comment"># 这里执行的就是func()，</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>) </span><br><span class="line"></span><br><span class="line">func1(func)  <span class="comment"># 将func函数名作为参数传给func1函数，先输出 in func，再输出 in func1</span></span><br></pre></td></tr></table></figure><p>12.4、函数名作为函数的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):  <span class="comment"># x = func</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in func1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">ret = func1(func) <span class="comment"># ret的值就是func1函数传进去的func这个形参</span></span><br><span class="line">ret() <span class="comment"># ret()执行的就是func()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13、闭包函数"><a href="#13、闭包函数" class="headerlink" title="13、闭包函数"></a>13、闭包函数</h3><h4 id="1-1-什么是闭包"><a href="#1-1-什么是闭包" class="headerlink" title="1.1 什么是闭包"></a>1.1 什么是闭包</h4><blockquote><p><a href="https://www.cnblogs.com/jin-xin/articles/10863032.html">https://www.cnblogs.com/jin-xin/articles/10863032.html</a></p></blockquote><h5 id="1-1-1-新复习闭包函数"><a href="#1-1-1-新复习闭包函数" class="headerlink" title="1.1.1 新复习闭包函数"></a>1.1.1 新复习闭包函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;x--<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>2024年09月26日11:02:58 复习重新理解闭包</p><ul><li>一、大前提：<ul><li>闭包函数&#x3D;名称空间与作用于+函数嵌套+函数对象</li><li>核心点：名字的查找关系是以函数定义阶段为准</li></ul></li><li>二、什么是闭包函数（以上面的代码为例）<ul><li>“闭”函数是指的该f2函数是内嵌函数</li><li>“包”函数是值该f2函数对外层f1函数作用域名字的引用（不是对全局作用域）<ul><li>也就是说x这个值不能在f2内部，但是必须在f1函数内部，</li><li>当x在f1外部时，那x就是全局变量，那f1就不是闭包了</li></ul></li></ul></li></ul></blockquote><h5 id="1-1-2-历史复习"><a href="#1-1-2-历史复习" class="headerlink" title="1.1.2 历史复习"></a>1.1.2 历史复习</h5><blockquote><ul><li>闭包定义<ul><li>闭包函数只能存在嵌套函数</li><li>内层函数对外层函数的非全局变量的引用(使用)，就会形成闭包</li><li>被引用的非全局变量也叫自由变量，这个自由变量会和内层函数产生一个绑定关系</li><li>自由变量持续在内存中存在，不会消失，可以持续调用</li></ul></li><li>闭包的作用<ul><li>保存局部信息不被销毁，保证数据的安全性。</li></ul></li><li>闭包的应用<ul><li>可以保存一些非全局变量但是不易被销毁、改变的数据。</li><li>装饰器</li></ul></li><li>如何判断一个嵌套函数是不是闭包<ul><li>闭包是嵌套在函数中的函数</li><li>闭包必须是内层函数对外层函数的变量（非全局变量）的引用。</li></ul></li></ul></blockquote><blockquote><ol><li>上面被红色方框框起来的区域就是闭包，被蓝色圈起来的那个变量应该是make_averager()函数的局部变量，它应该是随着make_averager()函数的执行结束之后而消失。</li><li>但是他没有，是因为此区域形成了闭包，series变量就变成了一个叫自由变量的东西，averager函数的作用域会延伸到包含自由变量series的绑定。</li><li>也就是说，每次我调用avg对应的averager函数 时，都可以引用到这个自由变量series，这个就是闭包。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例一：是闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper1</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret1 = wrapper1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例二：不是闭包，因为a1是全局变量</span></span><br><span class="line">a1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper2</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a1)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret2 = wrapper2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例三：是闭包</span></span><br><span class="line"><span class="comment"># 因为a，b是作为参数传进wrapper3函数中，那么a,b就是wrapper3函数里的局部变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper3</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">a2 = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">ret3 = wrapper3(a2,b)</span><br></pre></td></tr></table></figure><h4 id="1-2-判断函数是不是闭包"><a href="#1-2-判断函数是不是闭包" class="headerlink" title="1.2 判断函数是不是闭包"></a>1.2 判断函数是不是闭包</h4><blockquote><p>使用<code>func.__code__.co_freevars</code>来判断，有返回值就是闭包，没有就不是</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例二：不是闭包，因为a1是全局变量</span></span><br><span class="line">a1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper2</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a1)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">ret2 = wrapper2()</span><br><span class="line"><span class="built_in">print</span>(ret2.__code__.co_freevars) <span class="comment"># ()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="14、格式化输出"><a href="#14、格式化输出" class="headerlink" title="14、格式化输出"></a>14、格式化输出</h3><p>14.1 %s、format格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">msg1 = <span class="string">&#x27;My name is %s, %s years old&#x27;</span> %(name,age)</span><br><span class="line">msg2 = <span class="string">&#x27;My name is &#123;0&#125;, &#123;1&#125; years old&#x27;</span>.<span class="built_in">format</span>(name,age)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg1)</span><br><span class="line"><span class="built_in">print</span>(msg2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">My name <span class="keyword">is</span> Tom, <span class="number">18</span> years old</span><br><span class="line">My name <span class="keyword">is</span> Tom, <span class="number">18</span> years old</span><br></pre></td></tr></table></figure><p>14.2 f-string 格式化输出</p><blockquote><p>Python3.6以后支持的语法，效率更高</p><p>注意  ！， ：{  } ; 这些不能出现f-string的{}中</p><p>优点:</p><p>1、结构更简化</p><p>2、结合表达式、函数进行使用</p><p>3、比%s、format效率更高</p></blockquote><p>2.1、基本用法，格式化输出</p><blockquote><p>在需要格式化的前面加一个f&#x2F;F，大小写都支持</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">age = <span class="number">10</span></span><br><span class="line">msg = <span class="string">f&#x27;my name is <span class="subst">&#123;name&#125;</span> , I\&#x27;m <span class="subst">&#123;age&#125;</span> years old&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>2.2、支持多种格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持表达式</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">msg = <span class="string">f&#x27;My name is <span class="subst">&#123;<span class="built_in">dict</span>[<span class="string">&quot;name&quot;</span>]&#125;</span>, <span class="subst">&#123;<span class="built_in">dict</span>[<span class="string">&quot;age&quot;</span>]&#125;</span> years old&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持计算</span></span><br><span class="line">count = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;count平方是: <span class="subst">&#123;count**<span class="number">2</span>&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持字符串操作</span></span><br><span class="line">name = <span class="string">&quot;sam&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Name is: <span class="subst">&#123;name.upper()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合函数写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;3 + 4 = <span class="subst">&#123;add(<span class="number">3</span>,<span class="number">4</span>)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="15、函数的类型提示"><a href="#15、函数的类型提示" class="headerlink" title="15、函数的类型提示"></a>15、函数的类型提示</h3><blockquote><p>类型提示 Type hinting（最低Python版本3.5）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 形参后面加 冒号和类型,代表提示形参的提示信息</span></span><br><span class="line"><span class="comment"># -&gt;int 表示函数返回值，</span></span><br><span class="line"><span class="comment"># 上面两种提示信息传任何内容都可以</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name:<span class="built_in">str</span>,age:<span class="built_in">int</span>,hobbies:<span class="built_in">tuple</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="built_in">print</span>(hobbies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提示信息的所有内容</span></span><br><span class="line"><span class="built_in">print</span>(register.__annotations__) <span class="comment">#&#123;&#x27;name&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;age&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;hobbies&#x27;: &lt;class &#x27;tuple&#x27;&gt;, &#x27;return&#x27;: &lt;class &#x27;int&#x27;&gt;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、Python内置语法使用"><a href="#四、Python内置语法使用" class="headerlink" title="四、Python内置语法使用"></a>四、Python内置语法使用</h2><blockquote><p><a href="https://www.cnblogs.com/jin-xin/articles/10854130.html">https://www.cnblogs.com/jin-xin/articles/10854130.html</a></p></blockquote><h3 id="1、三元运算符"><a href="#1、三元运算符" class="headerlink" title="1、三元运算符"></a>1、三元运算符</h3><blockquote><p>1.简单的if…else语句</p><p>2.下图中的if条件为真输出die，if条件为假执行else，输出live</p></blockquote><h3 id="2、迭代器"><a href="#2、迭代器" class="headerlink" title="2、迭代器"></a>2、迭代器</h3><p>1.1 可迭代对象</p><blockquote><p>字面意思：Python中一切皆对象，一个实实在在存在的值，对象</p><p>可迭代：更新迭代，重复循环的过程，每次更新迭代都有新内容，可以进行循环更新的一个值</p><p>专业角度：内部含有一个<code>__iter__</code>方法的对象，可迭代对象</p><p>目前已有的可迭代对象：str&#x2F;list&#x2F;dict&#x2F;set&#x2F;range</p><p>优点：</p><p>​1.存储的数据能直接展示，比较直观</p><p>​2.拥有的方法比较多，操作方便</p><p>缺点：</p><p>​1.占用内存</p><p>​2.不能直接通过for循环，不能通过索引、key取值</p></blockquote><p>1.2 判断是否为可迭代对象</p><blockquote><p>获取对象的所有方法，以字符串形式表现，使用dir(obj)，返回值为一个列表</p><p>所有只要判断对象的所有方法里有<code>__iter__</code>方法，那就是可迭代对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;__iter__&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(s1)) <span class="comment"># true，那s1就是一个可迭代对象</span></span><br></pre></td></tr></table></figure><p>1.3 迭代器</p><blockquote><p>字面意思：更新迭代，器：工具，可迭代更新的工具</p><p>专业角度：内部含有<code>__iter__</code>方法并含有<code>__next__</code>方法的对象就是迭代器</p></blockquote><p>1.3.1 可以判断是否为迭代器：含有<code>__iter__</code>和<code>__next__</code>在不在dir(obj)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="string">&quot;article.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>((<span class="string">&quot;__iter__&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(f)) <span class="keyword">and</span> <span class="string">&quot;__next__&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(f))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>1.3.2 可迭代对象可以转换为迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;echo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代器对象转换为迭代器，原来的对象仍没有变化</span></span><br><span class="line"><span class="comment"># 两种方法：</span></span><br><span class="line"><span class="comment">#   1、iter(s)</span></span><br><span class="line"><span class="comment">#   2、s.__iter__()</span></span><br><span class="line">obj = <span class="built_in">iter</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器返回值:&lt;str_iterator object at 0x00000000021283C8&gt;，表示字符串迭代器对象</span></span><br><span class="line"><span class="built_in">print</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取迭代器的值，当取值超过迭代器所有值以后，就抛出StopIteration报错</span></span><br><span class="line"><span class="comment"># obj这个迭代器只有&quot;e c h o&quot;四个元素，第五个next(obj)就会抛出StopIteration</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj)) <span class="comment"># 一个next即使运行N次，永远只会输出一个值，</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj))</span><br></pre></td></tr></table></figure><p>1.3.3 迭代器优点</p><blockquote><p>1、节省内存：迭代器在内存中相当于只占一个数据的空间：因为每次取值都上一条数据会在内存释放（消失），加载当前的此条数据。</p><p>2、惰性机制：next一次，取一个值，绝不过多取值。​</p><p>3、有一个迭代器模式可以很好的解释上面这两条：迭代是数据处理的基石。扫描内存中放不下的数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项。这就是迭代器模式。</p><p>​    </p></blockquote><p>1.3.4 迭代器的缺点：</p><blockquote><p>1、不能直观的查看里面的数据。</p><p>2、速度慢</p><p>3、取值时不走回头路，只能一直向下取值。</p></blockquote><p>1.4 迭代器与可迭代对象的对比</p><blockquote><p>可迭代对象</p><p>​是一个操作昂发比较多，比较直观、存储数据相对少（几百万个对象，8G内存可以承受）的一个数据集合</p><p>​当侧重于数据可以灵活处理，并且内存空间足够，可以将数据集设置为可迭代对象</p><p>​是一个非常节省内存，可记录取值位置，可以直接通过循环+next方法取值，但是不直观，操作方法比较单一的数据集合</p><p>迭代器：</p><p>​当数据量非常大，足以撑爆内存或者为了节省内存时，将数据集设置为迭代器最好了</p></blockquote><p>1.5 for循环原理</p><blockquote><p>for循环原理：先将可迭代对象转换为迭代器，再调用迭代器的next方法进行取值</p></blockquote><p>1.5.1 使用while模拟for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ll = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">11</span>,<span class="number">221</span>,<span class="number">34</span>]</span><br><span class="line">obj = ll.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(obj))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="3、生成器"><a href="#3、生成器" class="headerlink" title="3、生成器"></a>3、生成器</h3><p>3.1 生成器</p><blockquote><ol><li>生成器本质就是迭代器</li><li>唯一区别：<ul><li>生成器是我们自己用python代码构建的数据结构</li><li>迭代器是提供的，或者转化而来的</li></ul></li></ol></blockquote><p>3.2 获取生成器的三种方式</p><blockquote><ol><li>生成器幻术</li><li>生成器表达式</li><li>python内部提供的一些</li></ol></blockquote><p>3.3 生成器函数获取生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">222</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span> <span class="comment"># 当运行生成器函数，只有一个next函数来取值时，只会执行到这里，下面的代码不会执行</span></span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    b = <span class="number">4</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">7</span> <span class="comment"># 当有两个next函数来取值时，会执行到这里</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ret是一个生成器对象：&lt;generator object func at 0x000000000BB648E0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器通过next来取值，一个next对应一个yield</span></span><br><span class="line"><span class="comment"># 当next取值超过yield的范围，也会报Stopiteration错误，和迭代器一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret))</span><br><span class="line"></span><br><span class="line"><span class="comment"># yield from seq </span></span><br><span class="line"><span class="comment"># 表示将这个可迭代对象中每一个元素变成了迭代器结果返回</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将alist这个列表变成了迭代器</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> alist</span><br><span class="line"></span><br><span class="line">ret = test()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(ret))</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>return：</p></li><li><p>函数中只存在一个return结束函数，并给函数的执行者返回值</p></li><li><p>yield：</p><ul><li>只要函数中有yield，那就是生成器函数，而不是函数</li></ul></li><li><p>生成器函数中可以存在多个yield，一个yield对应一个next，yield不会结束函数</p></li></ul></blockquote><h3 id="4、推导式"><a href="#4、推导式" class="headerlink" title="4、推导式"></a>4、推导式</h3><p>4.1 列表推导式：多层嵌套循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取出所有人名有一个l的并大写</span></span><br><span class="line"></span><br><span class="line">l1 = [[<span class="string">&quot;sam&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;july&quot;</span>],[<span class="string">&quot;john&quot;</span>,<span class="string">&quot;lily&quot;</span>,<span class="string">&quot;wisely&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 老办法</span></span><br><span class="line">l2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> ele:</span><br><span class="line">        <span class="keyword">if</span> name.count(<span class="string">&quot;l&quot;</span>) == <span class="number">1</span>:</span><br><span class="line">            l2.append(name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;l2=<span class="subst">&#123;l2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行代码,循环嵌套</span></span><br><span class="line">l3 = [name <span class="keyword">for</span> ele <span class="keyword">in</span> l1 <span class="keyword">for</span> name <span class="keyword">in</span> ele <span class="keyword">if</span> name.count(<span class="string">&quot;l&quot;</span>) == <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;l3=<span class="subst">&#123;l3&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>4.2 生成器推导式</p><blockquote><ul><li>与列表推导式的写法完全一致，也有筛选模式，循环模式，多层循环</li><li>唯一区别就是 [] 换成 ()</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = ( i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(obj,<span class="built_in">type</span>(obj)) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000000002856E60&gt; &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj)) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(obj)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>4.3 总结</p><blockquote><ul><li><p>列表推导式：</p><ul><li><p>缺点：</p><ul><li>构建比较复杂且有规律的列表，不能太沉迷使用该办法</li><li>超过三层才能构建成功的，不要使用推导式</li><li>查找错误不方便，debug代码时</li></ul></li></ul></li><li><p>优点</p></li><li><p>一行代码构建，简单</p></li><li><p>列表推导式和生成器的区别</p><ul><li>写法：列表推导式[]，生成器语法 ()</li><li>列表是iterable，可迭代对象 </li><li>生成器的本质是迭代器(iterator)</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行代码构建[2, 3, 4, 5, 6, 7, 8, 9, 10, &#x27;J&#x27;, &#x27;Q&#x27;, &#x27;K&#x27;, &#x27;O&#x27;]</span></span><br><span class="line">ll = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>)] + <span class="built_in">list</span>(<span class="string">&quot;JQKO&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ll)</span><br></pre></td></tr></table></figure><h3 id="5、装饰器"><a href="#5、装饰器" class="headerlink" title="5、装饰器"></a>5、装饰器</h3><blockquote><p>装饰器等于高阶函数+闭包</p></blockquote><h3 id="6、模块导入import"><a href="#6、模块导入import" class="headerlink" title="6、模块导入import"></a>6、模块导入import</h3><p>6.1 模块</p><p><a href="https://zhuanlan.zhihu.com/p/109127048">https://zhuanlan.zhihu.com/p/109127048</a></p><blockquote><p>在Python中，一个py文件就是一个模块，文件名为xxx.py模块名则是xxx,</p></blockquote><p>6.2 导入模块发生了什么</p><blockquote><p>首次导入模块会发生3件事</p><ul><li><p>执行导入的文件（xx.py）</p></li><li><p>产生xx.py的名称空间，将xx.py运行过程中产生的名字都堆到foo的名称空间</p></li><li><p>在当前文件中产生的又一个名字xx，该名字指向2中产生的名称空间</p></li></ul><p>需要强调一点是，第一次导入模块已经将其加载到内存空间了，之后的重复导入会直接引用内存中已存在的模块，不会重复执行文件，通过import sys，打印sys.modules的值可以看到内存中已经加载的模块名。</p></blockquote><p>6.3 导入模块后引用</p><blockquote><p>强调1：</p><ul><li>方式：模块名.名字</li><li>是指名道姓问某个模块要名字对应的值，不会与当前名称空间中的名字发生冲突，即使是重名的</li></ul><p>强调2：</p><ul><li>无论是查看或修改，都是以调入的模块为基准，与调用位置无关，也就是说在一个文件里调用另外一个模块，无论对文件中定义或修改与调用模块同名的变量，不会对调用模块产生影响</li></ul></blockquote><p>6.4 起别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  time <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure><p>6.5 模块命名风格</p><blockquote><p>python3自定义模块的命名都是以纯消息+下划线风格</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br></pre></td></tr></table></figure><p>6.6  模块导入和代码测试</p><blockquote><p>1、一个Python文件有两种用途，</p><ul><li><p>一种被当主程序&#x2F;脚本执行，</p></li><li><p>另一种被当模块导入，</p></li></ul><p>2、为了区别同一个文件的不同用途，每个py文件都内置了<code>__name__</code>变量</p><ul><li>该变量在py文件被当做脚本执行时赋值为<code>“__main__”</code></li><li>在py文件被当做模块导入时赋值为模块名</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hahaha&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>6.7 from…import… 导入模块</p><blockquote><p>from…import…与import语句基本一致，唯一不同的是：使用import foo导入模块后，引用模块中的名字都需要加上foo.作为前缀，而使用from foo import x,get,change, foo则可以在当前执行文件中直接引用模块foo中的名字，如下</p><p>from xx import yy : yy必须是xx模块（xx.py文件）里的方法、变量、类等内容，import yy的yy是指向xx模块里叫yy这个方法的内存地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> x,get,change <span class="comment">#将模块foo中的x和get导入到当前名称空间</span></span><br><span class="line">a=x <span class="comment">#直接使用模块foo中的x赋值给a</span></span><br><span class="line">get() <span class="comment">#直接执行foo中的get函数</span></span><br><span class="line">change() <span class="comment">#即便是当前有重名的x，修改的仍然是源文件中的x</span></span><br></pre></td></tr></table></figure><blockquote><p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p></blockquote><blockquote><p>另外from语句支持<code>from foo import *</code>语法，*代表将foo中所有的名字都导入到当前位置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#把foo中所有的名字都导入到当前执行文件的名称空间中，在当前位置直接可以使用这些名字</span></span><br><span class="line"></span><br><span class="line">a=x</span><br><span class="line">get()</span><br><span class="line">change()</span><br><span class="line">obj=Foo()</span><br></pre></td></tr></table></figure><blockquote><p>如果我们需要引用模块中的名字过多的话，可以采用上述的导入形式来达到节省代码量的效果，但是需要强调的一点是：只能在模块最顶层使用<em>的方式导入，在函数内则非法，并且</em>的方式会带来一种副作用，即我们无法搞清楚究竟从源文件中导入了哪些名字到当前位置，这极有可能与当前位置的名字产生冲突。模块的编写者可以在自己的文件中定义<code>__all__</code>变量用来控制*代表的意思</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;get&#x27;</span>] <span class="comment">#该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这样我们在另外一个文件中使用*导入时，就只能导入<code>__all__</code>定义的名字了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#此时的*只代表x和get</span></span><br><span class="line"></span><br><span class="line">x <span class="comment">#可用</span></span><br><span class="line">get() <span class="comment">#可用</span></span><br><span class="line">change() <span class="comment">#不可用</span></span><br><span class="line">Foo() <span class="comment">#不可用</span></span><br></pre></td></tr></table></figure><p>6.8 模块跨目录导入</p><blockquote><p>模块查找优先级</p><ol><li>先从内存中找，内容中会预先加载Python的内置模块</li><li>如果内存中没有，就按照sys.path中存放的文件顺序依次查找所需要的导入的模块</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 值为一个列表，存放了一系列的文件夹</span></span><br><span class="line"><span class="comment"># 其中第一个文件夹是当前执行文件所在的文件夹</span></span><br><span class="line"><span class="comment"># 在pycharm中会看到项目的目录也会加到这个列表中，这是pycharm做的优化，真正Python解释器运行时不会有这个目录</span></span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br></pre></td></tr></table></figure><blockquote><p>查看加载到内存中的模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(sys.modules)</span><br></pre></td></tr></table></figure><blockquote><p>sys.path中的第一个路径通常为空，代表执行文件所在的路径，所以在被导入模块与执行文件在同一目录下时肯定是可以正常导入的，而针对被导入的模块与执行文件在不同路径下的情况，为了确保模块对应的源文件仍可以被找到，需要将源文件foo.py所在的路径添加到sys.path中，假设foo.py所在的路径为&#x2F;pythoner&#x2F;projects&#x2F;</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 找foo.py就把foo.py的文件夹添加到环境变量中</span></span><br><span class="line">sys.path.append(<span class="string">r&#x27;/pythoner/projects/&#x27;</span>) <span class="comment">#也可以使用sys.path.insert(……)，不过不推荐使用insert</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo <span class="comment">#无论foo.py在何处,我们都可以导入它了</span></span><br></pre></td></tr></table></figure><p>6.9 编写规范模块</p><blockquote><p>在编写py文件时，需要时刻提醒自己，该文件既是给自己用的，也有可能会被其他人使用，因而代码的可读性与易维护性显得十分重要，为此我们在编写一个模块时最好按照统一的规范去编写，如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python #通常只在类unix环境有效,作用是可以使用脚本名来执行，而无需直接调用解释器。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;The module is used to...&quot;</span> <span class="comment">#模块的文档描述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span> <span class="comment">#定义全局变量,如果非必须,则最好使用局部变量,这样可以提高代码的易维护性,并且可以节省内存提高性能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>: <span class="comment">#定义类,并写好类的注释</span></span><br><span class="line">    <span class="string">&#x27;Class Foo is used to...&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(): <span class="comment">#定义函数,并写好函数的注释</span></span><br><span class="line">    <span class="string">&#x27;Function test is used to…&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: <span class="comment">#主程序</span></span><br><span class="line">    test() <span class="comment">#在被当做脚本执行时,执行此处的代码</span></span><br></pre></td></tr></table></figure><h3 id="7、模块和包"><a href="#7、模块和包" class="headerlink" title="7、模块和包"></a>7、模块和包</h3><h4 id="1-1-模块"><a href="#1-1-模块" class="headerlink" title="1.1 模块"></a>1.1 模块</h4><blockquote><p>模块就是一系列功能的集合体</p><ul><li><p>模块的作用：可以直接使用别人封装好的模块，提高开发效率</p></li><li><p>模块的三大类</p><ul><li><p>内置模块</p></li><li><p>第三方模块</p></li><li><p>自定义的模块</p><ul><li>一个python文件本身就是一个模块，文件名叫x.py，模块名叫m</li></ul></li></ul></li></ul></blockquote><h4 id="7-2-模块导入"><a href="#7-2-模块导入" class="headerlink" title="7.2 模块导入"></a>7.2 模块导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br></pre></td></tr></table></figure><blockquote><p>需要注意：</p><ul><li><p>import第一次导入时，会执行导入的文件中所有的代码</p></li><li><p>之后再重复导入，会直接引用第一次导入的名称空间，不会再次导入</p></li></ul></blockquote><blockquote><p>从下图代码结果可以看出，import一个模块，其实就是在执行模块里的代码</p></blockquote><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20221106003856637.png" class="" title="image-20221106003856637"><blockquote><p>模块强调：</p><p>模块名.名字：表示指名道姓的访问某一个模块的对应变量的值</p><p>无论查看还是修改的都是模块本身，和调用位置无关</p></blockquote><h4 id="7-3-导入模块规范"><a href="#7-3-导入模块规范" class="headerlink" title="7.3 导入模块规范"></a>7.3 导入模块规范</h4><blockquote><p>先导入内置模块</p><p>其次导入第三方模块</p><p>最后导入自定义的模块</p></blockquote><blockquote><p>模块的起名python3中是纯小写+下划线的风格</p></blockquote><h4 id="7-4-模块导入起别名"><a href="#7-4-模块导入起别名" class="headerlink" title="7.4 模块导入起别名"></a>7.4 模块导入起别名</h4><blockquote><p>可以给导入的模块起个别名，使用<code>as</code>关键字来起别名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx <span class="keyword">as</span> xl</span><br></pre></td></tr></table></figure><h2 id="五、常用模块"><a href="#五、常用模块" class="headerlink" title="五、常用模块"></a>五、常用模块</h2><h3 id="1、OS模块"><a href="#1、OS模块" class="headerlink" title="1、OS模块"></a>1、OS模块</h3><blockquote><p>和操作系统相关的操作封装在这个模块</p></blockquote><p>1.1. 和文件操作相关</p><blockquote><p>可以操作文件的重命名，删除等</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 这个文件不存在，临时写的一个不存在的文件名</span></span><br><span class="line">file = <span class="string">&quot;aaa&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件不存在，执行会报错，FileNotFoundError: [WinError 2] 系统找不到指定的文件。: &#x27;aaa&#x27;</span></span><br><span class="line">os.remove(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件不存在，执行会报错，FileNotFoundError: [WinError 2] 系统找不到指定的文件。: &#x27;aaa&#x27; -&gt; &#x27;bb.txt&#x27;</span></span><br><span class="line">os.rename(file,<span class="string">&quot;bb.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment"># 删除目录，目录可以是非空的</span></span><br><span class="line">shutil.rmtree(file)</span><br></pre></td></tr></table></figure><p>1.2. 和路径相关的操作</p><blockquote><p>和路径相关的操作，封装在一个子模块里：<code>os.path </code></p></blockquote><p>1.2.1 <code>os.path.dirname</code>：获取当前文件所在的目录</p><blockquote><p>不判断路径是否存在，即使路径不存在，返回值为空</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file = <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">s = os.path.dirname(file)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s=&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s len:&quot;</span>,<span class="built_in">len</span>(s))</span><br></pre></td></tr></table></figure><p>1.2.2 <code>os.path.basename</code>：获取当前路径的文件名</p><blockquote><p>不判断路径是否存在，即使路径不存在，也会返回文件名</p></blockquote><p>1.2.3  <code>os.path.split</code></p><blockquote><p>把路径中的路径名和文件名切分开，结果是元祖</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file = <span class="string">&quot;./test/asfsd&quot;</span></span><br><span class="line"></span><br><span class="line">s = os.path.split(file)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s=&quot;</span>,s) <span class="comment"># s= (&#x27;./test&#x27;, &#x27;asfsd&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s len:&quot;</span>,<span class="built_in">len</span>(s)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>1.2.4 <code>os.path.join</code>：拼接路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file = <span class="string">&quot;.\\test\\asfsd&quot;</span></span><br><span class="line"></span><br><span class="line">s = os.path.join(file,<span class="string">&quot;index.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s=&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s len:&quot;</span>,<span class="built_in">len</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">s= .\test\asfsd\index.txt</span><br><span class="line">s <span class="built_in">len</span>: <span class="number">22</span></span><br></pre></td></tr></table></figure><p>1.2.5 <code>os.path.abspath</code></p><blockquote><p>1.如果是&#x2F;开头，默认是在当前盘符下</p><p>2.如果不以&#x2F;开头，默认是当前所在路径</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">s1 = os.path.abspath(<span class="string">r&quot;/a/b/c&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s1=&quot;</span>,s1)</span><br><span class="line"><span class="comment"># s1= D:\a\b\c</span></span><br><span class="line"></span><br><span class="line">s2 = os.path.abspath(<span class="string">r&quot;a/b/c&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s2=&quot;</span>,s2) </span><br><span class="line"><span class="comment"># 因为当前py文件所在目录就是D:\Flask\AutoCrossFire</span></span><br><span class="line"><span class="comment"># s2= D:\Flask\AutoCrossFire\a\b\c</span></span><br></pre></td></tr></table></figure><p>1.2.6 <code>os.path.exists</code></p><blockquote><p>判断文件是否存在，如果不存在，则返回值为False，否则为True</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file = <span class="string">&quot;index.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file&#125;</span> exists&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file&#125;</span> not exists&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">index.html <span class="keyword">not</span> exists</span><br></pre></td></tr></table></figure><h3 id="2、SYS模块"><a href="#2、SYS模块" class="headerlink" title="2、SYS模块"></a>2、SYS模块</h3><blockquote><p>和Python解释器相关的操作</p></blockquote><p>2.1 <code> sys.argv</code></p><blockquote><p>获取命令行方式运行的脚本后面的参数</p><p>sys.argv 返回值是一个列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.argv) <span class="comment"># [&#x27;home.py&#x27;, &#x27;123&#x27;, &#x27;456&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(sys.argv)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本名</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">0</span>]) <span class="comment"># home.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">1</span>])  <span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">2</span>]) <span class="comment"># 456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.2 <code>sys.path</code></p><blockquote><p>系统寻找模块的路径，可通过PYTHONPATH来初始化</p></blockquote><p>2.3 <code>sys.module</code></p><blockquote><p>系统加载的模块</p></blockquote><h3 id="3、logging模块"><a href="#3、logging模块" class="headerlink" title="3、logging模块"></a>3、logging模块</h3><blockquote><p><a href="https://www.cnblogs.com/Eva-j/articles/7228075.html#_label14">https://www.cnblogs.com/Eva-j/articles/7228075.html#_label14</a></p></blockquote><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志作用:</span></span><br><span class="line"><span class="comment">#   1.用来记录用户行为 - 数据分析</span></span><br><span class="line"><span class="comment">#   2.用来记录用户行为 - 操作审计</span></span><br><span class="line"><span class="comment">#   3.排查代码错误</span></span><br></pre></td></tr></table></figure></blockquote><p>3.1 logging简单配置</p><blockquote><ol><li>默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，默认的日志级别设置为WARNING</li><li>日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG</li><li>默认的日志格式为日志级别：Logger名称：用户输出消息，比如：<code>WARNING:root:warning msg</code></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&quot;debug msg&quot;</span>) <span class="comment"># 调试</span></span><br><span class="line">logging.info(<span class="string">&quot;info msg&quot;</span>)  <span class="comment"># 信息</span></span><br><span class="line">logging.warning(<span class="string">&quot;warning msg&quot;</span>) <span class="comment"># 警告</span></span><br><span class="line">logging.error(<span class="string">&quot;error msg&quot;</span>) <span class="comment"># 错误</span></span><br><span class="line">logging.critical(<span class="string">&quot;critical msg&quot;</span>) <span class="comment"># 批判性的</span></span><br></pre></td></tr></table></figure><p>3.2 logging自定义配置等级、格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 标准业务log格式: WARNING: 2020-05-22 17:56:37 [D:/Flask/MyOffice/tests_code/loggerstudy/logstudy01.py:31] a=33</span></span><br><span class="line">    <span class="built_in">format</span>= <span class="string">&#x27;%(levelname)s: %(asctime)s [%(pathname)s:%(lineno)d] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt= <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">33</span></span><br><span class="line">    logging.warning(<span class="string">f&quot;a=<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>3.3 输出日志到文件和屏幕</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作符，写入日志到文件，</span></span><br><span class="line"><span class="comment"># 这里需要注意写了几个fileHandler，就会输出到几个文件中</span></span><br><span class="line">fh1 = logging.FileHandler(<span class="string">&quot;tmp1.log&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">fh2 = logging.FileHandler(<span class="string">&quot;tmp2.log&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 流处理输出到屏幕</span></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 标准业务log格式: WARNING: 2020-05-22 17:56:37 [D:/Flask/MyOffice/tests_code/loggerstudy/logstudy01.py:31] a=33</span></span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(levelname)s: %(asctime)s [%(pathname)s:%(lineno)d] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置logging等级</span></span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填写上面的handler</span></span><br><span class="line">    handlers=[fh1,fh2,sh],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">89</span></span><br><span class="line">    logging.debug(<span class="built_in">str</span>(a))</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">test()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.4 日志切分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging,time</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照文件大小进行切割，最多保留5个文件，超过5个会删掉第一个，重新生成一个新的，可以通过日期生成时间观察第一个是否被删掉</span></span><br><span class="line"><span class="comment"># 总是保持生成五个日志文件</span></span><br><span class="line">rh = handlers.RotatingFileHandler(<span class="string">&#x27;myapp.log&#x27;</span>, maxBytes=<span class="number">1024</span>,backupCount=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按时间切割，when=&quot;s&quot;,表示按秒切，interval=5表示5s切一个，持续切割</span></span><br><span class="line">fh = handlers.TimedRotatingFileHandler(filename=<span class="string">&#x27;x2.log&#x27;</span>, when=<span class="string">&#x27;s&#x27;</span>, interval=<span class="number">5</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 标准业务log格式: WARNING: 2020-05-22 17:56:37 [D:/Flask/MyOffice/tests_code/loggerstudy/logstudy01.py:31] a=33</span></span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(levelname)s: %(asctime)s [%(pathname)s:%(lineno)d] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置logging等级</span></span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填写上面的handler</span></span><br><span class="line">    handlers=[rh,fh,sh],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    logging.error(<span class="string">&#x27;KeyboardInterrupt error %s&#x27;</span>%<span class="built_in">str</span>(i))</span><br></pre></td></tr></table></figure><h3 id="4、内置函数"><a href="#4、内置函数" class="headerlink" title="4、内置函数"></a>4、内置函数</h3><p>4.1  abs</p><blockquote><p>返回负数的绝对值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>4.2 all</p><blockquote><p>所有值都为true，才是true</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="built_in">all</span>([]) )  <span class="comment">#true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">all</span>([<span class="number">1</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;1&quot;</span>]) ) <span class="comment">#true</span></span><br></pre></td></tr></table></figure><p>4.3 any</p><blockquote><p>只要循环出来的值有一个为真，那结果就是true</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="built_in">any</span>([<span class="number">1</span>,<span class="literal">None</span>,<span class="string">&quot;1&quot;</span>]) ) <span class="comment">#true</span></span><br></pre></td></tr></table></figure><p>4.4 callable</p><blockquote><p>表示传入的值是否可以被调用，可以调用返回true，否则为false</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">callable</span>(func) )</span><br></pre></td></tr></table></figure><p>4.5 dir</p><blockquote><p>查看对象有哪些属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="built_in">dir</span>(<span class="built_in">list</span>) )</span><br></pre></td></tr></table></figure><p>4.6 <code>divmod</code></p><blockquote><ul><li>接收两个参数，第一个是除数，第二个是被除数</li><li>结果是元组，第一个值是商，第二个是余数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">divmod</span>(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><p>4.7 enumerate</p><blockquote><p>返回序列的索引和值，索引在值的前面</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;index=<span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;ele=<span class="subst">&#123;ele&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>4.8 eval</p><blockquote><p>执行字符串的表达式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="built_in">eval</span>(<span class="string">&#x27;&#123;&quot;a&quot;:1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br></pre></td></tr></table></figure><p>4.9 isinstance</p><blockquote><ul><li>做类型判断，前一个参数是不是第二格参数的所指的类型</li><li>返回值是true或false</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(obj,Foo))</span><br></pre></td></tr></table></figure><h3 id="5、time模块"><a href="#5、time模块" class="headerlink" title="5、time模块"></a>5、time模块</h3><blockquote><p>时间模块，比较常用</p></blockquote><h4 id="1-1-time-time"><a href="#1-1-time-time" class="headerlink" title="1.1 time.time()"></a>1.1 <code>time.time()</code></h4><blockquote><p>用于获取当前时间戳，从1970年到现在的秒数，如果要取的时间戳是毫秒级别，需要乘以1000</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、时间戳: 从1970年到现在的秒数</span></span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1=&quot;</span>, t1) <span class="comment"># 2021-12-22 22:37:10</span></span><br></pre></td></tr></table></figure><h4 id="1-2-time-localtime"><a href="#1-2-time-localtime" class="headerlink" title="1.2 time.localtime()"></a>1.2 <code>time.localtime()</code></h4><blockquote><p>用于获取结构化时间，常用来单独取时间的某一部分，比如年、月、日等</p></blockquote><blockquote><p>看<code>time.localtime()</code>的实现源码：</p><ul><li>其实就解释了它可以接收<code>时间戳</code>(秒数，不是毫秒数)，然后转化为结构化时间</li><li>当然它的默认值是None，不传秒数就是取<code>当前时间戳</code>转化为结构化时间</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">localtime</span>(<span class="params">seconds=<span class="literal">None</span></span>): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    localtime([seconds]) -&gt; (tm_year,tm_mon,tm_mday,tm_hour,tm_min,</span></span><br><span class="line"><span class="string">                              tm_sec,tm_wday,tm_yday,tm_isdst)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert seconds since the Epoch to a time tuple expressing local time.</span></span><br><span class="line"><span class="string">    When &#x27;seconds&#x27; is not passed in, convert the current time instead.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>转化的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构花时间</span></span><br><span class="line"><span class="comment"># 用于单独获取时间的某一部分</span></span><br><span class="line"><span class="comment"># t4: time.struct_time(tm_year=2021, tm_mon=12, tm_mday=22, tm_hour=22, tm_min=38, tm_sec=55, tm_wday=2, tm_yday=356, tm_isdst=0)</span></span><br><span class="line">t4 = time.localtime()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4=&quot;</span>, t4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4 year=&quot;</span>, t4.tm_year) <span class="comment"># 2021</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4 mon=&quot;</span>, t4.tm_mon) <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t4 mday=&quot;</span>, t4.tm_mday) <span class="comment"># 22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入一个时间戳，1640183901</span></span><br><span class="line"><span class="comment"># t5: time.struct_time(tm_year=2021, tm_mon=12, tm_mday=20, tm_hour=22, tm_min=21, tm_sec=41, tm_wday=0, tm_yday=354, tm_isdst=0)</span></span><br><span class="line">t5 = time.localtime(<span class="number">1640010101</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t5==&gt;&quot;</span>, t5)</span><br></pre></td></tr></table></figure><h4 id="1-3-time-strftime"><a href="#1-3-time-strftime" class="headerlink" title="1.3 time.strftime()"></a>1.3 <code>time.strftime()</code></h4><blockquote><p>字符串格式显示的时间，常用对外展示比较可阅读的时间，比如：<code>2021-12-20 22:21:41</code></p></blockquote><blockquote><p>查看源码可以看出：</p><ul><li>主要用来将一个时间元祖(也就是结构化时间)，根据一定的格式进行转化</li><li>当时间元祖没有传入时，取当前时间的<code>time.localtime()</code>作为替代</li><li>所以可以使用将结构化时间传入给该函数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strftime</span>(<span class="params"><span class="built_in">format</span>, p_tuple=<span class="literal">None</span></span>): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    strftime(format[, tuple]) -&gt; string</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert a time tuple to a string according to a format specification.</span></span><br><span class="line"><span class="string">    See the library reference manual for formatting codes. When the time tuple</span></span><br><span class="line"><span class="string">    is not present, current time as returned by localtime() is used.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Commonly used format codes:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    %Y  Year with century as a decimal number.</span></span><br><span class="line"><span class="string">    %m  Month as a decimal number [01,12].</span></span><br><span class="line"><span class="string">    %d  Day of the month as a decimal number [01,31].</span></span><br><span class="line"><span class="string">    %H  Hour (24-hour clock) as a decimal number [00,23].</span></span><br><span class="line"><span class="string">    %M  Minute as a decimal number [00,59].</span></span><br><span class="line"><span class="string">    %S  Second as a decimal number [00,61].</span></span><br><span class="line"><span class="string">    %z  Time zone offset from UTC.</span></span><br><span class="line"><span class="string">    %a  Locale&#x27;s abbreviated weekday name.</span></span><br><span class="line"><span class="string">    %A  Locale&#x27;s full weekday name.</span></span><br><span class="line"><span class="string">    %b  Locale&#x27;s abbreviated month name.</span></span><br><span class="line"><span class="string">    %B  Locale&#x27;s full month name.</span></span><br><span class="line"><span class="string">    %c  Locale&#x27;s appropriate date and time representation.</span></span><br><span class="line"><span class="string">    %I  Hour (12-hour clock) as a decimal number [01,12].</span></span><br><span class="line"><span class="string">    %p  Locale&#x27;s equivalent of either AM or PM.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Other codes may be available on your platform.  See documentation for</span></span><br><span class="line"><span class="string">    the C library strftime function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>转化的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t2 = time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line">t3 = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t2=&quot;</span>, t2)  <span class="comment"># 2021-12-22 22:37:10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t3=&quot;</span>, t3) <span class="comment"># 2021-12-22 22:37:10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要传入一个结构化时间，那么可以对时间戳先转化为结构化时间，在给strftime()传入</span></span><br><span class="line"><span class="comment"># t5是一个结构化时间，指定一个时间戳戳: 1640010101</span></span><br><span class="line"><span class="comment"># t5: time.struct_time(tm_year=2021, tm_mon=12, tm_mday=20, tm_hour=22, tm_min=21, tm_sec=41, tm_wday=0, tm_yday=354, tm_isdst=0)</span></span><br><span class="line">t5 = time.localtime(<span class="number">1640010101</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t5==&gt;&quot;</span>, t5)</span><br><span class="line">t6 = time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>, t5)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t6==&gt;&quot;</span>, t6) <span class="comment"># 2021-12-20 22:21:41</span></span><br></pre></td></tr></table></figure><h4 id="1-4-time-strptime"><a href="#1-4-time-strptime" class="headerlink" title="1.4 time.strptime()"></a>1.4 <code>time.strptime()</code></h4><blockquote><p>主要用来将字符串时间转换为格式化时间</p></blockquote><blockquote><p>来看源码:</p><ul><li>看源码注释解释：根据传入的时间格式，将一个字符串时间转化成一个结构化时间</li><li>而且它的返回值就是一个<code>结构化时间</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">strptime</span>(<span class="params">string, <span class="built_in">format</span></span>): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    strptime(string, format) -&gt; struct_time</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parse a string to a time tuple according to a format specification.</span></span><br><span class="line"><span class="string">    See the library reference manual for formatting codes (same as</span></span><br><span class="line"><span class="string">    strftime()).</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Commonly used format codes:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    %Y  Year with century as a decimal number.</span></span><br><span class="line"><span class="string">    %m  Month as a decimal number [01,12].</span></span><br><span class="line"><span class="string">    %d  Day of the month as a decimal number [01,31].</span></span><br><span class="line"><span class="string">    %H  Hour (24-hour clock) as a decimal number [00,23].</span></span><br><span class="line"><span class="string">    %M  Minute as a decimal number [00,59].</span></span><br><span class="line"><span class="string">    %S  Second as a decimal number [00,61].</span></span><br><span class="line"><span class="string">    %z  Time zone offset from UTC.</span></span><br><span class="line"><span class="string">    %a  Locale&#x27;s abbreviated weekday name.</span></span><br><span class="line"><span class="string">    %A  Locale&#x27;s full weekday name.</span></span><br><span class="line"><span class="string">    %b  Locale&#x27;s abbreviated month name.</span></span><br><span class="line"><span class="string">    %B  Locale&#x27;s full month name.</span></span><br><span class="line"><span class="string">    %c  Locale&#x27;s appropriate date and time representation.</span></span><br><span class="line"><span class="string">    %I  Hour (12-hour clock) as a decimal number [01,12].</span></span><br><span class="line"><span class="string">    %p  Locale&#x27;s equivalent of either AM or PM.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Other codes may be available on your platform.  See documentation for</span></span><br><span class="line"><span class="string">    the C library strftime function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> struct_time</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字符串时间转化为结构化时间</span></span><br><span class="line"><span class="comment"># t1 = time.struct_time(tm_year=2021, tm_mon=11, tm_mday=22, tm_hour=23, tm_min=27, tm_sec=55, tm_wday=0, tm_yday=326, tm_isdst=-1)</span></span><br><span class="line">t_str = <span class="string">&quot;2021-11-22 23:27:55&quot;</span></span><br><span class="line">t1 = time.strptime(t_str, <span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1===&gt;&quot;</span>, t1)</span><br></pre></td></tr></table></figure><h4 id="1-5-time-mktime"><a href="#1-5-time-mktime" class="headerlink" title="1.5 time.mktime()"></a>1.5 <code>time.mktime()</code></h4><blockquote><p>主要是用来将结构化时间转换为时间戳</p></blockquote><blockquote><p>来看源码：</p><ul><li>源码注释说：将一个本地的<code>结构化时间</code>转化成<code>秒数</code></li><li>返回的是一个浮点数，需要返回整数时，就需要<code>int()</code>进行转换</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mktime</span>(<span class="params">p_tuple</span>): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mktime(tuple) -&gt; floating point number</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Convert a time tuple in local time to seconds since the Epoch.</span></span><br><span class="line"><span class="string">    Note that mktime(gmtime(0)) will not generally return zero for most</span></span><br><span class="line"><span class="string">    time zones; instead the returned value will either be equal to that</span></span><br><span class="line"><span class="string">    of the timezone or altzone attributes on the time module.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># t7是结构化时间</span></span><br><span class="line"><span class="comment"># t7: time.struct_time(tm_year=2021, tm_mon=12, tm_mday=22, tm_hour=23, tm_min=28, tm_sec=28, tm_wday=2, tm_yday=356, tm_isdst=0)</span></span><br><span class="line">t7 = time.localtime()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t7===&gt;&quot;</span>, t7)</span><br><span class="line">t8 = <span class="built_in">int</span>(time.mktime(t7)) * <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t8===&gt;&quot;</span>, t8) <span class="comment"># 1640186908000</span></span><br></pre></td></tr></table></figure><h4 id="1-5-时间戳转换为字符串时间"><a href="#1-5-时间戳转换为字符串时间" class="headerlink" title="1.5 时间戳转换为字符串时间"></a>1.5 时间戳转换为字符串时间</h4><blockquote><p>下图是转化的图</p></blockquote><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20211222232146570.png" class="" title="image-20211222232146570"><blockquote><p>转化的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将t1时间戳转化为字符串时间</span></span><br><span class="line">t1 = <span class="number">1637594296</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1时间戳:&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转化为结构化时间</span></span><br><span class="line">t1 = time.localtime(t1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转化为字符串时间</span></span><br><span class="line">t1 = time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1字符串时间:&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># t1时间戳: 1637594296</span></span><br><span class="line"><span class="comment"># t1字符串时间: 2021-11-22 23:18:16</span></span><br></pre></td></tr></table></figure><h4 id="1-6-字符串时间转化为时间戳"><a href="#1-6-字符串时间转化为时间戳" class="headerlink" title="1.6 字符串时间转化为时间戳"></a>1.6 字符串时间转化为时间戳</h4><blockquote><p>下图是转化的图</p></blockquote><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20211222234739800.png" class="" title="image-20211222234739800"><blockquote><p>下面是转化的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将t1字符串时间转化为时间戳</span></span><br><span class="line">t1 = <span class="string">&quot;2021-11-22 23:27:55&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1字符串:&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先转化为结构化时间</span></span><br><span class="line">t1 = time.strptime(t1, <span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再将结构化时间转化为时间戳</span></span><br><span class="line">t1 = <span class="built_in">int</span>(time.mktime(t1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1时间戳:&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果:</span></span><br><span class="line"><span class="comment"># t1字符串: 2021-11-22 23:27:55</span></span><br><span class="line"><span class="comment"># t1时间戳: 1637594875</span></span><br></pre></td></tr></table></figure><h3 id="6、datetime模块"><a href="#6、datetime模块" class="headerlink" title="6、datetime模块"></a>6、datetime模块</h3><blockquote><p><code>datetime</code>也是一个时间模块，不同于<code>time</code>模块，可以用来对时间进行加减</p></blockquote><h4 id="1-1-当前时间"><a href="#1-1-当前时间" class="headerlink" title="1.1 当前时间"></a>1.1 当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># now_time: 2021-12-22 23:55:17.339830</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now_time:&quot;</span>, now_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now_time type: &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now_time type:&quot;</span>, <span class="built_in">type</span>(now_time))</span><br></pre></td></tr></table></figure><h4 id="1-2-时间加减"><a href="#1-2-时间加减" class="headerlink" title="1.2 时间加减"></a>1.2 时间加减</h4><blockquote><p><code>datetime</code>可以对时间进行加减，使用<code>datetime.timedelta()</code></p></blockquote><blockquote><p>先看源码</p><ul><li>可以看到这个时间加减类，接收<code>days</code>&#x2F;<code>seconds</code>&#x2F;<code>weeks</code>&#x2F;<code>hours</code>等格式，传入的值是一个float类型</li><li><code>float = ...</code> 这三个点在python中表示是<code>&lt;class ellipsis&gt;</code>，用来占位的，和pass一样</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">timedelta</span>(SupportsAbs[timedelta]):</span><br><span class="line">    <span class="built_in">min</span>: ClassVar[timedelta]</span><br><span class="line">    <span class="built_in">max</span>: ClassVar[timedelta]</span><br><span class="line">    resolution: ClassVar[timedelta]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        days: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        seconds: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        microseconds: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        milliseconds: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        minutes: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        hours: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        weeks: <span class="built_in">float</span> = ...,</span></span><br><span class="line"><span class="params">        *,</span></span><br><span class="line"><span class="params">        fold: <span class="built_in">int</span> = ...,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>: ...</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">days</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">seconds</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">microseconds</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">total_seconds</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>: ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">now_time = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># now_time: 2021-12-22 23:55:17.339830</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now_time:&quot;</span>, now_time) <span class="comment"># 2021-12-23 00:09:04.046012</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now_time type: &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;now_time type:&quot;</span>, <span class="built_in">type</span>(now_time)) <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 天数加减</span></span><br><span class="line">three_day_later = now_time + datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三天后:&quot;</span>, three_day_later) <span class="comment"># 2021-12-26 00:09:04.046012</span></span><br><span class="line"></span><br><span class="line">three_day_early = now_time + datetime.timedelta(days=-<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三天前:&quot;</span>, three_day_early) <span class="comment"># 2021-12-20 00:09:04.046012</span></span><br></pre></td></tr></table></figure><h4 id="1-3-时间戳转化为datetime类型的字符串时间"><a href="#1-3-时间戳转化为datetime类型的字符串时间" class="headerlink" title="1.3 时间戳转化为datetime类型的字符串时间"></a>1.3 时间戳转化为datetime类型的字符串时间</h4><blockquote><p>一步到位将时间戳转化为字符串格式的时间，此时的字符串格式时间类型是<code>&lt;class &#39;datetime.datetime&#39;&gt;</code>，可以使用<code>datetime.timedelta()</code>进行时间的加减</p><ul><li>其实<code>time</code>模块也可以做到，但是需要两步<ul><li>第一步需要先转化为结构化时间</li><li>第二步需要指定输出字符串的格式</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结束时间+7天</span></span><br><span class="line"><span class="comment"># 对时间戳进行加减N天</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间戳</span></span><br><span class="line">t1 = time.time()</span><br><span class="line">t2 = datetime.datetime.fromtimestamp(t1) + datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021-12-30 00:47:04.755311</span></span><br><span class="line"><span class="built_in">print</span>(t2) </span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再将加了N天的时间转化为时间戳</span></span><br><span class="line">t3 = t2.timetuple()</span><br><span class="line">t3_stamp = <span class="built_in">int</span>(time.mktime(t3)) * <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(t3_stamp) <span class="comment"># 1640796424000</span></span><br></pre></td></tr></table></figure><h4 id="1-4-datetime类型的字符串时间转化为时间戳"><a href="#1-4-datetime类型的字符串时间转化为时间戳" class="headerlink" title="1.4 datetime类型的字符串时间转化为时间戳"></a>1.4 datetime类型的字符串时间转化为时间戳</h4><blockquote><p>将类型是<code>&lt;class &#39;datetime.datetime&#39;&gt;</code>的字符串时间转换为时间戳，比如我对某个时间进行了加减，然后需要转换为时间戳存起来</p><p>注意:</p><ul><li><code>datetime.datetime.now()</code>返回的时间类型是<code>&lt;class &#39;datetime.datetime&#39;&gt;</code></li><li>可以通过<code>timetuple()</code>将时间类型为<code>&lt;class &#39;datetime.datetime&#39;&gt;</code>转换为结构化时间</li><li>最后再使用<code>time.mktime()</code>转化为时间戳</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">three_day_early = datetime.datetime.now() + datetime.timedelta(days=-<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三天前:&quot;</span>, three_day_early) <span class="comment"># 2021-12-20 00:33:05.384049</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;三天前格式:&quot;</span>, <span class="built_in">type</span>(three_day_early)) <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timetuple() 返回的是结构化时间</span></span><br><span class="line">struct_three_day_early = three_day_early.timetuple()</span><br><span class="line"></span><br><span class="line">t1 = <span class="built_in">int</span>(time.mktime(struct_three_day_early)) * <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment"># 1639931585000</span></span><br></pre></td></tr></table></figure><h4 id="1-5-datetime和time模块复习"><a href="#1-5-datetime和time模块复习" class="headerlink" title="1.5 datetime和time模块复习"></a>1.5 datetime和time模块复习</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_switch_to_stamp</span>():</span><br><span class="line">    <span class="comment"># 时间戳转换为字符串时间戳</span></span><br><span class="line">    s = <span class="number">1640796424000</span> // <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转为结构体</span></span><br><span class="line">    s_struct = time.localtime(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转为字符串时间</span></span><br><span class="line">    s_str_time = time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s_str_time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串格式转化为时间戳</span></span><br><span class="line">    s_str_time_new = <span class="string">&quot;2021-12-25 10:00:00&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先转化为结构化时间</span></span><br><span class="line">    s_struct_new = time.strptime(s_str_time_new, <span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再转化为时间戳</span></span><br><span class="line">    s_time_new_stamp = <span class="built_in">int</span>(time.mktime(s_struct_new))</span><br><span class="line">    <span class="built_in">print</span>(s_time_new_stamp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">datetime_switch_to_stamp</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个里面既包含了将时间戳转换为字符串时间，也包含了将字符串时间转换为时间戳</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在存在的一个时间戳上+N天，并且再将最后的N天转换为时间戳</span></span><br><span class="line">    s = <span class="number">1640796424000</span> // <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    three_day_later = datetime.datetime.fromtimestamp(s) + datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 三天后的时间转化为时间戳</span></span><br><span class="line">    <span class="comment"># step1: 三天后的时间转化为结构化时间</span></span><br><span class="line">    new_struct_time = three_day_later.timetuple()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: 再将结构化时间转换为是时间戳</span></span><br><span class="line">    new_time_stamp = <span class="built_in">int</span>(time.mktime(new_struct_time))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(new_time_stamp)</span><br></pre></td></tr></table></figure><h2 id="六、正则表达式"><a href="#六、正则表达式" class="headerlink" title="六、正则表达式"></a>六、正则表达式</h2><h3 id="1、正则表达式"><a href="#1、正则表达式" class="headerlink" title="1、正则表达式"></a>1、正则表达式</h3><blockquote><p>定义：一套规则，匹配字符串</p><p>功能：检测一个输入的字符串是否合法，从一个大文件中找到所有符合规则的内容</p><p>推荐一个正则好用的网站:</p><p><a href="http://tool.chinaz.com/regex/">http://tool.chinaz.com/regex/</a></p></blockquote><h3 id="2、元字符"><a href="#2、元字符" class="headerlink" title="2、元字符"></a>2、元字符</h3><blockquote></blockquote><h3 id="x、正则小例子"><a href="#x、正则小例子" class="headerlink" title="x、正则小例子"></a>x、正则小例子</h3><h4 id="x-1-切割cookies为字典"><a href="#x-1-切割cookies为字典" class="headerlink" title="x.1 切割cookies为字典"></a>x.1 切割cookies为字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convert_cookie</span>():</span><br><span class="line">    cookie_list1 = cookie_str.split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">    ret = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cookie_list1:</span><br><span class="line">        d = re.split(<span class="string">r&quot;=&quot;</span>, i.strip(), maxsplit=<span class="number">1</span>)</span><br><span class="line">        ret[d[<span class="number">0</span>]] = d[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="七、进程和线程"><a href="#七、进程和线程" class="headerlink" title="七、进程和线程"></a>七、进程和线程</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><blockquote><p>进行中的程序就是一个进程</p><p>1.占用资源</p><p>2.pid: 能唯一标识一个进程</p><p>3.计算机中最小的资源分配单位</p></blockquote><h3 id="2、并发与并行"><a href="#2、并发与并行" class="headerlink" title="2、并发与并行"></a>2、并发与并行</h3><h4 id="1-1-并发"><a href="#1-1-并发" class="headerlink" title="1.1 并发"></a>1.1 并发</h4><blockquote><ul><li>多个程序轮流在一个单核cpu上执行</li><li>宏观上：多个程序在同时执行</li><li>微观上：多个程序轮流在一个cpu上执行，本质还是串行</li><li>本质：每个任务都是交替执行，但由于CPU执行速度太快，所以我们感觉是所有任务都在同时执行</li></ul></blockquote><h4 id="1-2-并行"><a href="#1-2-并行" class="headerlink" title="1.2 并行"></a>1.2 并行</h4><blockquote><ul><li>多个程序同时执行，并且同时在多核cpu上执行</li><li>真正的并行执行多任务也只能在多核cpu上实现，但是由于任务数量远远多于cpu核心数量，所以操作系统也会自动把很多任务轮流调度到每个核上去执行</li></ul></blockquote><h3 id="3、同步、异步、阻塞、非阻塞"><a href="#3、同步、异步、阻塞、非阻塞" class="headerlink" title="3、同步、异步、阻塞、非阻塞"></a>3、同步、异步、阻塞、非阻塞</h3><h4 id="1-1-同步"><a href="#1-1-同步" class="headerlink" title="1.1 同步"></a>1.1 同步</h4><blockquote><p>在做A事的时候发起B事件，必须等待B事件完成后才能继续做A事</p></blockquote><h4 id="1-2-异步"><a href="#1-2-异步" class="headerlink" title="1.2 异步"></a>1.2 异步</h4><blockquote><p>在做A事的时候发起B事件，不需要等待B事件完成后才能继续做A事</p></blockquote><h4 id="1-3-阻塞"><a href="#1-3-阻塞" class="headerlink" title="1.3 阻塞"></a>1.3 阻塞</h4><blockquote><p>如果CPU不工作了，input accept  recv  recvfrom sleep connect</p></blockquote><h4 id="1-4-非阻塞"><a href="#1-4-非阻塞" class="headerlink" title="1.4 非阻塞"></a>1.4 非阻塞</h4><blockquote><p>CPU正常在工作</p></blockquote><h3 id="4、线程"><a href="#4、线程" class="headerlink" title="4、线程"></a>4、线程</h3><blockquote><p>线程是进程中的一个单位，不能脱离进程存在</p><p>线程是计算机中能被CPU调度的最小单位</p><p>python的thread模块比较底层，python的threading模块对thread做了一些包装，方便使用</p></blockquote><h3 id="5、threading多线程"><a href="#5、threading多线程" class="headerlink" title="5、threading多线程"></a>5、threading多线程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> sing start time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> sing end time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> walk start time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> walk end time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sing_th = threading.Thread(target=sing, args=(<span class="string">&quot;bob&quot;</span>,))</span><br><span class="line">walk_th = threading.Thread(target=walk, args=(<span class="string">&quot;sam&quot;</span>,))</span><br><span class="line"></span><br><span class="line">ths = [sing_th, walk_th]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> th <span class="keyword">in</span> ths:</span><br><span class="line">    th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> th <span class="keyword">in</span> ths:</span><br><span class="line">    th.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done!!!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6、线程池"><a href="#6、线程池" class="headerlink" title="6、线程池"></a>6、线程池</h3><blockquote><p>线程池比较适合做多个目标做同一件事</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> sing start time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> sing end time:<span class="subst">&#123;time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启线程池，最多1次有10个线程被执行</span></span><br><span class="line">pool = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">users = [<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;tom&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并发执行</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> users:</span><br><span class="line">    pool.submit(sing, name=name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待子线程执行完成</span></span><br><span class="line">pool.shutdown(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done!&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20230217135229336.png" class="" title="image-20230217135229336"><h2 id="八、面向对象"><a href="#八、面向对象" class="headerlink" title="八、面向对象"></a>八、面向对象</h2><h3 id="1、类定义"><a href="#1、类定义" class="headerlink" title="1、类定义"></a>1、类定义</h3><h4 id="1-1-类的实例化"><a href="#1-1-类的实例化" class="headerlink" title="1.1 类的实例化"></a>1.1 类的实例化</h4><blockquote><ul><li>实例化：<ul><li>调用类的过程称为实例化</li></ul></li><li>实例化发生了三件事<ul><li>1.先产生了一个空对象</li><li>2.<code>python</code>会自动调用类的<code>__init__</code>方法将空对象已经调用类时括号内传入的参数一同传给<code>__init__</code>方法</li><li>3.返回初始化完成的对象</li></ul></li><li><code>__init__</code>总结<ul><li>1.会在调用类时自动触发执行，用来为对象初始化自己的独有的数据</li><li>2.因为<code>__init__</code>是自动触发执行的，而且<code>__init__</code>里存放的是为对象初始化属性的功能，就可以存放任何其他代码，想要在类调用时就立刻执行的代码都可以放到该方法中</li><li>3.<code>__init__</code>方法必须返回None</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变量定义</span></span><br><span class="line">    tag = <span class="string">&quot;Tim&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name_v,age_v</span>):  <span class="comment"># self 就是obj_a这个空对象</span></span><br><span class="line">        self.name_k = name_v   <span class="comment"># obj_a.name = name -&gt; obj_a这个对象字典中&#123;name_k:name_v&#125;</span></span><br><span class="line">        self.age_k = age_v     <span class="comment"># obj_a.age_k = age_v -&gt; obj_a这个对象字典中&#123;name_k:name_v,age_k:age_v&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the car cost:<span class="subst">&#123;self.name_k&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj_a = A(<span class="string">&quot;sam&quot;</span>,<span class="number">19</span>) <span class="comment"># A.__init__(空对象，&quot;sam&quot;,19)，然后将创建好的类返回给obj_a这个对象</span></span><br><span class="line"><span class="built_in">print</span>(obj_a.__dict__) <span class="comment">#&#123;&#x27;name_k&#x27;: &#x27;sam&#x27;, &#x27;age_k&#x27;: 19&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-类的属性查找"><a href="#1-2-类的属性查找" class="headerlink" title="1.2 类的属性查找"></a>1.2 类的属性查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    tag = <span class="string">&quot;Tim&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name_v,age_v</span>):</span><br><span class="line">        self.name_k = name_v</span><br><span class="line">        self.age_k = age_v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drive</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;the car cost:<span class="subst">&#123;self.name_k&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj_a = A(<span class="string">&quot;sam&quot;</span>,<span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类中存放的是对象共有的数据与功能</span></span><br><span class="line"><span class="comment"># 类可以访问:</span></span><br><span class="line"><span class="comment"># 1.类的数据属性</span></span><br><span class="line"><span class="built_in">print</span>(A.tag) <span class="comment"># Tim,就是tag的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.类的函数属性</span></span><br><span class="line"><span class="built_in">print</span>(A.drive) <span class="comment"># &lt;function A.drive at 0x00000000028B9B70&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类的数据属性和函数属性就是为对象服务的，对象在调用时，会先从自己的属性字典中去找，如果没有找到就会去类的属性字典去找</span></span><br></pre></td></tr></table></figure><h4 id="1-3-对象使用类方法就是绑定方法"><a href="#1-3-对象使用类方法就是绑定方法" class="headerlink" title="1.3 对象使用类方法就是绑定方法"></a>1.3 对象使用类方法就是绑定方法</h4><blockquote><p>对象调用类中方法，调用哪个方法，就会和这个方法形成绑定关系，并且将自己当做第一个形参传入给方法，然后类方法对这个对象进行各种操作</p></blockquote><h3 id="2、类的三大属性"><a href="#2、类的三大属性" class="headerlink" title="2、类的三大属性"></a>2、类的三大属性</h3><blockquote><p><a href="https://www.cnblogs.com/peng104/p/9550305.html">https://www.cnblogs.com/peng104/p/9550305.html</a></p><ul><li>封装</li><li>继承</li><li>多态</li></ul></blockquote><h3 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a>3、封装</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/109310247">https://zhuanlan.zhihu.com/p/109310247</a></p></blockquote><blockquote><p>封装是面向对象三大特性最核心的一个特性</p><p>封装就是将数据属性和方法属性整合到容器中，容器就是类，对象</p></blockquote><h4 id="1-1-私有变量、私有方法"><a href="#1-1-私有变量、私有方法" class="headerlink" title="1.1 私有变量、私有方法"></a>1.1 私有变量、私有方法</h4><blockquote><p>在属性名前加<code>__</code>(两个下划线)前缀，就会实现对外隐藏属性效果</p><p>Python的Class机制采用双下划线开头的方式将属性隐藏起来（设置成私有的），但其实这仅仅只是一种变形操作，类中所有双下滑线开头的属性都会在类定义阶段、检测语法时自动变成“_类名__属性名”的形式</p><p>在类外部无法直接访问双下滑线开头的属性，但知道了类名和属性名就可以拼出名字：<code>_类名__属性</code>，然后就可以访问了，如<code>Foo._A__N</code>，所以说这种操作并没有严格意义上地限制外部访问，仅仅只是一种语法意义上的变形。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    __N=<span class="number">0</span> <span class="comment"># 变形为_Foo__N</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__x=<span class="number">10</span> <span class="comment"># 变形为self._Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># 变形为_Foo__f1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__f1 run&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):  <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__f1() <span class="comment">#变形为self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__N) <span class="comment"># 报错AttributeError:类Foo没有属性__N</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="built_in">print</span>(obbj.__x) <span class="comment"># 报错AttributeError:对象obj没有属性__x</span></span><br></pre></td></tr></table></figure><h4 id="1-2-property"><a href="#1-2-property" class="headerlink" title="1.2 property"></a>1.2 property</h4><blockquote><p>property:</p><ul><li>为此Python专门提供了一个装饰器property，可以将类中的函数“伪装成”对象的数据属性，对象在访问该特殊属性时会触发功能的执行，然后将返回值作为本次访问的结果</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,weight,height</span>):</span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.weight=weight</span><br><span class="line"><span class="meta">... </span>        self.height=height</span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">property</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">bmi</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.weight / (self.height**<span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=People(<span class="string">&#x27;lili&#x27;</span>,<span class="number">75</span>,<span class="number">1.85</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.bmi <span class="comment">#触发方法bmi的执行，将obj自动传给self，执行后返回值作为本次引用的结果</span></span><br><span class="line"><span class="number">21.913805697589478</span></span><br></pre></td></tr></table></figure><blockquote><p>使用property有效地保证了属性访问的一致性。另外property还提供设置和删除属性的功能</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变量定义</span></span><br><span class="line">    tag = <span class="string">&quot;Tim&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):  <span class="comment"># self 就是obj_a这个空对象</span></span><br><span class="line">        self.__name = name  <span class="comment"># obj_a.name = name -&gt; obj_a这个对象字典中&#123;name_k:name_v&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):   <span class="comment"># obj.name</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,new_value</span>): <span class="comment"># obj.name = &quot;hall&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(new_value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">str</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;new_value&#125;</span> must be string&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.__name = new_value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):  <span class="comment"># del obj.name</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.__name&#125;</span> cant not be delete&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&quot;hawold&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line"></span><br><span class="line">a.name = <span class="string">&quot;hall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a.name</span><br></pre></td></tr></table></figure><h3 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h3><blockquote><p>继承：</p><ul><li>是一种创建新类的方式，新建的类可以被称为子类或派生类，父类被称为基类或超类</li><li>python支持多继承</li><li>用来解决类与类之间代码冗余问题</li></ul></blockquote><h4 id="1-1-继承的骨架"><a href="#1-1-继承的骨架" class="headerlink" title="1.1 继承的骨架"></a>1.1 继承的骨架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub1</span>(<span class="title class_ inherited__">Parent1</span>):  <span class="comment"># 单继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub2</span>(Parent1,Parent2): <span class="comment"># 多继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看继承的父类</span></span><br><span class="line"><span class="built_in">print</span>(Sub1.__bases__) <span class="comment"># (&lt;class &#x27;__main__.Parent1&#x27;&gt;,)</span></span><br><span class="line"><span class="built_in">print</span>(Sub2.__bases__) <span class="comment"># (&lt;class &#x27;__main__.Parent1&#x27;&gt;, &lt;class &#x27;__main__.Parent2&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>Python2中有经典类和新式类区分</p><ul><li>经典类：没有继承object类的子类，以及该子类的子类子类</li><li>新式类：继承了object类的子类，以及该子类的子类子类</li></ul></li><li><p>Python3中没有新式类和经典类区分，默认继承object类，所以Python3就是新式类</p></li></ul></blockquote><h4 id="1-2-继承的属性查找"><a href="#1-2-继承的属性查找" class="headerlink" title="1.2 继承的属性查找"></a>1.2 继承的属性查找</h4><blockquote><ul><li>可以将多个子类中重复的部分抽离出来，形成一个父类让子类去继承</li><li>当子类的init方法初始化时参数比父类多，可以使用:<code>父类名.__init__(self,name,age,sex)</code>这种形式</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPeople</span>:</span><br><span class="line">    school = <span class="string">&#x27;harry&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">MyPeople</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_course</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> 正在选课&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">MyPeople</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex,salary,level</span>):</span><br><span class="line">        <span class="comment"># 指名道姓去调用父类的__init__方法</span></span><br><span class="line">        MyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level = level</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>老师正在给学生上课&quot;</span>)</span><br><span class="line"></span><br><span class="line">stu_obj = Student(<span class="string">&quot;lili&quot;</span>,<span class="number">18</span>,<span class="string">&quot;male&quot;</span>)</span><br><span class="line">stu_obj.choose_course()</span><br><span class="line"></span><br><span class="line">teacher_obj = Teacher(<span class="string">&quot;sam&quot;</span>,<span class="number">29</span>,<span class="string">&quot;female&quot;</span>,<span class="number">4000</span>,<span class="number">5</span>)</span><br><span class="line">teacher_obj.score()</span><br></pre></td></tr></table></figure><h4 id="1-3-单继承的属性查找"><a href="#1-3-单继承的属性查找" class="headerlink" title="1.3 单继承的属性查找"></a>1.3 单继承的属性查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单继承的属性查找</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f2&quot;</span>)</span><br><span class="line">        self.f1() <span class="comment"># b.f1(),所以会先去b这个对象自己属性字典中找</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bar.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b = Bar()</span></span><br><span class="line"><span class="comment"># b.f2()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要访问Foo的f1方法</span></span><br><span class="line"><span class="comment"># 方法一: Foo.f1(self)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f2&quot;</span>)</span><br><span class="line">        Foo.f1(self) <span class="comment"># Foo.f1(self) 访问Foo类中f1方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bar.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二: 隐藏属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># 变形: _Foo__f1()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Foo.f2&quot;</span>)</span><br><span class="line">        self.__f1() <span class="comment"># self._Foo__f1(),因为b3这个子类的属性字典没有_Foo__f1这个属性，就会去父类中找</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># self._Bar__f1()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bar.f1&quot;</span>)</span><br><span class="line"></span><br><span class="line">b3 = Bar()</span><br><span class="line">b3.f2()</span><br></pre></td></tr></table></figure><h4 id="1-4-继承原理"><a href="#1-4-继承原理" class="headerlink" title="1.4 继承原理"></a>1.4 继承原理</h4><blockquote><ul><li><p>python到底是如何实现继承的呢？ 对于你定义的每一个类，Python都会计算出一个方法解析顺序(MRO)列表，该MRO列表就是一个简单的所有基类的线性顺序列表</p></li><li><p>python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。 而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>子类会先于父类被检查</span><br><span class="line"><span class="number">2.</span>多个父类会根据它们在列表中的顺序被检查</span><br><span class="line"><span class="number">3.</span>如果对下一个类存在两个合法的选择,选择第一个父类</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-5-多继承"><a href="#1-5-多继承" class="headerlink" title="1.5 多继承"></a>1.5 多继承</h4><blockquote><p> 一个子类可以同时继承多个父类，这样的设计常被人诟病，一来它有可能导致可恶的菱形问题，二来在人的世界观里继承应该是个”is-a”关系。 比如轿车类之所以可以继承交通工具类，是因为基于人的世界观，我们可以说：轿车是一个(“is-a”)交通工具，而在人的世界观里，一个物品不可能是多种不同的东西，因此多重继承在人的世界观里是说不通的，它仅仅只是代码层面的逻辑。不过有没有这种情况，一个类的确是需要继承多个类呢？</p><p> 答案是有，我们还是拿交通工具来举例子:</p><p> 民航飞机、直升飞机、轿车都是一个（is-a）交通工具，前两者都有一个功能是飞行fly，但是轿车没有，所以如下所示我们把飞行功能放到交通工具这个父类中是不合理的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>:  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CivilAircraft</span>(<span class="title class_ inherited__">Vehicle</span>):  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Helicopter</span>(<span class="title class_ inherited__">Vehicle</span>):  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(<span class="title class_ inherited__">Vehicle</span>):  <span class="comment"># 汽车并不会飞，但按照上述继承关系，汽车也能飞了</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p> 但是如果民航飞机和直升机都各自写自己的飞行fly方法，又违背了代码尽可能重用的原则（如果以后飞行工具越来越多，那会重复代码将会越来越多）。</p><p> 怎么办？？？为了尽可能地重用代码，那就只好在定义出一个飞行器的类，然后让民航飞机和直升飞机同时继承交通工具以及飞行器两个父类，这样就出现了多重继承。这时又违背了继承必须是”is-a”关系</p></blockquote><blockquote><p>Python语言可没有接口功能，但Python提供了Mixins机制，简单来说Mixins机制指的是子类混合(mixin)不同类的功能，而这些类采用统一的命名规范（例如Mixin后缀），以此标识这些类只是用来混合功能的，并不是用来标识子类的从属”is-a”关系的，所以Mixins机制本质仍是多继承，但同样遵守”is-a”关系，如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>:  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyableMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CivilAircraft</span>(FlyableMixin, Vehicle):  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Helicopter</span>(FlyableMixin, Vehicle):  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(<span class="title class_ inherited__">Vehicle</span>):  <span class="comment"># 汽车</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps: 采用某种规范（如命名规范）来解决具体的问题是python惯用的套路</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，上面的CivilAircraft、Helicopter类实现了多继承，不过它继承的第一个类我们起名为FlyableMixin，而不是Flyable，这个并不影响功能，但是会告诉后来读代码的人，这个类是一个Mixin类，表示混入(mix-in)，这种命名方式就是用来明确地告诉别人（python语言惯用的手法），这个类是作为功能添加到子类中，而不是作为父类，它的作用同Java中的接口。所以从含义上理解，CivilAircraft、Helicopter类都只是一个Vehicle，而不是一个飞行器。</p><p>使用Mixin类实现多重继承要非常小心</p><ul><li>首先它必须表示某一种功能，而不是某个物品，python 对于mixin类的命名方式一般以 Mixin, able, ible 为后缀</li><li>其次它必须责任单一，如果有多个功能，那就写多个Mixin类，一个类可以继承多个Mixin，为了保证遵循继承的“is-a”原则，只能继承一个标识其归属含义的父类</li><li>然后，它不依赖于子类的实现</li><li>最后，子类即便没有继承这个Mixin类，也照样可以工作，就是缺少了某个功能。（比如飞机照样可以载客，就是不能飞了）</li></ul></blockquote><h4 id="1-6-子类派生的新方法中重用父类方法"><a href="#1-6-子类派生的新方法中重用父类方法" class="headerlink" title="1.6 子类派生的新方法中重用父类方法"></a>1.6 子类派生的新方法中重用父类方法</h4><blockquote><p>子类可以派生出自己新的属性，在进行属性查找时，子类中的属性名会优先于父类被查找，例如每个老师还有职称这一属性，我们就需要在Teacher类中定义该类自己的<code>__init__</code>覆盖父类的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"><span class="meta">... </span>    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age</span>):</span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.sex=sex</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age,title</span>): <span class="comment"># 派生</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.sex=sex</span><br><span class="line"><span class="meta">... </span>        self.age=age</span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;高级讲师&#x27;</span>) <span class="comment">#只会找自己类中的__init__，并不会自动调用父类的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.name,obj.sex,obj.age,obj.title</span><br><span class="line">(<span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;female&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;高级讲师&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>很明显子类Teacher中<code>__init__</code>内的前三行又是在写重复代码，若想在子类派生出的方法内重用父类的功能，有两种实现方式</p><p>方法一：“指名道姓”地调用某一个类的函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age,title</span>):</span><br><span class="line"><span class="meta">... </span>        People.__init__(self,name,age,sex) <span class="comment">#调用的是函数,因而需要传入self</span></span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>方法二：super()</p><p>调用super()会得到一个特殊的对象，该对象专门用来引用父类的属性，且严格按照MRO规定的顺序向后查找</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age,title</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().__init__(name,age,sex) <span class="comment">#调用的是绑定方法，自动传入self</span></span><br><span class="line"><span class="meta">... </span>        self.title=title</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>提示：在Python2中super的使用需要完整地写成super(自己的类名,self) ,而在python3中可以简写为super()。</p><p>这两种方式的区别是：方式一是跟继承没有关系的，而方式二的super()是依赖于继承的，并且即使没有直接继承关系，super()仍然会按照MRO继续往后查找</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#A没有继承B</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().test()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.mro() <span class="comment"># 在代码层面A并不是B的子类，但从MRO列表来看，属性查找时，就是按照顺序C-&gt;A-&gt;B-&gt;object，B就相当于A的“父类”</span></span><br><span class="line">[&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.C&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.A&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.B&#x27;</span>&gt;,&lt;<span class="keyword">class</span> ‘<span class="built_in">object</span><span class="string">&#x27;&gt;]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; obj=C()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; obj.test() # 属性查找的发起者是类C的对象obj，所以中途发生的属性查找都是参照C.mro()</span></span><br><span class="line"><span class="string">from B</span></span><br></pre></td></tr></table></figure><blockquote><p>obj.test()首先找到A下的test方法，执行super().test()会基于MRO列表(以C.mro()为准)当前所处的位置继续往后查找()，然后在B中找到了test方法并执行。</p><p>关于在子类中重用父类功能的这两种方式，使用任何一种都可以，但是在最新的代码中还是推荐使用super()</p></blockquote><h4 id="1-7、继承的知识扩展"><a href="#1-7、继承的知识扩展" class="headerlink" title="1.7、继承的知识扩展"></a>1.7、继承的知识扩展</h4><h5 id="1-1-1-子类继承语法"><a href="#1-1-1-子类继承语法" class="headerlink" title="1.1.1 子类继承语法"></a>1.1.1 子类继承语法</h5><blockquote><p>语法：class  子类名(父类名):pass</p><p>子类可以使用父类中的： 方法  静态变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类可以使用父类中的： 方法  静态变量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is eating&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is drinking&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is sleeping&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climb_tree</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is climbing&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = Cat(<span class="string">&quot;xxmo&quot;</span>)</span><br><span class="line">s.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先开辟空间，空间里有一个类指针－＞指向Cat</span></span><br><span class="line"><span class="comment"># 调用init，对象在自己的空间中找init没找到，到Cat类中找init也没找到</span></span><br><span class="line"><span class="comment"># 找父类Animal中的init</span></span><br></pre></td></tr></table></figure><h5 id="1-1-2-子类方法中调用父类方法"><a href="#1-1-2-子类方法中调用父类方法" class="headerlink" title="1.1.2 子类方法中调用父类方法"></a>1.1.2 子类方法中调用父类方法</h5><blockquote><p>子类的对象，如果去调用方法，永远先调用自己的方法</p><p>1.如果自己有该方法，则用自己的，语法： self.子类方法</p><p>2.如果自己没有，则使用父类的，语法：self.父类方法</p><p>3.如果子类方法和父类方法重名，也就是自己有该方法，父类也有该方法，此时子类方法还想调用父类的方法，则直接在子类方法中调用父类的方法，调用方式： 父类名.方法名(self)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is eating&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is drinking&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is sleeping&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子类的eat方法&quot;</span>)</span><br><span class="line">        Animal.eat(self)  <span class="comment"># 因为子类和父类都有eating方法，仍想调用父类的eating就使用： 父类名.父类方法(self) </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climb_tree</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is climbing&quot;</span>)</span><br><span class="line">        self.drink() <span class="comment"># 因为子类没有drink方法，但是父类有drink方法，所以直接调用父类的drink方法</span></span><br><span class="line"></span><br><span class="line">s = Cat(<span class="string">&quot;xxmo&quot;</span>)</span><br><span class="line">s.eat() </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊例子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.func() <span class="comment"># 在每一个self调用func时，不看这句话在哪执行，只看self是谁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in Foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in Son&quot;</span>)</span><br><span class="line"></span><br><span class="line">Son()</span><br></pre></td></tr></table></figure><h5 id="1-1-3-重写父类的-init-构造方法"><a href="#1-1-3-重写父类的-init-构造方法" class="headerlink" title="1.1.3 重写父类的__init__构造方法"></a>1.1.3 重写父类的<code>__init__</code>构造方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is eating&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is drinking&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is sleeping&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,color</span>):</span><br><span class="line">        Animal.__init__(self,name) <span class="comment"># 调用父类的初始化，完成一些通用属性的初始化</span></span><br><span class="line">        self.age = age  <span class="comment"># 属于子类(派生类)的数据属性</span></span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        msg = <span class="string">f&quot;My cat name is <span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span> years old,It\&#x27;s <span class="subst">&#123;self.color&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">s = Cat(<span class="string">&quot;kim&quot;</span>,<span class="number">18</span>,<span class="string">&quot;red&quot;</span>)</span><br><span class="line">s.walk()</span><br></pre></td></tr></table></figure><h3 id="5、多态"><a href="#5、多态" class="headerlink" title="5、多态"></a>5、多态</h3><blockquote><p>多态就是同一事物有多种形态，比如水有冰、水蒸气</p><p>所以多态就是在继承背景下的一种描述</p><p>多态性本质是可以在不考虑对象具体类型的情况下而直接使用对象</p><p>也就是不同的类型有了公共的方法，那就是多态了，也就是接口的概念</p><p>但是python的多态不是继承来实现</p></blockquote><h4 id="1-1-继承方法实现多态"><a href="#1-1-继承方法实现多态" class="headerlink" title="1.1 继承方法实现多态"></a>1.1 继承方法实现多态</h4><blockquote><p>下面是继承的实现了多态，Person  Dog类型都有say方法</p><p>但是这不是python推荐的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is Animal长度&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is person say&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is dog say&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Person()</span><br><span class="line">obj2 = Dog()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这就是多态，不同类型对象可使用相同的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_say</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.say()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_say(obj1)</span><br><span class="line">show_say(obj2)</span><br></pre></td></tr></table></figure><h4 id="1-2-鸭子类型"><a href="#1-2-鸭子类型" class="headerlink" title="1.2 鸭子类型"></a>1.2 鸭子类型</h4><blockquote><p>python的鸭子类型其实理解下来就是类型和方法长得像，那就是鸭子类型</p><p>其实说白了就是有些像go语言的接口类型，接口类型的方法、方法的入参、方法的返回值都必须满足实现，那就是接口类型，也就是鸭子类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is person say&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is dog say&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Person()</span><br><span class="line">obj2 = Dog()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这就是多态，不同类型对象可使用相同的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_say</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.say()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_say(obj1)</span><br><span class="line">show_say(obj2)</span><br></pre></td></tr></table></figure><h3 id="6、绑定方法"><a href="#6、绑定方法" class="headerlink" title="6、绑定方法"></a>6、绑定方法</h3><blockquote><p>绑定方法特殊之处在于将调用者当做第一个参数自动传入</p><ol><li>绑定给对象的方法：<ol><li>调用者是对象，自动传入的是类</li></ol></li><li>绑定给类的方法：<ol><li>调用者是类，自动传入的是类</li></ol></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql_conf = &#123;</span><br><span class="line">    <span class="string">&quot;ip&quot;</span>:<span class="string">&quot;1.1.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>:<span class="number">3306</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ip,port</span>):</span><br><span class="line">        self.ip = ip</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.ip&#125;</span>:<span class="subst">&#123;self.port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod  </span><span class="comment"># 将下面的函数装饰成绑定类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_conf</span>(<span class="params">xxx</span>):</span><br><span class="line">        <span class="built_in">print</span>(xxx) <span class="comment"># 代表传入的类本身</span></span><br><span class="line">        <span class="keyword">return</span> xxx(mysql_conf[<span class="string">&quot;ip&quot;</span>],mysql_conf[<span class="string">&quot;port&quot;</span>])</span><br><span class="line"></span><br><span class="line">b1 = Mysql.from_conf()</span><br><span class="line"><span class="built_in">print</span>(b1.__dict__)</span><br></pre></td></tr></table></figure><h3 id="7、反射"><a href="#7、反射" class="headerlink" title="7、反射"></a>7、反射</h3><h4 id="1-1-反射基础"><a href="#1-1-反射基础" class="headerlink" title="1.1 反射基础"></a>1.1 反射基础</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/109336120">https://zhuanlan.zhihu.com/p/109336120</a></p></blockquote><blockquote><p>python是动态语言，而反射(reflection)机制被视为动态语言的关键。</p><p>反射机制指的是在程序的运行状态中</p><ul><li><p>对于任意一个类，都可以知道这个类的所有属性和方法；</p></li><li><p>对于任意一个对象，都能够调用他的任意方法和属性。</p></li><li><p>这种动态获取程序信息以及动态调用对象的功能称为反射机制。</p></li></ul></blockquote><h4 id="1-2-反射实现"><a href="#1-2-反射实现" class="headerlink" title="1.2 反射实现"></a>1.2 反射实现</h4><blockquote><p>在python中实现反射非常简单，在程序运行过程中，如果我们获取一个不知道存有何种属性的对象，若想操作其内部属性，可以先通过内置函数<code>dir(obj)</code>来获取任意一个类或者对象的属性列表，列表中全为字符串格式</p></blockquote><blockquote><p>先通过<code>dir()</code> 查出某一个对象下有哪些属性可以来用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,gender</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.gender=gender</span><br><span class="line"> </span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">dir</span>(obj) <span class="comment"># 列表中查看到的属性全为字符串</span></span><br><span class="line">[......,<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>可以通过字符串反射到真正的属性上，得到属性值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir(obj)[-2] ： 取的是属性列表的倒数第二个属性，即：gender</span></span><br><span class="line"><span class="comment"># print(obj.__dict__) # &#123;&#x27;name&#x27;: &#x27;sam&#x27;, &#x27;age&#x27;: 18, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所以: obj.__dict__[dir(obj)[-2]] 就是 obj.__dict__[&quot;gender&quot;]=&gt; male</span></span><br><span class="line"><span class="built_in">print</span>(obj.__dict__[<span class="built_in">dir</span>(obj)[-<span class="number">2</span>]]) <span class="comment"># male</span></span><br></pre></td></tr></table></figure><h4 id="1-3-反射内置方法"><a href="#1-3-反射内置方法" class="headerlink" title="1.3 反射内置方法"></a>1.3 反射内置方法</h4><blockquote><ul><li>通过字符串来操作对象的属性了，这就涉及反射的内置函数<ul><li>hasattr</li><li>getattr</li><li>setattr</li><li>delattr</li></ul></li><li>Python中一切皆对象，类和对象都可以被这四个函数操作，用法一样</li></ul></blockquote><h5 id="1-1-1-hasattr"><a href="#1-1-1-hasattr" class="headerlink" title="1.1.1 hasattr"></a>1.1.1 hasattr</h5><blockquote></blockquote><h5 id="1-1-2-getattr"><a href="#1-1-2-getattr" class="headerlink" title="1.1.2 getattr"></a>1.1.2 getattr</h5><blockquote><p>getattr用来判断对象是否有属性，没有的话给一个默认值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;use get method&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;use get method&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">method_not_allow</span>(<span class="params">method_str</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;【<span class="subst">&#123;method_str&#125;</span>】 method not allow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = A()</span><br><span class="line">    method_str = <span class="string">&quot;data&quot;</span></span><br><span class="line">    res = <span class="built_in">getattr</span>(obj, method_str, method_not_allow(method_str))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="built_in">print</span>(res())</span><br></pre></td></tr></table></figure><h5 id="1-1-3-setattr"><a href="#1-1-3-setattr" class="headerlink" title="1.1.3 setattr"></a>1.1.3 setattr</h5><blockquote></blockquote><h5 id="1-1-4-delattr"><a href="#1-1-4-delattr" class="headerlink" title="1.1.4 delattr"></a>1.1.4 delattr</h5><blockquote></blockquote><h3 id="7、with上下文"><a href="#7、with上下文" class="headerlink" title="7、with上下文"></a>7、with上下文</h3><blockquote><p>with上下文可以在没有进行关闭操作时，自动去进行关闭收尾操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenFile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.timer = time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量&#x27;)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.timer&#125;</span> 开始读取内容&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.timer&#125;</span> 读取内容完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;with中代码块执行完毕时执行我啊&#x27;)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.timer&#125;</span> 自动关闭文件打开的文件句柄&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> OpenFile(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;执行代码块&lt;&lt;&lt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done!!!&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/python%E7%AC%94%E8%AE%B0/python%E7%AC%94%E8%AE%B0/image-20230217135129406.png" class="" title="image-20230217135129406">]]></content>
      
      
      <categories>
          
          <category> Python基础编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django笔记</title>
      <link href="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Web框架介绍"><a href="#一、Web框架介绍" class="headerlink" title="一、Web框架介绍"></a>一、Web框架介绍</h2><h3 id="1、Socket实现http服务端"><a href="#1、Socket实现http服务端" class="headerlink" title="1、Socket实现http服务端"></a>1、Socket实现http服务端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket  <span class="comment"># 导入socket模块，用于网络通信</span></span><br><span class="line"></span><br><span class="line">socket = socket.socket()  <span class="comment"># 创建一个TCP Socket对象</span></span><br><span class="line">socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))  <span class="comment"># 将Socket绑定到本地地址和端口8888</span></span><br><span class="line">socket.listen(<span class="number">5</span>)  <span class="comment"># 开始监听连接，最多允许5个未处理的连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 进入无限循环，等待客户端连接</span></span><br><span class="line">    conn, addr = socket.accept()  <span class="comment"># 接受客户端连接，返回一个新的Socket对象和客户端地址</span></span><br><span class="line"></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)  <span class="comment"># 从客户端接收数据，最多接收1024字节</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;recv data:<span class="subst">&#123;data&#125;</span>&quot;</span>)  <span class="comment"># 打印接收到的数据</span></span><br><span class="line"></span><br><span class="line">    conn.send(<span class="string">b&quot;HTTP/1.1 200 OK\r\n\r\n &lt;h1&gt;hello li lei&lt;/h1&gt;&quot;</span>)  <span class="comment"># 发送HTTP响应给客户端</span></span><br><span class="line">    <span class="comment"># 在网络通信中，关闭连接是一个重要的步骤，原因如下：</span></span><br><span class="line">    <span class="comment"># 资源管理：每个连接都会占用系统资源（如内存、文件描述符等）。如果不关闭连接，这些资源将无法释放，最终可能导致资源耗尽，影响服务器的性能和稳定性。</span></span><br><span class="line">    <span class="comment"># 连接复用：在HTTP/1.0中，默认使用短连接（即每次请求后关闭连接）。虽然HTTP/1.1引入了长连接（Keep-Alive），但在某些情况下，短连接仍然是必要的，特别是在处理大量并发请求时。</span></span><br><span class="line">    <span class="comment"># 安全性：关闭连接可以防止潜在的安全风险，如连接劫持或数据泄露。及时关闭连接可以减少这些风险。</span></span><br><span class="line"><span class="comment"># 协议规范：</span></span><br><span class="line"><span class="comment"># HTTP协议要求在每次请求后关闭连接，除非客户端和服务器都支持长连接。遵循协议规范可以确保兼容性和互操作性。</span></span><br><span class="line">    conn.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure><ul><li>浏览器打开<code>http://127.0.0.1:8888</code></li></ul><blockquote><p>终端内有两条请求记录，目前只关心<code>GET /</code> 这一条，<code>/favicon.ico</code>暂时不关心</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211025193840271.png" class="" title="image-20211025193840271"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;recv data:<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;data type is:&quot;</span>,<span class="built_in">type</span>(data))  <span class="comment"># &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 上面两行代码返回的data结果</span></span><br><span class="line"> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    b&#x27;GET / HTTP/1.1\r\n</span></span><br><span class="line"><span class="string">    Host: 127.0.0.1:8888\r\n</span></span><br><span class="line"><span class="string">    Connection: keep-alive\r\n</span></span><br><span class="line"><span class="string">    Upgrade-Insecure-Requests: 1\r\n</span></span><br><span class="line"><span class="string">    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\r\n</span></span><br><span class="line"><span class="string">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span></span><br><span class="line"><span class="string">    Sec-Fetch-Site: none\r\n</span></span><br><span class="line"><span class="string">    Sec-Fetch-Mode: navigate\r\n</span></span><br><span class="line"><span class="string">    Sec-Fetch-User: ?1\r\n</span></span><br><span class="line"><span class="string">    Sec-Fetch-Dest: document\r\n</span></span><br><span class="line"><span class="string">    Accept-Encoding: gzip, deflate, br\r\n</span></span><br><span class="line"><span class="string">    Accept-Language: zh-CN,zh;q=0.9\r\n</span></span><br><span class="line"><span class="string">    Cookie: csrftoken=SwCZzdzHFXp8uGWHUqjfrIycQ1P4X6MMo0OG1EhPLPzfMYV1yeSaxmaOEq8GqbXe\r\n\r\n&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、http请求协议"><a href="#2、http请求协议" class="headerlink" title="2、http请求协议"></a>2、http请求协议</h3><blockquote><p>画图软件：<a href="https://boardmix.cn/app/editor/lIR3ZWynWj79OaRD1wMQmQ">https://boardmix.cn/app/editor/lIR3ZWynWj79OaRD1wMQmQ</a></p><p>时序图：<a href="https://mermaid.nodejs.cn/intro/getting-started.html#using-the-mermaid-live-editor">https://mermaid.nodejs.cn/intro/getting-started.html#using-the-mermaid-live-editor</a></p></blockquote><blockquote><p>请求协议：请求格式+请求方法</p><p>下面是一个请求报文的内容</p></blockquote><h4 id="1-1-GET请求"><a href="#1-1-GET请求" class="headerlink" title="1.1 GET请求"></a>1.1 GET请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /ping?name=sam&amp;age=19 HTTP/1.1</span><br><span class="line">User-Agent: PostmanRuntime/7.32.2</span><br><span class="line">Accept: */*</span><br><span class="line">Postman-Token: 64e87079-9973-42cf-be94-413ae9081771</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911182256951.png" class="" title="image-20240911182256951"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911182737783.png" class="" title="image-20240911182737783"><h4 id="1-2-POST请求"><a href="#1-2-POST请求" class="headerlink" title="1.2 POST请求"></a>1.2 POST请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /ping HTTP/1.1</span><br><span class="line">User-Agent: PostmanRuntime/7.32.2</span><br><span class="line">Accept: */*</span><br><span class="line">Postman-Token: 1bdcef93-9b32-4095-8dfd-49e5339d3b21</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line"> </span><br><span class="line">name=sam&amp;age=18</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911181030565.png" class="" title="image-20240911181030565"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911181905609.png" class="" title="image-20240911181905609"><h3 id="3、http响应协议"><a href="#3、http响应协议" class="headerlink" title="3、http响应协议"></a>3、http响应协议</h3><h4 id="1-1-GET响应"><a href="#1-1-GET响应" class="headerlink" title="1.1 GET响应"></a>1.1 GET响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 11 Sep 2024 09:15:22 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line"> </span><br><span class="line">Hello li lei</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911182126729.png" class="" title="image-20240911182126729"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911183546801.png" class="" title="image-20240911183546801"><h4 id="1-2-POST响应"><a href="#1-2-POST响应" class="headerlink" title="1.2 POST响应"></a>1.2 POST响应</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 11 Sep 2024 09:15:22 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line"> </span><br><span class="line">Hello li lei</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911182036721.png" class="" title="image-20240911182036721"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911183542745.png" class="" title="image-20240911183542745"><h4 id="1-3-响应报文的响应首行字段"><a href="#1-3-响应报文的响应首行字段" class="headerlink" title="1.3 响应报文的响应首行字段"></a>1.3 响应报文的响应首行字段</h4><blockquote><p>响应报文的响应行字段默认都是空，只有响应头，但是我们在server端可以添加key-value作为响应豹纹的响应行字段</p><p>server返回的响应中有响应首行字段，并且都是<code>\r\n</code>换行</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911182952515.png" class="" title="image-20240911182952515"><h4 id="1-4-响应状态码"><a href="#1-4-响应状态码" class="headerlink" title="1.4 响应状态码"></a>1.4 响应状态码</h4><blockquote><p>1xx: 接受的请求正在处理</p><p>2xx: 请求正常处理完毕</p><p>3xx: 需要进行附加操作以完成请求</p><p>4xx: 服务器无法处理请求</p><p>5xx: 服务器处理请求出错</p></blockquote><h3 id="4、wsgiref模块"><a href="#4、wsgiref模块" class="headerlink" title="4、wsgiref模块"></a>4、wsgiref模块</h3><h4 id="1-1-为什么要有wsgiref模块？"><a href="#1-1-为什么要有wsgiref模块？" class="headerlink" title="1.1 为什么要有wsgiref模块？"></a>1.1 为什么要有wsgiref模块？</h4><blockquote><p>首先最初始的socket实现的http服务，有两个问题</p><ul><li>请求参数解析</li><li>响应数据返回</li></ul></blockquote><h5 id="1-1-1-请求参数解析"><a href="#1-1-1-请求参数解析" class="headerlink" title="1.1.1 请求参数解析"></a>1.1.1 请求参数解析</h5><blockquote><p>下面这一行代码是在解析请求参数</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911184816739.png" class="" title="image-20240911184816739"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recv data:b<span class="string">&#x27;GET /ping?name=sam&amp;age=19 HTTP/1.1\r\nUser-Agent: PostmanRuntime/7.32.2\r\nAccept: */*\r\nPostman-Token: 3657068e-ea01-4c71-aab8-cec4bf38ac8c\r\nHost: 127.0.0.1:8888\r\nAccept-Encoding: gzip, deflate, br\r\nConnection: keep-alive\r\n\r\n&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>可以看到拿到客户端的请求，它返回的是字符串</li><li>但是我想以字典的形式拿到请求参数里的路由、请求头里的key-value、请求路径那还得需要自己做处理，比较繁琐</li></ul></blockquote><h5 id="1-1-2-响应数据返回"><a href="#1-1-2-响应数据返回" class="headerlink" title="1.1.2 响应数据返回"></a>1.1.2 响应数据返回</h5><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911185129203.png" class="" title="image-20240911185129203"><blockquote><ul><li>可以看到响应数据的返回每次都需手动写，</li><li>那请求路由比较多了，代码编写会更加繁琐</li></ul></blockquote><h5 id="1-1-3-总结"><a href="#1-1-3-总结" class="headerlink" title="1.1.3 总结"></a>1.1.3 总结</h5><blockquote><ul><li><p>请求参数解析、响应数据返回都是比较底层代码，每次都需要手工操作，很繁琐。那就需要有一个模块来帮我们处理请求和响应，减少重复处理请求和响应的操作</p></li><li><p>那么就需要有一个统一的接口协议来实现这样的处理逻辑，那就是<code>WSGI(Web Server GateWay)</code></p></li><li><p>wsgiref模块就是python基于wsgi协议开发的服务模块</p></li></ul></blockquote><h4 id="1-2-wsgiref模块做了哪些事情？"><a href="#1-2-wsgiref模块做了哪些事情？" class="headerlink" title="1.2 wsgiref模块做了哪些事情？"></a>1.2 wsgiref模块做了哪些事情？</h4><h5 id="1-1-1-wsgiref实现服务"><a href="#1-1-1-wsgiref实现服务" class="headerlink" title="1.1.1 wsgiref实现服务"></a>1.1.1 wsgiref实现服务</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2024/9/11 18:57</span></span><br><span class="line"><span class="comment"># @Author  : ly zin</span></span><br><span class="line"><span class="comment"># @File    : wsgiref_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param environ: 依据http协议解析数据</span></span><br><span class="line"><span class="string">    :param start_response: 喜剧http协议组装数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 下面的start_response和return所做的事情等价于</span></span><br><span class="line">    <span class="comment"># conn.send(b&quot;HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n\r\nHello li lei&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造响应首行以及响应首行字段</span></span><br><span class="line">    start_response(<span class="string">&quot;200 OK&quot;</span>, [(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)])</span><br><span class="line">    <span class="comment"># 发送的真正的响应数据</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&quot;hello world&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装socket</span></span><br><span class="line">server = make_server(<span class="string">&quot;&quot;</span>, <span class="number">8090</span>, application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户连接：conn, addr = sock,accept</span></span><br><span class="line"><span class="comment"># 会自动给application添加两个参数</span></span><br><span class="line">server.serve_forever()  <span class="comment"># application(environ, start_response)</span></span><br></pre></td></tr></table></figure><blockquote><p>访问接口可以看到正常</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911190814907.png" class="" title="image-20240911190814907"><h5 id="1-1-2-environ参数是什么？"><a href="#1-1-2-environ参数是什么？" class="headerlink" title="1.1.2 environ参数是什么？"></a>1.1.2 environ参数是什么？</h5><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911191115734.png" class="" title="image-20240911191115734"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">environ:&#123;<span class="string">&#x27;PATH&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/allure-commandline-2.30.0/bin:/Users/hibiscus/protoc-27.3-osx-x86_64/bin:/Users/hibiscus/.nvm/versions/node/v22.3.0/bin:/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin:/Users/hibiscus/ffmpeg:/Users/hibiscus/go/bin:/Users/hibiscus/android_sdk/cmdline-tools/latest/bin:/Users/hibiscus/android_sdk/platform-tools:/Users/hibiscus/android_sdk/build-tools/35.0.0:/Library/Frameworks/Python.framework/Versions/3.10/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/go/bin:.&#x27;</span>, <span class="string">&#x27;JAVA_HOME&#x27;</span>: <span class="string">&#x27;/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&#x27;</span>, <span class="string">&#x27;COMMAND_MODE&#x27;</span>: <span class="string">&#x27;unix2003&#x27;</span>, <span class="string">&#x27;ANDROID_HOME&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/android_sdk&#x27;</span>, <span class="string">&#x27;GOPROXY&#x27;</span>: <span class="string">&#x27;https://goproxy.cn&#x27;</span>, <span class="string">&#x27;GO_HOME&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/go&#x27;</span>, <span class="string">&#x27;NVM_INC&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/.nvm/versions/node/v22.3.0/include/node&#x27;</span>, <span class="string">&#x27;FFMPEG_ENV&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/ffmpeg&#x27;</span>, <span class="string">&#x27;LOGNAME&#x27;</span>: <span class="string">&#x27;hibiscus&#x27;</span>, <span class="string">&#x27;HOMEBREW_BREW_GIT_REMOTE&#x27;</span>: <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&#x27;</span>, <span class="string">&#x27;allure2&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/allure-commandline-2.30.0&#x27;</span>, <span class="string">&#x27;XPC_SERVICE_NAME&#x27;</span>: <span class="string">&#x27;application.com.jetbrains.pycharm.810107.810805&#x27;</span>, <span class="string">&#x27;PWD&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/Desktop/code/py_code/py_web/django_web/django_source_code_study&#x27;</span>, <span class="string">&#x27;PYCHARM_HOSTED&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;PYCHARM_DISPLAY_PORT&#x27;</span>: <span class="string">&#x27;63343&#x27;</span>, <span class="string">&#x27;PROTOC_HOME&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/protoc-27.3-osx-x86_64&#x27;</span>, <span class="string">&#x27;__CFBundleIdentifier&#x27;</span>: <span class="string">&#x27;com.jetbrains.pycharm&#x27;</span>, <span class="string">&#x27;HOMEBREW_PIP_INDEX_URL&#x27;</span>: <span class="string">&#x27;https://pypi.tuna.tsinghua.edu.cn/simple&#x27;</span>, <span class="string">&#x27;HOMEBREW_CORE_GIT_REMOTE&#x27;</span>: <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&#x27;</span>, <span class="string">&#x27;PYTHONPATH&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/Desktop/code/py_code/py_web/django_web/django_source_code_study:/Applications/PyCharm.app/Contents/plugins/python/helpers/pycharm_matplotlib_backend:/Applications/PyCharm.app/Contents/plugins/python/helpers/pycharm_display&#x27;</span>, <span class="string">&#x27;NVM_CD_FLAGS&#x27;</span>: <span class="string">&#x27;-q&#x27;</span>, <span class="string">&#x27;SHELL&#x27;</span>: <span class="string">&#x27;/bin/zsh&#x27;</span>, <span class="string">&#x27;NVM_DIR&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/.nvm&#x27;</span>, <span class="string">&#x27;MKL_THREADING_LAYER&#x27;</span>: <span class="string">&#x27;TBB&#x27;</span>, <span class="string">&#x27;PAGER&#x27;</span>: <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;LSCOLORS&#x27;</span>: <span class="string">&#x27;Gxfxcxdxbxegedabagacad&#x27;</span>, <span class="string">&#x27;PYTHONIOENCODING&#x27;</span>: <span class="string">&#x27;UTF-8&#x27;</span>, <span class="string">&#x27;HOMEBREW_BOTTLE_DOMAIN&#x27;</span>: <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span>, <span class="string">&#x27;OLDPWD&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;hibiscus&#x27;</span>, <span class="string">&#x27;CLASSPATH&#x27;</span>: <span class="string">&#x27;/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib/tools.jar:/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/lib/dt.jar:&#x27;</span>, <span class="string">&#x27;ZSH&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/.oh-my-zsh&#x27;</span>, <span class="string">&#x27;TMPDIR&#x27;</span>: <span class="string">&#x27;/var/folders/5y/3ymnzfm963g0gmzh20fn4vq80000gn/T/&#x27;</span>, <span class="string">&#x27;GO111MODULE&#x27;</span>: <span class="string">&#x27;on&#x27;</span>, <span class="string">&#x27;SSH_AUTH_SOCK&#x27;</span>: <span class="string">&#x27;/private/tmp/com.apple.launchd.1sgypUKGMi/Listeners&#x27;</span>, <span class="string">&#x27;PYCHARM_INTERACTIVE_PLOTS&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;XPC_FLAGS&#x27;</span>: <span class="string">&#x27;0x0&#x27;</span>, <span class="string">&#x27;PYTHONUNBUFFERED&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;__CF_USER_TEXT_ENCODING&#x27;</span>: <span class="string">&#x27;0x1F5:0x19:0x34&#x27;</span>, <span class="string">&#x27;LESS&#x27;</span>: <span class="string">&#x27;-R&#x27;</span>, <span class="string">&#x27;LC_CTYPE&#x27;</span>: <span class="string">&#x27;zh_CN.UTF-8&#x27;</span>, <span class="string">&#x27;LS_COLORS&#x27;</span>: <span class="string">&#x27;di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43&#x27;</span>, <span class="string">&#x27;IDEA_INITIAL_DIRECTORY&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;NVM_BIN&#x27;</span>: <span class="string">&#x27;/Users/hibiscus/.nvm/versions/node/v22.3.0/bin&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>: <span class="string">&#x27;/Users/hibiscus&#x27;</span>, <span class="string">&#x27;HOMEBREW_API_DOMAIN&#x27;</span>: <span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&#x27;</span>, <span class="string">&#x27;SERVER_NAME&#x27;</span>: <span class="string">&#x27;apdeMacBook-Pro.local&#x27;</span>, <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="string">&#x27;CGI/1.1&#x27;</span>, <span class="string">&#x27;SERVER_PORT&#x27;</span>: <span class="string">&#x27;8090&#x27;</span>, <span class="string">&#x27;REMOTE_HOST&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;SCRIPT_NAME&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="string">&#x27;HTTP/1.1&#x27;</span>, <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="string">&#x27;WSGIServer/0.2&#x27;</span>, <span class="string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;PATH_INFO&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;QUERY_STRING&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;CONTENT_TYPE&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>, <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>: <span class="string">&#x27;PostmanRuntime/7.32.2&#x27;</span>, <span class="string">&#x27;HTTP_ACCEPT&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;HTTP_POSTMAN_TOKEN&#x27;</span>: <span class="string">&#x27;bff5e120-95b2-41b8-8a10-14996c0fc831&#x27;</span>, <span class="string">&#x27;HTTP_HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1:8090&#x27;</span>, <span class="string">&#x27;HTTP_ACCEPT_ENCODING&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>, <span class="string">&#x27;HTTP_CONNECTION&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;wsgi.input&#x27;</span>: &lt;_io.BufferedReader name=4&gt;, <span class="string">&#x27;wsgi.errors&#x27;</span>: &lt;_io.TextIOWrapper name=<span class="string">&#x27;&lt;stderr&gt;&#x27;</span> mode=<span class="string">&#x27;w&#x27;</span> encoding=<span class="string">&#x27;utf-8&#x27;</span>&gt;, <span class="string">&#x27;wsgi.version&#x27;</span>: (1, 0), <span class="string">&#x27;wsgi.run_once&#x27;</span>: False, <span class="string">&#x27;wsgi.url_scheme&#x27;</span>: <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;wsgi.multithread&#x27;</span>: False, <span class="string">&#x27;wsgi.multiprocess&#x27;</span>: False, <span class="string">&#x27;wsgi.file_wrapper&#x27;</span>: &lt;class <span class="string">&#x27;wsgiref.util.FileWrapper&#x27;</span>&gt;&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>environ是一个字典，我们就可以自由的拿到想要的请求数据</li><li>里面字段非常多，但是我们可以重点关注PATH_INFO字段，就拿到了当前请求路径</li></ul></blockquote><h4 id="1-3-基于wsgiref自定义web框架"><a href="#1-3-基于wsgiref自定义web框架" class="headerlink" title="1.3 基于wsgiref自定义web框架"></a>1.3 基于wsgiref自定义web框架</h4><h5 id="1-1-1-实现路由分发"><a href="#1-1-1-实现路由分发" class="headerlink" title="1.1.1 实现路由分发"></a>1.1.1 实现路由分发</h5><blockquote><p>因为服务不可能只有一个路由，我们也不可能一直给用户返回同一个响应内容，用户希望通过不同路由得到不同的响应结果，那么我们就需要实现这样的逻辑</p><ul><li>核心逻辑就是获取environ.get(“PATH_INFO”)来获取当前请求的路由，然后进行if-else判断</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2024/9/11 18:57</span></span><br><span class="line"><span class="comment"># @Author  : ly zin</span></span><br><span class="line"><span class="comment"># @File    : wsgiref_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下面的start_response和return所做的事情等价于</span></span><br><span class="line"><span class="string">    conn.send(b&quot;HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n\r\nHello li lei&quot;)</span></span><br><span class="line"><span class="string">    :param environ: 依据http协议解析数据</span></span><br><span class="line"><span class="string">    :param start_response: 喜剧http协议组装数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    request_path = environ.get(<span class="string">&quot;PATH_INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造响应首行以及响应首行字段</span></span><br><span class="line">    start_response(<span class="string">&quot;200 OK&quot;</span>, [(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)])</span><br><span class="line">    <span class="keyword">if</span> request_path == <span class="string">&quot;/login&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b&quot;login page&quot;</span>]</span><br><span class="line">    <span class="keyword">elif</span> request_path == <span class="string">&quot;/index&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">b&quot;index page&quot;</span>]</span><br><span class="line">    <span class="comment"># 发送的真正的响应数据</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&quot;not found page&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装socket</span></span><br><span class="line">server = make_server(<span class="string">&quot;&quot;</span>, <span class="number">8090</span>, application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户连接：conn, addr = sock.accept()</span></span><br><span class="line"><span class="comment"># 会自动给application添加两个参数</span></span><br><span class="line">server.serve_forever()  <span class="comment"># application(environ, start_response)</span></span><br></pre></td></tr></table></figure><blockquote><p>从下图就可以看到，我们通过不同的路由得到了不同的结果</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911192501012.png" class="" title="image-20240911192501012"><h5 id="1-1-2-路由分发优化"><a href="#1-1-2-路由分发优化" class="headerlink" title="1.1.2 路由分发优化"></a>1.1.2 路由分发优化</h5><blockquote><p>上面的代码都是用if-else来实现路由分发，也就是一个路由对应一个处理代码</p><p>那么我们是不是可以把路由和处理代码放在一个列表里进行路由分发，并发把处理代码封装成一个函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2024/9/11 18:57</span></span><br><span class="line"><span class="comment"># @Author  : ly zin</span></span><br><span class="line"><span class="comment"># @File    : wsgiref_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下面的start_response和return所做的事情等价于</span></span><br><span class="line"><span class="string">    conn.send(b&quot;HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n\r\nHello li lei&quot;)</span></span><br><span class="line"><span class="string">    :param environ: 依据http协议解析数据</span></span><br><span class="line"><span class="string">    :param start_response: 喜剧http协议组装数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    request_path = environ.get(<span class="string">&quot;PATH_INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造响应首行以及响应首行字段</span></span><br><span class="line">    start_response(<span class="string">&quot;200 OK&quot;</span>, [(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)])</span><br><span class="line"></span><br><span class="line">    url_patterns = [</span><br><span class="line">        (<span class="string">&quot;/login&quot;</span>, login),</span><br><span class="line">        (<span class="string">&quot;/index&quot;</span>, index),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    func = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> url_patterns:</span><br><span class="line">        <span class="keyword">if</span> request_path == i[<span class="number">0</span>]:</span><br><span class="line">            func = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 匹配到了封装的函数</span></span><br><span class="line">    <span class="keyword">if</span> func:</span><br><span class="line">        <span class="keyword">return</span> [func().encode(<span class="string">&quot;utf-8&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的真正的响应数据</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&quot;not found page&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装socket</span></span><br><span class="line">server = make_server(<span class="string">&quot;&quot;</span>, <span class="number">8090</span>, application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户连接：conn, addr = sock.accept()</span></span><br><span class="line"><span class="comment"># 会自动给application添加两个参数</span></span><br><span class="line">server.serve_forever()  <span class="comment"># application(environ, start_response)</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911193416451.png" class="" title="image-20240911193416451"><blockquote><p>同样实现了路由分发</p></blockquote><h5 id="1-1-3-路由分发的优点"><a href="#1-1-3-路由分发的优点" class="headerlink" title="1.1.3 路由分发的优点"></a>1.1.3 路由分发的优点</h5><blockquote><p>上面的url_patterns 只需要定义路由和对应的处理函数，然后再处理函数中实现业务逻辑即可，这样是不是我们的关注更低了，只需要关注路径和处理函数，不需要再关心其他内容</p></blockquote><h5 id="1-1-4-environ参数处理"><a href="#1-1-4-environ参数处理" class="headerlink" title="1.1.4 environ参数处理"></a>1.1.4 environ参数处理</h5><blockquote><p>从前面知道environ参数包含了所有请求处理参数，那我们的处理函数中肯定100%需要拿到请求参数再来处理业务逻辑，所以但是environ参数再application函数中，我们需要将environ参数传递给每个处理函数，那么处理函数就具备了处理请求参数的能力，这就是web框架的雏形</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2024/9/11 18:57</span></span><br><span class="line"><span class="comment"># @Author  : ly zin</span></span><br><span class="line"><span class="comment"># @File    : wsgiref_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下面的start_response和return所做的事情等价于</span></span><br><span class="line"><span class="string">    conn.send(b&quot;HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n\r\nHello li lei&quot;)</span></span><br><span class="line"><span class="string">    :param environ: 依据http协议解析数据</span></span><br><span class="line"><span class="string">    :param start_response: 喜剧http协议组装数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    request_path = environ.get(<span class="string">&quot;PATH_INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造响应首行以及响应首行字段</span></span><br><span class="line">    start_response(<span class="string">&quot;200 OK&quot;</span>, [(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>)])</span><br><span class="line"></span><br><span class="line">    url_patterns = [</span><br><span class="line">        (<span class="string">&quot;/login&quot;</span>, login),</span><br><span class="line">        (<span class="string">&quot;/index&quot;</span>, index),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    func = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> url_patterns:</span><br><span class="line">        <span class="keyword">if</span> request_path == i[<span class="number">0</span>]:</span><br><span class="line">            func = i[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 匹配到了封装的函数</span></span><br><span class="line">    <span class="keyword">if</span> func:</span><br><span class="line">        <span class="keyword">return</span> [func(environ).encode(<span class="string">&quot;utf-8&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送的真正的响应数据</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&quot;not found page&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装socket</span></span><br><span class="line">server = make_server(<span class="string">&quot;&quot;</span>, <span class="number">8090</span>, application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户连接：conn, addr = sock.accept()</span></span><br><span class="line"><span class="comment"># 会自动给application添加两个参数</span></span><br><span class="line">server.serve_forever()  <span class="comment"># application(environ, start_response)</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911193929652.png" class="" title="image-20240911193929652"><blockquote><p>所以即使处理函数用不到environ参数，那也需要传递，因为请求参数处理在开发中占比非常高</p></blockquote><h5 id="1-1-5-拆分实现web框架"><a href="#1-1-5-拆分实现web框架" class="headerlink" title="1.1.5 拆分实现web框架"></a>1.1.5 拆分实现web框架</h5><blockquote><p>从上面的路由分发可以看到，所有代码都是聚合在一起，那我们是不是可以进行拆分，实现不同目录负责不同功能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行了文件拆分</span></span><br><span class="line">my_web</span><br><span class="line">├── main.py</span><br><span class="line">├── urls.py</span><br><span class="line">└── views.py</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911194534542.png" class="" title="image-20240911194534542"><blockquote><p>那这样拆分以后就实现一个自定义的web框架</p></blockquote><blockquote><p>添加功能，比如需要添加一个查看时间的接口，只需要在views.py和urls.py中添加代码即可</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911195111162.png" class="" title="image-20240911195111162"><blockquote><p>可以看到很快就实现一个http接口，这就是封装web框架的优势</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20240911194949756.png" class="" title="image-20240911194949756"><h4 id="1-4-django中的wsgiref"><a href="#1-4-django中的wsgiref" class="headerlink" title="1.4 django中的wsgiref"></a>1.4 django中的wsgiref</h4><blockquote><p>Django底层用的是<code>wsgiref</code>模块来请求和响应数据</p><p><code>wsgiref</code>模块也叫web服务网关接口</p><ol><li>请求来的时候解析<code>HTTP</code>格式的数据，封装成大字典</li><li>响应走的时候给数据打包成符合<code>HTTP</code>格式的数据返回给浏览器</li></ol></blockquote><h2 id="二、Django上手"><a href="#二、Django上手" class="headerlink" title="二、Django上手"></a>二、Django上手</h2><h3 id="1、Django安装"><a href="#1、Django安装" class="headerlink" title="1、Django安装"></a>1、Django安装</h3><blockquote><p><code>Django</code>的版本问题</p><ul><li><code>Django1.x</code>和<code>Django2.x</code>的差距不大</li><li>所以先学习<code>Django1.x</code>的即可，后续有需要可以往<code>Django2.x</code>过渡</li><li>面试时可以说先用的1.8，慢慢过渡到了1.11版本</li><li>因为Django1.11.11最好适合的Python3版本是<code>3.4~3.6</code>之间的版本，3.7以及后面的版本和Django的<code>1.11.11</code>版本有兼容问题<ul><li>如果是python3.7，可以安装Django的1.11.17版本，这个版本创建app时不会报错</li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">pip清华地址:https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a></li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.11.17</span><br><span class="line"></span><br><span class="line">// 查看django版本</span><br><span class="line">(venv) D:\&gt;django-admin version</span><br><span class="line">1.11.17</span><br></pre></td></tr></table></figure><blockquote><p>下面基本都在命令行操作</p></blockquote><h3 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h3><blockquote><p><code>blog</code>是项目名</p><p>使用<code>django-admin</code>可以快速创建一个<code>Django</code>项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 创建Django项目的命令</span><br><span class="line">django-admin startproject blog</span><br></pre></td></tr></table></figure><blockquote><p>创建完以后可以看到项目目录的结构</p><ul><li><p>项目根目录有两个东西：</p><ul><li>一个是项目管理文件: <code>manage.py</code></li><li>另一个是目录:<code>blog</code></li></ul></li><li><p><code>blog</code>目录中：</p><ul><li><p><code>setting.py</code>：项目配置文件</p></li><li><p><code>urls.py</code> ：项目路由文件</p></li><li><p><code>wsgi.py</code> ：项目启动服务文件</p></li></ul></li></ul></blockquote><h3 id="3、创建应用"><a href="#3、创建应用" class="headerlink" title="3、创建应用"></a>3、创建应用</h3><blockquote><ul><li><p>一个<code>app</code>就是一个功能独立的模块</p></li><li><p>一个项目可以有多个<code>app</code>：比如下面的<code>home</code>是就是应用名</p></li><li><p>由于<code>django 1.11</code>版本和<code>python3.7</code>版本不兼容, 2.0版本以后的Django修复了这个问题，所以使用下面命令创建app就需要注意下python3和Django的版本</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到创建的项目根目录</span></span><br><span class="line">python manage.py startapp home</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211215235855339.png" class="" title="image-20211215235855339"><h4 id="1-1-应用的目录结构"><a href="#1-1-应用的目录结构" class="headerlink" title="1.1 应用的目录结构"></a>1.1 应用的目录结构</h4><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216000052168.png" class="" title="image-20211216000052168"><h4 id="1-2-注册应用"><a href="#1-2-注册应用" class="headerlink" title="1.2 注册应用"></a>1.2 注册应用</h4><blockquote><p>创建出来的应用一定要先去配置文件中注册，在<code>setting.py</code>文件中</p><p>在<code>INSTALLED_APPS</code>中注册app。就是把home&#x2F;apps.py文件中的HomeConfig类的申明路径添加进来</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册创建的App</span></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;bolg.home&#x27;,  // 全写</span></span><br><span class="line">    <span class="string">&#x27;home&#x27;</span> <span class="comment"># 简写，只写应用名</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4、项目目录结构介绍"><a href="#4、项目目录结构介绍" class="headerlink" title="4、项目目录结构介绍"></a>4、项目目录结构介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- blog目录</span><br><span class="line">- blog目录中：</span><br><span class="line"> -- setting.py 配置文件</span><br><span class="line"> -- urls.py  路由与视图函数对应关系（路由层）</span><br><span class="line"> -- wsgi.py  wsgiref模块（不考虑）</span><br><span class="line">- manage.py  项目入口文件</span><br><span class="line">- db.sqlite3 自带数据库，很小，仅仅用来做测试</span><br><span class="line">- home目录</span><br><span class="line"> -- admin.py 后台管理</span><br><span class="line"> -- apps.py 注册使用</span><br><span class="line"> -- migrations 数据库迁移日志文件</span><br><span class="line"> -- models.py 数据库模型类，用于ORM</span><br><span class="line"> -- views.py 视图函数文件</span><br><span class="line"> -- test.py 测试文件</span><br></pre></td></tr></table></figure><h3 id="5、启动Django项目"><a href="#5、启动Django项目" class="headerlink" title="5、启动Django项目"></a>5、启动Django项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216000435878.png" class="" title="image-20211216000435878"><blockquote><p>打开浏览器，输入上面的地址打开后可以看到下面页面，就表示启动<code>Django</code>成功</p><p>并且可以看到下面的英文提示：</p><ul><li>第一句(Your’re seeing…):表示能看到这个消息，是<code>Django</code>项目的<code>setting.py</code>文件中的<code>DEBUG=True</code></li><li>第二句(you haven’t…):表示还没有配置路由<code>URLS</code></li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216000754066.png" class="" title="image-20211216000754066"><h3 id="6、templates目录"><a href="#6、templates目录" class="headerlink" title="6、templates目录"></a>6、<code>templates</code>目录</h3><blockquote><p><code>templates</code>目录用来存放前段<code>HTML</code>页面的</p><ul><li><p>命令行创建<code>没有templates</code>文件目录</p></li><li><p>pycharm创建是<code>templates</code>文件目录的</p></li></ul></blockquote><h3 id="7、Django三组件"><a href="#7、Django三组件" class="headerlink" title="7、Django三组件"></a>7、Django三组件</h3><h4 id="1-1-HttpResponse"><a href="#1-1-HttpResponse" class="headerlink" title="1.1 HttpResponse"></a>1.1 HttpResponse</h4><blockquote><p>从<code>HttpResponse</code>源码可以看：</p><ul><li>是一个<code>Http</code>响应，并且返回的是<code>字符串内容</code></li><li><code>Http响应内容</code>可以被读、追加或者替换</li></ul><p>视图函数中的<code>request</code>参数是一个对象，用来获取<code>请求的所有数据</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HttpResponse部分源码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HttpResponse</span>(<span class="title class_ inherited__">HttpResponseBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    An HTTP response class with a string as content.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This content that can be read, appended to or replaced.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    streaming = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, content=<span class="string">b&#x27;&#x27;</span>, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(HttpResponse, self).__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># Content is a bytestring. See the `content` property methods.</span></span><br><span class="line">        self.content = content</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写在urls.py文件</span></span><br><span class="line"><span class="keyword">from</span> home <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(r&#x27;^admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    url(<span class="string">&quot;^home/&quot;</span>, views.home)</span><br><span class="line">]</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 写在应用的views.py中</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    ret = HttpResponse(<span class="string">&quot;Hi, Django&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ret) <span class="comment"># &lt;HttpResponse status_code=200, &quot;text/html; charset=utf-8&quot;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(ret.status_code) <span class="comment"># 200</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(ret)) <span class="comment"># &lt;class &#x27;django.http.response.HttpResponse&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h4 id="1-2-render"><a href="#1-2-render" class="headerlink" title="1.2 render"></a>1.2 render</h4><blockquote><p>给浏览器返回渲染的<code>html</code>文件，将<code>html</code>文件变成字节形式返回给浏览器</p><p>render方法本身返回的还是<code>HttpResponse</code>对象</p></blockquote><h5 id="1-1-1-创建html文件"><a href="#1-1-1-创建html文件" class="headerlink" title="1.1.1 创建html文件"></a>1.1.1 创建<code>html</code>文件</h5><blockquote><ol><li>需要检查settings.py中有没有添加templates目录路径，没有的话，需要加上</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719232801505.png" class="" title="image-20220719232801505"><blockquote><ol><li>在项目根目录创建<code>templates</code>目录</li><li>在<code>templates</code>目录创建对应的<code>html</code>文件<ul><li><code>&#123;&#123; ret &#125;&#125;</code>是django自带的模板语法，表示接收变量的值</li></ul></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; ret &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-2-编写路由"><a href="#1-1-2-编写路由" class="headerlink" title="1.1.2 编写路由"></a>1.1.2 编写路由</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在settings.py文件中添加index_html的路由</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> day01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index),</span><br><span class="line">    url(<span class="string">r&#x27;^index_html/&#x27;</span>, views.index_html),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="1-1-3-编写视图函数"><a href="#1-1-3-编写视图函数" class="headerlink" title="1.1.3 编写视图函数"></a>1.1.3 编写视图函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用中使用，写在views.py中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_html</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param request: 请求相关的所有的数据</span></span><br><span class="line"><span class="string">    :return: HttpResponse对象值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ret = <span class="string">&#x27;html page data&#x27;</span></span><br><span class="line">    <span class="comment"># 直接写templates目录下的html文件名</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h5 id="1-1-4-请求页面"><a href="#1-1-4-请求页面" class="headerlink" title="1.1.4 请求页面"></a>1.1.4 请求页面</h5><blockquote><p>访问<code>http://127.0.0.1:8000/index_html/</code>即可看到下面的页面</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20210903143834317.png" class="" title="image-20210903143834317"><h4 id="1-3-redirect"><a href="#1-3-redirect" class="headerlink" title="1.3 redirect"></a>1.3 redirect</h4><blockquote><p>表示在视图函数中跳转到别的页面，也叫重定向</p><p>redirect本身还是<code>HttpResponse</code>对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用中使用,写在views.py中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_redirect</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param request: 请求相关的所有的数据</span></span><br><span class="line"><span class="string">    :return: HttpResponse对象值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    redirect_url = <span class="string">&#x27;/index/&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(redirect_url)</span><br></pre></td></tr></table></figure><blockquote><p>访问<code>http://127.0.0.1:8000/index_html/</code>就会最终跳转至<code>/index/</code>页面</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20210903144432203.png" class="" title="image-20210903144432203"><h3 id="8、静态文件配置"><a href="#8、静态文件配置" class="headerlink" title="8、静态文件配置"></a>8、静态文件配置</h3><blockquote><p><code>html</code>文件都放在<code>templates</code>文件下</p><p>将静态文件放在<code>static</code>文件夹里</p><ul><li>前端写好的文件都可以叫静态文件，比如<code>js</code>&#x2F;<code>css</code>&#x2F;<code>图片</code>&#x2F;<code>前端框架</code></li></ul><p><code>django</code>需要自己创建<code>static</code>文件夹</p><ul><li>在<code>static</code>中可以放<code>js</code>&#x2F;<code>css</code>&#x2F;<code>plugins</code>等文件夹，做好区分</li></ul></blockquote><h4 id="1-1-静态文件绝对路径"><a href="#1-1-静态文件绝对路径" class="headerlink" title="1.1 静态文件绝对路径"></a>1.1 静态文件绝对路径</h4><blockquote><p><code>谨记：</code></p><ul><li><code>在浏览器输入url时，能看到对应的资源，是因为服务端开启了对应资源的接口</code></li><li><code>如果访问不到，那就是服务端没有开启对应资源的接口</code></li></ul></blockquote><blockquote><p>未开启对应资源的接口，而是只在Django目录下创建了<code>/static/css/home.css</code>目录和文件，然后直接在<code>html</code>里直接引用，就会报错，因为服务端根本没有将这个资源的入口开启，直接访问会404找不到</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># index文件里直接写css文件</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../static/css/home.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是主页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211227234555244.png" class="" title="image-20211227234555244"><blockquote><p>上述在浏览器打开<code>http://127.0.0.1:8000/home/</code>就会出现home.css文件404的情况</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211227235030984.png" class="" title="image-20211227235030984"><h4 id="1-2-服务端开启静态资源入口"><a href="#1-2-服务端开启静态资源入口" class="headerlink" title="1.2 服务端开启静态资源入口"></a>1.2 服务端开启静态资源入口</h4><blockquote><p>因为上面的报错，所以需要服务端开启访问静态资源的入口，才可以使得前端可以访问到资源</p><p><code>STATICFILES_DIRS</code>表示:</p><ul><li>开放了静态文件路径，将<code>Django</code>目录下创建的<code>static</code>文件夹加入到了<code>静态资源列表</code>,前端页面就可以访问到了</li><li>是一个列表，表示可以放多个静态资源目录<ul><li>多个时，先从第一个找，找不到继续往下找，直到找到就会返回对应的资源</li></ul></li></ul><p><code>STATIC_URL = &#39;/static/&#39;</code>:</p><ul><li>表示前端访问静态资源时，需要带的一个令牌，拿着这个令牌，再去<code>STATICFILES_DIRS</code>里的文件夹中去找对应的资源文件</li><li>前端写静态资源的路径时，写的<code>static</code>就是<code>STATIC_URL</code>后面的<code>/static/</code>就是令牌</li><li>那么这个令牌就可以自定义了，只需要改了这里，前端页面去拿静态资源时的令牌就要变成修改的了，比如将<code>/static/</code>改为<code>/abc/</code>，那么前端页面里写静态资源路径时的第一个单词就要写成<code>/abc/</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在setting.py文件下添加该行代码，表示服务端开启了访问静态资源的入口</span></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是访问的令牌</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处为新加代码</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211227234806719.png" class="" title="image-20211227234806719"><blockquote><p>再次访问<code>http://127.0.0.1:8000/home/</code>就会出现正常样式</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211227235127800.png" class="" title="image-20211227235127800"><h4 id="1-3-灵活取令牌值"><a href="#1-3-灵活取令牌值" class="headerlink" title="1.3 灵活取令牌值"></a>1.3 灵活取令牌值</h4><blockquote><p>​但是当前端页面很多时，并且我们都是用相对路径去写静态资源的路径，并且路径第一个单词是<code>令牌</code>，这个时候需要修改令牌时，就会需要修改很多文件，那么怎么灵活处理呢？就用到了<code>静态文件动态解析</code></p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220106150623144.png" class="" title="image-20220106150623144"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211228000549317.png" class="" title="image-20211228000549317"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211228000832612.png" class="" title="image-20211228000832612"><h3 id="9、request对象方法"><a href="#9、request对象方法" class="headerlink" title="9、request对象方法"></a>9、request对象方法</h3><h4 id="1-1-关闭csrf中间件"><a href="#1-1-关闭csrf中间件" class="headerlink" title="1.1 关闭csrf中间件"></a>1.1 关闭<code>csrf</code>中间件</h4><blockquote><p>在前阶段学习时，可以先注释<code>csrf</code>中间件，否则做一些<code>form</code>的<code>post</code>表单提交时会报错，后面再来探讨这个问题</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211228001140316.png" class="" title="image-20211228001140316"><h4 id="1-2-request对象"><a href="#1-2-request对象" class="headerlink" title="1.2 request对象"></a>1.2 request对象</h4><blockquote><p>在视图函数中都会有<code>request</code>形参，需要重点来学习下这个<code>request</code>，<code>request</code>是一个对象，里面有很多可以供我们使用的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是用之前的home函数</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request) <span class="comment"># &lt;WSGIRequest: GET &#x27;/home/&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(request)) <span class="comment">#&lt;class &#x27;django.core.handlers.wsgi.WSGIRequest&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(request)) </span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span>(request) <span class="comment"># 可以看到有很多的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;COOKIES&#x27;, &#x27;FILES&#x27;, &#x27;GET&#x27;, &#x27;META&#x27;, &#x27;POST&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__iter__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;_encoding&#x27;, &#x27;_get_post&#x27;, &#x27;_get_raw_host&#x27;, &#x27;_get_scheme&#x27;, &#x27;_initialize_handlers&#x27;, &#x27;_load_post_and_files&#x27;, &#x27;_mark_post_parse_error&#x27;, &#x27;_messages&#x27;, &#x27;_post_parse_error&#x27;, &#x27;_read_started&#x27;, &#x27;_set_post&#x27;, &#x27;_stream&#x27;, &#x27;_upload_handlers&#x27;, &#x27;body&#x27;, &#x27;build_absolute_uri&#x27;, &#x27;close&#x27;, &#x27;content_params&#x27;, &#x27;content_type&#x27;, &#x27;encoding&#x27;, &#x27;environ&#x27;, &#x27;get_full_path&#x27;, &#x27;get_host&#x27;, &#x27;get_port&#x27;, &#x27;get_raw_uri&#x27;, &#x27;get_signed_cookie&#x27;, &#x27;is_ajax&#x27;, &#x27;is_secure&#x27;, &#x27;method&#x27;, &#x27;parse_file_upload&#x27;, &#x27;path&#x27;, &#x27;path_info&#x27;, &#x27;read&#x27;, &#x27;readline&#x27;, &#x27;readlines&#x27;, &#x27;resolver_match&#x27;, &#x27;scheme&#x27;, &#x27;session&#x27;, &#x27;upload_handlers&#x27;, &#x27;user&#x27;, &#x27;xreadlines&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>通过debug断点，也可以看到request形参里的大部分常见的方法</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220714231350440.png" class="" title="image-20220714231350440"><h5 id="1-1-1-request-method"><a href="#1-1-1-request-method" class="headerlink" title="1.1.1 request.method"></a>1.1.1 request.method</h5><blockquote><p>用来获取请求这个url的请求方法</p><p>如果是以<code>get</code>方法请求的这个视图函数，那么<code>request.method</code>返回值就是<code>大写的GET</code>字符串</p><p>如果是以<code>post</code>方法请求的这个视图函数，那么<code>request.method</code>返回值就是<code>大写的POST</code>字符串</p><p>举例：这样就可以用来做请求方法拆分，可以使用<code>if</code>先判断请求方法是什么：</p><ul><li>如果请求方法是<code>GET</code>，可以先返回一个页面</li><li>如果请求方法是<code>POST</code>，返回单独的<code>POST</code>请求处理，在<code>POST</code>里就可以获取前端传入的请求数据</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST data&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-1-2-request-POST"><a href="#1-1-2-request-POST" class="headerlink" title="1.1.2 request.POST"></a>1.1.2 request.POST</h5><blockquote><p>用来获取用户提交的<code>post</code>请求数据</p><ul><li><p>提交的post请求里不包含文件上传的请求</p></li><li><p>post请求参数一般都是请求体里面</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个form表单</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是主页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/home/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        爱好:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;排球&quot;</span>&gt;</span>排球</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;桌球&quot;</span>&gt;</span>桌球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211228003707768.png" class="" title="image-20211228003707768"><blockquote><p>后端<code>views.py</code>代码，从中可以看出：</p><ul><li><code>request.POST</code>是一个查询字典，类型是<code>&lt;class &#39;django.http.request.QueryDict&#39;&gt;</code></li><li><code>request.POST</code>的<code>get方法</code>只会获取最后一个值，并且类型是<code>str</code></li><li><code>request.POST</code>的<code>getlist方法</code>会获取所有值，并且类型是<code>list</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="comment"># &lt;QueryDict: &#123;&#x27;uname&#x27;: [&#x27;ko&#x27;], &#x27;pwd&#x27;: [&#x27;123&#x27;], &#x27;hobby&#x27;: [&#x27;足球&#x27;, &#x27;排球&#x27;]&#125;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;request.POST:&quot;</span>, request.POST)</span><br><span class="line">        <span class="comment"># &lt;class &#x27;django.http.request.QueryDict&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;request.POST type:&quot;</span>, <span class="built_in">type</span>(request.POST))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get方法只会获取最后一个值</span></span><br><span class="line">        uname = request.POST.get(<span class="string">&quot;uname&quot;</span>)</span><br><span class="line">        <span class="comment"># uname = &gt; ko</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;uname=&gt;&quot;</span>, uname)</span><br><span class="line">        <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;uname type:&quot;</span>, <span class="built_in">type</span>(uname))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get方法只会获取最后一个值</span></span><br><span class="line">        hob = request.POST.get(<span class="string">&quot;hobby&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 桌球</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hob=&gt;&quot;</span>, hob) <span class="comment"># 桌球</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hob type=&gt;&quot;</span>, <span class="built_in">type</span>(hob)) <span class="comment"># 桌球</span></span><br><span class="line"></span><br><span class="line">        hob_list= request.POST.getlist(<span class="string">&quot;hobby&quot;</span>)</span><br><span class="line">        <span class="comment"># [&#x27;排球&#x27;, &#x27;桌球&#x27;]</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hob_list=&gt;&quot;</span>, hob_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hob_list type=&gt;&quot;</span>, <span class="built_in">type</span>(hob_list))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST data&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-1-3-request-GET"><a href="#1-1-3-request-GET" class="headerlink" title="1.1.3 request.GET"></a>1.1.3 request.GET</h5><blockquote><p><code>request.GET</code>和<code>request.POST</code>的所有请求方法都一样</p><p><code>request.GET</code>常用于获取url后面携带的参数，比如：</p><ul><li><p>url &#x3D; ”<a href="http://127.0.0.1:8000/query_course/?id=2%E2%80%9D">http://127.0.0.1:8000/query_course/?id=2”</a></p></li><li><p>同样<code>request.GET</code>也支持用<code>get</code>&#x2F;<code>getlist</code>获取<code>url</code>后面带的值</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求的url：http://127.0.0.1:8000/home/?user=ko&amp;age=19</span></span><br><span class="line"><span class="comment"># ?user=ko&amp;age=19 是拼接的参数，在url里可以看到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># &lt; QueryDict: &#123;&#x27;user&#x27;: [&#x27;ko&#x27;], &#x27;age&#x27;: [&#x27;19&#x27;]&#125; &gt;</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># &lt;class &#x27;django.http.request.QueryDict&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(request.GET))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 19</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(request.GET.get(<span class="string">&quot;age&quot;</span>)))</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="1-1-4-POST请求知识扩展"><a href="#1-1-4-POST请求知识扩展" class="headerlink" title="1.1.4 POST请求知识扩展"></a>1.1.4 POST请求知识扩展</h5><blockquote><p>Post提交数据的几种方式</p><p><a href="https://wenku.baidu.com/view/9432b55ba16925c52cc58bd63186bceb19e8ede5.html">https://wenku.baidu.com/view/9432b55ba16925c52cc58bd63186bceb19e8ede5.html</a></p><p><a href="https://blog.csdn.net/cheress/article/details/113030081">https://blog.csdn.net/cheress/article/details/113030081</a></p><p><a href="https://blog.csdn.net/liyantianmin/article/details/91492135">https://blog.csdn.net/liyantianmin/article/details/91492135</a></p><p><a href="https://www.cnblogs.com/hahaha111122222/p/14349812.html">https://www.cnblogs.com/hahaha111122222/p/14349812.html</a></p><p><a href="https://www.jianshu.com/p/cf4f395347e8?u_atoken=7d3ef8d0-cc89-4ded-9703-93649c89937d&amp;u_asession=01N3sFT5YOp4JpqgmV-cOHQyK2hr1LDlibUwnqBMZrNTvsTUTzSww7QPNL-_rel4P7X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_lJj4ZGt_093nafvxQoI3-MKWrbBzYAhXhkL4v5_cjQmBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05cOLe0D_m46_MUQXrZd9nkBYhElZhMZra74wlj19FjtSKuMSK6lpdFb18QrJYyijIcE6gfYXqcWW0QNsfCpPsPUhAyZWbQGoCiTuXNuTgtePLr4p6nycrNRerqP1UoEGj3DdOLf8P37N4a5sPqwEcE2ThydPgapMoI_hft2I3hkv9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzYNlG-spcJl3Bjpy344qS7O5IN2QVE9vNUz-HW7jV6z8df9JIAkyKervFWgmMgV8j-3h9VXwMyh6PgyDIVSG1W_M8W7hYpolf9WK8gAqynFvntxszIC-jZ3XnMw67JPJQ0D1VPAyD0j6vmt0vrdGriYru-vXQCXeHMnZd9iioZRVmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=5yhoGMDXSG57iRSyUfORFEMb/k8=">https://www.jianshu.com/p/cf4f395347e8?u_atoken=7d3ef8d0-cc89-4ded-9703-93649c89937d&amp;u_asession=01N3sFT5YOp4JpqgmV-cOHQyK2hr1LDlibUwnqBMZrNTvsTUTzSww7QPNL-_rel4P7X0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K_lJj4ZGt_093nafvxQoI3-MKWrbBzYAhXhkL4v5_cjQmBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05cOLe0D_m46_MUQXrZd9nkBYhElZhMZra74wlj19FjtSKuMSK6lpdFb18QrJYyijIcE6gfYXqcWW0QNsfCpPsPUhAyZWbQGoCiTuXNuTgtePLr4p6nycrNRerqP1UoEGj3DdOLf8P37N4a5sPqwEcE2ThydPgapMoI_hft2I3hkv9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzYNlG-spcJl3Bjpy344qS7O5IN2QVE9vNUz-HW7jV6z8df9JIAkyKervFWgmMgV8j-3h9VXwMyh6PgyDIVSG1W_M8W7hYpolf9WK8gAqynFvntxszIC-jZ3XnMw67JPJQ0D1VPAyD0j6vmt0vrdGriYru-vXQCXeHMnZd9iioZRVmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=5yhoGMDXSG57iRSyUfORFEMb%2Fk8%3D</a></p><p><a href="https://www.jianshu.com/p/89820a36d2e0">https://www.jianshu.com/p/89820a36d2e0</a></p></blockquote><blockquote><p>这个可以多看看</p><p><a href="https://www.jianshu.com/p/7987a88f3022">https://www.jianshu.com/p/7987a88f3022</a></p></blockquote><h5 id="1-1-5-编码方式知识扩展"><a href="#1-1-5-编码方式知识扩展" class="headerlink" title="1.1.5 编码方式知识扩展"></a>1.1.5 编码方式知识扩展</h5><blockquote><p>字符编码：ASCII 与 UTF-8编码</p><p><a href="https://blog.csdn.net/salvare/article/details/82941165">https://blog.csdn.net/salvare/article/details/82941165</a></p></blockquote><h4 id="1-3-request-path相关"><a href="#1-3-request-path相关" class="headerlink" title="1.3 request.path相关"></a>1.3 request.path相关</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    ret = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;request.path:&quot;</span>, request.path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;request.path_info:&quot;</span>, request.path_info)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;request.get_full_path():&quot;</span>, request.get_full_path())</span><br><span class="line"></span><br><span class="line">        ret[<span class="string">&quot;method&quot;</span>] = request.method</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(ret))</span><br></pre></td></tr></table></figure><blockquote><p>访问路由时不带参数</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719134245748.png" class="" title="image-20220719134245748"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719133926159.png" class="" title="image-20220719133926159"><blockquote><p>访问路由时带参数</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719134228415.png" class="" title="image-20220719134228415"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719134140233.png" class="" title="image-20220719134140233"><h5 id="1-1-1-path属性-推荐"><a href="#1-1-1-path属性-推荐" class="headerlink" title="1.1.1 path属性(推荐)"></a>1.1.1 path属性(推荐)</h5><blockquote><p>获取的是不带域名、不带?号后面参数的路由部分</p></blockquote><h5 id="1-1-1-path-info属性-不推荐"><a href="#1-1-1-path-info属性-不推荐" class="headerlink" title="1.1.1 path_info属性(不推荐)"></a>1.1.1 path_info属性(不推荐)</h5><blockquote><p>获取的是不带域名、不带?号后面参数的路由部分</p></blockquote><h5 id="1-1-1-get-full-path方法"><a href="#1-1-1-get-full-path方法" class="headerlink" title="1.1.1 get_full_path方法"></a>1.1.1 get_full_path方法</h5><blockquote><p>注意：</p><ul><li>当访问路由时没有参数，get_full_path方法和path、path_info属性获取到的路由都一样</li><li>当访问路由时带了参数，get_full_path方法会<code>将路由和?号后面的参数都一起返回</code></li></ul></blockquote><h4 id="1-4-request-body相关"><a href="#1-4-request-body相关" class="headerlink" title="1.4 request.body相关"></a>1.4 request.body相关</h4><blockquote><p>返回的是原生浏览器发过来的二进制数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = request.body</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719135113740.png" class="" title="image-20220719135113740"><h3 id="10、Pycharm操作Django技巧"><a href="#10、Pycharm操作Django技巧" class="headerlink" title="10、Pycharm操作Django技巧"></a>10、Pycharm操作Django技巧</h3><h4 id="1-1-快速创建Django应用"><a href="#1-1-快速创建Django应用" class="headerlink" title="1.1 快速创建Django应用"></a>1.1 快速创建Django应用</h4><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216001638808.png" class="" title="image-20211216001638808"><h4 id="1-2-修改Django端口"><a href="#1-2-修改Django端口" class="headerlink" title="1.2 修改Django端口"></a>1.2 修改Django端口</h4><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216001717991.png" class="" title="image-20211216001717991"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211216001748598.png" class="" title="image-20211216001748598"><h4 id="1-3-浏览器访问页面不走缓存"><a href="#1-3-浏览器访问页面不走缓存" class="headerlink" title="1.3 浏览器访问页面不走缓存"></a>1.3 浏览器访问页面不走缓存</h4><blockquote><p>谷歌浏览器打开F12，找到设置，勾选下面的选项即可</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211227235948716.png" class="" title="image-20211227235948716"><h3 id="11、路由"><a href="#11、路由" class="headerlink" title="11、路由"></a>11、路由</h3><h4 id="1-1-路由匹配"><a href="#1-1-路由匹配" class="headerlink" title="1.1 路由匹配"></a>1.1 路由匹配</h4><blockquote><p>Django中的路由是通过正则进行匹配的</p></blockquote><blockquote><p>当用浏览器访问url的时候，比如这样的路由”url(r’^add_course&#x2F;‘, views.add_course)”，在浏览器地址栏输入url时，“add_course”不带最后的“&#x2F;”，浏览器会发起两次请求，第二次浏览器会自动带上“&#x2F;”，然后匹配到”add_course“这个url，这个是Django提供的功能，提供了重定向功能，告知浏览器加上&#x2F;再试一次</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717221742390.png" class="" title="image-20220717221742390"><blockquote><p>在Django中的settings.py里控制是否自动添加&#x2F;，默认是<code>Ture</code></p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717221932804.png" class="" title="image-20220717221932804"><h4 id="1-2-无名分组"><a href="#1-2-无名分组" class="headerlink" title="1.2 无名分组"></a>1.2 无名分组</h4><h5 id="1-1-1-无名分组使用"><a href="#1-1-1-无名分组使用" class="headerlink" title="1.1.1 无名分组使用"></a>1.1.1 无名分组使用</h5><blockquote><p>Django支持在url中设置变量来接收传进来的值，本质就是通过正则表达式来匹配</p><p>分组其实就是给一段正则表达式用小括号括起来，进行匹配路由里的参数</p><p>注意：</p><ul><li>无名分组是将括号内的正则表达式匹配的内容当做<code>位置参数</code>传递给后面的视图函数</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无名分组</span></span><br><span class="line">url(<span class="string">r&#x27;^query_my_course/(\d+)/&#x27;</span>, views.query_my_course),</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数里需要有一个位置参数来接收正则表达式匹配到的内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_my_course</span>(<span class="params">request, num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;传进来的参数:<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;传进来的参数:<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717223147671.png" class="" title="image-20220717223147671"><blockquote><p>上面调用接口，服务端代码里就可以接收到正则表达式匹配到的内容</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717223116129.png" class="" title="image-20220717223116129"><h5 id="1-1-2-无名分组反向解析"><a href="#1-1-2-无名分组反向解析" class="headerlink" title="1.1.2 无名分组反向解析"></a>1.1.2 无名分组反向解析</h5><h4 id="1-3-有名分组"><a href="#1-3-有名分组" class="headerlink" title="1.3 有名分组"></a>1.3 有名分组</h4><h5 id="1-1-1-有名分组使用"><a href="#1-1-1-有名分组使用" class="headerlink" title="1.1.1 有名分组使用"></a>1.1.1 有名分组使用</h5><blockquote><p>相当于给正则匹配起了个别名，</p><ul><li>将括号内正则表达式匹配到的内容当做<code>关键字参数</code>传递给后面的视图函数</li><li>那么括号内的正则表达式匹配的内容当做<code>位置参数</code>传递给后面的视图函数，<code>位置参数名</code>必须要和正则表达式起的别名一样，否则就会报错</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 有名分组</span></span><br><span class="line">url(<span class="string">r&#x27;^collect_new_course/(?P&lt;levelId&gt;\d+)/&#x27;</span>, views.collect_new_course),</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">collect_new_course</span>(<span class="params">request, levelId</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;year=<span class="subst">&#123;levelId&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;collect_new_course传进来的参数:<span class="subst">&#123;levelId&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717235248369.png" class="" title="image-20220717235248369"><blockquote><p>可以看到将URL中的数字匹配了出来，并且传递给了服务端的视图函数</p><p>那如果过视图函数不用这个有名的<code>levelId</code>接收传进来的值，会报什么错？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">collect_new_course</span>(<span class="params">request, level_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;year=<span class="subst">&#123;level_id&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;collect_new_course传进来的参数:<span class="subst">&#123;level_id&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220718001017640.png" class="" title="image-20220718001017640"><blockquote><p>翻译过来就是：collect_new_course()获得了一个意外的关键字参数“levelId”</p><p>原因是传入视图函数的<code>形参名level_id</code>和urls.py里定义的有名分组名称<code>levelId</code>不一样，应该是levelId，但是视图函数里传入的是level_id，所以视图提示报错得到了一个非预期的关键字参数<code>levelId</code></p></blockquote><h5 id="1-1-2-有名分组反向解析"><a href="#1-1-2-有名分组反向解析" class="headerlink" title="1.1.2 有名分组反向解析"></a>1.1.2 有名分组反向解析</h5><h4 id="1-4-有名分组和无名分组注意"><a href="#1-4-有名分组和无名分组注意" class="headerlink" title="1.4 有名分组和无名分组注意"></a>1.4 有名分组和无名分组注意</h4><blockquote><ul><li>有名分组和无名分组注意不能混合使用</li><li>但是<code>单独</code>的有名分组、无名分组可以使用多个</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有名分组，urls.py文件中</span></span><br><span class="line">url(<span class="string">r&#x27;^collect_new_course/(?P&lt;levelId&gt;\d+)/(?P&lt;level_num&gt;\d+)&#x27;</span>, views.collect_new_course)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_new_course</span>(<span class="params">request, levelId, level_num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;level_id=<span class="subst">&#123;levelId&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;level_num=<span class="subst">&#123;level_num&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;collect_new_course传进来的参数:<span class="subst">&#123;levelId, level_num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220718010544283.png" class="" title="image-20220718010544283"><h4 id="1-5-路由分发"><a href="#1-5-路由分发" class="headerlink" title="1.5 路由分发"></a>1.5 路由分发</h4><blockquote><p>Django的每一个应用都可以有自己的<code>templates文件夹</code>、<code>urls.py</code>、<code>static文件夹</code></p><ul><li>基于上面的特性，Django可以非常好的做到分组开发，每个人只写自己的app</li><li>可以将所有写好的app汇总过来，在配置文件中注册所有的app，再利用路由分发的特点将所有的app整合起来</li></ul></blockquote><blockquote><p>路由分发的优点：</p><ul><li>利用路由分发以后，总路由不再处理路由和视图函数的直接对应关系，而只是进行分发处理(url指向需要找到的app)，然后根据识别到当前url是属于哪个应用下，然后分发给对应的应用去处理</li></ul></blockquote><h5 id="1-1-1-路由分发第一步"><a href="#1-1-1-路由分发第一步" class="headerlink" title="1.1.1 路由分发第一步"></a>1.1.1 路由分发第一步</h5><blockquote><p>app用来代表不同的应用简写，没有别的含义，比如<code>订单应用</code>、<code>用户应用</code>等等</p><p>在app目录中添加一个url.py文件</p><ul><li><p>在项目的settings.py中提前注册app</p></li><li><p>app&#x2F;urls.py的内容可以拷贝项目目录中的urls.py文件内容，将app的路由都写在app&#x2F;urls.py文件中</p><ul><li>需要再app&#x2F;urls.py中导入app的views，然后views再指向具体的视图函数</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在app目录中添加urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> home <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;index/&#x27;</span>, views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719000055842.png" class="" title="image-20220719000055842"><blockquote><p>可以看到将home应用所有的url都放在了home&#x2F;urls.py文件中</p></blockquote><h5 id="1-1-2-路由分发第二步"><a href="#1-1-2-路由分发第二步" class="headerlink" title="1.1.2 路由分发第二步"></a>1.1.2 路由分发第二步</h5><blockquote><p>在项目总路由中添加应用的路由分发，需要提前导入<code>include</code>方法</p><p>有两种写法</p><ul><li>方法一（不推荐）<ul><li>先从应用导入urls：<code>from home import urls as home_url</code></li><li>然后urlpatterns中添加：<code>url(r&#39;^home/&#39;, include(home_url))</code>，include中包含了导入的路由</li></ul></li><li>方法二（推荐）<ul><li>不用写需要导入urls</li><li>然后urlpatterns中添加：<code>url(r&#39;^home/&#39;, include(&quot;home.urls&quot;)</code><ul><li>include中是一个字符串，应用名.urls组成，这样Django会自动识别应用下的urls文件</li></ul></li></ul></li></ul><p>注意：</p><ul><li>总路由的url中不能添加<code>$</code>符号，加了就不能往对应的app中进行分发了</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的urls.py文件</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> home <span class="keyword">import</span> urls <span class="keyword">as</span> home_url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 路由分发</span></span><br><span class="line">    <span class="comment"># 不推荐：只要路由前缀是home开头的，全部交给home去处理</span></span><br><span class="line">    <span class="comment"># url(r&#x27;^home/&#x27;, include(home_url))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 推荐写法：</span></span><br><span class="line">    url(<span class="string">r&#x27;^home/&#x27;</span>, include(<span class="string">&quot;home.urls&quot;</span>))</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719001034991.png" class="" title="image-20220719001034991"><h5 id="1-1-3-访问路由分发的应用"><a href="#1-1-3-访问路由分发的应用" class="headerlink" title="1.1.3 访问路由分发的应用"></a>1.1.3 访问路由分发的应用</h5><blockquote><p>有了路由分发以后，访问路由就需要前带上应用名，再去访问应用里具体的路由</p><p>比如：访问home应用的<code>user_info</code>路由，应该写成<code>http://127.0.0.1:8000/home/user_info/</code></p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719001235306.png" class="" title="image-20220719001235306"><blockquote><p>可以看到django的路由指向就是指向了<code>home/user_info/</code>路由中</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719001325890.png" class="" title="image-20220719001325890"><blockquote><p>路由分发后面就可以根据应用(也可以叫模块)区分路由，比如用户应用(管理用户内容的，比如注册、查询、修改、注销等)、订单应用(管理订单相关内容，比如创建订单、支付订单、查询订单、关闭订单等等)</p></blockquote><h4 id="1-6-名称空间（了解）"><a href="#1-6-名称空间（了解）" class="headerlink" title="1.6 名称空间（了解）"></a>1.6 名称空间（了解）</h4><blockquote><p>当多个应用出现了相同的别名，反向解析是没法自动识别相同的别名的前缀的，用的很少</p></blockquote><h4 id="1-7-伪静态（了解）"><a href="#1-7-伪静态（了解）" class="headerlink" title="1.7 伪静态（了解）"></a>1.7 伪静态（了解）</h4><blockquote><p>其实就是把一个动态网页伪装成静态网页，乐嘉增大网站的seo查询热度，增加搜索引擎的查询概率，用的很少</p><p>用法就是在具体的路由后面加<code>.html</code>，伪装成一个静态网页，比如：<code>http://127.0.0.1:8000/home/user_info.html</code></p></blockquote><h3 id="12、JsonResponse对象"><a href="#12、JsonResponse对象" class="headerlink" title="12、JsonResponse对象"></a>12、JsonResponse对象</h3><blockquote><p>Django中返回的响应对象常见的有两个</p><ul><li><p>HttpResponse</p><ul><li>返回的是字符串类型</li></ul></li><li><p>JsonResponse</p><ul><li>是一个HTTP响应类，传进来的数据将被序列化为JSON格式</li><li><code>JsonResponse</code>中传入的数据。默认情况下，只支持<code>dict</code>对象<ul><li>由于EcmaScript 5之前的安全漏洞，只允许传递<code>dict</code>对象，参见更多信息请参见<code>safe</code>参数</li><li><code>safe</code>参数控制是否只有<code>dict</code>对象可以被序列化，默认为”True”，这样就只支持<code>dict</code>对象被序列化</li><li>如果需要支持非<code>dict</code>对象被序列化，那<code>safe</code>参数需要设置为<code>False</code></li></ul></li><li><code>JsonResponse</code>本身内部就是调用的<code>json</code>库进行序列化的，如果序列化时有中文，用postman等接口工具调用接口时，返回的响应内容中文会变乱码，那么就需要添加参数控制中文被原样输出，而不是被转换<ul><li>参数<code>json_dumps_params</code>可以以字典形式接收json库里支持的其他参数</li><li>传递给json.dumps()的一个kwargs字典，把json库里的参数传进去，<code>ensure_ascii=False</code>表示不用ASCII编码方式，因为ASCII编码不支持中文，遇到中文就会乱码</li></ul></li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部分代码</span></span><br><span class="line">ret = &#123;<span class="string">&quot;msg&quot;</span>: <span class="string">f&quot;不支持的请求方法:<span class="subst">&#123;request.method&#125;</span>&quot;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> JsonResponse(ret, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 序列化非字典结果，需要设置safe参数</span></span><br><span class="line">ret = &#123;<span class="string">&quot;msg&quot;</span>: <span class="string">f&quot;不支持的请求方法:<span class="subst">&#123;request.method&#125;</span>&quot;</span>&#125;</span><br><span class="line"><span class="keyword">return</span> JsonResponse(ret, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p>不加safe&#x3D;False参数，输出非dict对象时，就会报错</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220716000407609.png" class="" title="image-20220716000407609"><h3 id="13、文件上传操作"><a href="#13、文件上传操作" class="headerlink" title="13、文件上传操作"></a>13、文件上传操作</h3><blockquote><p>文件上传是属于form表单里的功能</p><p>form表单上传文件类型的数据要求</p><ul><li><code>method</code>必须是<code>post</code></li><li><code>enctype</code>必须是<code>formdata</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传文件使用的是FILES方法，和GET、POST获取参数值的方法一样</span></span><br><span class="line">file_obj = request.FILES.get(<span class="string">&quot;user_img&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_avatar</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&quot;user_img&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;file name:<span class="subst">&#123;file_obj, <span class="built_in">type</span>(file_obj)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;file name:<span class="subst">&#123;file_obj.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_obj.name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">                f.write(line)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;上传用户头像成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;不支持的请求方法:<span class="subst">&#123;request.method&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719011457599.png" class="" title="image-20220719011457599"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220719011511729.png" class="" title="image-20220719011511729"><blockquote><p>request.FILES.get(“上传文件的key”)，这种获取文件对象的想法和<code>GET</code>&#x2F;<code>POST</code>获取请求参数的值一样</p><p>FILES方法获取到的file_obj：</p><ul><li>file_obj的值是：<code>InMemoryUploadedFile: p1.jpeg (image/jpeg)</code></li><li>file_obj的类型：<code>class &#39;django.core.files.uploadedfile.InMemoryUploadedFile&#39;</code></li><li>file_obj.name：可以通过获取到的文件对象<code>.name</code>属性来获取上传的文件名，然后保存到本地或其他地方</li></ul></blockquote><h3 id="14、FBV和CBV"><a href="#14、FBV和CBV" class="headerlink" title="14、FBV和CBV"></a>14、FBV和CBV</h3><h4 id="1-1-FBV"><a href="#1-1-FBV" class="headerlink" title="1.1 FBV"></a>1.1 FBV</h4><h4 id="1-2-CBV"><a href="#1-2-CBV" class="headerlink" title="1.2 CBV"></a>1.2 CBV</h4><h2 id="三、ORM数据库"><a href="#三、ORM数据库" class="headerlink" title="三、ORM数据库"></a>三、ORM数据库</h2><h3 id="1、Pycharm连接数据库"><a href="#1、Pycharm连接数据库" class="headerlink" title="1、Pycharm连接数据库"></a>1、Pycharm连接数据库</h3><blockquote><p>使用<code>docker</code>可以快速创建<code>mysql</code>等数据库，用来快速搭建想要的环境</p></blockquote><h4 id="1-1-mac下连接docker的mysql"><a href="#1-1-mac下连接docker的mysql" class="headerlink" title="1.1 mac下连接docker的mysql"></a>1.1 mac下连接docker的mysql</h4><blockquote><p>步骤：</p><ul><li>创建一个<code>mysql</code>容器，拉取<code>mysql:5.7</code>镜像，再去创建容器，此处可以查看mysql笔记中记录了如何创建容器</li><li>注意<ul><li>创建完的数据库默认用户是root，密码使用<code>-e MYSQL_ROOT_PASSWORD=123456</code>设置为123456</li><li>创建完以后需要登录容器内部，给root用户开启远程访问权限，否则在容器外部会出现访问数据库失败的情况</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取mysql容器，选择5.7版本的tag，不写5.7则会拉取8版本，8版本对我们来说太新了</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -dit --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br><span class="line"><span class="comment">#  表示设置数据库用户root的密码为123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录容器，赋予root远程登录权限</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录mysql容器后，配置远程访问权限</span></span><br><span class="line">&gt;&gt; grant all privileges on *.* to root@<span class="string">&quot;%&quot;</span> identified by <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">&gt;&gt; flush privileges ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面配置完成退出数据库，就可以在容器外部连接mysql了</span></span><br><span class="line">mysql -uroot -h127.0.0.1 -p123456</span><br></pre></td></tr></table></figure><blockquote><p>在上述配置好以后，就可以在<code>pycharm</code>中打开<code>mysql</code>连接界面，进行连接数据库了，下面用截图表示</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220104075847993.png" class="" title="image-20220104075847993"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220104075948885.png" class="" title="image-20220104075948885"><blockquote><p>需要先下载对应数据库的驱动，上图配置界面会提示下载，点击下载即可</p><p>主机：数据库的地址，因为是本地连接，所以是127.0.0.1</p><p>端口：3306不变</p><p>用户、密码：数据库的用户和密码</p><p>数据库：提前创建好的数据名，需要提前在数据库中创建才可以进行连接</p><p>上面连接信息填写完以后，点击<code>测试连接</code>即可快速验证数据库是否连接成功，若未成功，需要检查下配置是否正确</p></blockquote><h4 id="1-2-windows下连接docker的mysql"><a href="#1-2-windows下连接docker的mysql" class="headerlink" title="1.2 windows下连接docker的mysql"></a>1.2 windows下连接docker的mysql</h4><blockquote><p><code>windows</code>下也可以用<code>docker</code>的<code>mysql</code>，一般可以在<code>linux</code>虚拟机里安装docker，在启动mysql容器</p><p>所以拉取<code>mysql</code>镜像,修改<code>mysql</code>的<code>root</code>权限、在<code>pycharm</code>中配置等步骤都和上面的<code>mac</code>配置一样</p><p>唯一区别在于：</p><ul><li>windows下的<code>pycharm</code>想连接虚拟机里的docker的<code>mysql</code>容器，需要使用<code>pycharm</code>的<code>ssh隧道</code>功能先连接上虚拟机，再去连接虚拟机里的数据库</li><li>下图展示了如何配置</li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220104080802817.png" class="" title="image-20220104080802817"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220104080909084.png" class="" title="image-20220104080909084"><blockquote><p>虚拟机连接上后，再配置数据库连接</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220104081033712.png" class="" title="image-20220104081033712"><blockquote><p>到这里数据库连接配置完成，可以在<code>pycharm</code>进行<code>django</code>的数据库连接了</p></blockquote><h3 id="2、Django连接Mysql"><a href="#2、Django连接Mysql" class="headerlink" title="2、Django连接Mysql"></a>2、Django连接Mysql</h3><h4 id="2-1-配置mysql连接"><a href="#2-1-配置mysql连接" class="headerlink" title="2.1 配置mysql连接"></a>2.1 配置mysql连接</h4><blockquote><p><code>Django</code>连接数据库时，需要先创建好数据库</p><p><code>Django</code>自带了一个小型数据库<code>sqlite3</code>，这个数据库比较小，我们可以不用他，换成<code>mysql</code></p><p><code>Django</code>如何连接<code>mysql</code></p><p><a href="https://docs.djangoproject.com/en/1.11/ref/settings/#databases">官方地址: https://docs.djangoproject.com/en/1.11/ref/settings/#databases</a></p><p>注意一定要在<code>settings.py</code>文件中注册<code>APP</code>，否则会出现数据库迁移失败的情况</p></blockquote><blockquote><p><code>Django</code>连接mysql需要在<code>settings.py</code>中指定连接数据的名字、用户名、密码、端口</p><p><code>Django</code>连接数据库一定要先创建数据库，再去<code>settings.py</code>里去连接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py文件，大概78行</span></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是默认的sqlite3连接，可以注释掉，连接mysql</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mysql</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydatabase&#x27;</span>,   </span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;mydatabaseuser&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;mypassword&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;5432&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20211228010019204.png" class="" title="image-20211228010019204"><h4 id="2-2-配置mysql启动Django错误修复"><a href="#2-2-配置mysql启动Django错误修复" class="headerlink" title="2.2 配置mysql启动Django错误修复"></a>2.2 配置mysql启动Django错误修复</h4><blockquote><p>在settings里配置了mysql以后，启动django就会报如下错误</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220714233845467.png" class="" title="image-20220714233845467"><blockquote><p>错误信息：这个提示是没有<code>MySQLdb</code>模块，</p><p>Django默认用的是<code>MySQLdb</code>模块来连接数据库，但是<code>MySQLdb</code>模块兼容性不好，而且容易出错，所以需要我们去手动指定连接mysql数据库的第三库<code>pymysql</code></p></blockquote><blockquote><p>手动配置pymysql方法：</p><ul><li>先安装pymysql：<code>pip install pymysql</code></li><li>下面方法任选一个<ul><li>在Django的项目目录(包含urls.py、settings.py的目录)里有一个<code>__init__.py</code>的文件，在里面添加如下代码<ul><li>这样相当于做到了全局配置，每个app目录里就不用配置了</li></ul></li><li>在Django每个app目录下，都有一个<code>__init__.py</code>的文件，在里面添加如下代码</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Django的项目目录的__init__.py的文件</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220714234643171.png" class="" title="image-20220714234643171"><blockquote><p>配置完成后再次启动就可以了</p></blockquote><h4 id="2-3-设置Django的时区"><a href="#2-3-设置Django的时区" class="headerlink" title="2.3 设置Django的时区"></a>2.3 设置Django的时区</h4><blockquote><p>使用mysql数据时，需要考虑设置时区为国内，否则数据库中存储的时间和国内时间差8个小时</p><p>下面是解决办法：</p><ul><li>在Django的配置文件settings.py中，有两个配置参数是跟时间与时区有关的，分别是TIME_ZONE和USE_TZ<ul><li>如果USE_TZ设置为True时，Django会使用系统默认设置的时区，即America&#x2F;Chicago，此时的TIME_ZONE不管有没有设置都不起作用。</li><li>如果USE_TZ 设置为False，而TIME_ZONE设置为None，则Django还是会使用默认的America&#x2F;Chicago时间。若TIME_ZONE设置为其它时区(比如国内)的话，则还要分情况<ul><li>如果是Windows系统，则TIME_ZONE设置是没用的，Django会使用本机的时间。</li><li>如果为其他系统，则使用该时区的时间，入设置USE_TZ &#x3D; False, TIME_ZONE &#x3D; ‘Asia&#x2F;Shanghai’, 则使用上海的UTC时间</li></ul></li></ul></li></ul></blockquote><h3 id="3、ORM的使用"><a href="#3、ORM的使用" class="headerlink" title="3、ORM的使用"></a>3、ORM的使用</h3><h4 id="3-1-ORM简介"><a href="#3-1-ORM简介" class="headerlink" title="3.1 ORM简介"></a>3.1 ORM简介</h4><blockquote><p><code>ORM</code>：对象关系映射</p><p>主要是用来将mysql语句通过面向对象去执行</p><p>主要是在<code>Django</code>的<code>app</code>的<code>models.py</code>文件中写创建表语句，以面向对象的形式</p></blockquote><h4 id="3-2-ORM编写建表语句"><a href="#3-2-ORM编写建表语句" class="headerlink" title="3.2 ORM编写建表语句"></a>3.2 ORM编写建表语句</h4><blockquote><p>需要在对应<code>app</code>的models.py&#96;文件中写数据库的面向对象代码</p><p>models官方教程：<a href="https://docs.djangoproject.com/zh-hans/4.0/intro/tutorial02/">https://docs.djangoproject.com/zh-hans/4.0/intro/tutorial02/</a></p></blockquote><h5 id="3-2-1-AutoField字段"><a href="#3-2-1-AutoField字段" class="headerlink" title="3.2.1 AutoField字段"></a>3.2.1 AutoField字段</h5><blockquote><p>表示一个自增列，等同于int，必须将给列设置为主键（primary_key&#x3D;True）</p></blockquote><h5 id="3-2-2-CharField字段"><a href="#3-2-2-CharField字段" class="headerlink" title="3.2.2 CharField字段"></a>3.2.2 CharField字段</h5><blockquote><p>当定义字段为CharField时，一定要指定<code>max_length</code>参数，不指定就会直接报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">32</span>)</span><br></pre></td></tr></table></figure><h5 id="3-2-3-DateTimeField字段"><a href="#3-2-3-DateTimeField字段" class="headerlink" title="3.2.3 DateTimeField字段"></a>3.2.3 DateTimeField字段</h5><blockquote><p>日期时间类型（datetime），官网对于<a href="https://docs.djangoproject.com/zh-hans/4.0/ref/models/fields/#django.db.models.DateTimeField">DateTimeField</a>字段解释</p><p>支持两个参数：</p><ul><li><p><code>auto_now_add=True</code>：则只是第一次创建添加，之后的更新不再改变该值，比较适合作为<code>创建时间</code></p></li><li><p><code>auto_now=True</code>：则每次更新都会更新这个时间，比较适合作为<code>更新时间</code></p></li></ul></blockquote><h5 id="3-2-4-DateField字段"><a href="#3-2-4-DateField字段" class="headerlink" title="3.2.4 DateField字段"></a>3.2.4 DateField字段</h5><blockquote><p>日期类型 date，对于参数和DateTimeField字段一样</p></blockquote><h5 id="3-2-5-verbose-name参数"><a href="#3-2-5-verbose-name参数" class="headerlink" title="3.2.5 verbose_name参数"></a>3.2.5 verbose_name参数</h5><blockquote><p>可以给每个字段都加一个verbose_name字段，这样启用django的admin平台查看数据库字段时，就是中文的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比如</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;用户名&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-2-6-编写示例"><a href="#3-2-6-编写示例" class="headerlink" title="3.2.6 编写示例"></a>3.2.6 编写示例</h5><blockquote><p>下面是创建了一个User表语句代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseLevel</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, name=<span class="string">&quot;主键ID&quot;</span>, verbose_name=<span class="string">&quot;主键ID&quot;</span>)</span><br><span class="line">    level_name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;级别名称&quot;</span>)</span><br><span class="line">    level_desc = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;级别描述&quot;</span>)</span><br><span class="line">    db_ctime = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&quot;创建时间&quot;</span>)</span><br><span class="line">    db_utime = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&quot;更新时间&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-2-7-表字段注释"><a href="#3-2-7-表字段注释" class="headerlink" title="3.2.7 表字段注释"></a>3.2.7 表字段注释</h5><blockquote><p>django的model默认不支持数据库建表语句字段添加注释的，<a href="https://blog.csdn.net/Tomonkey/article/details/116663370?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-116663370-blog-120064590.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-116663370-blog-120064590.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=1">可参考这个教程</a></p></blockquote><h4 id="3-3-Django数据库迁移命令"><a href="#3-3-Django数据库迁移命令" class="headerlink" title="3.3 Django数据库迁移命令"></a>3.3 Django数据库迁移命令</h4><h5 id="3-3-1-生成迁移记录"><a href="#3-3-1-生成迁移记录" class="headerlink" title="3.3.1 生成迁移记录"></a>3.3.1 生成迁移记录</h5><blockquote><p>下面的命令，主要用来生成数据库建表语句记录，下面的命令只是生成记录，还没有真正在数据库中执行创建表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><blockquote><p>执行后会在对应<code>app</code>的<code>migrations</code>文件夹下生成一个类似<code>0001_initial.py</code>的文件，主要记录了建表语句</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220105234018673.png" class="" title="image-20220105234018673"><h5 id="3-3-2-查看真正的建表语句"><a href="#3-3-2-查看真正的建表语句" class="headerlink" title="3.3.2 查看真正的建表语句"></a>3.3.2 查看真正的建表语句</h5><blockquote><p>生成数据库迁移文件以后，有个命令可查看真正的建表语句，在项目根目录下执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate home 0001_initial</span><br><span class="line"><span class="comment"># sqlmigrate 用来打印真正的建表语句命令</span></span><br><span class="line"><span class="comment"># home 对应是home这个app</span></span><br><span class="line"><span class="comment"># 0001_initial 这个是数据库迁移文件，目录是在app/migrations里面，要查看哪次的迁移建表语句就直接写那个文件</span></span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220715004826972.png" class="" title="image-20220715004826972"><h5 id="3-3-3-真正同步数据到数据库"><a href="#3-3-3-真正同步数据到数据库" class="headerlink" title="3.3.3 真正同步数据到数据库"></a>3.3.3 真正同步数据到数据库</h5><blockquote><p>下面命令，将操作真正同步到数据库中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><blockquote><p>在数据库中就能看到迁移过来的表，同时我们创建表命名规则是： app名 + 下划线 + models中的类名小写</p><p>这样以后有多个app时，就可以用app名区分开表了</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220715005007418.png" class="" title="image-20220715005007418"><blockquote><p>查看数据库中的真正建表语句</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220715005247735.png" class="" title="image-20220715005247735"><h5 id="3-3-4-migrate不成功原因"><a href="#3-3-4-migrate不成功原因" class="headerlink" title="3.3.4 migrate不成功原因"></a>3.3.4 migrate不成功原因</h5><blockquote><p>执行migrate不成功原因，是django在app&#x2F;migrations目录下生成的迁移文件名不是<code>initial</code>结尾的</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220731012701596.png" class="" title="image-20220731012701596"><h4 id="3-4-ORM的优化点"><a href="#3-4-ORM的优化点" class="headerlink" title="3.4 ORM的优化点"></a>3.4 ORM的优化点</h4><blockquote><p>在表里面一般都有<code>id</code>字段，表示主键字段</p><ul><li>在models.py中部定义id字段时，那么Django的ORM会自动创建一个叫<code>id</code>的字段，并且是自增的</li></ul></blockquote><h4 id="3-5-ORM字段的增删改查"><a href="#3-5-ORM字段的增删改查" class="headerlink" title="3.5 ORM字段的增删改查"></a>3.5 ORM字段的增删改查</h4><blockquote><p>需要对ORM字段进行增删改查时，注意是字段，不是数据</p></blockquote><h4 id="3-6-ORM表数据的增加"><a href="#3-6-ORM表数据的增加" class="headerlink" title="3.6 ORM表数据的增加"></a>3.6 ORM表数据的增加</h4><h5 id="3-6-1-增加数据"><a href="#3-6-1-增加数据" class="headerlink" title="3.6.1 增加数据"></a>3.6.1 增加数据</h5><blockquote><p>增加数据，相当于<code>mysql数据库</code>中的操作就是<code>insert into</code>操作</p></blockquote><blockquote><p>第一种增加数据方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.表名类.<span class="built_in">object</span>.create(字段名=字段值,字段名=字段值,...)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ORM操作数据库添加数据语法</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">    level_name = request.POST.get(<span class="string">&quot;level_name&quot;</span>)</span><br><span class="line">    level_desc = request.POST.get(<span class="string">&quot;level_desc&quot;</span>)</span><br><span class="line">res = CourseLevel.objects.create(level_name=level_name, level_desc=level_desc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;res:<span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上面代码表示从post请求里获取<code>level_name</code>和<code>level_desc</code>这两个参数值，然后保存到数据库中，并且返回了保存对象本身，然后就可以对返回的保存对象获取的的id以及其他信息，返回给调用者</p></blockquote><blockquote><p>第二种增加数据方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先实例化一个数据对象</span></span><br><span class="line">course_level_obj = models.CourseLevel(level_name=level_name, level_desc=level_desc)</span><br><span class="line">course_level_obj.save()</span><br></pre></td></tr></table></figure><blockquote><p>这种方式的保存数据是利用对象点属性方法的形式保存数据</p></blockquote><h4 id="3-7-ORM表数据的删除"><a href="#3-7-ORM表数据的删除" class="headerlink" title="3.7 ORM表数据的删除"></a>3.7 ORM表数据的删除</h4><blockquote><p>直接找到符合条件的数据对象(querySet集合)，然后全部删除，是批量删除操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete_course</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 先获取用户想要删除的数据对象id</span></span><br><span class="line">    level_id = request.GET.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="comment"># 直接找到符合条件的数据，全部删除，是一个批量删除操作</span></span><br><span class="line">    delete_obj = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id).delete()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;delete_obj=<span class="subst">&#123;delete_obj&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;删除成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-8-ORM表数据的更改"><a href="#3-8-ORM表数据的更改" class="headerlink" title="3.8 ORM表数据的更改"></a>3.8 ORM表数据的更改</h4><blockquote><p>表数据的修改其实就是在执行sql里的<code>update</code>操作</p><p>如何告诉后端用户想要编辑的数据：</p><ul><li>将编辑按钮所在的那一行数据的ID主键值给后端</li><li>利用url后面带参数的方式</li><li>注意：后端需要查出来用户想要编辑的数据对象，这样才能展示到前端页面让用户查看和编辑</li></ul><p>更新数据有两种方式</p></blockquote><h5 id="3-8-1-更新数据-推荐"><a href="#3-8-1-更新数据-推荐" class="headerlink" title="3.8.1 更新数据(推荐)"></a>3.8.1 更新数据(推荐)</h5><blockquote><p>更新的时候，需要先用filter方法根据条件查出来需要更新的数据，然后再更新数据，这个操作是<code>批量更新</code></p><p>该操作只修改需要修改的数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新数据，update里放的是需要更新的字段，更新成功以后，res返回1，更新失败返回0</span></span><br><span class="line">res = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id).update(level_name=level_name, level_desc=level_desc)</span><br></pre></td></tr></table></figure><blockquote><p>更新之前先查询数据</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717214852802.png" class="" title="image-20220717214852802"><blockquote><p>更新数据，调用更新接口</p><p>更新成功以后，update_obj会返回1，更新失败会返回0</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_course</span>(<span class="params">request</span>):</span><br><span class="line">    msg = &#123;</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="comment"># 拿到需要编辑的数据的id</span></span><br><span class="line">        level_id = request.POST.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        level_name = request.POST.get(<span class="string">&quot;level_name&quot;</span>)</span><br><span class="line">        level_desc = request.POST.get(<span class="string">&quot;level_desc&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据的方式</span></span><br><span class="line">        <span class="comment"># 将filter查询出来的列表中所有的对象全部更新，批量更新操作</span></span><br><span class="line">        update_obj = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id).update(level_name=level_name, level_desc=level_desc)</span><br><span class="line">        <span class="comment"># msg[&quot;data&quot;] = update_obj</span></span><br><span class="line">        <span class="built_in">print</span>(update_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(msg)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717215153519.png" class="" title="image-20220717215153519"><blockquote><p>上面更新执行完成后，再次查询数据，可以看到数据已经变为更新后的数据了</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717215209810.png" class="" title="image-20220717215209810"><h5 id="3-8-2-更新数据-不推荐"><a href="#3-8-2-更新数据-不推荐" class="headerlink" title="3.8.2 更新数据(不推荐)"></a>3.8.2 更新数据(不推荐)</h5><blockquote><p>这个方法里是用save进行局部数据更新</p><ul><li><p>相当于是重新保存了一个新的数据对象</p></li><li><p>尤其是字段很多的时候，更新效率会很低</p></li><li><p>缺点</p><ul><li>会从头到尾将数据的所哟欧字段全部再更新一次，无论该字段是否需要需要</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先拿到需要修改的数据对象，然后通过对象.属性的方式编辑数据，最后save保存数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_course</span>(<span class="params">request</span>):</span><br><span class="line">    msg = &#123;</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;更新成功&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="comment"># 拿到需要编辑的数据的id</span></span><br><span class="line">        level_id = request.POST.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        level_name = request.POST.get(<span class="string">&quot;level_name&quot;</span>)</span><br><span class="line">        level_desc = request.POST.get(<span class="string">&quot;level_desc&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据的方式</span></span><br><span class="line">        <span class="comment"># 法二: filter查询出来的数据对象，挨个修改字段</span></span><br><span class="line">        update_obj = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id).first()</span><br><span class="line">        update_obj.<span class="built_in">id</span> = level_id</span><br><span class="line">        update_obj.level_name = level_name</span><br><span class="line">        update_obj.level_desc = level_desc</span><br><span class="line">        update_obj.save()</span><br><span class="line">        <span class="built_in">print</span>(update_obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(msg)</span><br></pre></td></tr></table></figure><h4 id="3-9-ORM表数据的查询"><a href="#3-9-ORM表数据的查询" class="headerlink" title="3.9 ORM表数据的查询"></a>3.9 ORM表数据的查询</h4><blockquote><p>数据的查询，对比到数据库中就是<code>select</code>操作</p><p>注意：</p><ul><li>如果可以查询到数据，就返回查询到的数据</li><li>如果查询不到，那么结果就返回<code>None</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.表名类.<span class="built_in">object</span>.<span class="built_in">filter</span>(字段名=字段值,字段名=字段值,...)</span><br></pre></td></tr></table></figure><blockquote><p>上面的查询后面可以添加一个<code>first</code>方法，这样表示取出查询结果的第一个</p></blockquote><h5 id="3-9-1-查询数据不调用first方法"><a href="#3-9-1-查询数据不调用first方法" class="headerlink" title="3.9.1 查询数据不调用first方法"></a>3.9.1 查询数据不调用first方法</h5><blockquote><p>在查询数据时不调用<code>first()</code>方法</p><ul><li>那么会根据filter()函数里传入的参数查询出所有符合条件的数据，有时候查询结果条数可能会大于一条，所以返回的查询结果是一个<code>QuerySet集合</code>，这个集合里的每个元素都是数据对象</li><li>QuerySet集合的类型是<code>&lt;class &#39;django.db.models.query.QuerySet&#39;&gt;</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query_course</span>(<span class="params">request</span>):</span><br><span class="line">    level_id = request.GET.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;level_id: <span class="subst">&#123;level_id&#125;</span>&quot;</span>) <span class="comment"># level_id: 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依据条件查询数据，不调用first功能</span></span><br><span class="line">    query_data_all = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;query_data_all: <span class="subst">&#123;query_data_all&#125;</span>&quot;</span>)  <span class="comment"># query_data_all: &lt;QuerySet [&lt;CourseLevel: CourseLevel object&gt;]&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;query_data_all type: <span class="subst">&#123;<span class="built_in">type</span>(query_data_all)&#125;</span>&quot;</span>) <span class="comment"># query_data_all type: &lt;class &#x27;django.db.models.query.QuerySet&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;请求了query_course&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220716004435541.png" class="" title="image-20220716004435541"><h5 id="3-9-2-查询数据调用first方法"><a href="#3-9-2-查询数据调用first方法" class="headerlink" title="3.9.2 查询数据调用first方法"></a>3.9.2 查询数据调用first方法</h5><blockquote><p>在查询时调用<code>first()</code>方法，顾名思义，那就返回的是<code>QuertSet集合</code>的第一个数据对象，如果<code>QuerySet</code>集合为空，那么first方法会返回None</p><ul><li>从下面查询数据调用了<code>first</code>方法<ul><li>返回结果是一个数据对象</li><li>并且类型就是这个数据类型指向的类，其实就是models.py里定义的类</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># first方法源码，可以很清楚的看出来，是返回了第一个对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the first object of a query, returns None if no match is found.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    objects = <span class="built_in">list</span>((self <span class="keyword">if</span> self.ordered <span class="keyword">else</span> self.order_by(<span class="string">&#x27;pk&#x27;</span>))[:<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> objects:</span><br><span class="line">        <span class="keyword">return</span> objects[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query_course</span>(<span class="params">request</span>):</span><br><span class="line">    level_id = request.GET.get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;level_id: <span class="subst">&#123;level_id&#125;</span>&quot;</span>) <span class="comment"># level_id: 2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 依据条件查询数据，调用first功能</span></span><br><span class="line">    query_data_first = CourseLevel.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=level_id).first()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;query_data_first: <span class="subst">&#123;query_data_first&#125;</span>&quot;</span>)  <span class="comment"># query_data_first: CourseLevel object</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;query_data_first type: <span class="subst">&#123;<span class="built_in">type</span>(query_data_first)&#125;</span>&quot;</span>)  <span class="comment"># query_data_first type: &lt;class &#x27;home.models.CourseLevel&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;请求了query_course&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220716005858006.png" class="" title="image-20220716005858006"><h5 id="3-9-3-查询所有数据-不推荐"><a href="#3-9-3-查询所有数据-不推荐" class="headerlink" title="3.9.3 查询所有数据(不推荐)"></a>3.9.3 查询所有数据(不推荐)</h5><blockquote><p>查询所有数据用到了<code>filter</code>方法，返回了所有的数据对象集合，是一个<code>QuerySet</code>集合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">query_data = CourseLevel.objects.<span class="built_in">filter</span>()</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717211917194.png" class="" title="image-20220717211917194"><h5 id="3-9-4-查询所有数据-推荐"><a href="#3-9-4-查询所有数据-推荐" class="headerlink" title="3.9.4 查询所有数据(推荐)"></a>3.9.4 查询所有数据(推荐)</h5><blockquote><p>查询所有数据用到了<code>all</code>方法，返回了所有的数据对象集合，是一个<code>QuerySet</code>集合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有数据</span></span><br><span class="line">query_data = CourseLevel.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717211917194.png" class="" title="image-20220717211917194"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query_course</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 查询所有数据</span></span><br><span class="line">    query_data = CourseLevel.objects.<span class="built_in">all</span>()</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> query_data:</span><br><span class="line">        course_level_info = &#123;&#125;</span><br><span class="line">        course_level_info[<span class="string">&quot;id&quot;</span>] = i.<span class="built_in">id</span></span><br><span class="line">        course_level_info[<span class="string">&quot;level_name&quot;</span>] = i.level_name</span><br><span class="line">        course_level_info[<span class="string">&quot;level_desc&quot;</span>] = i.level_desc</span><br><span class="line">        course_level_info[<span class="string">&quot;db_ctime&quot;</span>] = i.db_ctime</span><br><span class="line">        course_level_info[<span class="string">&quot;db_utime&quot;</span>] = i.db_utime</span><br><span class="line">        ret.append(course_level_info)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(ret, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220717212648622.png" class="" title="image-20220717212648622"><h5 id="3-9-5-查询数据注意事项"><a href="#3-9-5-查询数据注意事项" class="headerlink" title="3.9.5 查询数据注意事项"></a>3.9.5 查询数据注意事项</h5><blockquote><ul><li>查询使用request.GET.get()查询请求里的字段时，一定要注意字段名是正确的，否则查询结果是None</li></ul></blockquote><h4 id="3-10-必知必会13条"><a href="#3-10-必知必会13条" class="headerlink" title="3.10 必知必会13条"></a>3.10 必知必会13条</h4><blockquote></blockquote><h4 id="3-11-双下划线查询"><a href="#3-11-双下划线查询" class="headerlink" title="3.11 双下划线查询"></a>3.11 双下划线查询</h4><blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4></blockquote><h4 id="3-12-多表操作"><a href="#3-12-多表操作" class="headerlink" title="3.12 多表操作"></a>3.12 多表操作</h4><blockquote><p>多表操作涉及到了mysql的多表知识，详细可见mysql笔记中的多表关系</p></blockquote><h4 id="3-13-批量操作"><a href="#3-13-批量操作" class="headerlink" title="3.13 批量操作"></a>3.13 批量操作</h4><blockquote><p>当有成千上万条数据需要操作时，使用<code>for循环</code>等方式操作数据，效率会很低，Django提供了批量操作的方式来快速实现数据的批量操作</p></blockquote><h3 id="4、数据序列化"><a href="#4、数据序列化" class="headerlink" title="4、数据序列化"></a>4、数据序列化</h3><blockquote><p>Django自带序列化模块，可对输出的结果进行序列化后再返回</p><p><a href="https://www.cnblogs.com/garyhtml/p/15981110.html">https://www.cnblogs.com/garyhtml/p/15981110.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：serializers.serialize(&#x27;序列化成什么格式&#x27;,数据)</span></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers   <span class="comment"># 导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ab_ser</span>(<span class="params">request</span>):</span><br><span class="line">    user_queryset = models.User.objects.<span class="built_in">all</span>()</span><br><span class="line">    res = serializers.serialize(<span class="string">&#x27;json&#x27;</span>,user_queryset)  <span class="comment"># 序列化成json格式数据</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;会自动帮你将数据变成json格式的字符串 并且内部非常的全面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)  <span class="comment"># 返回给前端页面</span></span><br></pre></td></tr></table></figure><h3 id="5、pymysql出现超时"><a href="#5、pymysql出现超时" class="headerlink" title="5、pymysql出现超时"></a>5、pymysql出现超时</h3><blockquote><p><a href="https://blog.csdn.net/moxiao1995071310/article/details/89360406">https://blog.csdn.net/moxiao1995071310/article/details/89360406</a></p><p><a href="https://www.jianshu.com/p/cc8561dac9ee">https://www.jianshu.com/p/cc8561dac9ee</a></p></blockquote><h2 id="四、forms组件"><a href="#四、forms组件" class="headerlink" title="四、forms组件"></a>四、forms组件</h2><h3 id="1、forms"><a href="#1、forms" class="headerlink" title="1、forms"></a>1、forms</h3><h3 id="2、forms校验参数"><a href="#2、forms校验参数" class="headerlink" title="2、forms校验参数"></a>2、forms校验参数</h3><blockquote><p>可以用来校验请求参数，不需要每次单独对参数进行各种判断了</p><p><a href="https://docs.djangoproject.com/zh-hans/4.0/ref/forms/validation/">https://docs.djangoproject.com/zh-hans/4.0/ref/forms/validation/</a></p></blockquote><h2 id="五、cookie和session"><a href="#五、cookie和session" class="headerlink" title="五、cookie和session"></a>五、cookie和session</h2><h3 id="1、cookie和session"><a href="#1、cookie和session" class="headerlink" title="1、cookie和session"></a>1、cookie和session</h3><h3 id="2、Django操作cookie"><a href="#2、Django操作cookie" class="headerlink" title="2、Django操作cookie"></a>2、Django操作cookie</h3><blockquote><p>django可以对请求主动设置cookies</p><ul><li>django中的三个request方法对象都可以来设置cookie<ul><li>HttpResponse()</li><li>render()<ul><li>该方法本质返回的还是HttpResponse对象</li></ul></li><li>redirect()<ul><li>该方法本质返回的还是HttpResponse对象</li></ul></li></ul></li></ul><p>django在请求来的时候获取cookies</p><ul><li>可以获取请求时候来的cookies，通过cookie中携带的关键key和value来识别是哪个身份</li></ul></blockquote><h4 id="2-1-设置cookie"><a href="#2-1-设置cookie" class="headerlink" title="2.1 设置cookie"></a>2.1 设置cookie</h4><blockquote><p>只要是HttpResponse对象，就可以调用set_cookie来设置cookie，最后将对象返回，其实也就是将HttpResponse对象返回，符合视图函数的规范</p><p>设置cookie的特点</p><ul><li>设置cookie以后，浏览器会将cookie的键值对存储起来</li><li>后面每次去访问的时候，就会带着cookie的键值对访问</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置cookie</span></span><br><span class="line">obj = HttpResponse()</span><br><span class="line">obj.set_cookie(key, value)</span><br><span class="line"><span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><h5 id="2-1-1-设置cookie示例"><a href="#2-1-1-设置cookie示例" class="headerlink" title="2.1.1 设置cookie示例"></a>2.1.1 设置cookie示例</h5><blockquote><p>准备页面和接口</p><ul><li>前端有登录的html页面 </li><li>服务端有路由、登录的视图函数</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url.py代码</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^index/&#x27;</span>, views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视图函数代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户登录</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        uname = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(uname, pwd)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&quot;lx&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">            <span class="comment"># 保存用户登录状态，登录成功有以后跳转至用户首页，前面有个/user/是因为用到了路由分发</span></span><br><span class="line">            obj = redirect(<span class="string">&quot;/user/index/&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置cookie让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&quot;login_ck&quot;</span>, <span class="string">&quot;lx_123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;set_cookie后的obj:<span class="subst">&#123;obj&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set_cookie后的obj:<span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set_cookie后的obj:<span class="subst">&#123;obj.__dict__&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># 将最终的httpResponse对象返回</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>此时在浏览器上请求<code>/user/login/</code>路由，可以看到login的登录页面，此时打开浏览器的开发者工具，切换到<code>Application</code>选项，查看<code>Cookie</code>下的域名</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720000943027.png" class="" title="image-20220720000943027"><blockquote><p>然后进行登录，输入<code>lx</code>和<code>123</code>,登录成功跳转到index页面后，发生了下面几件事</p><ul><li><p>浏览器开发者工具的<code>Application</code>下的<code>Cookie</code>下的<code>http://127.0.0.1:8000</code>域名下有cookie值了了，并且键值对就是视图函数中设置cookie的键值对(“login_ck”, “lx_123”)</p></li><li><p>登陆成功后&#x2F;login&#x2F;路由又请求了一次，并且在<code>Response Header</code>中可以看到进行了<code>Set-Cookies</code>，表示在设置cookie</p></li><li><p>浏览器开发者工具的<code>Network</code>下查看登陆成功后跳转到index页面的请求，发现请求头中浏览器自动携带了设置的cookie键值对(“login_ck”, “lx_123”)</p><ul><li>验证了只要cookie有值，浏览器在请求相同域名下的路由，都会自动带上cookie去请求</li></ul></li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720001313847.png" class="" title="image-20220720001313847"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720002815184.png" class="" title="image-20220720002815184"><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720001654210.png" class="" title="image-20220720001654210"><blockquote><p>那么在设置cookie的时候，服务端的响应obj到底是什么？类型是什么？属性字典中有哪些值？</p><p>从代码执行结果来解答：</p><ul><li>obj是HttpResponseRedirect对象，类型也是HttpResponseRedirect，并且底层仍是HttpResponse对象，所以最后可以返回</li><li>在对<code>obj.set_cookie(&quot;login_ck&quot;, &quot;lx_123&quot;)</code>操作以后<ul><li>obj的属性字典中就多了下图中的cookies键值对</li><li>并且cookies的值是<code>Set-Cookie: login_ck=lx_123; Path=/</code></li><li>看来就是这样告知浏览器设置cookie的</li></ul></li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720002120916.png" class="" title="image-20220720002120916"><h4 id="2-2-获取cookie"><a href="#2-2-获取cookie" class="headerlink" title="2.2 获取cookie"></a>2.2 获取cookie</h4><blockquote><p>通过request.COOKIES传入cookie的key，获取对应的cookie值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line">cookie_val = request.COOKIES.get(cookie_key)</span><br></pre></td></tr></table></figure><h5 id="2-2-1-cookie维持登录状态"><a href="#2-2-1-cookie维持登录状态" class="headerlink" title="2.2.1 cookie维持登录状态"></a>2.2.1 cookie维持登录状态</h5><blockquote><p>登录成功以后，就有了cookie，然后浏览器访问其他页面时，只要带上了cookie，那么其他页面就会识别到cookie的键值对，只要符合服务端校验，就可以继续访问其他页面，达到了利用cookie维持登录状态</p></blockquote><blockquote><p>每个页面都需要校验cookie，如果在每个页面的视图函数中都重复写校验cookie的代码，显的很荣誉，那么就想到利用装饰器来验证cookie</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 校验用户是否登录的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_wrapper</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取cookie，如果可以能拿到cookie的值，那么就可以继续支持下面的内容，这样做到了登录状态的维持</span></span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">&#x27;login_ck&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果不能拿到cookie的值，那么就跳转路由到登录视图</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/user/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><blockquote><p>因为装饰器中需要获取cookie值，所以主动将<code>request</code>参数传入到装饰器中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录视图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户登录</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        uname = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&quot;lx&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">            <span class="comment"># 保存用户登录状态，登录成功有以后跳转至用户首页</span></span><br><span class="line">            obj = redirect(<span class="string">&quot;/user/index/&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&quot;login_ck&quot;</span>, <span class="string">&quot;lx_123&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set_cookie后的obj:<span class="subst">&#123;obj&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;set_cookie后的obj:<span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>:<span class="subst">&#123;v&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 想httpResponse对象返回</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器是上面定义的</span></span><br><span class="line"><span class="meta">@login_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户个人首页</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;用户index页面&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cart</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户购物车</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;用户cart页面&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>先将cookie清理掉，重新访问登录页面，登陆成功以后跳转至了<code>index</code>页面，再去访问<code>cart</code>页面，发现不需要登录了，直接就能访问</p><p>此时还有个不完美的地方</p><ul><li>浏览器中之前没有访问过登录页面，那么cookie值应该是空的</li><li>此时直接访问<code>cart</code>页面，会自动重定向到<code>login</code>页面，登陆成功以后，跳转至了<code>index</code>页面<ul><li>正常逻辑是登录前是哪个页面，登录成功后也应该跳转到登录前的那个页面</li><li>原因就是在login视图函数中将登陆成功跳转的路由写死成了index页面，所以需要写活了</li><li>这里就需要在非index页面跳转到登录页面的时候，将它的路由拼接在login页面url后面，然后登陆成功以后，login视图函数再去获取login页面url上拼接的跳转路由，这样就解决了这个问题</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器修改逻辑</span></span><br><span class="line"><span class="comment"># 登录cookie校验的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_wrapper</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取cookie，如果可以能拿到cookie的值，那么就可以继续支持下面的内容，这样做到了登录状态的维持</span></span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">&#x27;login_ck&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            target_url = request.get_full_path()</span><br><span class="line">            <span class="comment"># 如果不能拿到cookie的值，那么就跳转路由到登录视图</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">f&quot;/user/login/?redirect_url=<span class="subst">&#123;target_url&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><blockquote><p>下面的login视图函数，登陆成功以后，就可以用<code>request.GET.get</code>获取拼接在login路由后面的<code>redirect_url的target_url</code>，这样只要能获取到需要跳转的路由，就进行跳转，获取不到就默认重定向到index页面</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户登录</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        uname = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> uname == <span class="string">&quot;lx&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存用户登录状态，登录成功后获取login视图函数的参数</span></span><br><span class="line">            <span class="comment"># 获取用户上一次访问的路由</span></span><br><span class="line">            redirect_url = request.GET.get(<span class="string">&quot;redirect_url&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;redirect_url:<span class="subst">&#123;redirect_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> redirect_url:</span><br><span class="line">                obj = redirect(redirect_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果获取不到重定向路由，就跳转至index页面</span></span><br><span class="line">                obj = redirect(<span class="string">&quot;/user/index&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">&quot;login_ck&quot;</span>, <span class="string">&quot;lx_123&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 想httpResponse对象返回</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户个人首页</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;用户index页面&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-3-cookie设置有效期"><a href="#2-3-cookie设置有效期" class="headerlink" title="2.3 cookie设置有效期"></a>2.3 cookie设置有效期</h4><blockquote><p>有两种方式设置cookie有效期，下面这两种都是以<code>秒</code>为单位</p><ul><li>max_age</li><li>expires<ul><li>是针对IE浏览器进行设置有效期</li></ul></li></ul><p>Django设置了Cookie有效期，默认是<code>14天</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">obj.set_cookie(<span class="string">&quot;login_ck&quot;</span>, <span class="string">&quot;lx_123&quot;</span>, max_age=<span class="number">500</span>, expires=<span class="number">500</span>)</span><br></pre></td></tr></table></figure><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20220720010240998.png" class="" title="image-20220720010240998"><h4 id="2-4-删除cookie"><a href="#2-4-删除cookie" class="headerlink" title="2.4 删除cookie"></a>2.4 删除cookie</h4><blockquote><p>网站的注销功能其实就是删除登录的cookie，并跳转至登录页面，注销的前提是需要登录状态，所以需要添加登录装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用户登出</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    obj = redirect(<span class="string">&quot;/user/login/&quot;</span>)</span><br><span class="line">    obj.delete_cookie(<span class="string">&quot;login_ck&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;用户logout页面&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3、Django操作session"><a href="#3、Django操作session" class="headerlink" title="3、Django操作session"></a>3、Django操作session</h3><h3 id="4、Django解决前端跨域问题"><a href="#4、Django解决前端跨域问题" class="headerlink" title="4、Django解决前端跨域问题"></a>4、Django解决前端跨域问题</h3><blockquote><p><a href="https://www.cnblogs.com/open-yang/p/11301323.html">https://www.cnblogs.com/open-yang/p/11301323.html</a></p><p><a href="https://www.jianshu.com/p/4bfa20fddced">https://www.jianshu.com/p/4bfa20fddced</a></p><p>django框架实现前后端分离，首要的问题是解决跨域请求的问题</p><p>什么是跨域请求？</p><ul><li>简单来说就是当前发起的请求的域与该请求指向的资源所在的域不一致。<ul><li>什么是CORS呢？（Corss-Origin Resource Sharing 跨资源共享），也就是说当请求与当前的页面的地址不同即为跨域。（包括协议，域名，端口等）。</li></ul></li><li>当协议+域名+端口号均相同，那么就是同一个域. </li><li>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉，因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信</li></ul></blockquote><blockquote><p>在django框架中就是利用CORS来解决跨域请求的问题.</p></blockquote><h4 id="4-1-安装跨域组件"><a href="#4-1-安装跨域组件" class="headerlink" title="4.1 安装跨域组件"></a>4.1 安装跨域组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers </span><br></pre></td></tr></table></figure><h4 id="4-2-修改settings-py"><a href="#4-2-修改settings-py" class="headerlink" title="4.2 修改settings.py"></a>4.2 修改settings.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册跨域app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>, <span class="comment"># 注册跨域app，建议写在所有app前面</span></span><br><span class="line">    <span class="string">&#x27;home&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加中间件</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>, <span class="comment"># 添加cros中间件，建议放到所有中间件前面</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许所有请求支持跨域</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>上述配置完成后，再去前端使用axios访问接口，就不会出现跨域问题了</p></blockquote><h2 id="六、Django中间件"><a href="#六、Django中间件" class="headerlink" title="六、Django中间件"></a>六、Django中间件</h2><blockquote><p>参考：</p><p><a href="https://www.runoob.com/django/django-middleware.html">https://www.runoob.com/django/django-middleware.html</a></p><p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/[](https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/)">https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/[](https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/)</a></p></blockquote><blockquote><p>Django中间件</p><ul><li>是Django针对请求和响应提供的钩子功能<ul><li>可以将请求对象到达视图函数之前进行一些修改后再传递给视图函数，比如在请求对象中添加traceId，再将请求对象传递给后面的视图函数</li><li>当视图函数返回响应对象时，中间件可以对返回的响应对象进行修改后再返回</li></ul></li></ul><p>中间件的作用：</p><ul><li>接口调用方请求接口，将接口的请求修改后传递给后面<code>view</code>中的<code>HttpRequest</code>对象</li><li>将<code>view</code>返回的<code>HttpResponse</code>对象进行修改后返回给接口调用方</li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230314132832091.png" class="" title="image-20230314132832091"><blockquote><p>中间件组件配置在settings.py文件的MIDDLEWARE选项列表中，配置中的每个字符串选项都是一个类，也表示是一个中间件</p><p>当然自定义的中间件也声明在MIDDLEWARE列表中，那么自定义中间件就会生效</p></blockquote><h3 id="1、接口限流"><a href="#1、接口限流" class="headerlink" title="1、接口限流"></a>1、接口限流</h3><blockquote><p>当我们想要给接口限流，限制用户访问的频率，在django的restframework中框架中可以使用如下对接口进行限流</p><ul><li>接口限流参考：<a href="https://blog.csdn.net/weixin_42134789/article/details/112793235">https://blog.csdn.net/weixin_42134789&#x2F;article&#x2F;details&#x2F;112793235</a></li></ul></blockquote><h4 id="1-1-全局限流"><a href="#1-1-全局限流" class="headerlink" title="1.1 全局限流"></a>1.1 全局限流</h4><blockquote><p>表示对所有接口都进行限流，</p><ul><li>一是要设置需要使用的限流类，</li><li>二是要设置限流范围(scope)及其限流频率。</li><li>AnonRateThrottle和UserRateThrottle默认的scope分别为”anon”和”user”。该配置会对所有API接口生效。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的settings.py文件</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>, <span class="comment"># 匿名用户限流</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span>, <span class="comment"># 用户访问限流</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;2/min&#x27;</span>, <span class="comment"># 表示匿名用户每分钟只允许访问2次</span></span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;10/min&#x27;</span> <span class="comment"># 表示用户每分钟只允许访问10次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时访问接口，每分钟超过2次，就会看到如下的提示，并且接口响应状态码为500</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230217223807002.png" class="" title="image-20230217223807002"><h4 id="1-2-局部限流"><a href="#1-2-局部限流" class="headerlink" title="1.2 局部限流"></a>1.2 局部限流</h4><blockquote><p>局部限流也称为单接口限流，针对单个接口进行限流，只要在视图层进行配置，推荐做法：</p><ul><li>在对应app的文件夹的目录下新建throttles.py</li><li>并且添加如下代码</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在对应app下新建的throttles.py内容</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> AnonRateThrottle, UserRateThrottle</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserListAnonRateThrottle</span>(<span class="title class_ inherited__">AnonRateThrottle</span>):</span><br><span class="line">    THROTTLE_RATES = &#123;<span class="string">&quot;anon&quot;</span>: <span class="string">&quot;5/min&quot;</span>&#125; <span class="comment"># 表示匿名用户每分钟只允许访问2次</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserListUserRateThrottle</span>(<span class="title class_ inherited__">UserRateThrottle</span>):</span><br><span class="line">    THROTTLE_RATES = &#123;<span class="string">&quot;user&quot;</span>: <span class="string">&quot;30/min&quot;</span>&#125; <span class="comment"># # 表示用户每分钟只允许访问30次</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在需要被限流的view下添加如下代码，前提是需要先在view中导入上面自定义的限流类</span></span><br><span class="line"><span class="keyword">from</span> .throttles <span class="keyword">import</span> UserListAnonRateThrottle，UserListUserRateThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">  <span class="comment"># 使用throttle_classes这个列表来装载限流类</span></span><br><span class="line">    throttle_classes = [UserListAnonRateThrottle，UserListUserRateThrottle] </span><br></pre></td></tr></table></figure><blockquote><p>此时再访问UserInfoView这个视图关联的接口，就会被自定义的限流策略限流住</p></blockquote><h4 id="1-3-IP限流"><a href="#1-3-IP限流" class="headerlink" title="1.3 IP限流"></a>1.3 IP限流</h4><blockquote><p>Django的restframework的限流可能有时候不能满足我们的需求，我们就可以自行编写限流类</p><p>自己编写限流类：</p><ul><li>只要自己写的类实现了allow_request()和wait()方法就能被用作限流类<ul><li>allow_request()：定义允许访问和不允许访问的策略，结果返回bool值</li><li>wait()：定义被限流后剩余多久才可以访问</li></ul></li><li>自带的AnonRateThrottle和UserRateThrottle限流类都是继承的SimpleRateThrottle，这里的原理可以去看的SimpleRateThrottle类，里面都有allow_request()和wait()</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同样的在对应app下新建的throttles.py新增IPThrottles限流类</span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IPThrottleRate</span>:</span><br><span class="line">    <span class="comment"># 定义访问频率的时间(毫秒单位)和次数</span></span><br><span class="line">    rate_time = <span class="number">60</span>  <span class="comment"># 表示1min</span></span><br><span class="line">    request_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IPThrottle</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;IP限流&quot;&quot;&quot;</span></span><br><span class="line">    redis_client = RedisClusterClient().redis_client</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.now_time_stamp = <span class="built_in">int</span>(time.time())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ip_redis_key</span>(<span class="params">self, remote_ip</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;HOST:<span class="subst">&#123;remote_ip&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_remote_ip_data_by_redis</span>(<span class="params">self, remote_ip</span>):</span><br><span class="line">        history_time_list = self.redis_client.get(self.ip_redis_key(remote_ip))</span><br><span class="line">        <span class="keyword">if</span> history_time_list <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> json.loads(history_time_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_remote_ip_data_to_redis</span>(<span class="params">self, remote_ip, history_time_list</span>):</span><br><span class="line">        self.redis_client.<span class="built_in">set</span>(self.ip_redis_key(remote_ip), <span class="built_in">str</span>(history_time_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        步骤：</span></span><br><span class="line"><span class="string">        1、取出访问者的IP</span></span><br><span class="line"><span class="string">        2、判断当前IP是不是在访问字典里，添加进去，并且直接放回True，表示第一次访问，继续往下走</span></span><br><span class="line"><span class="string">        3、循环判断当前IP的列表，有值，并且当前时间减去列表最后一个时间大于60s，把这种数据pop掉，这样列表中有60s以内的时间</span></span><br><span class="line"><span class="string">        4、判断当列表小于3，说明一分钟之内访问不足三次，把当前时间插入到列表第一个位置，返回True，继续往下走</span></span><br><span class="line"><span class="string">        5、当大于等于3，说明一分钟内访问超过3次，返回False验证失败</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        remote_ip = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取用户真实访问IP</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;HTTP_X_REAL_IP&quot;</span> <span class="keyword">in</span> request.META:</span><br><span class="line">            <span class="comment"># 例如：&#x27;HTTP_X_REAL_IP&#x27;: &#x27;10.1.107.47&#x27;</span></span><br><span class="line">            HTTP_X_REAL_IP = request.META.get(<span class="string">&quot;HTTP_X_REAL_IP&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(HTTP_X_REAL_IP) &gt; <span class="number">0</span>:</span><br><span class="line">                remote_ip = HTTP_X_REAL_IP</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pumpkin_app_access.error(<span class="string">f&quot;未获取到HTTP_X_REAL_IP：<span class="subst">&#123;HTTP_X_REAL_IP&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span> <span class="keyword">in</span> request.META:</span><br><span class="line">            <span class="comment"># &#x27;HTTP_X_FORWARDED_FOR&#x27;: &#x27;10.1.107.47, 10.13.134.45&#x27;</span></span><br><span class="line">            HTTP_X_FORWARDED_FOR = request.META.get(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>)</span><br><span class="line">            HTTP_X_FORWARDED_FOR_LIST = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> HTTP_X_FORWARDED_FOR.split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(HTTP_X_FORWARDED_FOR_LIST) &gt; <span class="number">1</span>:</span><br><span class="line">                remote_ip = HTTP_X_FORWARDED_FOR_LIST[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pumpkin_app_access.error(<span class="string">f&quot;HTTP_X_FORWARDED_FOR_LIST的数据为：<span class="subst">&#123;HTTP_X_FORWARDED_FOR_LIST&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;HTTP_X_ORIGINAL_FORWARDED_FOR&quot;</span> <span class="keyword">in</span> request.META:</span><br><span class="line">            <span class="comment"># 例如：&#x27;HTTP_X_ORIGINAL_FORWARDED_FOR&#x27;: &#x27;10.1.107.47&#x27;</span></span><br><span class="line">            HTTP_X_ORIGINAL_FORWARDED_FOR = request.META.get(<span class="string">&quot;HTTP_X_ORIGINAL_FORWARDED_FOR&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(HTTP_X_ORIGINAL_FORWARDED_FOR) &gt; <span class="number">0</span>:</span><br><span class="line">                remote_ip = HTTP_X_ORIGINAL_FORWARDED_FOR</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pumpkin_app_access.error(<span class="string">f&quot;未获取到HTTP_X_ORIGINAL_FORWARDED_FOR：<span class="subst">&#123;HTTP_X_ORIGINAL_FORWARDED_FOR&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remote_ip = request.META.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>)</span><br><span class="line"></span><br><span class="line">        pumpkin_app_access.info(<span class="string">f&quot;获取到的remote_ip:<span class="subst">&#123;remote_ip&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 从redis获取访问IP的值</span></span><br><span class="line">        self.history_time_list = self.get_remote_ip_data_by_redis(remote_ip)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history_time_list) == <span class="number">0</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;表示第一次访问&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 设置到redis中</span></span><br><span class="line">            self.set_remote_ip_data_to_redis(remote_ip, <span class="built_in">str</span>([self.now_time_stamp]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.history_time_list) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.now_time_stamp - self.history_time_list[-<span class="number">1</span>] &gt;= IPThrottleRate.rate_time:</span><br><span class="line">                self.history_time_list.pop()</span><br><span class="line">                self.set_remote_ip_data_to_redis(remote_ip, self.history_time_list)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面只剩余一分钟之内的时间</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.history_time_list) &lt; IPThrottleRate.request_num:</span><br><span class="line">            self.history_time_list.insert(<span class="number">0</span>, self.now_time_stamp)</span><br><span class="line">            self.set_remote_ip_data_to_redis(remote_ip, self.history_time_list)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> IPThrottleRate.rate_time - (self.now_time_stamp - self.history_time_list[-<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在需要被限流的view下添加如下代码，前提是需要先在view中导入上面自定义的限流类</span></span><br><span class="line"><span class="keyword">from</span> .throttles <span class="keyword">import</span> IPThrottle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">  <span class="comment"># 使用throttle_classes这个列表来装载限流类</span></span><br><span class="line">    throttle_classes = [IPThrottle] </span><br></pre></td></tr></table></figure><blockquote><p>该限流中使用了redis对用户的访问进行了存储，保证了负载均衡获取到的用户访问IP都从同一个缓存获取，永远都是唯一，此时再次访问单接口就可以根据用户访问的IP进行限流了</p><p>需要注意：</p><ul><li>如果部署使用Nginx代理，那么获取用户IP，就尽量不要用<code>Remote_ADDR</code>，容易获取的是nginx代理后的IP,而不是真正用户访问到的IP</li><li>如下解释：<ul><li>一般情况下request.META[‘REMOTE_ADDR’]足以获取用户真实IP地址。对于部署在负载平衡proxy(如nginx)上Django应用而言，这种方法将不适用。因为每个request中的远程IP地址(request.META[“REMOTE_IP”])将指向该负载平衡proxy的地址，而不是发起这个request的用户的实际IP。负载平衡proxy处理这个问题的方法在特殊的 X-Forwarded-For 中设置实际发起请求的IP</li></ul></li></ul><p>参考：<a href="https://blog.csdn.net/inthat/article/details/119578239?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167664102116782428636802%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167664102116782428636802&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119578239-null-null.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=django%20%E8%8E%B7%E5%8F%96ip&spm=1018.2226.3001.4187">Django获取用户访问真实IP</a></p></blockquote><h3 id="2、trace跟踪"><a href="#2、trace跟踪" class="headerlink" title="2、trace跟踪"></a>2、trace跟踪</h3><blockquote><p>trace跟踪是指在请求接口时，针对每一次请求生成一个唯一的ID，那么当某一次请求出现问题时，就会根据出现问题请求返回响应中的ID进行问题跟踪，尤其是当接口逻辑中打日志时也有传递进来的ID，通过ID就是知道问题出在什么位置</p></blockquote><h4 id="2-1-生成traceId"><a href="#2-1-生成traceId" class="headerlink" title="2.1 生成traceId"></a>2.1 生成traceId</h4><blockquote><p>生成traceId的方式：</p><ul><li><p>目前单机使用可以采用<code>UUID</code>的方式生成</p><ul><li><p>UUID： 通用唯一标识符 ( Universally Unique Identifier )，对于所有的UUID它可以保证在空间和时间上的唯一性，也称为GUID，全称为：</p><p>  UUID —— Universally Unique IDentifier Python中称为 UUID<br>  GUID —— Globally Unique IDentifier C#中称为 GUID</p><p>  它是通过MAC地址、 时间戳、 命名空间、 随机数、 伪随机数来保证生成ID的唯一性,有着固定的大小( 128 bit位 )，通常由 32 字节的字符串（十六进制）表示。</p><p>  它的唯一性和一致性特点，使得可以无需注册过程就能够产生一个新的UUID；UUID可以被用作多种用途, 既可以用来短时间内标记一个对象，也可以可靠的辨别网络中的持久性对象。</p></li><li><p>python标准库<code>uuid</code>可以来生成uuid，来作为traceId</p></li></ul></li><li><p>分布式traceId可以参考opentracing，这里先不做介绍</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下述代码会生成六位唯一的字符串，可以用来作为traceId</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenRequestUUID</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_uuid_str</span>(<span class="params">cls</span>):</span><br><span class="line">        clock_seq = <span class="built_in">int</span>(time.time()) * random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        uuid_str = uuid.uuid1(clock_seq=clock_seq)</span><br><span class="line">        uuid_str_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(uuid_str).split(<span class="string">&quot;-&quot;</span>)]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([uuid_str_list[<span class="number">0</span>], uuid_str_list[<span class="number">3</span>]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://docs.python.org/3/library/uuid.html">https://docs.python.org/3/library/uuid.html</a></p><p><a href="https://www.jb51.net/article/248285.htm">https://www.jb51.net/article/248285.htm</a></p><p><a href="https://blog.csdn.net/weixin_44621343/article/details/115958618">https://blog.csdn.net/weixin_44621343&#x2F;article&#x2F;details&#x2F;115958618</a></p></blockquote><h4 id="2-2-自定义trace中间件"><a href="#2-2-自定义trace中间件" class="headerlink" title="2.2 自定义trace中间件"></a>2.2 自定义trace中间件</h4><blockquote><p>自定义中间件的步骤：</p><ol><li>编写自定义中间件，对请求对象和响应对象按需进行修改，编写自定义中间件的代码示例参考：<a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/">https://docs.djangoproject.com/zh-hans/3.2/topics/http/middleware/</a></li><li>配置中间件，将自定义中间件添加到Django的settings.py文件中的<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-MIDDLEWARE"><code>MIDDLEWARE</code></a>列表中<ul><li>在<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-MIDDLEWARE"><code>MIDDLEWARE</code></a> 中，每个中间件组件由字符串表示：指向中间件工厂的类或函数名的完整 Python 路径</li></ul></li></ol></blockquote><h5 id="2-2-1-编写自定义中间件"><a href="#2-2-1-编写自定义中间件" class="headerlink" title="2.2.1 编写自定义中间件"></a>2.2.1 编写自定义中间件</h5><blockquote><p>下面代码位置可存放在：</p><ul><li><p>utils&#x2F;middleware&#x2F;tracing.py</p></li><li><p><code>utils</code>目录是在django项目根目录下</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenRequestUUID</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_uuid_str</span>(<span class="params">cls</span>):</span><br><span class="line">        clock_seq = <span class="built_in">int</span>(time.time()) * random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        uuid_str = uuid.uuid1(clock_seq=clock_seq)</span><br><span class="line">        uuid_str_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(uuid_str).split(<span class="string">&quot;-&quot;</span>)]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([uuid_str_list[<span class="number">0</span>], uuid_str_list[<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TraceMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        self.trace_id_tag = <span class="string">&quot;Request-X-ID&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        r = request</span><br><span class="line">        trace_id = request.META.get(self.trace_id_tag, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            trace_id = GenRequestUUID.gen_uuid_str()</span><br><span class="line"></span><br><span class="line">        request.META[self.trace_id_tag] = trace_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(request)</span><br></pre></td></tr></table></figure><blockquote><p>这里自定义中间件有个需要注意的点</p><ul><li><p>在自定义中间件中如果设置了一个值想透传给后面的视图函数去使用，建议使用请求对象request的<code>META</code>属性，因为<code>META</code>属性是个字典类型，可以进行key&#x2F;value的增删，然后再将修改后的request请求对象传给后面的视图函数</p></li><li><p>对接口进行debug可以看出来request请求对象的属性以及属性类型，其中<code>META</code>属性就是字典类型</p></li></ul></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230314140246390.png" class="" title="image-20230314140246390"><h5 id="2-2-2-配置自定义中间件"><a href="#2-2-2-配置自定义中间件" class="headerlink" title="2.2.2 配置自定义中间件"></a>2.2.2 配置自定义中间件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 注册trace自定义中间件</span></span><br><span class="line">    <span class="string">&#x27;utils.middleware.tracing.TraceMiddleware&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2-3-视图函数中处理traceId"><a href="#2-3-视图函数中处理traceId" class="headerlink" title="2.3 视图函数中处理traceId"></a>2.3 视图函数中处理traceId</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infos</span>(<span class="params">request</span>):</span><br><span class="line">    trace_id = request.META.get(<span class="string">&quot;Request-X-ID&quot;</span>)</span><br><span class="line">    ret = &#123;</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">        <span class="string">&quot;traceId&quot;</span>: trace_id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(ret, safe=<span class="literal">False</span>, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-4-查看响应返回traceId"><a href="#2-4-查看响应返回traceId" class="headerlink" title="2.4 查看响应返回traceId"></a>2.4 查看响应返回traceId</h4><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230314135758733.png" class="" title="image-20230314135758733"><h4 id="2-5-自定义中间件修改响应对象"><a href="#2-5-自定义中间件修改响应对象" class="headerlink" title="2.5 自定义中间件修改响应对象"></a>2.5 自定义中间件修改响应对象</h4><blockquote><p>在中间件中对响应对象修改后再返回</p><p>注意response对象类型是JsonResponse类型，其中<code>content</code>属性是字节类型的字典，可以用来key&#x2F;value的增删</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230314142035573.png" class="" title="image-20230314142035573"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TraceMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        self.trace_id_tag = <span class="string">&quot;Request-X-ID&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        r = request</span><br><span class="line">        trace_id = request.META.get(self.trace_id_tag, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> trace_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            trace_id = GenRequestUUID.gen_uuid_str()</span><br><span class="line"></span><br><span class="line">        request.META[self.trace_id_tag] = trace_id</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># response的content属性是字节类型json，所以decode为字符串</span></span><br><span class="line">        content_str = response.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字符串的content转为字典，并且增加一个`new_ret`的key，value是`this is resp`</span></span><br><span class="line">        content_dict = json.loads(content_str)</span><br><span class="line">        content_dict[<span class="string">&quot;new_ret&quot;</span>] = <span class="string">&quot;this is resp&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新对response对象的content对象赋值，content值为修改后的content，因为增加了一个新的key/value</span></span><br><span class="line">        <span class="comment"># 这里注意使用json序列化为字符串，不要直接使用str将字典转为字符串，否则接口响应返回的就不是一个json类型，而是字符串类型</span></span><br><span class="line">        <span class="comment"># 将字典转为字符串以后，再encode为字节类型，因为网络传输时使用的就是字节类型</span></span><br><span class="line">        response.content = json.dumps(content_dict).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><blockquote><p>浏览器查看响应接口，发现响应中已经将修改后响应返回了</p></blockquote><img src="/2022/05/16/python/django%E7%AC%94%E8%AE%B0/django%E7%AC%94%E8%AE%B0/image-20230314142242901.png" class="" title="image-20230314142242901"><h2 id="七、Django使用Gunicorn部署"><a href="#七、Django使用Gunicorn部署" class="headerlink" title="七、Django使用Gunicorn部署"></a>七、Django使用Gunicorn部署</h2><blockquote><p>gunicron官网：<a href="https://docs.gunicorn.org/en/stable/">https://docs.gunicorn.org/en/stable/</a></p></blockquote><h3 id="1、Gunicorn介绍"><a href="#1、Gunicorn介绍" class="headerlink" title="1、Gunicorn介绍"></a>1、Gunicorn介绍</h3><blockquote><h2 id="Gunicorn-和-WSGI-简介"><a href="#Gunicorn-和-WSGI-简介" class="headerlink" title="Gunicorn 和 WSGI 简介"></a>Gunicorn 和 WSGI 简介</h2><p> 先说说 WSGI。啥是 WSGI？<strong>Web服务器网关接口</strong>（<strong>Python Web Server Gateway Interface</strong>，<strong>缩写为WSGI</strong>）是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口。</p><p> 咱们平时写的 Flask 的业务代码，是 Web application，是无法处理客户端发的那些 HTTP 请求的，需要一个实现了 WSGI 的 Server 帮忙处理 HTTP 请求，让 HTTP 请求变成业务代码可以处理的形式之后再给 application 的业务代码，然后业务代码进行一系列处理，把处理结果给 Server，Server 再把这个结果封装后给客户端。用这样的方式，就可以专心的写业务代码，不用考虑怎么解析 HTTP 请求，怎么封装 HTTP 回复，这些都是 Server 的工作。</p><p> Gunicorn 就是这样一个实现了 WSGI 的 HTTP Server，它在 Flask 和 客户端之间充当一个翻译的角色，并且相比于 Flask 自带的 Server，有很好的并发性能。</p></blockquote><h4 id="1-1-安装Gunicorn"><a href="#1-1-安装Gunicorn" class="headerlink" title="1.1 安装Gunicorn"></a>1.1 安装Gunicorn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><h4 id="1-2-Django使用Gunicorn"><a href="#1-2-Django使用Gunicorn" class="headerlink" title="1.2 Django使用Gunicorn"></a>1.2 Django使用Gunicorn</h4><blockquote><p>如果没有指定，Gunicorn会寻找一个名为 “application “的WSGI可调用程序。因此，对于一个典型的Django项目来说，调用Gunicorn会是这样的。</p><p>注意</p><ul><li>这需要你的项目在Python路径上；最简单的方法是在你的<code>manage.py</code>文件的同一目录下运行这个命令。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn myproject.wsgi</span><br></pre></td></tr></table></figure><blockquote><p>你可以使用 <a href="http://docs.gunicorn.org/en/latest/settings.html#raw-env">-env</a> 选项来设置加载设置的路径。如果你需要，你也可以使用 <a href="http://docs.gunicorn.org/en/latest/settings.html#pythonpath">-pythonpath</a> 选项将你的应用程序路径添加到<code>PYTHONPATH</code>中</p><p><a href="https://juejin.cn/post/6844903950676656141">https://juejin.cn/post/6844903950676656141</a></p><p><a href="https://juejin.cn/post/6844903983388213256">https://juejin.cn/post/6844903983388213256</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.venv/bin/gunicorn -b :8090 -w 5  --<span class="built_in">env</span> DJANGO_SETTINGS_MODULE=tester_tools.settings.production tester_tools.wsgi</span><br></pre></td></tr></table></figure><h4 id="1-3-Django自带server启动"><a href="#1-3-Django自带server启动" class="headerlink" title="1.3 Django自带server启动"></a>1.3 Django自带server启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.venv/bin/python3 manage.py runserver 0.0.0.0:8090 --settings tester_tools.settings.production</span><br></pre></td></tr></table></figure><h4 id="1-4-requirement管理项目依赖"><a href="#1-4-requirement管理项目依赖" class="headerlink" title="1.4 requirement管理项目依赖"></a>1.4 requirement管理项目依赖</h4><blockquote><p><a href="https://blog.csdn.net/whatday/article/details/100523107">https://blog.csdn.net/whatday/article/details/100523107</a></p><p><a href="https://blog.csdn.net/guo_qiangqiang/article/details/107582987">https://blog.csdn.net/guo_qiangqiang/article/details/107582987</a></p></blockquote><h3 id="2、uwsgi部署"><a href="#2、uwsgi部署" class="headerlink" title="2、uwsgi部署"></a>2、uwsgi部署</h3><h4 id="2-x-问题解决"><a href="#2-x-问题解决" class="headerlink" title="2.x 问题解决"></a>2.x 问题解决</h4><p>2.x.1 出现接口504</p><blockquote><p><a href="https://blog.csdn.net/tmpbook/article/details/43734699?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-43734699-blog-91354299.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-43734699-blog-91354299.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1">https://blog.csdn.net/tmpbook/article/details/43734699?spm=1001.2101.3001.6661.1&utm_medium&#x3D;distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-43734699-blog-91354299.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source&#x3D;distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-43734699-blog-91354299.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index&#x3D;1</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/crookie/article/details/112667387?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-112667387-blog-107494928.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-112667387-blog-107494928.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=5">https://blog.csdn.net/crookie/article/details/112667387?spm=1001.2101.3001.6650.2&utm_medium&#x3D;distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-112667387-blog-107494928.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source&#x3D;distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-112667387-blog-107494928.235%5Ev27%5Epc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index&#x3D;5</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">504</span> Gateway Time out</span><br><span class="line">原因是因为相关参数设置的不当，还是很容易解决的</span><br><span class="line"></span><br><span class="line">nginx和uwsgi整合时有三个参数可以用于设置超时时间：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>uwsgi_connect_timeout<span class="punctuation">:</span></span><br><span class="line"></span><br><span class="line">默认<span class="number">60</span>秒，与uwsgi-server连接的超时时间，该值不能超过<span class="number">75</span>秒.若在超时时间内未能成功连接则断开连接尝试</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>uwsgi_read_timeout<span class="punctuation">:</span></span><br><span class="line"></span><br><span class="line">默认<span class="number">60</span>秒，nginx等待uwsgi进程发送响应数据的超时时间。若有需要长时间运行才能产生输出结果的uwsgi进程则需将此参数调高。若在错误日志文件中看到</span><br><span class="line">upstream timed out需将此参数调高。若超过超时时间还未收到响应则nginx关闭连接</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>uwsgi_send_timeout<span class="punctuation">:</span></span><br><span class="line"></span><br><span class="line">默认<span class="number">60</span>秒，nginx向uwsgi进程发送请求的超时时间。超时时间由两次写操作的时间间隔算，而非整个请求。若超过超时时间仍没写入动作则nginx关闭连接</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决：</span><br><span class="line">在nginx配置的server - location中添加 uwsgi_send_timeout 和 uwsgi_read_timeout</span><br><span class="line">在uwsgi启动命令行添加 --http-timeout</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ笔记</title>
      <link href="/2021/05/16/database/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/16/database/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MQ简介"><a href="#一、MQ简介" class="headerlink" title="一、MQ简介"></a>一、MQ简介</h2><h3 id="1、MQ介绍"><a href="#1、MQ介绍" class="headerlink" title="1、MQ介绍"></a>1、MQ介绍</h3><blockquote><p>为什么要有消息队列？</p><ul><li>同步调用：<ul><li>比如用户下单，下单后支付成功，拿到支付成功的结果，再去通知用户服务、更新支付状态、通知交易服务</li><li>弊端：</li></ul></li></ul></blockquote><h2 id="二、安装rabbitmq"><a href="#二、安装rabbitmq" class="headerlink" title="二、安装rabbitmq"></a>二、安装rabbitmq</h2><blockquote><p>RabbitMQ官网文档：<a href="https://www.rabbitmq.com/docs/download">https://www.rabbitmq.com/docs/download</a></p></blockquote><h3 id="1、docker安装"><a href="#1、docker安装" class="headerlink" title="1、docker安装"></a>1、docker安装</h3><blockquote><p>如下是解释如何使用使用docker安装rabbitmq，可以跳过</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">There is a second <span class="built_in">set</span> of tags provided with the management plugin installed and enabled by default, <span class="built_in">which</span> is available on the standard management port of 15672, with the default username and password of guest / guest:</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can access it by visiting http://container-ip:15672 <span class="keyword">in</span> a browser or, <span class="keyword">if</span> you need access outside the host, on port 8080:</span></span><br><span class="line">docker run -d --hostname my-rabbit --name some-rabbit rabbitmq:3-management</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can <span class="keyword">then</span> go to http://localhost:8080 or http://host-ip:8080 <span class="keyword">in</span> a browser.</span></span><br><span class="line">docker run -d --hostname my-rabbit --name some-rabbit -p 8080:15672 rabbitmq:3-management</span><br></pre></td></tr></table></figure><blockquote><p>官网推荐的docker安装命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latest RabbitMQ 3.13</span></span><br><span class="line">docker run -itd --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management</span><br></pre></td></tr></table></figure><h3 id="2、web界面"><a href="#2、web界面" class="headerlink" title="2、web界面"></a>2、web界面</h3><blockquote><p>打开页面:<a href="http://localhost:15672/">http://localhost:15672</a></p><p>用户名和密码都是<code>guest </code></p></blockquote><img src="/2021/05/16/database/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq%E7%AC%94%E8%AE%B0/image-20240305161019467.png" class="" title="image-20240305161019467"><h3 id="3、相关文章"><a href="#3、相关文章" class="headerlink" title="3、相关文章"></a>3、相关文章</h3><blockquote><p>RabbitMQ基础复习：<a href="https://juejin.cn/post/7248914499914481725">https://juejin.cn/post/7248914499914481725</a></p><p>RabbitMQ实践：<a href="https://juejin.cn/post/6844903968171098120">https://juejin.cn/post/6844903968171098120</a></p><p>消息队列RabbitMQ模式详解：<a href="https://juejin.cn/post/7112700994009432072">https://juejin.cn/post/7112700994009432072</a></p><p><a href="https://juejin.cn/post/6844903827653541902">https://juejin.cn/post/6844903827653541902</a></p></blockquote><h2 id="二、Go使用RabbitMQ"><a href="#二、Go使用RabbitMQ" class="headerlink" title="二、Go使用RabbitMQ"></a>二、Go使用RabbitMQ</h2><blockquote><p>rabbitmq官网文档对各个语言支持的使用解释的非常清楚，建议直接从官网开始看</p><p>go语言使用rabbitmq，官方文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-one-go">https://www.rabbitmq.com/tutorials/tutorial-one-go</a></p></blockquote><h3 id="1、Hello-World例子"><a href="#1、Hello-World例子" class="headerlink" title="1、Hello World例子"></a>1、Hello World例子</h3><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker笔记</title>
      <link href="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker安装"><a href="#一、Docker安装" class="headerlink" title="一、Docker安装"></a>一、Docker安装</h2><h3 id="1、官网教程"><a href="#1、官网教程" class="headerlink" title="1、官网教程"></a>1、官网教程</h3><blockquote><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p><a href="https://www.bilibili.com/video/BV1MJ411R7EP?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1MJ411R7EP?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p><p><a href="https://www.bilibili.com/video/BV17g411c7T4?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV17g411c7T4?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="2、自行安装步骤"><a href="#2、自行安装步骤" class="headerlink" title="2、自行安装步骤"></a>2、自行安装步骤</h3><blockquote><p>依据官网安装教程，记录自己安装时的步骤，并且配置国内镜像源</p></blockquote><h4 id="2-1-卸载老版本的docker"><a href="#2-1-卸载老版本的docker" class="headerlink" title="2.1 卸载老版本的docker"></a>2.1 卸载老版本的<code>docker</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><h4 id="2-2-配置安装-x2F-更新docker的仓库"><a href="#2-2-配置安装-x2F-更新docker的仓库" class="headerlink" title="2.2 配置安装&#x2F;更新docker的仓库"></a>2.2 配置安装&#x2F;更新<code>docker</code>的仓库</h4><blockquote><p>官方解释：Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p><p>大体意思是在安装docker引擎之前，需要先配置下docker引擎的仓库，方便后续更新或安装</p><p><code>--add-repo</code>后面跟的是仓库地址，这个是国外的地址，国内访问比较慢，所以需要替换成国内的仓库地址，推荐使用阿里云，下载速度会很快</p><p>阿里云docker引擎地址：<code>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p></blockquote><ul><li><p>替换仓库源后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20210609133625992.png" class="" title="image-20210609133625992"></li></ul><h4 id="2-1-3-安装docker-ce引擎"><a href="#2-1-3-安装docker-ce引擎" class="headerlink" title="2.1.3 安装docker-ce引擎"></a>2.1.3 安装<code>docker-ce</code>引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20210609134903988.png" class="" title="image-20210609134903988"><h4 id="2-1-4-检查docker版本"><a href="#2-1-4-检查docker版本" class="headerlink" title="2.1.4 检查docker版本"></a>2.1.4 检查docker版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@dns ~]<span class="comment"># docker --version</span></span><br><span class="line">Docker version 20.10.7, build f0df350</span><br></pre></td></tr></table></figure><h3 id="3、镜像源加速"><a href="#3、镜像源加速" class="headerlink" title="3、镜像源加速"></a>3、镜像源加速</h3><blockquote><p>因为docker镜像中心<a href="https://hub.docker.com/"><code>docker hub</code></a>在国外，拉取镜像时因为网络会很慢，所以需要替换国内镜像源</p></blockquote><h4 id="3-1-修改镜像源"><a href="#3-1-修改镜像源" class="headerlink" title="3.1 修改镜像源"></a>3.1 修改镜像源</h4><blockquote><p>目录：<code>vi /etc/docker/daemon.json</code></p><p>编辑 docker 的 daemon.json 配置文件，docker刚安装完是没有的这个文件，需要新建一个，添加如下内容，镜像源可以配置多个</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span> <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-让配置生效"><a href="#3-1-2-让配置生效" class="headerlink" title="3.1.2 让配置生效"></a>3.1.2 让配置生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启守护进程</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="3-3-查看docker配置"><a href="#3-3-查看docker配置" class="headerlink" title="3.3 查看docker配置"></a>3.3 查看docker配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><blockquote><p>上述命令可以看到docker的仓库镜像地址已经替换成配置的地址了</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20210609141914873.png" class="" title="image-20210609141914873"><h3 id="4、Hello-World测试"><a href="#4、Hello-World测试" class="headerlink" title="4、Hello-World测试"></a>4、Hello-World测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@dns ~]<span class="comment"># docker run hello-world </span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally  <span class="comment"># 从本地找，找不到去仓库拉取</span></span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete</span><br><span class="line">Digest: sha256:5122f6204b6a3596e048758cabba3c46b1c937a46b5be6225b835d091b90e46c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h2 id="二、Docker基础概念"><a href="#二、Docker基础概念" class="headerlink" title="二、Docker基础概念"></a>二、Docker基础概念</h2><h3 id="1、docker架构"><a href="#1、docker架构" class="headerlink" title="1、docker架构"></a>1、docker架构</h3><blockquote><p>官网架构概括：<a href="https://docs.docker.com/get-started/overview/#docker-architecture">https://docs.docker.com/get-started/overview/#docker-architecture</a></p><p>相关博客：<a href="https://www.cnblogs.com/mrhelloworld/p/docker2.html">https://www.cnblogs.com/mrhelloworld/p/docker2.html</a></p></blockquote><h4 id="1-1-docker是什么？"><a href="#1-1-docker是什么？" class="headerlink" title="1.1 docker是什么？"></a>1.1 docker是什么？</h4><blockquote><p>Docker是基于GO语言编写的云开源项目</p><p>Docker怎么来的:</p><ul><li>Linux容器化技术，通过对应用组件的封装、分发、部署、运行等生命周期的管理，将<code>应用</code>和<code>应用使用的环境</code>打包成镜像，能够做到<code>一次镜像，处处运行</code></li><li>而Docker就是在Linux容器化技术上发展来的，将应用打包成镜像，通过镜像去创建Docker容器，而Docker容器在任何操作系统上都是一样的，就做到了跨平台使用同一份应用和环境</li></ul><p>Docker特点：</p><ul><li>Docker是通过内核虚拟化技术来提供容器的资源隔离和安全保障</li><li>由于Docker是通过操作系统层的虚拟化来实现隔离，所以Docker在运行的时候，不需要类似虚拟机额外的操作系统开销，从而进一步提高资源利用率</li></ul></blockquote><h4 id="1-2-docker架构介绍"><a href="#1-2-docker架构介绍" class="headerlink" title="1.2 docker架构介绍"></a>1.2 docker架构介绍</h4><blockquote><ul><li>Docker使用客户端-服务器架构。Docker客户端与Docker守护进程对话，后者负责构建、运行和分发Docker容器的重任。Docker客户端和守护进程可以在同一系统上运行，或者你可以将Docker客户端连接到远程Docker守护进程。</li><li>Docker客户端和守护进程使用REST API，通过UNIX套接字或网络接口进行通信。另一个Docker客户端是Docker Compose，它可以让你处理由一组容器组成的应用程序</li></ul></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/architecture.svg" class="" title="Docker Architecture Diagram"><h3 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h3><blockquote><ul><li>Docker 是一个客户端-服务器（C&#x2F;S）架构程序。</li><li>Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。</li><li>Docker 提供了一个命令行工具 Docker 以及一整套 RESTful API。</li><li>你可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</li></ul></blockquote><h3 id="3、Host-宿主机"><a href="#3、Host-宿主机" class="headerlink" title="3、Host 宿主机"></a>3、Host 宿主机</h3><blockquote><p>宿主机就是Docker 引擎安装所在的机器，一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</p></blockquote><h3 id="4、镜像"><a href="#4、镜像" class="headerlink" title="4、镜像"></a>4、镜像</h3><h4 id="4-1-什么是-Docker-镜像？"><a href="#4-1-什么是-Docker-镜像？" class="headerlink" title="4.1  什么是 Docker 镜像？"></a>4.1  什么是 Docker 镜像？</h4><blockquote><ul><li>镜像是一个只读的模板，带有创建Docker容器的说明。通常情况下，一个镜像是基于另一个镜像的，并进行了一些额外的定制。<ul><li>例如，你可以建立一个基于ubuntu镜像的镜像，但会安装Apache网络服务器和你的应用程序，以及使你的应用程序运行所需的配置细节。</li></ul></li><li>你可以创建你自己的镜像，也可以只使用那些由他人创建并发布在注册表上的镜像。<ul><li>要建立你自己的镜像，你要创建一个Docker文件，用简单的语法来定义创建镜像和运行它所需的步骤。</li><li>Dockerfile中的每个指令都会在镜像中创建一个层。</li><li>当你改变Dockerfile并重建镜像时，只有那些已经改变的层被重建。</li><li>与其他虚拟化技术相比，这是使镜像如此轻便、小巧和快速的部分原因。</li></ul></li></ul></blockquote><h4 id="4-2-镜像分层"><a href="#4-2-镜像分层" class="headerlink" title="4.2 镜像分层"></a>4.2 镜像分层</h4><blockquote><p>Copy-on-Write : 写时复制</p></blockquote><blockquote><p>Docker 支持通过扩展现有镜像，创建新的镜像。实际上，Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/12180844322018196a29c55c8de4a2.png" class="" title="img"><blockquote><ul><li><p>从上图可以看到，新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。</p></li><li><p>镜像分层最大的一个好处就是共享资源。</p><ul><li>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。</li><li>而且镜像的每一层都可以被共享。</li></ul></li><li><p>如果多个容器共享一份基础镜像，当某个容器修改了基础镜像的内容，比如 &#x2F;etc 下的文件，这时其他容器的 &#x2F;etc 是不会被修改的，修改只会被限制在单个容器内。</p></li><li><p>这就是容器 <strong>「Copy-on-Write」</strong> 特性。</p></li></ul></blockquote><blockquote><p>Docker镜像是分层构建的，Dockerfile 中每条指令都会新建一层。例如以下 Dockerfile:</p></blockquote><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>以上四条指令会创建四层，分别对应基础镜像、复制文件、编译文件以及入口文件，每层只记录本层所做的更改，而这些层都是只读层。</p></li><li><p>当你启动一个容器，Docker 会在最顶部添加读写层，你在容器内做的所有更改，如写日志、修改、删除文件等，都保存到了读写层内，一般称该层为容器层</p></li><li><p>事实上，容器（container）和镜像（image）的最主要区别就是容器加上了顶层的读写层。</p><ul><li>所有对容器的修改都发生在此层，镜像并不会被修改，也即前面说的 COW(copy-on-write)技术。</li><li>容器需要读取某个文件时，直接从底部只读层去读即可，而如果需要修改某文件，则将该文件拷贝到顶部读写层进行修改，只读层保持不变。</li></ul></li><li><p>每个容器都有自己的读写层，因此多个容器可以使用同一个镜像，另外容器被删除时，其对应的读写层也会被删除（如果你希望多个容器共享或者持久化数据，可以使用 Docker volume）。</p></li><li><p>最后，执行命令 docker ps -s，可以看到最后有两列 size 和 virtual size。</p><ul><li>其中 size就是容器读写层占用的磁盘空间，而 virtual size 就是读写层加上对应只读层所占用的磁盘空间。</li><li>如果两个容器是从同一个镜像创建，那么只读层就是 100%共享，即使不是从同一镜像创建，其镜像仍然可能共享部分只读层（如一个镜像是基于另一个创建）。</li><li>因此，docker 实际占用的磁盘空间远远小于 virtual size 的总和。</li></ul></li></ul></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/v2-b71caf2dbcc2fa95e8545cb7c97998ac_720w.png" class="" title="img"><blockquote><ul><li>以上就是Docker镜像分层的主要内容，至于这些层的交互、管理就需要存储驱动程序，也即联合文件系统（<strong>UnionFS</strong>）。</li><li>Docker 可使用多种驱动，如目前已经合并入 Linux 内核、官方推荐的overlay，曾在 Ubuntu、Debian等发行版中得到广泛使用的 AUFS，以及devicemapper、zfs等等，需要根据 Docker以及宿主机系统的版本，进行合适的选择。</li></ul></blockquote><h3 id="5、容器"><a href="#5、容器" class="headerlink" title="5、容器"></a>5、容器</h3><blockquote><ul><li><p>容器是一个可运行的镜像实例。你可以使用Docker API或CLI创建、启动、停止、移动或删除一个容器。你可以将一个容器连接到一个或多个网络，为其附加存储，甚至可以根据其当前状态创建一个新的镜像。</p></li><li><p>默认情况下，一个容器与其他容器和它的主机是相对隔离的。你可以控制一个容器的网络、存储或其他基础子系统与其他容器或主机的隔离程度。</p></li><li><p>一个容器是由它的镜像以及你在创建或启动它时提供给它的任何配置选项所定义的。</p><ul><li>当一个容器被删除时，对其状态的任何改变，如果没有存储在持久性存储中，就会消失。</li></ul></li><li><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li></ul></blockquote><table><thead><tr><th align="left">Docker</th><th align="left">面向对象</th></tr></thead><tbody><tr><td align="left">容器</td><td align="left">对象</td></tr><tr><td align="left">镜像</td><td align="left">类</td></tr></tbody></table><h3 id="6、数据卷"><a href="#6、数据卷" class="headerlink" title="6、数据卷"></a>6、数据卷</h3><blockquote><p><a href="https://docs.docker.com/storage/volumes/">https://docs.docker.com/storage/volumes/</a></p></blockquote><blockquote><ul><li><p>每个容器每次启动时都是从镜像定义开始的。虽然容器可以创建、更新和删除文件，但当容器被删除时，这些变化就会丢失，所有的变化都被隔离在该容器之外。通过卷，我们可以改变这一切。</p></li><li><p>卷提供了将容器的特定文件系统路径连接回主机的能力。如果容器中的一个目录被挂载，该目录的变化也会在主机上看到。如果我们跨容器重启时挂载同一个目录，我们会看到相同的文件。</p></li><li><p>卷是保存由Docker容器产生和使用的数据的首选机制，绑定挂载依赖于主机的目录结构和操作系统，而卷则完全由Docker管理。</p></li><li><p>卷比绑定挂载有几个优势：</p><ul><li><p>卷比绑定挂载更容易备份或迁移。</p></li><li><p>你可以使用Docker CLI命令或Docker API来管理卷。</p></li><li><p>卷在Linux和Windows容器上都可以工作。</p></li><li><p>卷可以更安全地在多个容器之间共享。</p></li><li><p>卷的驱动可以让你在远程主机或云供应商上存储卷，对卷的内容进行加密，或添加其他功能。</p></li><li><p>新的卷可以由容器预先填充其内容。</p></li></ul></li></ul></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/types-of-mounts-volume.png" class="" title="volumes on the Docker host"><h3 id="7、Docker作用"><a href="#7、Docker作用" class="headerlink" title="7、Docker作用"></a>7、Docker作用</h3><blockquote><p>没有Docker技术：</p><ul><li>开发完成对应需求功能编码后，测试人员需要搭建一套相同的测试环境来测试功能，那么就出现环境配置相当麻烦，费时费力的情况，很多问题的出现都是由于环境配置不正确引发的<ul><li>常见的就是开发在自己环境可以跑通，在测试环境跑不通</li></ul></li></ul><p>使用Docker后：</p><ul><li>开发、测试人员可以更快速的构建相同操作环境，免去各种语言环境安装配置的麻烦，大大提高工作效率</li><li>做到了开发测试之间的系统平滑移植，也就是Docker引出的<code>容器虚拟化</code>技术</li><li>Docker对于测试来说，真正意义上做到了<code>开箱即测</code></li></ul></blockquote><blockquote><ul><li>更快速的应用交付和部署</li><li>更便捷的升级和扩缩容</li><li>更简单的系统运维</li><li>更高效的计算机资源利用</li></ul></blockquote><h3 id="8、Docker快的原因"><a href="#8、Docker快的原因" class="headerlink" title="8、Docker快的原因"></a>8、Docker快的原因</h3><blockquote><ul><li>Docker比虚拟机快拥有更少的抽象层<ul><li>因为Docker不需要虚拟机来实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的是实际物理机的硬件资源，所以在CPU、内存利用率上有很大的优势</li></ul></li><li>Docker使用的是宿主机内核<ul><li>虚拟机在启动时，是需要加载操作系统内核的，加载操作系统内核等资源消耗的时间会非常长</li><li>Docker在创建容器时，不需要和虚拟机一样加载一个操作系统内核，而是直接使用宿主机的操作系统，节省了加载操作系统内核等费时的资源，所以Docker容器的创建都是秒级别的</li></ul></li></ul></blockquote><h3 id="9、Docker和虚拟机对比"><a href="#9、Docker和虚拟机对比" class="headerlink" title="9、Docker和虚拟机对比"></a>9、Docker和虚拟机对比</h3><table><thead><tr><th></th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>操作系统</td><td>使用物理机的操作系统</td><td>虚拟出来的一套操作系统</td></tr><tr><td>占用存储</td><td>镜像占用很少</td><td>镜像特别大</td></tr><tr><td>运行性能</td><td>没有额外的性能损耗</td><td>需要额外的CPU、内存消耗</td></tr><tr><td>启动个数</td><td>单台可以同时启动上百个容器</td><td>单台最多十来个</td></tr></tbody></table><h2 id="三、Docker镜像"><a href="#三、Docker镜像" class="headerlink" title="三、Docker镜像"></a>三、Docker镜像</h2><blockquote><p>docker官方文档：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p></blockquote><h3 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h3><blockquote><p>拉取镜像时，不声明<code>tag</code>镜像标签信息，则默认拉取<code>latest</code>版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不指定tag，默认拉取latest版本</span></span><br><span class="line">docker pull 镜像名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定tag，则拉取指定tag版本的镜像</span></span><br><span class="line">docker pull 镜像名:tagname</span><br></pre></td></tr></table></figure><h3 id="2、查看镜像"><a href="#2、查看镜像" class="headerlink" title="2、查看镜像"></a>2、查看镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">docker image <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925224638402.png" class="" title="image-20220925224638402"><blockquote><p>REPOSITORY： 镜像在仓库的名字</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像创建的日期，不是获取这个镜像的日期</p><p>SIZE：镜像的大小</p><p>下载下来的镜像都存储在Docker宿主机的<code>/var/lib/docker</code>目录下</p></blockquote><h3 id="3、搜索镜像"><a href="#3、搜索镜像" class="headerlink" title="3、搜索镜像"></a>3、搜索镜像</h3><blockquote><p>需要从dockerHub中查找自己的想要的镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925225116072.png" class="" title="image-20220925225116072"><blockquote><p>NAME：镜像名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：镜像获得的星星数</p><p>OFFICIAL：是否为官方构建</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p></blockquote><h3 id="4、删除镜像"><a href="#4、删除镜像" class="headerlink" title="4、删除镜像"></a>4、删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925225644169.png" class="" title="image-20220925225644169"><h2 id="四、Docker容器"><a href="#四、Docker容器" class="headerlink" title="四、Docker容器"></a>四、Docker容器</h2><h3 id="1、查看所有容器命令"><a href="#1、查看所有容器命令" class="headerlink" title="1、查看所有容器命令"></a>1、查看所有容器命令</h3><blockquote><p>查看目前所有的容器，包括运行中、停止、退出等所有容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># -a 查看所有容器</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925225814201.png" class="" title="image-20220925225814201"><h3 id="2、查看正在运行的容器"><a href="#2、查看正在运行的容器" class="headerlink" title="2、查看正在运行的容器"></a>2、查看正在运行的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925230004327.png" class="" title="image-20220925230004327"><h3 id="3、创建容器"><a href="#3、创建容器" class="headerlink" title="3、创建容器"></a>3、创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面命令是创建一个私有仓库的容器</span></span><br><span class="line">docker run -idt --name registry -p 5000:5000 -v /Users/xxx/docker_registry:/var/lib/registry registry</span><br></pre></td></tr></table></figure><blockquote><ul><li>-i：表示要运行容器</li><li>-t：表示容器启动以后会进入命令行，-i和-t参数就可以做到容器创建以后可以登录进去，分配一个伪终端</li><li>–name：创建的容器名</li><li>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口，可以用多个-p做多个端口映射</li><li>-v：表示将容器内<code>/var/lib/registry</code>目录下的数据挂载到宿主机的<code>/Users/xxx/docker_registry</code>目录下<ul><li>表示目录映射关系，前面试宿主机目录，后面是映射到容器内的目录</li><li>可以使用-v做多个目录的文件映射</li></ul></li><li>-d：在run后面添加-d参数，表示会创建一个守护式容器，在后台运行，这样创建的容器就不会自动登录容器，如果只有<code>-i</code>和<code>-t</code>两个参数，创建容器以后会自动登录进入容器中</li><li>-P(大写的p)：随机使用宿主机的可用端口和容器内暴露的端口做映射</li></ul></blockquote><h4 id="3-1-创建并进入容器"><a href="#3-1-创建并进入容器" class="headerlink" title="3.1 创建并进入容器"></a>3.1 创建并进入容器</h4><blockquote><p>下面命令会通过镜像创建一个容器，运行容器并且进入容器的<code>/bin/bash</code></p></blockquote><blockquote><ul><li>特别注意：<ul><li>Docker容器运行必须要有一个前台进程，如果没有前台进程，则容器创建完以后是空闲状态，就会自动退出</li><li>前台程序意思就是一定要在运行的程序，但如果是运行的后台进程，容器也会被退出</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name 容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925231338907.png" class="" title="image-20220925231338907"><h4 id="3-2-守护方式创建容器"><a href="#3-2-守护方式创建容器" class="headerlink" title="3.2 守护方式创建容器"></a>3.2 守护方式创建容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name 容器名称 镜像名称</span><br></pre></td></tr></table></figure><h4 id="3-3-登录守护式容器方式"><a href="#3-3-登录守护式容器方式" class="headerlink" title="3.3 登录守护式容器方式"></a>3.3 登录守护式容器方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名|容器ID /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过容器名或容器ID进行登录容器</span></span><br></pre></td></tr></table></figure><h4 id="3-4-创建容器限制内存与CPU"><a href="#3-4-创建容器限制内存与CPU" class="headerlink" title="3.4 创建容器限制内存与CPU"></a>3.4 创建容器限制内存与CPU</h4><blockquote><p><code>-m 512m</code> 表示将容器的内存限制为 512 MB</p><p><code>--cpus 2</code>表示容器可以使用的 CPU 数量</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my_container -m 512m --cpus 2 my_image</span><br></pre></td></tr></table></figure><h3 id="4、容器的启动、停止、删除"><a href="#4、容器的启动、停止、删除" class="headerlink" title="4、容器的启动、停止、删除"></a>4、容器的启动、停止、删除</h3><h4 id="4-1-启动容器"><a href="#4-1-启动容器" class="headerlink" title="4.1 启动容器"></a>4.1 启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名|容器I</span><br></pre></td></tr></table></figure><h4 id="4-2-停止容器"><a href="#4-2-停止容器" class="headerlink" title="4.2 停止容器"></a>4.2 停止容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名|容器ID</span><br></pre></td></tr></table></figure><h4 id="4-4-删除容器"><a href="#4-4-删除容器" class="headerlink" title="4.4 删除容器"></a>4.4 删除容器</h4><blockquote><p>删除容器必须先将容器停止，否则会报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名|容器ID</span><br></pre></td></tr></table></figure><blockquote><p>如果容器不停止就删除，会报错</p><ul><li>会提示在删除容器前应该停止容器</li></ul></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925235701478.png" class="" title="image-20220925235701478"><h3 id="5、容器的文件拷贝命令"><a href="#5、容器的文件拷贝命令" class="headerlink" title="5、容器的文件拷贝命令"></a>5、容器的文件拷贝命令</h3><h4 id="5-1-拷贝文件-从宿主机到容器内"><a href="#5-1-拷贝文件-从宿主机到容器内" class="headerlink" title="5.1 拷贝文件:从宿主机到容器内"></a>5.1 拷贝文件:从宿主机到容器内</h4><blockquote><p>拷贝文件到容器里面</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  <span class="built_in">cp</span>   需要拷贝的文件  容器名或容器<span class="built_in">id</span>:容器目录</span><br></pre></td></tr></table></figure><blockquote><p>复制文件示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器名：lyos</span></span><br><span class="line"><span class="comment"># 待复制的文件：dockercp.txt</span></span><br><span class="line"><span class="comment"># 下面是操作步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: 在宿主机上创建测试文件</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;docker cp func&quot;</span> &gt; dockercp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: 在容器内创建复制文件存放的目录</span></span><br><span class="line"><span class="comment"># enter命令： 是自己封装的快速进入docker container 的命令</span></span><br><span class="line">$ enter lyos</span><br><span class="line">$ <span class="built_in">mkdir</span> testdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: 进行文件拷贝</span></span><br><span class="line">$ docker <span class="built_in">cp</span> dockercp.txt lyos:/root/testdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: 查看复制到container内的文件</span></span><br><span class="line">$ enter lyos</span><br><span class="line">$ <span class="built_in">cd</span> testdir</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">dockercp.txt</span><br></pre></td></tr></table></figure><h4 id="5-2-拷贝文件-容器内到宿主机"><a href="#5-2-拷贝文件-容器内到宿主机" class="headerlink" title="5.2 拷贝文件:容器内到宿主机"></a>5.2 拷贝文件:容器内到宿主机</h4><blockquote><p>从容器内拷贝文件出来</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">docker  <span class="built_in">cp</span>   容器名或容器<span class="built_in">id</span>:容器目录  拷贝出来文件的存放目录  </span><br></pre></td></tr></table></figure><blockquote><p>往外复制文件示例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 容器名：lyos</span></span><br><span class="line"><span class="comment"># 待复制的文件：dockercp.txt</span></span><br><span class="line"><span class="comment"># 拷贝文件的目标目录：testdir</span></span><br><span class="line"><span class="comment"># 下面是操作步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: 在宿主机内创建需要的复制文件目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span>  testdir</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: 进入docker container 的命令</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it lyos /bin/bash</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;docker cp: container to host&quot;</span> &gt; dockercp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: 在宿主机上将容器内的文件拷贝到宿主机</span></span><br><span class="line"><span class="comment"># 需要先确认从容器里拷贝文件出来到什么位置下，然后执行拷贝命令</span></span><br><span class="line">$ docker <span class="built_in">cp</span> lyos:/root/testdir  testdir</span><br><span class="line"> </span><br><span class="line"><span class="comment"># step4: 查看复制出来的文件</span></span><br><span class="line">$ <span class="built_in">cd</span> testdir</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">dockercp.txt</span><br></pre></td></tr></table></figure><h3 id="6、容器的数据卷操作"><a href="#6、容器的数据卷操作" class="headerlink" title="6、容器的数据卷操作"></a>6、容器的数据卷操作</h3><h4 id="6-1-指定目录挂载"><a href="#6-1-指定目录挂载" class="headerlink" title="6.1 指定目录挂载"></a>6.1 指定目录挂载</h4><blockquote><ul><li>创建容器<code>-v</code>参数，格式为<code>宿主机目录:容器目录</code>，具体格式如下:</li><li>创建容器时，需要挂载到容器内的目录也会自动创建<ul><li>比如：<code>/mydata/data:/root/test</code></li><li><code>/root/test</code>目录在容器创建时会自动创建，并和<code>/mydata/data</code>产生挂载关系</li><li>这两个目录里的文件是共享的，在容器内修改或在宿主机修改文件，这个文件的内容是同步的</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载命令</span></span><br><span class="line">$ docker run -di -v /宿主机目录/文件:/容器目录/文件  --name 容器名  容器镜像</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单目录挂载，例如:</span></span><br><span class="line">$ docker run -di -v /mydata/data:/root/test  --name ctos  centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多目录挂载，多个 -v 操作，例如:</span></span><br><span class="line">$ docker run -di -v /mydata/data1:/root/test1 -v /mydata/data2:/root/test2  --name ctos  centos</span><br></pre></td></tr></table></figure><h4 id="6-2-匿名挂载"><a href="#6-2-匿名挂载" class="headerlink" title="6.2 匿名挂载"></a>6.2 匿名挂载</h4><blockquote><ul><li>匿名挂载只需要填写容器内的目录，容器外的目录会在<code>/var/lib/docker/volumes</code>中生成，也就是默认数据卷存在的目录</li><li>匿名挂载在宿主机对应的存储目录名是随机生成的，在<code>/var/lib/docker/volumes</code>下可以看到，另外想单独看某个容器的在宿主机的挂载文件名，可以使用</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker  inspect  容器名</span><br><span class="line"><span class="comment"># 找到mount字段就可以看到对应的文件目录名</span></span><br></pre></td></tr></table></figure><blockquote><p>匿名挂载的具体操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载命令格式</span></span><br><span class="line">$ docker run -di /容器目录  --name 容器名  容器镜像</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">$ docker run -di -v /root/test  --name ctos  centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看volume数据卷信息</span></span><br><span class="line">$ docker volume <span class="built_in">ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     2f8a3e6ec12189a750b6a3bee24590f3fdcaa1ac3b9c80d41b6e634ce5aa79b0</span><br><span class="line"><span class="built_in">local</span>     62cd892d6a7716f062c2f1c012713395c173011200ff37a7c66b3ae9008d8c72</span><br><span class="line"><span class="built_in">local</span>     641c7bc01008d547d869f6cc2458c9122fea17dc56a0291012542ed1fe1911e9</span><br><span class="line"><span class="built_in">local</span>     a56431ba58c1e74de3b0504eb74985822a62ab442b1bc3b226b9b597afe8540d</span><br><span class="line"><span class="built_in">local</span>     c0af6a00a21d3245646728ff14f33c7e9d100fe4b9fd4017126dba1d969bf485</span><br><span class="line"><span class="built_in">local</span>     d1727e79445f30255ae5409f53c929bd75f43cccfd231fcf5be4c10a4c59fe70</span><br><span class="line"><span class="built_in">local</span>     d6030a2c751d7dbf53197ec454985bf7787688a19f49e58fd3e411deb3552995</span><br><span class="line"><span class="built_in">local</span>     de49f332d21c3330cf678fd8f31de9346e5075b59eda8ae7c1a811da849b89e1</span><br><span class="line"><span class="built_in">local</span>     e30d8a3c9ac0a274541fe94b8f48e89537bc51966e4cbdbaf22bbc7dad7c9514</span><br><span class="line"><span class="built_in">local</span>     f1b27849ba9d520e776d891e826eb65f3c06be5888ed322ebfce4bbf6e639b90</span><br></pre></td></tr></table></figure><h4 id="6-3-具名挂载"><a href="#6-3-具名挂载" class="headerlink" title="6.3 具名挂载"></a>6.3 具名挂载</h4><blockquote><ul><li>具名挂载就是给数据卷起了个名字，同样容器外的目录是在<code>/var/lib/docker/volumes</code>下，不过文件目录名不再是随机数字，而是创建容器时指定的名字</li><li>具名挂载就是给匿名挂载在宿主机内对应的目录起了个名字，而不是一串随机数字</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker run -di -v 指定的目录名:容器内的目录  --name ctos  centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># dockervol: 这个目录是在宿主机的/var/lib/docker/volumes目录下看到文件名</span></span><br><span class="line"><span class="comment"># /roo/test：对应容器内的路径，创建容器时会自动创建这个目录</span></span><br><span class="line">docker run -di -v dockervol:/root/test  --name ctos  centos:7</span><br></pre></td></tr></table></figure><h4 id="6-4-查看目录挂载关系"><a href="#6-4-查看目录挂载关系" class="headerlink" title="6.4 查看目录挂载关系"></a>6.4 查看目录挂载关系</h4><blockquote><p>可以查看当前数据卷对应宿主机的目录地址，目前应该只能适用于具名挂载方式来查看</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925235329524.png" class="" title="image-20220925235329524"><h4 id="6-5-数据卷的读写操作"><a href="#6-5-数据卷的读写操作" class="headerlink" title="6.5 数据卷的读写操作"></a>6.5 数据卷的读写操作</h4><blockquote><p>docker可以在挂载数据卷时设置读写权限</p></blockquote><h5 id="6-5-1-只读权限"><a href="#6-5-1-只读权限" class="headerlink" title="6.5.1 只读权限"></a>6.5.1 只读权限</h5><blockquote><ul><li>只能通过修改宿主机内容实现对容器的数据管理</li><li>容器内是没有权限进行对数据卷的写入操作的</li></ul></blockquote><blockquote><ul><li>下面命令通过创建了<code>c1</code>容器，并且将宿主机的<code>/Users/xxxx/c1</code>挂载到容器内的<code>/root/c1</code>目录下，并且设置了<code>ro</code>只读权限</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name c1 -v /Users/xxxx/c1:/root/c1:ro centos:7</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925232557447.png" class="" title="image-20220925232557447"><blockquote><p>登录容器，在<code>/root/c1</code>目录下创建文件，可以看到提示是一个只读的文件系统，不允许进行创建动作</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925232855982.png" class="" title="image-20220925232855982"><blockquote><p>宿主机的<code>/Users/xxxx/c1</code>目录里创建内容不受影响，并且也能同步在容器的<code>c1</code>目录下看到宿主机内创建的文件</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925233137327.png" class="" title="image-20220925233137327"><h5 id="6-5-2-读写权限"><a href="#6-5-2-读写权限" class="headerlink" title="6.5.2 读写权限"></a>6.5.2 读写权限</h5><blockquote><p>宿主机和容器内都可以进行操作创建文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name c1 -v /Users/lyzin/c1:/root/c1:rw centos:7</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925233451067.png" class="" title="image-20220925233451067"><blockquote><ul><li>从上图看出：<ul><li>在容器内创建了<code>sam.txt</code>文件，在宿主机中<code>c1</code>目录也能看到容器内创建的<code>sam.txt</code>文件</li><li>在宿主机内创建了<code>john.txt</code>文件，在容器内的<code>c1</code>目录下也能看到宿主机创建的<code>john.txt</code>文件</li><li>打到了宿主机和容器内进行了双向读写</li></ul></li></ul></blockquote><h5 id="6-6-逻辑卷继承"><a href="#6-6-逻辑卷继承" class="headerlink" title="6.6 逻辑卷继承"></a>6.6 逻辑卷继承</h5><blockquote><p>单个容器内逻辑卷的目录挂载，其他容器可以来继承，打到快速使用同一个逻辑卷</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用--volumes-from命令来继承</span></span><br><span class="line"><span class="comment"># 容器c2继承了c1容器的挂载目录</span></span><br><span class="line">docker run -itd --volumes-from c1 --name c2 centos:7</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925234625431.png" class="" title="image-20220925234625431"><blockquote><p>登录到c1和c2容器查看<code>c1</code>目录中的文件</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925234813316.png" class="" title="image-20220925234813316"><h3 id="7、docker-inspect查看容器配置信息"><a href="#7、docker-inspect查看容器配置信息" class="headerlink" title="7、docker inspect查看容器配置信息"></a>7、docker inspect查看容器配置信息</h3><blockquote><p>可以查看容器状态、容器IP、容器挂载信息等所有信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名|容器ID</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925234446219.png" class="" title="image-20220925234446219"><h3 id="8、docker-ps查看所有运行中容器"><a href="#8、docker-ps查看所有运行中容器" class="headerlink" title="8、docker ps查看所有运行中容器"></a>8、docker ps查看所有运行中容器</h3><blockquote><p>docker ps列出所有正在运行中的容器</p><p>docker ps命令后面不跟任何参数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914195941335.png" class="" title="image-20240914195941335"><h3 id="9、docker-stats容器占用CPU-x2F-内存信息"><a href="#9、docker-stats容器占用CPU-x2F-内存信息" class="headerlink" title="9、docker stats容器占用CPU&#x2F;内存信息"></a>9、docker stats容器占用CPU&#x2F;内存信息</h3><blockquote><p>docker stats这个命令会实时显示容器的资源使用情况</p><ul><li>参数不跟容器名：查看当前所有运行的容器占用的内存和 CPU 资源。</li><li>参数跟容器名：仅查看当前容器的占用的内存和 CPU 资源</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914200202788.png" class="" title="image-20240914200202788"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats mysql</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914200326702.png" class="" title="image-20240914200326702"><h3 id="10、一次关闭所有运行容器"><a href="#10、一次关闭所有运行容器" class="headerlink" title="10、一次关闭所有运行容器"></a>10、一次关闭所有运行容器</h3><blockquote><p>可以使用docker stop和docker ps命令组合关闭所有运行中的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只输出运行中的容器ID</span></span><br><span class="line">docker ps -q</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914200511807.png" class="" title="image-20240914200511807"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭所有运行中容器</span></span><br><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914200636049.png" class="" title="image-20240914200636049"><h3 id="11、一次启动所有容器"><a href="#11、一次启动所有容器" class="headerlink" title="11、一次启动所有容器"></a>11、一次启动所有容器</h3><blockquote><p>先查询所有容器的ID</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">ls</span> -a -q</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a, --all             Show all containers (default shows just running)</span></span><br><span class="line"><span class="comment"># -q, --quiet           Only display container IDs</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914200926455.png" class="" title="image-20240914200926455"><blockquote><p>一次性启动所有容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start $(docker container <span class="built_in">ls</span> -a -q)</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914201037405.png" class="" title="image-20240914201037405"><h3 id="12、查看容器占用的磁盘空间"><a href="#12、查看容器占用的磁盘空间" class="headerlink" title="12、查看容器占用的磁盘空间"></a>12、查看容器占用的磁盘空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><blockquote><ul><li>可以看到最后有两列 size 和 virtual size<ul><li>size：容器读写层占用的磁盘空间，</li><li>virtual size：就是读写层加上对应只读层所占用的磁盘空间。</li></ul></li></ul></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/v2-b71caf2dbcc2fa95e8545cb7c97998ac_720w.png" class="" title="img"><h2 id="五、镜像构建"><a href="#五、镜像构建" class="headerlink" title="五、镜像构建"></a>五、镜像构建</h2><h3 id="1、镜像创建"><a href="#1、镜像创建" class="headerlink" title="1、镜像创建"></a>1、镜像创建</h3><blockquote><ul><li>为什么要创建镜像？<ul><li>因为大多时候我们都是通过dockerhub拉取镜像，然后启动容器进行使用</li><li>但实际上从dockerhub上拉取下来的镜像，往往有时候满足不了我们的需求，当我们想对其添加功能满足自身功能，比如包含项目的整体运行环境，并且想将其创建为一个新的镜像，那就需要自行构建镜像</li></ul></li></ul></blockquote><blockquote><ul><li>docker支持两种镜像创建方式<ul><li>从容器创建一个新的镜像</li><li>编写Docker文件来创建新镜像</li></ul></li></ul></blockquote><h3 id="2、从容器创建镜像"><a href="#2、从容器创建镜像" class="headerlink" title="2、从容器创建镜像"></a>2、从容器创建镜像</h3><h3 id="3、Dockerfile创建镜像"><a href="#3、Dockerfile创建镜像" class="headerlink" title="3、Dockerfile创建镜像"></a>3、Dockerfile创建镜像</h3><h2 id="六、Docker仓库"><a href="#六、Docker仓库" class="headerlink" title="六、Docker仓库"></a>六、Docker仓库</h2><h3 id="1、仓库利弊"><a href="#1、仓库利弊" class="headerlink" title="1、仓库利弊"></a>1、仓库利弊</h3><blockquote><p>Docker官方提供一个叫 <a href="http://dockerhub.com/">dockerHub</a> 的仓库，这个仓库存储了大量的官方镜像和个人制作的镜像，所有人都可以下载使用，但是又面临一些缺点，比如：</p><ul><li>dockerhub在国外，拉取镜像时受网络影响，容易失败</li><li>自己构建的镜像有时候会包含一些敏感数据，不希望上传到dockerHub，让所有人都能看到</li></ul><p>问题解决：</p><ul><li>为了解决上面的问题，Docker官方支持创建私有仓库，在内部网络搭建私有仓库，供内部人员下载使用</li><li>并且私有仓库支持加密验证，进一步保证镜像的安全性</li><li>Docker官方提供了一个叫<a href="https://hub.docker.com/_/registry">registry</a>的镜像用来搭建本地的私有仓库</li></ul></blockquote><h3 id="2、搭建私有镜像仓库"><a href="#2、搭建私有镜像仓库" class="headerlink" title="2、搭建私有镜像仓库"></a>2、搭建私有镜像仓库</h3><h4 id="2-1-拉取私有仓库镜像"><a href="#2-1-拉取私有仓库镜像" class="headerlink" title="2.1 拉取私有仓库镜像"></a>2.1 拉取私有仓库镜像</h4><blockquote><p>拉取搭建私有仓库的镜像命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220923133653570.png" class="" title="image-20220923133653570"><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220923133925574.png" class="" title="image-20220923133925574"><h4 id="2-2-修改docker的配置"><a href="#2-2-修改docker的配置" class="headerlink" title="2.2 修改docker的配置"></a>2.2 修改docker的配置</h4><blockquote><p>在linux下修改docker配置，一般是在<code>/etc/docker/daemon.conf</code>文件中</p></blockquote><blockquote><p>在mac下修改docker配置，主要还是使用docker desktop进行修改</p><p>增加完以后需要重启docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一列</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;10.1.24.5:5050&quot;</span>]  </span><br><span class="line"><span class="comment"># 10.1.24.5:5050 表示私有仓库的主机IP，5050为私有仓库容器的端口</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925221834758.png" class="" title="image-20220925221834758"><h4 id="2-3-创建私有仓库容器"><a href="#2-3-创建私有仓库容器" class="headerlink" title="2.3 创建私有仓库容器"></a>2.3 创建私有仓库容器</h4><blockquote><p>创建私有仓库容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -idt --name registry -p 5000:5000 -v /Users/xxx/docker_registry:/var/lib/registry registry</span><br></pre></td></tr></table></figure><blockquote><p>-d: 后台运行容器</p><p>–name: 给容器起的名字</p><p>-p: 表示端口映射，前者是宿主机端口，后者是容器内的映射端口，可以用多个-p做多个端口映射</p><p>-v: 表示将容器内<code>/var/lib/registry</code>目录下的数据挂载到宿主机的<code>/Users/xxx/docker_registry</code>目录下</p></blockquote><blockquote><p>可以看到创建的<code>registry</code>容器已经在启动中了</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925221743724.png" class="" title="image-20220925221743724"><blockquote><p>访问私有仓库的管理页面：http:&#x2F;&#x2F;私有仓库的主机ID:5000&#x2F;v2&#x2F;_catalog</p><p>可以看到有<code>&#123;&quot;repositories&quot;: []&#125;</code>就表示私有仓库搭建成功并且内容为空</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925222139586.png" class="" title="image-20220925222139586"><h4 id="2-4-推送镜像到私有仓库"><a href="#2-4-推送镜像到私有仓库" class="headerlink" title="2.4 推送镜像到私有仓库"></a>2.4 推送镜像到私有仓库</h4><h5 id="2-4-1-推送步骤"><a href="#2-4-1-推送步骤" class="headerlink" title="2.4.1 推送步骤"></a>2.4.1 推送步骤</h5><blockquote><p>可以先给镜像打标签</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag local-image:tagname new-repo:tagname</span><br></pre></td></tr></table></figure><blockquote><p>在推送镜像到私有仓库</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure><h5 id="2-4-2-推送实践"><a href="#2-4-2-推送实践" class="headerlink" title="2.4.2 推送实践"></a>2.4.2 推送实践</h5><blockquote><p>下面是实践过程，本地有一个叫<code>crondos</code>的镜像，主要用来执行定时任务的，可以将该镜像推送到私有仓库备份</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925222613934.png" class="" title="image-20220925222613934"><blockquote><p>下面是详细步骤</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925223010460.png" class="" title="image-20220925223010460"><blockquote><p>访问私有仓库的管理页面：http:&#x2F;&#x2F;私有仓库的主机ID:5000&#x2F;v2&#x2F;_catalog</p><p>可以看到有刚才推送的镜像了</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925223106060.png" class="" title="image-20220925223106060"><blockquote><p>从宿主机的挂载目录也能看到上传的镜像</p></blockquote><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925223548861.png" class="" title="image-20220925223548861"><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20220925223656898.png" class="" title="image-20220925223656898"><h2 id="七、Docker网络模式"><a href="#七、Docker网络模式" class="headerlink" title="七、Docker网络模式"></a>七、Docker网络模式</h2><h3 id="1、Docker网络模式介绍"><a href="#1、Docker网络模式介绍" class="headerlink" title="1、Docker网络模式介绍"></a>1、Docker网络模式介绍</h3><h3 id="2、bridge桥接模式"><a href="#2、bridge桥接模式" class="headerlink" title="2、bridge桥接模式"></a>2、bridge桥接模式</h3><h3 id="3、host主机网络模式"><a href="#3、host主机网络模式" class="headerlink" title="3、host主机网络模式"></a>3、host主机网络模式</h3><h3 id="4、none模式"><a href="#4、none模式" class="headerlink" title="4、none模式"></a>4、none模式</h3><h3 id="5、container网络模式"><a href="#5、container网络模式" class="headerlink" title="5、container网络模式"></a>5、container网络模式</h3><h3 id="6、自定义网络-推荐"><a href="#6、自定义网络-推荐" class="headerlink" title="6、自定义网络(推荐)"></a>6、自定义网络(推荐)</h3><blockquote></blockquote><h3 id="7、link模式-已过时"><a href="#7、link模式-已过时" class="headerlink" title="7、link模式(已过时)"></a>7、link模式(已过时)</h3><h2 id="八、Docker-compose"><a href="#八、Docker-compose" class="headerlink" title="八、Docker-compose"></a>八、Docker-compose</h2><blockquote><p><a href="https://docs.docker.com/compose/compose-file/">docker-compose</a>是用于定义和运行多docker容器的工具</p><p>docker-compose使用yml格式的文件来配置多个容器服务</p></blockquote><blockquote><p>docker-compose使用三大步骤</p><ol><li>编写自定义的dockerfile，构建好自定义的镜像服务</li><li>使用docker-compose.yml文件来定义应用程序服务，使得这一组应用服务可以在一套隔离环境中运行</li><li>使用docker-compose up命令启动这组容器服务</li></ol></blockquote><h3 id="1、docker-compose安装"><a href="#1、docker-compose安装" class="headerlink" title="1、docker-compose安装"></a>1、docker-compose安装</h3><h4 id="1-1-使用docker-desktop"><a href="#1-1-使用docker-desktop" class="headerlink" title="1.1 使用docker-desktop"></a>1.1 使用docker-desktop</h4><blockquote><p>当本地安装docker，安装的是docker-desktop，那么自动就已经安装了docker-compose工具</p></blockquote><h4 id="1-2-未使用docker-desktop"><a href="#1-2-未使用docker-desktop" class="headerlink" title="1.2 未使用docker-desktop"></a>1.2 未使用docker-desktop</h4><blockquote><p>当本地安装docker，安装的不是docker-desktop，那么就没安装docker-compose工具</p><p>单独安装docker-compose：<a href="https://docs.docker.com/compose/install/standalone/">https://docs.docker.com/compose/install/standalone/</a></p><p>以下以ubuntu为例</p></blockquote><blockquote><p>下载执行文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -SL https://github.com/docker/compose/releases/download/v2.29.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>赋予权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>验证docker-compose</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/docker/docker%E7%AC%94%E8%AE%B0/image-20240914215316470.png" class="" title="image-20240914215316470"><h3 id="2、特别注意目录权限"><a href="#2、特别注意目录权限" class="headerlink" title="2、特别注意目录权限"></a>2、特别注意目录权限</h3><blockquote><p>注意：</p><ul><li>必须要提前在宿主机创建好目录，不能让docker-compose自动在宿主机创建目录<ul><li>因为有的容器映射的目录权限是root，但是宿主机登录用户不是root，会导致无法在容器中创建服务需要的目录，导致服务启动失败</li></ul></li></ul></blockquote><h3 id="3、Docker-compose语法"><a href="#3、Docker-compose语法" class="headerlink" title="3、Docker-compose语法"></a>3、Docker-compose语法</h3><blockquote><p>docker-compose的版本</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v2/">https://docs.docker.com/compose/compose-file/compose-file-v2/</a></p></blockquote><h4 id="1-1-模板语法"><a href="#1-1-模板语法" class="headerlink" title="1.1 模板语法"></a>1.1 模板语法</h4><blockquote><p>docker-compose的模板语法，文件名必须是<code>docker-compose.yml</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose的文件版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义服务，可以是多个</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="comment"># 服务1</span></span><br><span class="line">    <span class="string">服务的名称:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">镜像名称</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">容器名称</span></span><br><span class="line">        <span class="attr">environment:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">环境变量1=值1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">环境变量2=值2</span></span><br><span class="line">        <span class="attr">volumes:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">宿主机目录:容器内目录</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">宿主机的端口:映射的容器内的端口</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">自定义网络名称</span></span><br><span class="line">    <span class="comment"># 服务2</span></span><br><span class="line">    <span class="string">服务的名称:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">镜像名称</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">容器名称</span></span><br><span class="line">        <span class="attr">environment:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">环境变量1=值1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">环境变量2=值2</span></span><br><span class="line">        <span class="attr">volumes:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">宿主机目录:容器内目录</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">宿主机的端口:映射的容器内的端口</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">自定义网络名称</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 网络模式</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="string">自定义网络名称:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><h4 id="1-2-compose文件示例"><a href="#1-2-compose文件示例" class="headerlink" title="1.2 compose文件示例"></a>1.2 compose文件示例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">dev-unit-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/redis/data:/data</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redisinsight:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis/redisinsight:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redisinsight</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/redisinsight/data:/data</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5540:5540&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysqlzh:v1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/mysql/conf.d:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">etcd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/etcd-development/etcd:v3.5.15</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">etcd-gcr-v3.5.15</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/etcd/tmp/etcd-data.tmp:/etcd-data</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2379:2379&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2380:2380&quot;</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/bin/etcd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">s1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--data-dir</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etcd-data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--listen-client-urls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://0.0.0.0:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--advertise-client-urls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://0.0.0.0:2379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--listen-peer-urls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://0.0.0.0:2380</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--initial-advertise-peer-urls</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http://0.0.0.0:2380</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--initial-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">s1=http://0.0.0.0:2380</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--initial-cluster-token</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tkn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--initial-cluster-state</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-level</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zap</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--log-outputs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">stderr</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.17.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.17.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/ly/docker_volumn/kibana/config:/usr/share/kibana/config</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">256m</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-unit-network</span></span><br></pre></td></tr></table></figure><h3 id="4、docker-compose命令"><a href="#4、docker-compose命令" class="headerlink" title="4、docker-compose命令"></a>4、docker-compose命令</h3><blockquote><p>docker-compose启动容器必须在dockercompose.yml文件所在的目录下</p></blockquote><h4 id="1-1-docker-compose后台启动容器"><a href="#1-1-docker-compose后台启动容器" class="headerlink" title="1.1 docker-compose后台启动容器"></a>1.1 docker-compose后台启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="1-2-docker-compose仅停止容器"><a href="#1-2-docker-compose仅停止容器" class="headerlink" title="1.2 docker-compose仅停止容器"></a>1.2 docker-compose仅停止容器</h4><blockquote><p>仅仅停止容器，不删除容器、不删除自定义网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><h4 id="1-3-docker-compose删除容器与网络"><a href="#1-3-docker-compose删除容器与网络" class="headerlink" title="1.3 docker-compose删除容器与网络"></a>1.3 docker-compose删除容器与网络</h4><blockquote><p>down命令会 停止容器、删除容器、删除自定义网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h4 id="1-4-docker-compose重启容器"><a href="#1-4-docker-compose重启容器" class="headerlink" title="1.4 docker-compose重启容器"></a>1.4 docker-compose重启容器</h4><blockquote><p>restart会重启容器，不删除容器、不删除自定义网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建Redis环境"><a href="#一、搭建Redis环境" class="headerlink" title="一、搭建Redis环境"></a>一、搭建Redis环境</h2><blockquote><p>前言：使用Docker 来搭建Redis环境</p><p>镜像官网：<a href="https://hub.docker.com/_/redis">https://hub.docker.com/_&#x2F;redis</a></p></blockquote><h3 id="1、创建redis容器"><a href="#1、创建redis容器" class="headerlink" title="1、创建redis容器"></a>1、创建redis容器</h3><blockquote><p>使用redis-cli客户端连接方式创建redis容器</p></blockquote><h4 id="1-1-创建redis容器命令"><a href="#1-1-创建redis容器命令" class="headerlink" title="1.1 创建redis容器命令"></a>1.1 创建redis容器命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建redis容器</span></span><br><span class="line">docker run -idt --name redisly -p 6379:6379 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令参数解释</span></span><br><span class="line">-idt: i表示可以进行交互，t表示开启一个<span class="built_in">tty</span>终端，d表示在后台运行容器</span><br><span class="line">--name: 表示自定义容器名，进入容器时可以使用该名字进入</span><br><span class="line">--<span class="built_in">rm</span>: 表示创建redis容器时候，如果存在redis 、redis-cli先删除再创建</span><br><span class="line">-p: 表示将容器内端口映射到宿主机的端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建有密码的redis</span></span><br><span class="line">docker run -itd --name redisly -p 6379:6379 redis --requirepass <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-创建redis容器"><a href="#1-2-创建redis容器" class="headerlink" title="1.2 创建redis容器"></a>1.2 创建redis容器</h4><blockquote><p>下面创建的redis容器，无密码</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20210608132942146.png" class="" title="image-20210608132942146"><h3 id="2、连接redis服务器"><a href="#2、连接redis服务器" class="headerlink" title="2、连接redis服务器"></a>2、连接redis服务器</h3><h4 id="2-1-redis-cli工具"><a href="#2-1-redis-cli工具" class="headerlink" title="2.1 redis-cli工具"></a>2.1 redis-cli工具</h4><blockquote><p><code>redis</code>服务器可以通过<code>redis-cli</code>工具进行连接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接redis命令，进入上面创建的redis容器，进行redis链接</span></span><br><span class="line">redis-cli -h 127.0.0.1</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20210608133051787.png" class="" title="image-20210608133051787"><h2 id="二、Redis介绍"><a href="#二、Redis介绍" class="headerlink" title="二、Redis介绍"></a>二、Redis介绍</h2><h3 id="1、Redis介绍"><a href="#1、Redis介绍" class="headerlink" title="1、Redis介绍"></a>1、Redis介绍</h3><blockquote><p>Redis官网：<a href="https://redis.io/docs/get-started/">https://redis.io/docs/get-started/</a></p></blockquote><blockquote><p>Redis是NoSQL(Not Only SQL)数据库，是指非关系型的数据库</p><p>Redis是以<code>key-value</code>模式存储数据</p></blockquote><blockquote><p>Redis适用场景</p><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高扩展性的</li></ul></blockquote><blockquote><p>Redis不适用场景</p><ul><li>需要事务支持</li><li>处理较为复杂的查询</li></ul></blockquote><h4 id="1-1-Memcache和Redis"><a href="#1-1-Memcache和Redis" class="headerlink" title="1.1 Memcache和Redis"></a>1.1 Memcache和Redis</h4><table><thead><tr><th></th><th>Redis</th><th>Memcache</th></tr></thead><tbody><tr><td>区别</td><td>几乎覆盖Memcache的绝大多数功能<br />数据都在内容中，支持持久化，可以用于备份恢复<br />除了支持简单的key-value，还支持较多种数据结构，比如list、set、hash、zset等</td><td>较早出现的NoSQL数据库<br />数据都在内存中，一般不持久化<br />支持简单的key-value，支持类型较少<br /></td></tr><tr><td>技术实现</td><td>单线程+多路IO复用</td><td>多线程+锁</td></tr></tbody></table><h4 id="1-2-Redis的特点"><a href="#1-2-Redis的特点" class="headerlink" title="1.2 Redis的特点"></a>1.2 Redis的特点</h4><blockquote><ul><li>Redis是单线程+多路IO复用技术实现</li><li>是一个开源的key-value存储系统，数据都是存储在内存中</li><li>支持的类型非常多<ul><li>string：字符串</li><li>hash：哈希表，对应python中的字典类型</li><li>list：链表</li><li>set：集合</li><li>zset：有序结合</li></ul></li><li>数据支持push、pop、add、remove等操作，支持排序</li><li>Redis会周期性把更新的数据写入磁盘还活着吧修改操作写入追加的记录文件</li></ul></blockquote><blockquote><ul><li>redis配合关系型数据库做高速缓存<ul><li>对高频次、热门访问的数据进行redis缓存，见到数据库压力</li></ul></li><li>多样的数据结构存储持久化数据<ul><li>最新N个数据：<ul><li>通过list实现按自然时间排序的数据</li></ul></li><li>排行榜，Top N：<ul><li>利用zset（有序集合）</li></ul></li><li>时效性数据，比如手机验证码<ul><li>利用Expire过期机制，设置60秒过期</li></ul></li><li>计数器，秒杀<ul><li>原子性，使用incr、decr</li></ul></li><li>去除大量数据中的重复项<ul><li>利用set集合</li></ul></li><li>构建队列<ul><li>利用list集合</li></ul></li><li>发布订阅消息系统<ul><li>pub&#x2F;sub模式</li></ul></li></ul></li></ul></blockquote><h4 id="1-3-Redis相关知识"><a href="#1-3-Redis相关知识" class="headerlink" title="1.3 Redis相关知识"></a>1.3 Redis相关知识</h4><blockquote><ul><li>redis的端口是6379</li><li>redis默认有16个数据库，从下标0开始，默认使用的是0号数据库，最大到15号库<ul><li>使用select dbid切换数据库，比如select 1</li></ul></li></ul></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212223240214.png" class="" title="image-20240212223240214"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前Redis的x号数据库的key数量</span></span><br><span class="line">dbsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空当前库，谨慎操作</span></span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通杀清理全部库，谨慎操作</span></span><br><span class="line">flushall</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212223508845.png" class="" title="image-20240212223508845"><h3 id="2、Redis键-Key"><a href="#2、Redis键-Key" class="headerlink" title="2、Redis键(Key)"></a>2、Redis键(Key)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前库所有的key</span></span><br><span class="line">keys *</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212224027095.png" class="" title="image-20240212224027095"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断某个是否存在，返回值是1表示存在，0表示不存在 </span></span><br><span class="line">exists key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212224112931.png" class="" title="image-20240212224112931"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看key的类型</span></span><br><span class="line"><span class="built_in">type</span> key </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不存在的key的类型为none，如下面的user3就是不存在的key</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212224236664.png" class="" title="image-20240212224236664"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除指定key的数据</span></span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除user1成功，返回值是1</span></span><br><span class="line"><span class="comment"># 删除user3(key不存在)成功，返回值是0</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212224354720.png" class="" title="image-20240212224354720"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为key设置过期时间，10表示10秒</span></span><br><span class="line">expire key 10 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看还有多少秒过期，-1表示永不过期，-2表示已过期</span></span><br><span class="line">ttl key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212224654848.png" class="" title="image-20240212224654848"><h2 id="三、Redis的数据类型"><a href="#三、Redis的数据类型" class="headerlink" title="三、Redis的数据类型"></a>三、Redis的数据类型</h2><h3 id="1、string类型"><a href="#1、string类型" class="headerlink" title="1、string类型"></a>1、string类型</h3><blockquote><ul><li>string是Redis最基本的类型</li><li>string类型是二进制安全的，所以redis的string可以包含任何数据，比如图片或序列化的对象</li><li>一个redis字符串的value最大是512M</li></ul></blockquote><h4 id="1-1-set"><a href="#1-1-set" class="headerlink" title="1.1 set"></a>1.1 set</h4><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212225102506.png" class="" title="image-20240212225102506"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NX：当数据中key不存在时，可以将key-value加到数据库</span><br><span class="line">XX：当数据中key存在时，可以将key-value加到数据库，与NX互斥</span><br><span class="line">EX：key的超时秒数</span><br><span class="line">NX：key的超时毫秒数，与EX互斥</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212225449072.png" class="" title="image-20240212225449072"><blockquote><p>注意：</p><ul><li>当key的值存在时，继续对同一个key设置值时，会覆盖key原有的值</li></ul></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212230130022.png" class="" title="image-20240212230130022"><h4 id="1-2-get"><a href="#1-2-get" class="headerlink" title="1.2 get"></a>1.2 get</h4><blockquote><p>查询redis的值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212225518523.png" class="" title="image-20240212225518523"><h4 id="1-3-append"><a href="#1-3-append" class="headerlink" title="1.3 append"></a>1.3 append</h4><blockquote><p>将指定的新value追加到原始key的原始值的末尾</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append key new_value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212225945881.png" class="" title="image-20240212225945881"><blockquote><p>注意：</p><p>append的返回值，会把原始value和新value的总体长度返回，上面的<code>sam_is_boy</code>就是10个字符</p></blockquote><h4 id="1-4-strlen"><a href="#1-4-strlen" class="headerlink" title="1.4 strlen"></a>1.4 strlen</h4><blockquote><p>获取指定key的值的长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212230335582.png" class="" title="image-20240212230335582"><blockquote><p>可以看到和上面<code>append</code>命令返回值长度一样</p></blockquote><h4 id="1-5-setnx"><a href="#1-5-setnx" class="headerlink" title="1.5 setnx"></a>1.5 setnx</h4><blockquote><p>只有key不存在时，才可以设置key的值，如果key存在，则不可以设置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx key value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212230602370.png" class="" title="image-20240212230602370"><blockquote><p>从上图可以看出：</p><ul><li><code>user2</code>这个key存在，并且有值为<code>alice</code>，所以使用<code>setnx</code>再设置新值<code>alice_002</code>，返回值为0，表示没有设置成功，重新查看<code>user2</code>的值仍是<code>alice</code></li><li><code>user3</code>这个key不存在，<code>setnx</code>设置新值<code>alice_002</code>，返回值为1，表示设置成功，查看<code>user3</code>的值是<code>alice_002</code></li></ul></blockquote><h4 id="1-6-incr"><a href="#1-6-incr" class="headerlink" title="1.6 incr"></a>1.6 incr</h4><blockquote><p>对key中存储的数字值增1，只能对数值值操作，如果为空，新增值为1</p><p>原子操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212231139146.png" class="" title="image-20240212231139146"><blockquote><p>user2的值是英文字母，所以incr设置时会提示不是一个整型</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212231312864.png" class="" title="image-20240212231312864"><blockquote><p>user4这个key不存在表示值为空，使用incr对user4这个key进行增加，那么会新增值为1</p><p>查看user4的值就是1</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212231444421.png" class="" title="image-20240212231444421"><blockquote><p>设置user5的值是10，使用incr对user5增1，incr的返回值就是增1后返回的新值</p><p>重新查看user5的值就是11</p></blockquote><h4 id="1-7-decr"><a href="#1-7-decr" class="headerlink" title="1.7 decr"></a>1.7 decr</h4><blockquote><p>对key中存储的数字值减1，只能对数值值操作，如果为空，新增值为-1</p><p>原子操作</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212231707227.png" class="" title="image-20240212231707227"><h4 id="1-8-incrby-x2F-decrby"><a href="#1-8-incrby-x2F-decrby" class="headerlink" title="1.8 incrby&#x2F;decrby"></a>1.8 incrby&#x2F;decrby</h4><blockquote><p>对存储的数字值增、减，也就是可以做数值减法，比如直接减少10、20等等</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对值增加任意值</span></span><br><span class="line">incrby key 步长</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对值减少任意值</span></span><br><span class="line">decrby key 步长</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212232046226.png" class="" title="image-20240212232046226"><h4 id="1-9-原子操作"><a href="#1-9-原子操作" class="headerlink" title="1.9 原子操作"></a>1.9 原子操作</h4><blockquote><p>原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始就一直运行到结束，不会有任何的切换行为</p><ul><li>在单线程中，能在单条指令中完成的操作都是<code>原子操作</code></li><li>在多线程中，不能再其他进程或线程打断的操作就叫<code>原子操作</code></li></ul></blockquote><h4 id="1-10-mset-x2F-mget"><a href="#1-10-mset-x2F-mget" class="headerlink" title="1.10 mset&#x2F;mget"></a>1.10 mset&#x2F;mget</h4><blockquote><p>mset：一次设置多个值</p><p>mget：获取多个值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset key1 value1 key2 value2 ...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget key1 value1 key2 value2 ...</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212232735046.png" class="" title="image-20240212232735046"><blockquote><p>使用<code>set</code>设置的单个key，也可以用mget获取值</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212232830177.png" class="" title="image-20240212232830177"><h4 id="1-11-msetnx"><a href="#1-11-msetnx" class="headerlink" title="1.11 msetnx"></a>1.11 msetnx</h4><blockquote><p>同时设置一个或多个key-value，当且仅当给定所有key都不存在</p><p>具有原子性，有一个失败则都失败</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212233239571.png" class="" title="image-20240212233239571"><h4 id="1-12-getrange-x2F-setrange"><a href="#1-12-getrange-x2F-setrange" class="headerlink" title="1.12 getrange&#x2F;setrange"></a>1.12 getrange&#x2F;setrange</h4><blockquote><p>getrange：获取值的返回，类似于python的字符串的切片索引取值，并且是左闭右闭</p><p>setrange：用新值覆盖key的原始值，从起始位置开始，也就是说对key的部分值进行替换</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getrange key start end</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212234350193.png" class="" title="image-20240212234350193"><blockquote><p>getrange就是对这个key的值进行切片，并且起始和结束索引都是包含的，那么值就是<code>b_i</code>，而python中切片是左闭右开，右边索引值不包含</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setrange key 起始索引 新值</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212234633006.png" class="" title="image-20240212234633006"><blockquote><p>setrange就是可以对key的原始值的某一个部分进行替换，上面的<code>boy</code>换成了<code>girl</code></p></blockquote><h4 id="1-13-setex"><a href="#1-13-setex" class="headerlink" title="1.13 setex"></a>1.13 setex</h4><blockquote><p>设置带过期时间的key-value，过期时间是秒</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setex key expire value</span><br><span class="line"></span><br><span class="line"><span class="comment"># expire 过期时间，单位是秒</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212234925823.png" class="" title="image-20240212234925823"><h4 id="1-14-getset"><a href="#1-14-getset" class="headerlink" title="1.14 getset"></a>1.14 getset</h4><blockquote><p>以新换旧，设置新值且获得旧值</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240212235140920.png" class="" title="image-20240212235140920"><h3 id="2、Hash类型"><a href="#2、Hash类型" class="headerlink" title="2、Hash类型"></a>2、Hash类型</h3><blockquote><ul><li><p>Hash类型是一个键值对集合</p></li><li><p>Hash类型时一个string类型的key-value的映射表，特别适合用来存储对象，对比到python的字典</p><ul><li>比如存储用户信息，用用户UID作为key，value为用户的属性，比如姓名、年龄、性别等</li></ul></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hash的存储格式形似python的字典，如下</span></span><br><span class="line">user1 = &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># key是user1</span></span><br><span class="line"><span class="comment"># value是&#123;&quot;id&quot;:1, &quot;name&quot;:&quot;sam&quot;, &quot;age&quot;:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-hset"><a href="#2-1-hset" class="headerlink" title="2.1 hset"></a>2.1 hset</h4><blockquote><p>设置hash值</p><p>针对一个对象多个属性字段，需要挨个设置，不能批量设置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hset key field1 value </span><br><span class="line">hset key field2 value</span><br><span class="line">hset key field3 value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213212012024.png" class="" title="image-20240213212012024"><blockquote><p>给同一个名为user1的key分别设置<code>name</code>、<code>age</code>、<code>sex</code>属性</p></blockquote><h4 id="2-2-hget"><a href="#2-2-hget" class="headerlink" title="2.2 hget"></a>2.2 hget</h4><blockquote><p>获取hash的key对应的属性值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hget key field</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213212131777.png" class="" title="image-20240213212131777"><h4 id="2-3-hmset"><a href="#2-3-hmset" class="headerlink" title="2.3 hmset"></a>2.3 hmset</h4><blockquote><ul><li>因为hset是对同一个key，需要多次设置不同的属性，适用于属性字段比较少的情况</li><li>当属性字段值非常多时，可以用hmset一次设置多个字段值</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset key field1 value1 field2 value2 field3 value3</span><br></pre></td></tr></table></figure><h4 id="2-4-hexists"><a href="#2-4-hexists" class="headerlink" title="2.4 hexists"></a>2.4 hexists</h4><blockquote><p>判断在一个key中，某个field字段是否存在</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213212502992.png" class="" title="image-20240213212502992"><blockquote><ul><li>user1中存在age这个字段，返回值为1</li><li>user1中不存在ages这个字段，返回值为0</li></ul></blockquote><h4 id="2-5-hkeys-x2F-hvals"><a href="#2-5-hkeys-x2F-hvals" class="headerlink" title="2.5 hkeys&#x2F;hvals"></a>2.5 hkeys&#x2F;hvals</h4><blockquote><p>Hkeys：列出key对应的所有的field属性</p></blockquote><blockquote><p>hvals：列出key对应的所有的value属性</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213212707754.png" class="" title="image-20240213212707754"><h4 id="2-6-hsetnx"><a href="#2-6-hsetnx" class="headerlink" title="2.6 hsetnx"></a>2.6 hsetnx</h4><blockquote><p>将key中的field属性的值设置为value，当且仅当field不存在时才可以设置成功，当field存在，则设置不成功</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213212844293.png" class="" title="image-20240213212844293"><blockquote><ul><li>可以看到用hsetnx对user2设置name属性<ul><li>第一次设置为bob，返回值为1表示成功</li><li>第二次设置为bob_new，返回值为0表示失败</li></ul></li></ul></blockquote><h3 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h3><blockquote><p>Redis列表是简单的<code>字符串列表</code>，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或者尾部（右边）</p></blockquote><blockquote><p>Redis列表底层是双向链表，对两端的操作性能很高，但是通过索引下标操作列表中间的元素会性能较差</p></blockquote><blockquote><p>可以类比为python的list</p></blockquote><h4 id="3-1-lpush"><a href="#3-1-lpush" class="headerlink" title="3.1 lpush"></a>3.1 lpush</h4><blockquote><p>lpush：从左边插入一个值或多个值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 value2 value3 ...</span><br></pre></td></tr></table></figure> <img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213214220619.png" class="" title="image-20240213214220619"><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213214205846.png" class="" title="image-20240213214205846"><blockquote><p>lpush是向左添加元素，也就是给列表的头部(左边)一直添加元素，并且可以添加相同重复的值</p></blockquote><h4 id="3-2-rpush"><a href="#3-2-rpush" class="headerlink" title="3.2 rpush"></a>3.2 rpush</h4><blockquote><p>rpush：从右边插入一个值或多个值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush key value1 value2 value3 ...</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213214728621.png" class="" title="image-20240213214728621"><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213214641878.png" class="" title="image-20240213214641878"><blockquote><p>rpush给右边一直插入值，所以是从左到右添加值</p></blockquote><h4 id="3-3-lpop-x2F-rpop"><a href="#3-3-lpop-x2F-rpop" class="headerlink" title="3.3 lpop&#x2F;rpop"></a>3.3 lpop&#x2F;rpop</h4><blockquote><p>lpop：从左边吐出一个值</p><p>rpop：从右边吐出一个值</p><p>当把列表中值都取完以后，对应的key也都不存在了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从左边吐出一个值</span></span><br><span class="line">lpop key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从右边吐出一个值</span></span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213214931867.png" class="" title="image-20240213214931867"><h4 id="3-4-rpoplpush"><a href="#3-4-rpoplpush" class="headerlink" title="3.4 rpoplpush"></a>3.4 rpoplpush</h4><blockquote><p>表示从key1列表右边吐出一个值，插入到key2列表左边</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpoplpush key1 key2</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213215506141.png" class="" title="image-20240213215506141"><blockquote><ul><li>user1、user2列表中用<code>rpush</code>插入三个值</li><li>rpoplpush user1 user2<ul><li>这条命令返回值为user1的最右边的值即bob3</li><li>并且插入到user2的最左边</li></ul></li><li>分别查看user1、user2列表中元素<ul><li>user1列表最右边少了bob3</li><li>user2列表最左边多了bob3</li></ul></li></ul></blockquote><h4 id="3-5-lrange"><a href="#3-5-lrange" class="headerlink" title="3.5 lrange"></a>3.5 lrange</h4><blockquote><p>查看列表所有元素，需要跟上索引</p><ul><li><p>0表示左边第一个</p></li><li><p>-1表示右边第一个，也就是列表最后一个</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange key 0 -1</span><br></pre></td></tr></table></figure><h4 id="3-6-lindex"><a href="#3-6-lindex" class="headerlink" title="3.6 lindex"></a>3.6 lindex</h4><blockquote><p>根据索引下标获取元素，索引从0开始</p><p>当索引不存在时，值为空</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213220218467.png" class="" title="image-20240213220218467"><h4 id="3-7-llen"><a href="#3-7-llen" class="headerlink" title="3.7 llen"></a>3.7 llen</h4><blockquote><p>获取列表长度</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen key</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213220248642.png" class="" title="image-20240213220248642"><h4 id="3-8-lset"><a href="#3-8-lset" class="headerlink" title="3.8 lset"></a>3.8 lset</h4><blockquote><p>将列表中指定索引的值换为新值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lset key index value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213220500252.png" class="" title="image-20240213220500252"><h3 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h3><blockquote><p>集合</p></blockquote><h3 id="5、zset"><a href="#5、zset" class="headerlink" title="5、zset"></a>5、zset</h3><blockquote><ul><li>zset是有序集合，是一个没有重复元素的字符串集合</li><li>有序集合的每个成员都关联了一个评分，评分主要用来从最低分到最高分方式排序集合中的成员<ul><li>集合中的成员是唯一的，但是评分可以重复，也就是说不同成员的评分可能会一样</li></ul></li><li>因为元素是有序的，所以根据评分很快获取一个范围的元素</li><li>反问有序集合的中间元素非常快，所以可以用有序集合作为一个没有重复成员的智能列表</li></ul></blockquote><h4 id="5-1-zadd"><a href="#5-1-zadd" class="headerlink" title="5.1 zadd"></a>5.1 zadd</h4><blockquote><p>将一个或多个元素及其score值加入到有序集合key当中</p><p>默认是根据score值从小到大排序</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 value1 score2 value2 ...</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213221648791.png" class="" title="image-20240213221648791"><blockquote><p>设置key为：student_math</p><p>分数和值为：</p><ul><li>80 bob</li><li>79 sam</li><li>85 alice</li><li>90 puff</li></ul><p>使用zrange查看student_math所有值</p><ul><li>值为：sam、bob、alice、puff</li><li>所以可以看到根据score排序从小排序</li></ul></blockquote><h4 id="5-2-zrange"><a href="#5-2-zrange" class="headerlink" title="5.2 zrange"></a>5.2 zrange</h4><blockquote><p>返回有序集合key中，下标在start、stop之间的元素</p><p>start为0表示有序集合第一个元素</p><p>Stop为-1表示有序集合最后一个元素</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange key start stop</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213222124483.png" class="" title="image-20240213222124483"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># withscores 表示将scores和值一起返回</span></span><br><span class="line">zrange key start stop withscores</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213222244674.png" class="" title="image-20240213222244674"><blockquote><p>可以更清晰看到值和值对应的score一起返回了</p></blockquote><h4 id="5-3-zrangebyscore"><a href="#5-3-zrangebyscore" class="headerlink" title="5.3 zrangebyscore"></a>5.3 zrangebyscore</h4><blockquote><p><strong>按分数的范围取值</strong></p><ul><li><p>返回有序集合中，所有score值介于min和max之间（包含等于min或max）的值</p></li><li><p>有序集合成员按照score值从小到大排序</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [withscores] [<span class="built_in">limit</span> offset count] </span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213222655346.png" class="" title="image-20240213222655346"><blockquote><p>可以看到返回了80到85之间的值和值对应的分数</p></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213222824435.png" class="" title="image-20240213222824435"><blockquote><p>使用<code>limit offset count</code></p><ul><li>offset：表示偏移量，zrangebyscore筛选出一个范围后，从第几个值开始取值<ul><li>0表示从偏移量为0，要从第一个值左边开始取值，count为1时，表示只取最左边第一个值</li></ul></li><li>count：表示从偏移量开始取几个值</li></ul></blockquote><h4 id="5-4-zrevrangebyscore"><a href="#5-4-zrevrangebyscore" class="headerlink" title="5.4 zrevrangebyscore"></a>5.4 zrevrangebyscore</h4><blockquote><p>命令作用同zrangebyscore，只不过是排序为从大到小</p><p>并且max位置在min前面</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrangebyscore key max min [withscores] [<span class="built_in">limit</span> offset count] </span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213223341015.png" class="" title="image-20240213223341015"><h4 id="5-5-zincrby"><a href="#5-5-zincrby" class="headerlink" title="5.5 zincrby"></a>5.5 zincrby</h4><blockquote><p>为集合中指定值的score加上增量（增量可以是任意数字）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby key incrment value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213224137612.png" class="" title="image-20240213224137612"><h4 id="5-6-zrem"><a href="#5-6-zrem" class="headerlink" title="5.6 zrem"></a>5.6 zrem</h4><blockquote><p>删除该集合下指定的值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213224343616.png" class="" title="image-20240213224343616"><h4 id="5-7-zcount"><a href="#5-7-zcount" class="headerlink" title="5.7 zcount"></a>5.7 zcount</h4><blockquote><p>统计该集合，分数区间内的元素个数</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zcount key min max</span><br><span class="line"></span><br><span class="line"><span class="comment"># min是区间最小分数</span></span><br><span class="line"><span class="comment"># max是区间最大分数</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213232038008.png" class="" title="image-20240213232038008"><h4 id="5-8-zrank"><a href="#5-8-zrank" class="headerlink" title="5.8 zrank"></a>5.8 zrank</h4><blockquote><p>返回该值在集合中的排名，默认从0开始</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrank key value</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240213232421849.png" class="" title="image-20240213232421849"><blockquote><p>从上图可看到，使用zrank查询student_math中puff值的排名</p></blockquote><h3 id="6、发布订阅"><a href="#6、发布订阅" class="headerlink" title="6、发布订阅"></a>6、发布订阅</h3><blockquote><p>redis发布订阅是一种消息通信模式</p><ul><li><p>类似于现在的B站用户（订阅者）的关注喜欢的up主（消息生产者），up主有新作品关注的用户的用户就会收到消息</p></li><li><p>发送者发送消息</p></li><li><p>订阅者接收消息</p></li><li><p>redis客户端可以订阅任意数量的频道</p></li></ul></blockquote><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240214001452435.png" class="" title="image-20240214001452435"><h4 id="6-1-给channel发送消息"><a href="#6-1-给channel发送消息" class="headerlink" title="6.1 给channel发送消息"></a>6.1 给channel发送消息</h4><blockquote><p>打开另外一个客户端，给channel发送消息，是消息生产者</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">publish channel message</span><br><span class="line"></span><br><span class="line"><span class="comment"># channel是channel的名称</span></span><br><span class="line"><span class="comment"># message是要给channel发送的消息，字符串类型</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240214002627461.png" class="" title="image-20240214002627461"><blockquote><p>可以看到，消息发送后，返回了2，表示订阅者数量，刚好中间和右边就是2个订阅者</p></blockquote><h4 id="6-2-订阅channel"><a href="#6-2-订阅channel" class="headerlink" title="6.2 订阅channel"></a>6.2 订阅channel</h4><blockquote><p>打开一个redis的客户端订阅channel，是订阅者</p><p>注意发布的消息没有持久化，如果在订阅的客户端收不到消息，那么只能收到订阅后发布的新消息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subscribe channel</span><br><span class="line"></span><br><span class="line"><span class="comment"># channel是channel的名称</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/redis%E7%AC%94%E8%AE%B0/redis%E7%AC%94%E8%AE%B0/image-20240214002851269.png" class="" title="image-20240214002851269"><h2 id="四、redis的常见问题"><a href="#四、redis的常见问题" class="headerlink" title="四、redis的常见问题"></a>四、redis的常见问题</h2><p>1、</p>]]></content>
      
      
      <categories>
          
          <category> Redis笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、mysql安装"><a href="#一、mysql安装" class="headerlink" title="一、mysql安装"></a>一、mysql安装</h2><blockquote><p>推荐使用Docker安装mysql</p><p><a href="https://registry.hub.docker.com/_/mysql">https://registry.hub.docker.com/_&#x2F;mysql</a></p><p>黑马程序员</p><p><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?spm_id_from=333.999.0.0&vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1Kr4y1i7ru?spm_id_from&#x3D;333.999.0.0&amp;vd_source&#x3D;501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="1、拉取mysql镜像"><a href="#1、拉取mysql镜像" class="headerlink" title="1、拉取mysql镜像"></a>1、拉取mysql镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取最新的mysql镜像</span></span><br><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h3 id="2、创建mysql容器"><a href="#2、创建mysql容器" class="headerlink" title="2、创建mysql容器"></a>2、创建mysql容器</h3><h4 id="1-1-设置国内时区"><a href="#1-1-设置国内时区" class="headerlink" title="1.1 设置国内时区"></a>1.1 设置国内时区</h4><blockquote><p>时区参考：<a href="https://blog.csdn.net/w8y56f/article/details/115445442">https://blog.csdn.net/w8y56f/article/details/115445442</a></p></blockquote><blockquote><p>因为mysql镜像里的时区默认是UTC时区，这样和国内就差了8个小时，所以为了后面创建了mysql容器能够获取时间和国内一致，所以需要提前修改时区</p><p>基于当前的mysql镜像创建一个支持国内时区的镜像，然后基于创建的镜像启动容器，就支持国内时区了</p></blockquote><h5 id="1-1-1-新镜像的DockerFile"><a href="#1-1-1-新镜像的DockerFile" class="headerlink" title="1.1.1 新镜像的DockerFile"></a>1.1.1 新镜像的DockerFile</h5><blockquote><p>下面镜像的DockerFile用来创建支持国内的时间的镜像，需要提前拉取<code>mysql:latest</code>镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Desc: 用来构建自定义的Docker镜像</span></span><br><span class="line"><span class="comment"># Author: 刘阳</span></span><br><span class="line"><span class="comment"># Time: 2021-04-21 17:59:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础镜像，来自官方的centos7版本，默认的centos镜像是centos8版本</span></span><br><span class="line">FROM mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础描述信息</span></span><br><span class="line">LABEL version=<span class="string">&quot;V1.0&quot;</span></span><br><span class="line">LABEL author=<span class="string">&quot;刘阳&quot;</span></span><br><span class="line">LABEL description=<span class="string">&quot;基础镜像来自官方mysql，设置时区为中国，然后编码方式为utf8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">WORKDIR /root/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定执行命令的用户</span></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区变量</span></span><br><span class="line">ENV TZ=<span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-1-2-用DockerFile创建镜像"><a href="#1-1-2-用DockerFile创建镜像" class="headerlink" title="1.1.2 用DockerFile创建镜像"></a>1.1.2 用DockerFile创建镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤一：创建一个目录，将上面的DockerFile内容复制进去，并且文件命名为Dockerfile</span></span><br><span class="line"><span class="comment"># 步骤二：当上面存放Dockerfile的文件目录下执行下面命令，后面的.(点)不能忘了，因为是用来关系上下文的</span></span><br><span class="line">docker build -t mysqlzh:v1.0 .</span><br><span class="line"><span class="comment"># 构建完成后查看镜像就有了支持国内时区的mysql镜像</span></span><br><span class="line">docker image <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220711133734301.png" class="" title="image-20220711133734301.png"><blockquote><p>到这里镜像创建完毕，就可以使用这个镜像开始创建<code>mysql</code>容器了</p></blockquote><h4 id="1-2-创建Mysql容器"><a href="#1-2-创建Mysql容器" class="headerlink" title="1.2 创建Mysql容器"></a>1.2 创建Mysql容器</h4><blockquote><p>使用新的<code>mysqlzh</code>镜像来创建<code>mysql</code>容器</p><p>字符序解释看这里：<a href="https://www.cnblogs.com/lxyit/p/9359325.html">https://www.cnblogs.com/lxyit/p/9359325.html</a></p><p>docker的mysql容器配置文件映射：<a href="https://www.jb51.net/server/321611iv8.htm">https://www.jb51.net/server/321611iv8.htm</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run  -dit -u root --name mysql -p 3306:3306 -v /home/ly/docker_volumn/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456  mysqlzh:v1.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name mysql 表示创建的容器名字是mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u root 表示容器的用户是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 3306:3306 表示将容器的3306映射到宿主机的3306端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MYSQL_ROOT_PASSWORD后面跟的是数据库用户root的登录密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v /home/ly/docker_volumn/mysql:/var/lib/mysql 表示容器中数据存储的位置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面两个参数必须放到镜像名后面，如果创建容器时出现3306端口占用，需要先关掉端口被占用的程序，再来创建容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--character-set-server=utf8mb4 表示设置mysql字符集支持是utf-8编码，可以支持中文</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--collation-server=utf8mb4_unicode_ci 表示字符序（collation），定义了字符的比较规则</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220711134149094.png" class="" title="image-20220711134149094.png"><blockquote><p>从上图的Image的ID可以看出和使用DockerFile创建的镜像是同一个</p></blockquote><h4 id="1-3-mysql容器数据持久化"><a href="#1-3-mysql容器数据持久化" class="headerlink" title="1.3 mysql容器数据持久化"></a>1.3 mysql容器数据持久化</h4><blockquote><p>参考：<a href="https://www.jianshu.com/p/530d00f97cbf">https://www.jianshu.com/p/530d00f97cbf</a></p><p>持久化的作用：</p><ul><li>当没有mysql容器持久化，当mysql容器被删除或者故障时，对应的mysql里的数据也会随着mysql容器被删除</li><li>当mysql容器被删除或者故障时，可以快速启动另一个mysql容器，只需要将持久化的数据挂载到新的mysql容器上，就可以快速使用mysql</li></ul></blockquote><blockquote><p>mysql容器内的默认数据存储位置：</p><ul><li>mysql容器将容器内的<code>/var/lib/mysql</code>路径作为默认的volume挂载</li></ul></blockquote><blockquote><p>如何持久化？</p><ul><li>使用docker的逻辑卷功能，将宿主机的一个存储mysql数据的文件夹与容器内的<code>/var/lib/mysql</code>路径作为volume挂载</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -dit -u root --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456  mysqlzh:v1.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci </span><br></pre></td></tr></table></figure><h3 id="3、docker搭建mysql主从复制"><a href="#3、docker搭建mysql主从复制" class="headerlink" title="3、docker搭建mysql主从复制"></a>3、docker搭建mysql主从复制</h3><h4 id="1-1-搭建主mysql"><a href="#1-1-搭建主mysql" class="headerlink" title="1.1 搭建主mysql"></a>1.1 搭建主mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -dit -u root --name master_mysql --net mysql-net -p 3308:3306 -v ~/mysql_docker/master_sql/conf:/etc/mysql/conf.d -v ~/mysql_docker/master_sql/logs:/logs -v ~/mysql_docker/master_sql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456  mysqlzh:v1.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h4 id="1-2-搭建从mysql"><a href="#1-2-搭建从mysql" class="headerlink" title="1.2 搭建从mysql"></a>1.2 搭建从mysql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -dit -u root --name slave_mysql --net mysql-net -p 3309:3306 -v ~/mysql_docker/slave_sql/conf:/etc/mysql/conf.d -v ~/mysql_docker/slave_sql/logs:/logs -v ~/mysql_docker/slave_sql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456  mysqlzh:v1.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h3 id="4、命令行连接mysql"><a href="#4、命令行连接mysql" class="headerlink" title="4、命令行连接mysql"></a>4、命令行连接mysql</h3><h4 id="1-1-登录mysql"><a href="#1-1-登录mysql" class="headerlink" title="1.1 登录mysql"></a>1.1 登录mysql</h4><blockquote><p>可以使用<code>mycli</code>这个连接工具，安装以来python环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入创建mysql容器时设置的root密码，就可以登录mysql中了</span></span><br><span class="line">mycli -h127.0.0.1 -uroot -p</span><br></pre></td></tr></table></figure><h4 id="1-2-查看时区"><a href="#1-2-查看时区" class="headerlink" title="1.2 查看时区"></a>1.2 查看时区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%time_zone%&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220711141248016.png" class="" title="image-20220711141248016"><blockquote><p>可以看到时区：</p><ul><li>system_time_zone是CST<ul><li>CST表示China Standard Time UT+8:00 中国标准时间</li></ul></li><li>time_zone 的值是SYSTEM<ul><li>表示跟system_time_zone取值一样，安装MySQL后默认就是SYSTEM，就是新镜像里设置的Asia&#x2F;Shanghai时间</li></ul></li></ul></blockquote><h4 id="1-3-查看字符集"><a href="#1-3-查看字符集" class="headerlink" title="1.3 查看字符集"></a>1.3 查看字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%character%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220711140015891.png" class="" title="image-20220711140015891.png"><blockquote><p>可以看到数据库都是utf8编码</p></blockquote><h3 id="5、SQL语法分类"><a href="#5、SQL语法分类" class="headerlink" title="5、SQL语法分类"></a>5、SQL语法分类</h3><table><thead><tr><th>分类</th><th>英文名称</th><th>说明</th></tr></thead><tbody><tr><td></td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象，比如数据库、表、字段等</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据库操作语言，对数据库表进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据库查询语言，对数据库表进行查询</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据库控制语言，对数据库进行创建用户，分配访问权限</td></tr></tbody></table><h2 id="二、mysql基础"><a href="#二、mysql基础" class="headerlink" title="二、mysql基础"></a>二、mysql基础</h2><blockquote><p>老男孩 老郭</p><p><a href="https://www.bilibili.com/video/BV1bJ411k7ET?p=27&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1bJ411k7ET?p=27&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><blockquote><p>黑马程序员：</p><p><a href="https://www.bilibili.com/video/BV1vi4y137PN/?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1vi4y137PN/?spm_id_from=333.999.0.0&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p><p><a href="https://www.bilibili.com/video/BV1M541147Cn?p=9&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1M541147Cn?p=9&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p><p><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=4&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=4&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p><p>数据库调优</p><p><a href="https://www.bilibili.com/video/BV1zJ411M7TB?p=4&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c">https://www.bilibili.com/video/BV1zJ411M7TB?p=4&amp;vd_source=501c3f3a75e1512aa5b62c6a10d1550c</a></p></blockquote><h3 id="1、数据库操作-DDL"><a href="#1、数据库操作-DDL" class="headerlink" title="1、数据库操作(DDL)"></a>1、数据库操作(DDL)</h3><h4 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1.1 创建数据库"></a>1.1 创建数据库</h4><blockquote><ul><li>default character set utf8：<ul><li>数据库字符集，设置数据库的默认编码为utf8，utf8中间不要”-“</li></ul></li><li>default collate utf8_general_ci:<ul><li>数据库校对规则，ci是case insensitive的缩写，意思是大小写不敏感；</li><li>相对的是cs，即case sensitive，大小写敏感；</li></ul></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:(none)&gt; create database goods default utf8 collate utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected</span><br><span class="line">Time: 0.062s</span><br></pre></td></tr></table></figure><h4 id="1-2-查看数据库"><a href="#1-2-查看数据库" class="headerlink" title="1.2 查看数据库"></a>1.2 查看数据库</h4><blockquote><p>查看数据库：show databases;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:(none)&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+   |</span><br><span class="line">| information_schema |</span><br></pre></td></tr></table></figure><h4 id="1-2-使用数据库"><a href="#1-2-使用数据库" class="headerlink" title="1.2 使用数据库"></a>1.2 使用数据库</h4><blockquote><p>使用数据库：use 数据库名称</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:(none)&gt; use goods;</span><br><span class="line">You are now connected to database &quot;goods&quot; as user &quot;root&quot;</span><br><span class="line">Time: 0.007s</span><br></pre></td></tr></table></figure><h4 id="1-4-删除数据库"><a href="#1-4-删除数据库" class="headerlink" title="1.4 删除数据库"></a>1.4 删除数据库</h4><blockquote><p>删除数据库：drop database 数据库名称</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:goods&gt; drop database goods;</span><br><span class="line">You&#x27;re about to run a destructive command.</span><br><span class="line">Do you want to proceed? (y/n): y</span><br><span class="line">Your call!</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.124s</span><br></pre></td></tr></table></figure><h3 id="2、数据表的操作"><a href="#2、数据表的操作" class="headerlink" title="2、数据表的操作"></a>2、数据表的操作</h3><h4 id="1-1-创建表"><a href="#1-1-创建表" class="headerlink" title="1.1 创建表"></a>1.1 创建表</h4><blockquote><p>创建表需要使用： <code>create table 表名</code>语句</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名 类型,</span><br><span class="line">    列名 类型,</span><br><span class="line">    列名 类型</span><br><span class="line">) default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-1-建表语句注释"><a href="#1-1-1-建表语句注释" class="headerlink" title="1.1.1 建表语句注释"></a>1.1.1 建表语句注释</h5><blockquote><p>在建表语句中，两个<code>-</code>表示注释</p></blockquote><h5 id="1-1-2-not-null"><a href="#1-1-2-not-null" class="headerlink" title="1.1.2 not null"></a>1.1.2 not null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- mysql中 not null 表示不允许为空</span><br><span class="line">create table m1(</span><br><span class="line">name not null -- 表示name字段不可以为空</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-1-null"><a href="#1-1-1-null" class="headerlink" title="1.1.1 null"></a>1.1.1 null</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- mysql中null表示允许为空</span><br><span class="line">create table m1(</span><br><span class="line">name null -- 表示name字段可以为空</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-4-default"><a href="#1-1-4-default" class="headerlink" title="1.1.4 default"></a>1.1.4 default</h5><blockquote><p>插入数据时，如果没有给该字段设置值，该字段的值就是设置的默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table m1(</span><br><span class="line">name default sam -- 表示name字段默认值是sam</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-5-primary-key"><a href="#1-1-5-primary-key" class="headerlink" title="1.1.5 primary key"></a>1.1.5 primary key</h5><blockquote><p>主键的意思，不允许为空，不可以重复</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table m1(</span><br><span class="line">id int primary key -- id是主键</span><br><span class="line">    name default sam -- 表示name字段默认值是sam</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-6-auto-incremnet"><a href="#1-1-6-auto-incremnet" class="headerlink" title="1.1.6 auto_incremnet"></a>1.1.6 auto_incremnet</h5><blockquote><p>表示该字段的值会随着插入数据自己进行自增</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table m1(</span><br><span class="line">id int primary key auto_increment -- id是主键且自增</span><br><span class="line">    name default sam -- 表示name字段默认值是sam</span><br><span class="line">)default charset=utf8; </span><br></pre></td></tr></table></figure><h4 id="1-2-查看所有表"><a href="#1-2-查看所有表" class="headerlink" title="1.2 查看所有表"></a>1.2 查看所有表</h4><blockquote><p>查看表需要经过两步</p><ul><li>第一步：进入数据库 use 数据库名称</li><li>第二步：查看数据库 show tables</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><h4 id="1-3-删除表"><a href="#1-3-删除表" class="headerlink" title="1.3 删除表"></a>1.3 删除表</h4><h5 id="1-1-1-drop"><a href="#1-1-1-drop" class="headerlink" title="1.1.1 drop"></a>1.1.1 drop</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 会将表和表里的数据全部删除</span><br><span class="line">drop table 表名</span><br></pre></td></tr></table></figure><h5 id="1-1-2-delete"><a href="#1-1-2-delete" class="headerlink" title="1.1.2 delete"></a>1.1.2 delete</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 会将表里的数据全部删除，表仍然留着</span><br><span class="line">delete from 表名</span><br></pre></td></tr></table></figure><h5 id="1-1-3-truncate"><a href="#1-1-3-truncate" class="headerlink" title="1.1.3 truncate"></a>1.1.3 truncate</h5><blockquote><p>速度很快，不可回滚</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 会将表里的数据全部删除，表仍然留着</span><br><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><h4 id="1-4-修改表"><a href="#1-4-修改表" class="headerlink" title="1.4 修改表"></a>1.4 修改表</h4><h5 id="1-1-1-添加列"><a href="#1-1-1-添加列" class="headerlink" title="1.1.1 添加列"></a>1.1.1 添加列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 给表增加字段</span><br><span class="line">alter table 表名 add 列名 类型;</span><br><span class="line"></span><br><span class="line">-- 给表增加字段并设置默认值</span><br><span class="line">alter table 表名 add 列名 类型 default 默认值;</span><br><span class="line"></span><br><span class="line">-- 给表增加字段并设置默认值，且该列不能为空</span><br><span class="line">alter table 表名 add 列名 类型 not null default 默认值;</span><br><span class="line"></span><br><span class="line">-- 给表添加列指定位置</span><br><span class="line">-- 指定在第一个位置</span><br><span class="line">alter table 表名 add 列名 类型 default 默认值 first;</span><br><span class="line"></span><br><span class="line">-- 指定在某个字段后面: existing_column表示将新添加的列放在某个列后面，并且某个列必须存在</span><br><span class="line">alter table 表名 add 列名 类型 default 默认值 after existing_column; </span><br></pre></td></tr></table></figure><h5 id="1-1-2-删除列"><a href="#1-1-2-删除列" class="headerlink" title="1.1.2 删除列"></a>1.1.2 删除列</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop column 列名;</span><br></pre></td></tr></table></figure><h5 id="1-1-3-修改列的类型"><a href="#1-1-3-修改列的类型" class="headerlink" title="1.1.3 修改列的类型"></a>1.1.3 修改列的类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify column 列名 类型</span><br></pre></td></tr></table></figure><h5 id="1-1-4-修改列的类型和名称"><a href="#1-1-4-修改列的类型和名称" class="headerlink" title="1.1.4 修改列的类型和名称"></a>1.1.4 修改列的类型和名称</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 原列名 新列名 新类型;</span><br><span class="line"></span><br><span class="line">-- 下面语句时将tb1的原name列修改为username，并且给username设置了类型为varchar(32)</span><br><span class="line">alter table tb1 change name username varchar(32);</span><br></pre></td></tr></table></figure><h5 id="1-1-5-修改列的默认值"><a href="#1-1-5-修改列的默认值" class="headerlink" title="1.1.5 修改列的默认值"></a>1.1.5 修改列的默认值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 alter 列名 set default 新默认值;</span><br></pre></td></tr></table></figure><h5 id="1-1-6-删除列的默认值"><a href="#1-1-6-删除列的默认值" class="headerlink" title="1.1.6 删除列的默认值"></a>1.1.6 删除列的默认值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 alter 列名 drop default;</span><br></pre></td></tr></table></figure><h4 id="2-5-表的字段类型"><a href="#2-5-表的字段类型" class="headerlink" title="2.5 表的字段类型"></a>2.5 表的字段类型</h4><blockquote><p>下面列出来的是经常用到的建表语句字段</p></blockquote><h5 id="1-1-1-int"><a href="#1-1-1-int" class="headerlink" title="1.1.1 int"></a>1.1.1 int</h5><blockquote><p>int表示整型</p><ul><li>int 表示有符号，取值范围<code>-2147483648 ~ 2147483648</code><ul><li>有符号表示可以为<code>负值</code></li></ul></li><li>int unsigned 表示无符号，取值范围<code>0 ~ 4294967295</code><ul><li>无符号表示必须是正整数，从0开始计数</li></ul></li><li>int(5)zerofill 仅用于显示，当不满足5位时，给左边补0<ul><li>比如02不满足五位，就会显示为：00002</li></ul></li><li>需要注意，当给字段设置类型后，超过了类型的范围，就会报<code>out of range value for column 列名</code>的错误</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table m1(</span><br><span class="line">id int primary key  -- 表示id是一个int整数</span><br><span class="line">    name default sam</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-2-tinyint"><a href="#1-1-2-tinyint" class="headerlink" title="1.1.2 tinyint"></a>1.1.2 tinyint</h5><blockquote><p>用来表示整型，不能范围比较小</p><ul><li>tinyint 表示有符号，取值范围<code>-128 ~ 127</code></li><li>tinyint unsigned 表示无符号，取值范围<code>0 ~ 255</code></li><li>tinyint(5)zerofill 和int使用一样</li></ul></blockquote><h5 id="1-1-3-bigint"><a href="#1-1-3-bigint" class="headerlink" title="1.1.3 bigint"></a>1.1.3 bigint</h5><blockquote><p>用来表示整型，范围更大</p><ul><li>bigint 表示有符号，取值范围<code>-922337203685477808 ~ 922337203685477808</code></li><li>bigint unsigned 表示无符号，取值范围<code>0 ~ 18446744073709551615</code></li><li>bigint(5)zerofill 和int使用一样</li></ul></blockquote><h5 id="1-1-4-decimal"><a href="#1-1-4-decimal" class="headerlink" title="1.1.4 decimal"></a>1.1.4 decimal</h5><blockquote><p>用来表示小数，准确的小数，decimal需要写两个值，第一个是数字总个数(总个数&#x3D;整数部分数字个数+小数部分数字个数)，第二个是小数点后的个数</p><ul><li><p>第一个数最大值是65</p><ul><li>如果有符号，不算进去</li></ul></li><li><p>第二个数最大值时30</p></li><li><p>如果插入数据时小数点的位数大于列的字段设置的值，那么对进行四舍五入</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table m1(</span><br><span class="line">id int primary key  -- 表示id是一个int整数</span><br><span class="line">    price decimal(4, 2) -- 4表示price最多接收的数字个数，2表示小数点后的位数</span><br><span class="line">)default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-6-char"><a href="#1-1-6-char" class="headerlink" title="1.1.6 char"></a>1.1.6 char</h5><blockquote><ul><li>定长字符串，<code>char(m)</code>表示字符串的长度，最多可以容纳<code>255</code>个字符<ul><li>字符可以是一个英文字母，可以是一个汉字，只要满足设置的<code>m</code>长度，都可以被存进去</li></ul></li><li>定长理解<ul><li>存储固定字符长度的内容</li><li>即使内容长度小于m，也会占用<code>m</code>个长度，不够会用空格来补齐，但是查询时，会将空白自动去除</li><li>如果超过了<code>m</code>的长度，就会报错</li></ul></li></ul></blockquote><h5 id="1-1-7-varchar"><a href="#1-1-7-varchar" class="headerlink" title="1.1.7 varchar"></a>1.1.7 varchar</h5><blockquote><ul><li>可变长字符串，<code>varchar(m)</code>表示字符串的长度，最多可以容纳<code>65535</code>个字符</li><li>变长理解<ul><li>插入的值长度小于m，会按照真实数据长度存储</li><li>如果超过了<code>m</code>设置的值，就会报错</li></ul></li><li>这里可以借助<code>length</code>函数查询字段所占用的字符长度</li></ul></blockquote><h5 id="1-1-8-text"><a href="#1-1-8-text" class="headerlink" title="1.1.8 text"></a>1.1.8 text</h5><blockquote><p>用来保存变长的大字符串</p><p>用来存储文章、新闻才会用到</p></blockquote><h5 id="1-1-9-datetime"><a href="#1-1-9-datetime" class="headerlink" title="1.1.9 datetime"></a>1.1.9 datetime</h5><blockquote><p>用来表示时间日期，存储和取出的时间不做任何转换</p><p>范围：1000-01-01 00:00:00 到 9999-12-31 23:59:59</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表示格式：YYYY-MM-DD HH:MM:SS</span><br><span class="line">比如： 2022-01-02 10:00:22</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:goods&gt; create table user(</span><br><span class="line">                         -&gt;  id int not null auto_increment primary key,</span><br><span class="line">                         -&gt;  create_time datetime,</span><br><span class="line">                         -&gt;  update_time timestamp) default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="1-1-10-timestamp"><a href="#1-1-10-timestamp" class="headerlink" title="1.1.10 timestamp"></a>1.1.10 timestamp</h5><blockquote><p>timestamp会把客户端时间插入的时间从当前时区转换为UTC时间进行存储，查询时又会将时间转换为客户端当前时区进行返回</p><ul><li>范围：1970-01-01 00:00:00 到 2037年</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL root@localhost:goods&gt; create table user(</span><br><span class="line">                         -&gt;  id int not null auto_increment primary key,</span><br><span class="line">                         -&gt;  create_time datetime,</span><br><span class="line">                         -&gt;  update_time timestamp) default charset=utf8;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220807214513402.png" class="" title="image-20220807214513402"><blockquote><p>从上面图中查看：</p><ul><li>create_time是datetime类型，update_time是timestamp类型</li></ul></blockquote><h5 id="1-1-11-current-timestamp"><a href="#1-1-11-current-timestamp" class="headerlink" title="1.1.11 current_timestamp"></a>1.1.11 current_timestamp</h5><blockquote><p>官网解释：<a href="https://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html">current_timestamp</a></p></blockquote><blockquote><p>下面来自官网的翻译</p><ul><li>TIMESTAMP或DATETIME列的定义可以为默认值和自动更新值都指定当前的时间戳，也可以为其中一个而不是另一个，或者两者都不指定。不同的列可以有不同的自动属性组合。下面的规则描述了这些可能性。</li><li>在DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP这两种情况下，该列的默认值是当前的时间戳，并自动更新为当前的时间戳。</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t1 (</span><br><span class="line">  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><ul><li>timestamp<ul><li>表示该字段在插入和更新时都不会自动设置为当前时间。</li></ul></li><li>timestamp default current_timestamp<ul><li>字段插入时如果没有时间则自动设置为当前时间，更新没有变化。</li></ul></li><li>timestamp on update current_timestamp<ul><li>字段插入不会自动设置，字段更新时没有指定时间则自动设置为当前时间。</li></ul></li><li>default current_timestamp on update current_timestamp (常用)<ul><li>插入和修改字段时如果没有指定时间则会自动设置为当前时间</li></ul></li></ul></blockquote><blockquote><p>current_timestamp使用示例</p><ul><li>create_time默认是当前时间</li><li>update_time默认也是当前时间，但是当数据表数据有修改时，该字段会更新为修改的时间</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user_address`;</span><br><span class="line">CREATE TABLE `user_address` (</span><br><span class="line">    `id` int not null auto_increment comment &#x27;主键Id&#x27;,</span><br><span class="line">    `user_id` int not null comment &#x27;用户uid&#x27;,</span><br><span class="line">    `name` varchar(32) not null comment &#x27;用户名&#x27;,</span><br><span class="line">    `city` varchar(64) not null comment &#x27;城市&#x27;,</span><br><span class="line">    `create_time` timestamp not null default current_timestamp comment &#x27;创建时间&#x27;,</span><br><span class="line">    `update_time` timestamp not null default current_timestamp on update current_timestamp comment &#x27;更新时间&#x27;,</span><br><span class="line">    primary key(`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="3-表数据的增删改"><a href="#3-表数据的增删改" class="headerlink" title="3 表数据的增删改"></a>3 表数据的增删改</h3><h4 id="1-1-新增数据"><a href="#1-1-新增数据" class="headerlink" title="1.1 新增数据"></a>1.1 新增数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 插入一条数据</span><br><span class="line">insert into 表名(列名,列名,列名) values(对应列的值,对应列的值,对应列的值);</span><br><span class="line"></span><br><span class="line">-- 插入多条数据</span><br><span class="line">insert into 表名(列名,列名,列名) values(对应列的值,对应列的值,对应列的值),(对应列的值,对应列的值,对应列的值);</span><br></pre></td></tr></table></figure><h4 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title=".2 删除数据"></a>.2 删除数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 清空所有表数据</span><br><span class="line">delete from 表名</span><br><span class="line"></span><br><span class="line">-- 按条件删除数据</span><br><span class="line">delete from 表名 where 条件</span><br></pre></td></tr></table></figure><h4 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title=".3 更新数据"></a>.3 更新数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 将表中该列全部修改为该值</span><br><span class="line">update 表名 set 列名=值;</span><br><span class="line"></span><br><span class="line">-- 修改多个列的值</span><br><span class="line">update 表名 set 列名=值,列名=值;</span><br><span class="line"></span><br><span class="line">-- 按照条件进行更新</span><br><span class="line">update 表名 set 列名=值 where 条件;</span><br></pre></td></tr></table></figure><h3 id="4、查询语句"><a href="#4、查询语句" class="headerlink" title="4、查询语句"></a>4、查询语句</h3><h4 id="1-1-查询所有数据"><a href="#1-1-查询所有数据" class="headerlink" title="1.1 查询所有数据"></a>1.1 查询所有数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表里所有数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="1-2-条件查询语句"><a href="#1-2-条件查询语句" class="headerlink" title="1.2 条件查询语句"></a>1.2 条件查询语句</h4><blockquote><p>使用where与条件列表，可以进行条件查询</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询符合条件的所有数据</span><br><span class="line">select * from 表名 where 条件;</span><br><span class="line"></span><br><span class="line">-- 查询符合条件的列数据</span><br><span class="line">select 列名 from 表名 where 条件;</span><br></pre></td></tr></table></figure><blockquote><p>下面是支持的条件</p></blockquote><table><thead><tr><th align="center">比较运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt; 或 !&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">between  … AND …</td><td align="center">在某个范围，并且包含最小值和最大值</td></tr><tr><td align="center">IN (…)</td><td align="center">在in之后的列表中任选一个</td></tr><tr><td align="center">LIKE 占位符</td><td align="center">模糊匹配：_匹配单个字符 %模糊匹配</td></tr><tr><td align="center">IS NULL</td><td align="center">是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>且，多个条件都需要匹配才会查询到哦数据true</td></tr><tr><td>OR 或 ||</td><td>或，多个条件只要有一个满足就会查到数据</td></tr><tr><td>NOT 或 !</td><td>非，不满足条件</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 有下面一张表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;用户年龄&#x27;</span>,</span><br><span class="line">  `uid` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户UID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;用户信息表&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>user_center</code>表中数据如下</p></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132051411.png" class="" title="image-20230417132051411"><h5 id="1-1-1-大于和大于等于查询"><a href="#1-1-1-大于和大于等于查询" class="headerlink" title="1.1.1 大于和大于等于查询"></a>1.1.1 大于和大于等于查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132200930.png" class="" title="image-20230417132200930"><h5 id="1-1-2-小于和小于等于查询"><a href="#1-1-2-小于和小于等于查询" class="headerlink" title="1.1.2 小于和小于等于查询"></a>1.1.2 小于和小于等于查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">&lt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132258609.png" class="" title="image-20230417132258609"><h5 id="1-1-3-等于和不等于查询"><a href="#1-1-3-等于和不等于查询" class="headerlink" title="1.1.3 等于和不等于查询"></a>1.1.3 等于和不等于查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132415653.png" class="" title="image-20230417132415653"><blockquote><p>不等于符号<code>&lt;&gt;</code>可以想象成<code>&lt;</code>和<code>&gt;</code>的组合，当这两个拼接在一起，也就是表示既要大于还要小于，那就是不等于的意思</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">!=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="operator">&lt;&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132533059.png" class="" title="image-20230417132533059"><h5 id="1-1-4-between范围查询"><a href="#1-1-4-between范围查询" class="headerlink" title="1.1.4 between范围查询"></a>1.1.4 between范围查询</h5><blockquote><p>使用between时，会将最小值和最大值的数据也查出来，比如下面的查询id在2和4之间的数据，可以看到将2和4这两条数据也查询出来了</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132749237.png" class="" title="image-20230417132749237"><h5 id="1-1-5-in查询数据"><a href="#1-1-5-in查询数据" class="headerlink" title="1.1.5 in查询数据"></a>1.1.5 in查询数据</h5><blockquote><p>in查询数据会匹配列表中的数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_center <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>);</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132938126.png" class="" title="image-20230417132938126"><h5 id="1-1-6-like模糊查询"><a href="#1-1-6-like模糊查询" class="headerlink" title="1.1.6 like模糊查询"></a>1.1.6 like模糊查询</h5><blockquote><p>单个字符匹配，只会匹配单个字符的数据，注意只是单个字符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> name <span class="keyword">like</span> &quot;王_&quot;;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> name <span class="keyword">like</span> &quot;_敏&quot;;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417133133060.png" class="" title="image-20230417133133060"><blockquote><ul><li><p>通配符：%，任意多个字符，包含0个字符</p></li><li><p>模糊匹配，匹配所有数据中都有<code>王</code>字的数据，该sql查询效率比较低，慎用</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> name <span class="keyword">like</span> &quot;%王%&quot;;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417133357950.png" class="" title="image-20230417133357950"><h5 id="1-1-7-is-null查询"><a href="#1-1-7-is-null查询" class="headerlink" title="1.1.7 is null查询"></a>1.1.7 is null查询</h5><blockquote><p>注意&#x3D;或&lt;&gt;(不等于)不能判断是不是null值</p><ul><li><p>下面这两个可以来判断null值</p><ul><li><p>is null</p></li><li><p>is not null</p></li></ul></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> name <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h5 id="1-1-8-逻辑运算-与"><a href="#1-1-8-逻辑运算-与" class="headerlink" title="1.1.8 逻辑运算-与"></a>1.1.8 逻辑运算-与</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> `id`<span class="operator">=</span><span class="number">3</span> <span class="keyword">and</span> `name`<span class="operator">=</span>&quot;王敏&quot;;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417133710924.png" class="" title="image-20230417133710924"><h5 id="1-1-9-逻辑运算-或"><a href="#1-1-9-逻辑运算-或" class="headerlink" title="1.1.9 逻辑运算-或"></a>1.1.9 逻辑运算-或</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> `id`<span class="operator">=</span><span class="number">3</span> <span class="keyword">or</span> `id`<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417133740500.png" class="" title="image-20230417133740500"><h5 id="1-1-10-逻辑运算-非"><a href="#1-1-10-逻辑运算-非" class="headerlink" title="1.1.10 逻辑运算-非"></a>1.1.10 逻辑运算-非</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> `id`<span class="operator">!=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417133816275.png" class="" title="image-20230417133816275"><h4 id="1-3-起别名"><a href="#1-3-起别名" class="headerlink" title="1.3 起别名"></a>1.3 起别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name as &quot;姓名&quot; from user_info;</span><br></pre></td></tr></table></figure><h4 id="1-4-去重"><a href="#1-4-去重" class="headerlink" title="1.4 去重"></a>1.4 去重</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct uid from user_info;</span><br></pre></td></tr></table></figure><h4 id="1-5-号作用"><a href="#1-5-号作用" class="headerlink" title="1.5 +号作用"></a>1.5 +号作用</h4><blockquote><p>在mysql中，+号只有一个功能，做运算符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 两个操作数都是数值型，则会进行加法运算</span><br><span class="line">select 100+90;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805100625454.png" class="" title="image-20240805100625454"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 其中一个数字为字符串型，则mysql会尝试将字符串型转为数值型，</span><br><span class="line">-- 转换成功，则字符串型数值会转为数值型，然后继续进行加法运算</span><br><span class="line">-- 转换失败，则字符串型数值会转为0，然后继续进行加法运算</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805100848140.png" class="" title="image-20240805100848140"><h4 id="1-6-字符串拼接"><a href="#1-6-字符串拼接" class="headerlink" title="1.6 字符串拼接"></a>1.6 字符串拼接</h4><blockquote><p>使用concat函数拼接2个或多个字符串</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&quot;alex &quot;, &quot;Luis&quot;);</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805120628170.png" class="" title="image-20240805120628170"><h4 id="1-7、排序查询order-by"><a href="#1-7、排序查询order-by" class="headerlink" title="1.7、排序查询order by"></a>1.7、排序查询order by</h4><blockquote><p>order by [field] ASC  正向排序</p><p>order by [field] DESC  逆向排序</p><p>filed支持多个字段、表达式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student order by student_id desc;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805161435868.png" class="" title="image-20240805161435868"><h3 id="5、函数调用"><a href="#5、函数调用" class="headerlink" title="5、函数调用"></a>5、函数调用</h3><blockquote><p>函数是MySql内置的函数，可以用来快速实现一些功能</p></blockquote><h4 id="1-1-单行函数"><a href="#1-1-单行函数" class="headerlink" title="1.1 单行函数"></a>1.1 单行函数</h4><blockquote><p>如concat、length、ifnull、upper、lower等</p><ul><li>length统计个数时，需要关注当前mysql的字符集是什么，<ul><li>当为utf-8时，一个中文词表示3个字节，一个英文字母表示1个字节</li><li>当为gbk时，一个中文词表示2个字节</li></ul></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(student_name) from student;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805162455180.png" class="" title="image-20240805162455180"><h4 id="1-2-聚合函数"><a href="#1-2-聚合函数" class="headerlink" title="1.2 聚合函数"></a>1.2 聚合函数</h4><blockquote><ul><li><p>聚合函数主要是对数据进行处理，主要是将一列数据作为一个整体进行纵向计算</p><ul><li><p>比如获取数据的条数、最大、最小、平均值等</p></li><li><p>聚合函数是作用于某一列数据的，也就是数据库表的字段</p></li><li><p>需要注意的是字段有null值是不参与运算的</p></li></ul></li></ul></blockquote><blockquote><p>同样的表和数据使用第四小节查询语句的表数据</p></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417132051411.png" class="" title="image-20230417132051411"><h5 id="1-1-1-count函数"><a href="#1-1-1-count函数" class="headerlink" title="1.1.1 count函数"></a>1.1.1 count函数</h5><blockquote><ul><li>统计某一列的数量<ul><li><code>count(*)</code>是用来统计行数，当一行数据只要有一个字段不为null，都可以统计上，所以一般来讲会用到<code>count(*)</code></li><li>count(1)表示每一行都是1，所以把这些1都加起来来统计行数</li></ul></li></ul><p>INNODB存储引擎下，<code>count(*)</code>和<code>count(1)</code>效率差不多</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417231757271.png" class="" title="image-20230417231757271"><h5 id="1-1-2-max函数"><a href="#1-1-2-max函数" class="headerlink" title="1.1.2 max函数"></a>1.1.2 max函数</h5><blockquote><p>求某一列的数据中的最大值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417232009615.png" class="" title="image-20230417232009615"><h5 id="1-1-3-min函数"><a href="#1-1-3-min函数" class="headerlink" title="1.1.3 min函数"></a>1.1.3 min函数</h5><blockquote><p>求某一列的数据中的最小值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417232058161.png" class="" title="image-20230417232058161"><h5 id="1-1-4-avg函数"><a href="#1-1-4-avg函数" class="headerlink" title="1.1.4 avg函数"></a>1.1.4 avg函数</h5><blockquote><p>求某一列的数据的平均值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417231926598.png" class="" title="image-20230417231926598"><h5 id="1-1-5-sum函数"><a href="#1-1-5-sum函数" class="headerlink" title="1.1.5 sum函数"></a>1.1.5 sum函数</h5><blockquote><p>对某一列数据进行求和</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> user_info;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230417232142484.png" class="" title="image-20230417232142484"><blockquote><p>sum与distinct搭配</p><p>当使用sum求和时，可以用distinct去重，然后再求和</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(distinct course_id), sum(course_id) from score;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805164756726.png" class="" title="image-20240805164756726"><h4 id="1-3-日期函数"><a href="#1-3-日期函数" class="headerlink" title="1.3 日期函数"></a>1.3 日期函数</h4><h5 id="1-1-1-当前系统日期与时间"><a href="#1-1-1-当前系统日期与时间" class="headerlink" title="1.1.1 当前系统日期与时间"></a>1.1.1 当前系统日期与时间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select NOW();</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805163338565.png" class="" title="image-20240805163338565"><h5 id="1-1-2-当前时间"><a href="#1-1-2-当前时间" class="headerlink" title="1.1.2 当前时间"></a>1.1.2 当前时间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select curtime();</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805163437066.png" class="" title="image-20240805163437066"><h5 id="1-1-3-获取年月日"><a href="#1-1-3-获取年月日" class="headerlink" title="1.1.3 获取年月日"></a>1.1.3 获取年月日</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 年</span><br><span class="line">select year(now());</span><br><span class="line"></span><br><span class="line">-- 月</span><br><span class="line">select month(now());</span><br><span class="line"></span><br><span class="line">-- 日</span><br><span class="line">select day(now());</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240805163555074.png" class="" title="image-20240805163555074"><h3 id="6、分组查询"><a href="#6、分组查询" class="headerlink" title="6、分组查询"></a>6、分组查询</h3><blockquote><p>分组查询是指使用group by子句将表中的数据分为若干组</p><p>分组查询时一般都是要配合聚合函数来使用，即<code>5.2聚合函数</code>小节</p><p>与聚合函数一起查询的字段，必须是group by后跟的字段</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- name 与count()函数一起出现在select后面时，name字段必须是跟在group by后面的字段</span><br><span class="line">select count(score), name from student group by name;</span><br></pre></td></tr></table></figure><h4 id="1-1-分组查询特点"><a href="#1-1-分组查询特点" class="headerlink" title="1.1 分组查询特点"></a>1.1 分组查询特点</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组查询的语法</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] <span class="keyword">group</span> <span class="keyword">by</span> 字段分组名 [<span class="keyword">having</span> 分组后过滤条件] </span><br></pre></td></tr></table></figure><blockquote><p>where和having的区别：</p><ul><li>执行时机不同：<ul><li>where是分组之前进行过滤，不满足where条件，不参与分组</li><li>having是在分组之后对结果进行过滤</li></ul></li><li>判断条件不同：<ul><li>where不能对聚合函数进行判断</li><li>having可以对聚合函数进行判断</li></ul></li></ul></blockquote><blockquote><p>下面是分组查询用的表以及数据</p></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230518142100316.png" class="" title="image-20230518142100316"><h4 id="1-1-分组查询示例1"><a href="#1-1-分组查询示例1" class="headerlink" title="1.1 分组查询示例1"></a>1.1 分组查询示例1</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据性别分组，统计男生、女生的数量</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20230518142116565.png" class="" title="image-20230518142116565"><blockquote><p>编写sql上面问题的思路：</p><p>1、首先按照性别分组，那么就先写下面的语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><blockquote><p>2、然后是需要统计男生、女生的数量，那么需要对分组后的数据进行统计，很容易就联想到聚合函数的count函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><h3 id="7、表关系"><a href="#7、表关系" class="headerlink" title="7、表关系"></a>7、表关系</h3><blockquote><p>表关系有下面三种</p><ul><li>单表关系</li><li>一对多关系</li><li>多对多关系</li></ul></blockquote><h4 id="1-1-单表关系"><a href="#1-1-单表关系" class="headerlink" title="1.1 单表关系"></a>1.1 单表关系</h4><blockquote><p>单独一张表就可以存储数据，不需要其他表的数据</p></blockquote><h4 id="1-2-一对多表关系"><a href="#1-2-一对多表关系" class="headerlink" title="1.2 一对多表关系"></a>1.2 一对多表关系</h4><blockquote><p><code>一对多</code>需要两张表存储数据，并且两张表有<code>一对多</code>或<code>多对一</code>关系</p></blockquote><h5 id="1-1-1-创建表时添加外键约束"><a href="#1-1-1-创建表时添加外键约束" class="headerlink" title="1.1.1 创建表时添加外键约束"></a>1.1.1 创建表时添加外键约束</h5><blockquote><p>下面的depart表的id字段关联了employee表的depart_id字段，且depart表的id字段关联了employee表的多条数据</p><ul><li>比如depart的id等于1，关联了employee表的<code>sam</code>、<code>jam</code>两条数据，这就形成了一对多的表关系</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 部门表depart字段</span></span><br><span class="line">id  <span class="type">int</span></span><br><span class="line">depart_name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表employee字段</span></span><br><span class="line">id  <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">age <span class="type">int</span></span><br><span class="line">depart_id</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220809081143388.png" class="" title="image-20220809081143388"><blockquote><ul><li><p>在一对多关系中，会给一对多关系中<code>多</code>的表添加一个**<code>外键约束</code>**，保证某一列的值必须是其它表中的特定已存在的值</p></li><li><p>如果在给<code>关系【多】</code>的表中插入数据时，如果关联字段插入时，在<code>关系【一】</code>的表里不存在时，就会报错</p></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 下面是depart表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> depart(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    depart_name <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 下面是employee表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    depart_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_employee_depart <span class="keyword">foreign</span> key (depart_id) <span class="keyword">references</span> depart(id) <span class="comment">-- 创建外键约束</span></span><br><span class="line">)<span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建外键约束语法</span></span><br><span class="line"><span class="keyword">constraint</span> fk_employee_depart <span class="keyword">foreign</span> key (depart_id) <span class="keyword">references</span> depart(id)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- constraint 约束</span></span><br><span class="line"><span class="comment">-- fk_employee_depart 表示外键的名字，是&quot;foreignkey_当前表名_需要被关联表名”格式</span></span><br><span class="line"><span class="comment">-- foreign key 表示外键</span></span><br><span class="line"><span class="comment">-- (depart_id) 表示当前表需要被外键约束的字段</span></span><br><span class="line"><span class="comment">-- references depart(id) 表示需要被关联的表和字段，格式：需要被关联表名(约束字段)</span></span><br></pre></td></tr></table></figure><h5 id="1-1-2-表存在添加外键约束"><a href="#1-1-2-表存在添加外键约束" class="headerlink" title="1.1.2 表存在添加外键约束"></a>1.1.2 表存在添加外键约束</h5><blockquote><p>当表存在时，想要添加外键约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">constraint</span> fk_employee_depart <span class="keyword">foreign</span> key (depart_id) <span class="keyword">references</span> depart(id)</span><br></pre></td></tr></table></figure><h5 id="1-1-3-删除添加的外键约束"><a href="#1-1-3-删除添加的外键约束" class="headerlink" title="1.1.3 删除添加的外键约束"></a>1.1.3 删除添加的外键约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_employee_depart;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- fk_employee_depart 是外键名字</span></span><br></pre></td></tr></table></figure><h5 id="1-1-4-外键约束示例"><a href="#1-1-4-外键约束示例" class="headerlink" title="1.1.4 外键约束示例"></a>1.1.4 外键约束示例</h5><blockquote><p>查看depart表和employee表语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- depart表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `depart` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `depart_name` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- employee表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `depart_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fk_employee_depart` (`depart_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_employee_depart` <span class="keyword">FOREIGN</span> KEY (`depart_id`) <span class="keyword">REFERENCES</span> `depart` (`id`) <span class="comment">-- 添加了外键约束</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220809084323004.png" class="" title="image-20220809084323004"><blockquote><p>当depart表中存在id为1的数据时，给employee表插入数据，并且depart_id为1</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先给depart表插入数据，并且id为1，因为是第一次插入数据，id默认从1开始</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> depart(depart_name) <span class="keyword">values</span>(&quot;研发&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再给employee表插入数据，指定depart_id为1</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(name, age, depart_id) <span class="keyword">values</span>(&quot;sam&quot;, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时depart表和employee表插入数据都没问题</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220809084627766.png" class="" title="image-20220809084627766"><blockquote><p>但给employee表插入数据时，指定depart_id为2，但是id为2的数据再depart表中不存在，就会提示插入数据错误</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(name, age, depart_id) <span class="keyword">values</span>(&quot;jam&quot;, <span class="number">22</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><ul><li>会提示报错：(1452, ‘Cannot add or update a child row: a foreign key constraint fails (<code>lyuse</code>.<code>employee</code>, CONSTRAINT <code>fk_employee_depart</code> FOREIGN KEY (<code>depart_id</code>) REFERENCES <code>depart</code> (<code>id</code>))’)</li><li>翻译：(1452, ‘无法添加或更新子行：外键约束失败 (<code>lyuse</code>.<code>employee</code>, CONSTRAINT <code>fk_employee_depart</code> FOREIGN KEY (<code>depart_id</code>) REFERENCES <code>depart</code> (<code>id</code>)))</li></ul></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220809084820490.png" class="" title="image-20220809084820490"><h4 id="1-3-多对多表关系"><a href="#1-3-多对多表关系" class="headerlink" title="1.3 多对多表关系"></a>1.3 多对多表关系</h4><blockquote><p><code>多对多</code>需要三张表来存储数据，两张单表+关系表，创造出两个单表之间多对多关系</p></blockquote><h5 id="1-1-1-创建表时添加外键约束-1"><a href="#1-1-1-创建表时添加外键约束-1" class="headerlink" title="1.1.1 创建表时添加外键约束"></a>1.1.1 创建表时添加外键约束</h5><blockquote><p>下面的表</p><ul><li>course表是课程表，单表</li><li>student表是学生信息表，单标</li><li>class表是学生选课表，是关联表<ul><li>关联了学生id和课程id</li><li>其中既有学生id关联了多个课程id的数据</li><li>也有多个课程id关联了多个学生id的数据</li><li>这就形成了多对多的表关系</li></ul></li></ul></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20220809085611898.png" class="" title="image-20220809085611898"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- course表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `course` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `course_name` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- stuudent表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- class表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `class` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `student_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `course_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">constraint</span> fk_class_student <span class="keyword">foreign</span> key (student_id) <span class="keyword">references</span> student(id), <span class="comment">-- 添加student表外键约束</span></span><br><span class="line">  <span class="keyword">constraint</span> fk_class_course <span class="keyword">foreign</span> key (couser_id) <span class="keyword">references</span> couser(id),  <span class="comment">-- 添加course表外键约束</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><h5 id="1-1-2-表存在添加外键约束-1"><a href="#1-1-2-表存在添加外键约束-1" class="headerlink" title="1.1.2 表存在添加外键约束"></a>1.1.2 表存在添加外键约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_student <span class="keyword">foreign</span> key (student_id) <span class="keyword">references</span> student(id), <span class="comment">-- 添加student表外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_course <span class="keyword">foreign</span> key (couser_id) <span class="keyword">references</span> couser(id),  <span class="comment">-- 添加course表外键约束</span></span><br></pre></td></tr></table></figure><h5 id="1-1-3-删除添加的外键约束-1"><a href="#1-1-3-删除添加的外键约束-1" class="headerlink" title="1.1.3 删除添加的外键约束"></a>1.1.3 删除添加的外键约束</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_student;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_course;</span><br></pre></td></tr></table></figure><h5 id="1-1-4-外键约束示例-1"><a href="#1-1-4-外键约束示例-1" class="headerlink" title="1.1.4 外键约束示例"></a>1.1.4 外键约束示例</h5><blockquote></blockquote><h2 id="三、Mysql进阶"><a href="#三、Mysql进阶" class="headerlink" title="三、Mysql进阶"></a>三、Mysql进阶</h2><h3 id="1、事务"><a href="#1、事务" class="headerlink" title="1、事务"></a>1、事务</h3><h4 id="1-1-事务介绍"><a href="#1-1-事务介绍" class="headerlink" title="1.1 事务介绍"></a>1.1 事务介绍</h4><blockquote><p>事务是一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p><ul><li>当开启事务后，如果出现异常，那么就会回滚事务，那就保证了数据的完整性和一致性</li></ul><p>Mysql的增删改会默认开启事务，也就是事务是自动提交的，当执行一条DML语句，那么Mysql就会立即隐式提交事务</p></blockquote><h4 id="1-2-事务操作"><a href="#1-2-事务操作" class="headerlink" title="1.2 事务操作"></a>1.2 事务操作</h4><blockquote><p>查看&#x2F;设置事务提交方式</p></blockquote><h5 id="1-1-1-查看事务提交状态"><a href="#1-1-1-查看事务提交状态" class="headerlink" title="1.1.1 查看事务提交状态"></a>1.1.1 查看事务提交状态</h5><blockquote><p>默认是开启事务的，所以查询结果是1</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查看事务</span><br><span class="line">select @@autocommit;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240919091810560.png" class="" title="image-20240919091810560"><h5 id="1-1-2-开启手动事务"><a href="#1-1-2-开启手动事务" class="headerlink" title="1.1.2 开启手动事务"></a>1.1.2 开启手动事务</h5><blockquote><p>关闭自动事务提交，设置autocommit&#x3D;0就是关闭自动提交，开启为手动提交</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 设置为手动提交，禁用自动提交，从而允许手动控制事务的开始和结束</span><br><span class="line">set @@autocommit=0;</span><br><span class="line"></span><br><span class="line">-- 开启事务</span><br><span class="line">start transaction  或  begin</span><br></pre></td></tr></table></figure><blockquote><p>提交事务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure><blockquote><p>遇到执行sql出现问题，那就回滚事务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><h4 id="1-3-事务四大特性ACID"><a href="#1-3-事务四大特性ACID" class="headerlink" title="1.3 事务四大特性ACID"></a>1.3 事务四大特性ACID</h4><h5 id="1-1-1-原子性-A"><a href="#1-1-1-原子性-A" class="headerlink" title="1.1.1 原子性-A"></a>1.1.1 原子性-A</h5><blockquote><p>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</p></blockquote><h5 id="1-1-2-一致性-C"><a href="#1-1-2-一致性-C" class="headerlink" title="1.1.2 一致性-C"></a>1.1.2 一致性-C</h5><blockquote><p>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态</p></blockquote><h5 id="1-1-3-隔离性-I"><a href="#1-1-3-隔离性-I" class="headerlink" title="1.1.3 隔离性-I"></a>1.1.3 隔离性-I</h5><blockquote><p>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不收外部并发操作影响的独立环境下运行</p><ul><li>有若干个并发事务，多个事务之间互相独立，比如A事务、B事务都对数据库有操作，那么A事务的操作不会对B事务有影响，是在独立环境下运行的</li></ul></blockquote><h5 id="1-1-4-持久性-D"><a href="#1-1-4-持久性-D" class="headerlink" title="1.1.4 持久性-D"></a>1.1.4 持久性-D</h5><blockquote><p>持久性（Durability）：事务一旦提交或回滚，对数据库中的数据的改变是永久的</p><ul><li>数据库中的数据是最终存储在磁盘中，那么就会永久保存下来</li></ul></blockquote><h4 id="1-4-并发事务问题"><a href="#1-4-并发事务问题" class="headerlink" title="1.4 并发事务问题"></a>1.4 并发事务问题</h4><blockquote><p>并发事务问题一般会出现在A事务、B事务同时操作某个数据库或某张表的问题，会有如下问题</p><ul><li>脏读</li><li>不可重复度</li><li>幻读</li></ul></blockquote><h5 id="1-1-1-脏读"><a href="#1-1-1-脏读" class="headerlink" title="1.1.1 脏读"></a>1.1.1 脏读</h5><blockquote><p>是指事务读到另一个事务还没提交的数据</p></blockquote><blockquote><p>假设有两个事务 A 和 B，数据库中的某个表 <code>users</code> 有一条记录 <code>id=1</code>，初始值为 <code>name=&#39;Alice&#39;</code>。</p></blockquote><blockquote><p><strong>事务 A：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 读取 id=1 的数据</span><br><span class="line">SELECT name FROM users WHERE id = 1;  -- 返回 &#x27;Alice&#x27;</span><br><span class="line"></span><br><span class="line">-- 更新 id=1 的数据</span><br><span class="line">UPDATE users SET name = &#x27;Bob&#x27; WHERE id = 1;</span><br><span class="line"></span><br><span class="line">-- 此时事务 A 还没有提交</span><br></pre></td></tr></table></figure><blockquote><p><strong>事务 B：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 读取 id=1 的数据</span><br><span class="line">SELECT name FROM users WHERE id = 1;  -- 返回 &#x27;Bob&#x27;，即使事务 A 还没有提交</span><br><span class="line"></span><br><span class="line">-- 提交事务 B</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，事务 B 读取到了事务 A 尚未提交的更新数据 <code>name=&#39;Bob&#39;</code>，这就是脏读。</p></blockquote><blockquote><p>如何解决脏读？</p><ul><li>脏读问题可以通过提高事务的隔离级别来解决。MySQL 提供了四种事务隔离级别：<ol><li><strong>READ UNCOMMITTED</strong>：最低的隔离级别，允许脏读、不可重复读和幻读。</li><li><strong>READ COMMITTED</strong>：不允许脏读，但允许不可重复读和幻读。<ol><li>隔离级别设置为 <code>READ COMMITTED</code>，那么事务 B 在读取数据时，只会读取到已经提交的数据，而不会读取到事务 A 尚未提交的数据。</li></ol></li><li><strong>REPEATABLE READ</strong>：不允许脏读和不可重复读，但允许幻读。</li><li><strong>SERIALIZABLE</strong>：最高的隔离级别，不允许脏读、不可重复读和幻读。</li></ol></li><li>还可以通过加锁来避免脏读。例如，使用 <code>SELECT ... FOR UPDATE</code> 或 <code>SELECT ... LOCK IN SHARE MODE</code> 来显式地锁定数据。</li></ul></blockquote><h5 id="1-1-2-不可重复读"><a href="#1-1-2-不可重复读" class="headerlink" title="1.1.2 不可重复读"></a>1.1.2 不可重复读</h5><blockquote><p>是指一个事务先后读取同一条记录，但两次读取的数据不同，称为不可重复读，这种情况通常发生在事务隔离级别较低的情况下，例如 <code>READ COMMITTED</code></p><p>核心理解：</p><ul><li>在一个事务中，两次读取<code>同一行</code>数据时，得到的结果不一致</li><li>是对同一条数据</li></ul></blockquote><blockquote><p>假设有两个事务 A 和 B，数据库中的某个表 <code>users</code> 有一条记录 <code>id=1</code>，初始值为 <code>name=&#39;Alice&#39;</code>。</p></blockquote><blockquote><p><strong>事务 A：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 读取 id=1 的数据</span><br><span class="line">SELECT name FROM users WHERE id = 1;  -- 返回 &#x27;Alice&#x27;</span><br><span class="line"></span><br><span class="line">-- 此时事务 A 还没有提交</span><br></pre></td></tr></table></figure><blockquote><p><strong>事务 B：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 更新 id=1 的数据</span><br><span class="line">UPDATE users SET name = &#x27;Bob&#x27; WHERE id = 1;</span><br><span class="line"></span><br><span class="line">-- 提交事务 B</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><blockquote><p><strong>事务 A：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 再次读取 id=1 的数据</span><br><span class="line">SELECT name FROM users WHERE id = 1;  -- 返回 &#x27;Bob&#x27;，因为事务 B 已经提交</span><br><span class="line"></span><br><span class="line">-- 提交事务 A</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，事务 A 在第一次读取和第二次读取之间，事务 B 对 <code>id=1</code> 的数据进行了更新并提交，导致事务 A 两次读取的结果不一致，这就是不可重复读。</p></blockquote><blockquote><p>如何解决不可重复读？</p><ul><li>提高事务隔离级别（如 <code>REPEATABLE READ</code>）</li></ul></blockquote><h5 id="1-1-3-幻读"><a href="#1-1-3-幻读" class="headerlink" title="1.1.3 幻读"></a>1.1.3 幻读</h5><blockquote><p>一个事务按照提交查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在了，好像出现了”幻影“</p><p>核心理解：</p><ul><li>两次查询同一范围的数据时，得到的结果集不一致</li><li>是同一范围内的数据</li></ul></blockquote><blockquote><p>假设有两个事务 A 和 B，数据库中的某个表 <code>users</code> 有一条记录 <code>id=1</code>，初始值为 <code>name=&#39;Alice&#39;</code>。</p><p><strong>事务 A：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 查询所有数据</span><br><span class="line">SELECT * FROM users;  -- 返回一条记录 &#x27;Alice&#x27;</span><br><span class="line"></span><br><span class="line">-- 此时事务 A 还没有提交</span><br></pre></td></tr></table></figure><blockquote><p><strong>事务 B：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 开始事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 插入一条新记录</span><br><span class="line">INSERT INTO users (id, name) VALUES (2, &#x27;Bob&#x27;);</span><br><span class="line"></span><br><span class="line">-- 提交事务 B</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><blockquote><p><strong>事务 A：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 再次查询所有数据</span><br><span class="line">SELECT * FROM users;  -- 返回两条记录 &#x27;Alice&#x27; 和 &#x27;Bob&#x27;</span><br><span class="line"></span><br><span class="line">-- 提交事务 A</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，事务 A 在第一次查询和第二次查询之间，事务 B 插入了一条新记录 <code>id=2</code>，导致事务 A 两次查询的结果集不一致，这就是幻读。</p></blockquote><blockquote><p>幻读解决？</p><ul><li>提高事务隔离级别（如 <code>SERIALIZABLE</code>），有效地避免幻读问题，确保数据的一致性和完整性，但是会带来性能的额外开销</li></ul></blockquote><h4 id="1-5-事务隔离级别"><a href="#1-5-事务隔离级别" class="headerlink" title="1.5 事务隔离级别"></a>1.5 事务隔离级别</h4><h5 id="1-1-查看当前事务隔离级别"><a href="#1-1-查看当前事务隔离级别" class="headerlink" title="1.1 查看当前事务隔离级别"></a>1.1 查看当前事务隔离级别</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@transaction_isolation;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240919091734650.png" class="" title="image-20240919091734650"><h3 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h3><blockquote><ul><li><p>索引是帮助<code>Mysql高效获取数据</code>的数据结构（有序）</p></li><li><p>在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用数据，这样就可以在数据结构实现高级查找算法，这种数据结构就是<code>索引</code></p></li></ul></blockquote><h4 id="1-1-无索引"><a href="#1-1-无索引" class="headerlink" title="1.1 无索引"></a>1.1 无索引</h4><blockquote><p>下面这条语句，即使查询到了id&#x3D;1，也会继续往下找，这就全表扫描</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 1;</span><br></pre></td></tr></table></figure><h4 id="1-2-索引分类"><a href="#1-2-索引分类" class="headerlink" title="1.2 索引分类"></a>1.2 索引分类</h4><h5 id="1-1-1-索引分类"><a href="#1-1-1-索引分类" class="headerlink" title="1.1.1 索引分类"></a>1.1.1 索引分类</h5><blockquote><p>主键索引</p><ul><li>针对表中主键创建的索引</li><li>默认自动创建，只能有一个</li><li>关键字：primary</li></ul><p>唯一索引</p><ul><li>避免同一个表中某个数据列中的数据重复</li><li>可以有多个</li><li>关键字：unique</li></ul><p>常规索引</p><ul><li>快速定位特定数据</li><li>可以有多个</li><li>关键字：无</li></ul><p>全文索引</p><ul><li>全文索引查找的是文本中的关键词，而不是比较索引中的值</li><li>可以有多个</li><li>关键字：fulltext</li></ul></blockquote><h5 id="1-1-2-InnoDB按存储分类"><a href="#1-1-2-InnoDB按存储分类" class="headerlink" title="1.1.2 InnoDB按存储分类"></a>1.1.2 InnoDB按存储分类</h5><blockquote><p>聚集索引</p><ul><li>将数据存储与索引放到一起，索引结构的叶子结点保存了行数据</li><li>特点：必须有，而且只有一个</li></ul><p>二级索引</p><ul><li>将数据域索引分开存储，索引结构的叶子结点关联的是对应的主键</li><li>特点：可以存在多个</li></ul></blockquote><blockquote><p>聚集索引选取规则：</p><ul><li>如果有主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(unique)索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowId作为隐藏的聚集索引</li></ul></blockquote><h4 id="1-3-索引语法"><a href="#1-3-索引语法" class="headerlink" title="1.3 索引语法"></a>1.3 索引语法</h4><h5 id="1-1-1-创建索引"><a href="#1-1-1-创建索引" class="headerlink" title="1.1.1 创建索引"></a>1.1.1 创建索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [unique|fulltext] index index_name on table_name (index_col_name,...);</span><br></pre></td></tr></table></figure><h5 id="1-1-2-查看索引"><a href="#1-1-2-查看索引" class="headerlink" title="1.1.2 查看索引"></a>1.1.2 查看索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from table_name;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923095239294.png" class="" title="image-20240923095239294"><blockquote><p>可以看到</p><ul><li><p>Key_name：primary，表示主键ID</p></li><li><p>Index_type：BTREE的类型</p></li></ul></blockquote><h5 id="1-1-3-删除索引"><a href="#1-1-3-删除索引" class="headerlink" title="1.1.3 删除索引"></a>1.1.3 删除索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name on table_name;</span><br></pre></td></tr></table></figure><h4 id="1-4-索引实操"><a href="#1-4-索引实操" class="headerlink" title="1.4 索引实操"></a>1.4 索引实操</h4><h5 id="1-1-1-创建常规索引"><a href="#1-1-1-创建常规索引" class="headerlink" title="1.1.1 创建常规索引"></a>1.1.1 创建常规索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_name on user(user_name);</span><br><span class="line"></span><br><span class="line">-- 详细解释</span><br><span class="line">-- create 后的index是指这是创建常规索引索引，并且没有用[unique|fulltext]</span><br><span class="line">-- idx_user_name 是索引名称，idx是索引的简写，一般推荐都这么写，user_name是索引的字段，所以见到idx_user_name名就是表示给user_name字段加了索引，且索引名称叫idx_user_name</span><br><span class="line">-- on user(user_name) 是指给表里的哪个字段</span><br></pre></td></tr></table></figure><blockquote><p>查看索引</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from user;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923101202627.png" class="" title="image-20240923101202627"><blockquote><p>可以看到有两个索引</p><ul><li>id：唯一索引</li><li>idx_user_name：普通索引</li></ul></blockquote><h5 id="1-1-2-创建联合索引"><a href="#1-1-2-创建联合索引" class="headerlink" title="1.1.2 创建联合索引"></a>1.1.2 创建联合索引</h5><blockquote><p>联合索引就是多个字段创建的一个索引</p><p>注意：</p><ul><li>创建联合索引需要关注<code>字段顺序</code></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_phone_gender_nickname on user(phone,gender,nickname);</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923102349512.png" class="" title="image-20240923102349512"><h5 id="1-1-3-删除索引-1"><a href="#1-1-3-删除索引-1" class="headerlink" title="1.1.3 删除索引"></a>1.1.3 删除索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_user_name on `user`;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923101308006.png" class="" title="image-20240923101308006"><h4 id="1-5-SQL性能分析"><a href="#1-5-SQL性能分析" class="headerlink" title="1.5 SQL性能分析"></a>1.5 SQL性能分析</h4><h5 id="1-1-1-查看SQL执行频次"><a href="#1-1-1-查看SQL执行频次" class="headerlink" title="1.1.1 查看SQL执行频次"></a>1.1.1 查看SQL执行频次</h5><blockquote><p>SQL执行频率</p><p>Mysql客户端连接成功后，可以查看当前数据库的<code>insert</code>、<code>update</code>、<code>delete</code>、<code>select</code>的访问频率</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Com后面是7个下划线</span><br><span class="line">show global status like &#x27;Com_______&#x27;;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923103810699.png" class="" title="image-20240923103810699"><h4 id="1-6-慢查询日志"><a href="#1-6-慢查询日志" class="headerlink" title="1.6 慢查询日志"></a>1.6 慢查询日志</h4><blockquote><p>慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位:秒，默认10秒)的所有SQL语句的日志</p><p>Mysql的慢查询日志默认没有开启，需要在Mysql的配置文件(&#x2F;etc&#x2F;my.cnf)中配置</p></blockquote><blockquote><p>查看慢查询日志开关</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;slow_query_log&#x27;;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923104111906.png" class="" title="image-20240923104111906"><blockquote><p>开启慢查询日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启慢查询日志查询开关</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置慢日志的时间2秒，SQL语句执行时间超过2秒，就会被视为慢查询，记录慢查询日志</span></span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><blockquote><p>在docker启动mysql中，将配置文件做逻辑卷映射出来，那么就可以在宿主机上配置额外的mysql配置</p><ol><li>创建一个新的配置文件，例如 <code>mycustom.cnf</code>。</li><li>添加所需的配置选项。</li><li>注意顶部一定要加[mysqld]这个节点</li><li>重启mysql</li></ol></blockquote><blockquote><p>示例配置文件 <code>mycustom.cnf</code> 内容：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># 开启慢查询日志查询开关</span><br><span class="line">slow_query_log=1</span><br><span class="line"></span><br><span class="line"># 设置慢日志的时间2秒，SQL语句执行时间超过2秒，就会被视为慢查询，记录慢查询日志</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><blockquote><p>再次查看慢查询日志已经打开了</p></blockquote><img src="/2021/05/16/database/mysql%E7%AC%94%E8%AE%B0/mysql%E7%AC%94%E8%AE%B0/image-20240923105121877.png" class="" title="image-20240923105121877"><h3 id="4、锁"><a href="#4、锁" class="headerlink" title="4、锁"></a>4、锁</h3><h4 id="1-1-锁的分类"><a href="#1-1-锁的分类" class="headerlink" title="1.1 锁的分类"></a>1.1 锁的分类</h4><blockquote><p>锁是计算机协调多个进程或线程并发访问某一资源的机制，在数据库中，除传统的计算机资源（CPU、RAM、I&#x2F;O）的征用意外，数据也是一种供许多用户共享的资源，如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是数据库并发访问性能的一个重要因数。从这个角度来说，锁对数据库而言显得尤为重要</p></blockquote><blockquote><p>Mysql的锁分类</p><ul><li>全局锁<ul><li>锁定数据库中的所有表</li></ul></li><li>表级锁<ul><li>每次操作锁住整张表</li></ul></li><li>行级锁<ul><li>每次操作锁住对应的行数据</li></ul></li></ul></blockquote><h4 id="1-2-全局锁"><a href="#1-2-全局锁" class="headerlink" title="1.2 全局锁"></a>1.2 全局锁</h4><blockquote><p>全局锁是对整个数据库实例加锁，加锁以后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都会被阻塞</p><p>典型的使用场景是做<code>全库的逻辑备份</code>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</p></blockquote><h5 id="1-1-1-未加锁使用场景"><a href="#1-1-1-未加锁使用场景" class="headerlink" title="1.1.1 未加锁使用场景"></a>1.1.1 未加锁使用场景</h5><blockquote><p>有三张表tb_stock、tb_order、tb_orderlog 举例：</p><ul><li>备份tb_stock表的时候，出现业务扣减库存、生成订单</li><li>备份tb_order表的时候，出现业务插入订单日志</li><li>备份tb_orderlog表</li></ul><p>上面的备份数据操作，是不能保证<code>数据的一致性</code>，因为在备份的还有业务数据在写入中，那么这份数据是没有的</p></blockquote><h5 id="1-1-2-加锁使用场景"><a href="#1-1-2-加锁使用场景" class="headerlink" title="1.1.2 加锁使用场景"></a>1.1.2 加锁使用场景</h5><blockquote><p>使用mysqldump时加锁，然后再进行备份，</p><p>但是加了全局锁是可以实现查询语句的，但是不能写入</p></blockquote><h5 id="1-1-3-全局锁语句"><a href="#1-1-3-全局锁语句" class="headerlink" title="1.1.3 全局锁语句"></a>1.1.3 全局锁语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock;</span><br></pre></td></tr></table></figure><h4 id="1-3-表级锁"><a href="#1-3-表级锁" class="headerlink" title="1.3 表级锁"></a>1.3 表级锁</h4><blockquote><p>表级锁每次操作锁住整张表，锁定粒度大，发生所冲突的概率最高，并发度最低，应用在MyISAM&#x2F;InnoDB&#x2F;BDB等存储引擎中</p><p>对于表级锁又可以分为：</p><ul><li>表锁</li><li>元数据锁</li><li>意向锁</li></ul></blockquote><h5 id="1-1-1-表锁"><a href="#1-1-1-表锁" class="headerlink" title="1.1.1 表锁"></a>1.1.1 表锁</h5><blockquote><p>表锁分为：</p><ul><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ul></blockquote><blockquote><p>语法：</p><ul><li>加锁：lock tables 表名… read&#x2F;write<ul><li>这里的表明可以一次锁定单个、多个表</li></ul></li><li>释放锁：unlock tables</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加读锁，只能读，不能写</span><br><span class="line">lock tables xxx read;</span><br><span class="line"></span><br><span class="line"># 客户端断开连接</span><br><span class="line">unlock tables</span><br></pre></td></tr></table></figure><h4 id="1-4-行级锁"><a href="#1-4-行级锁" class="headerlink" title="1.4 行级锁"></a>1.4 行级锁</h4><blockquote><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高，应用在InnoDB存储引擎中</p><p>InnoDB数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ul><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此进行update和delete，在RC、RR隔离级别下都支持</li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert产生幻读，在RR隔离级别下都支持</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，病锁住数据前面的间隙Gap，在RR隔离级别下支持</li></ul></blockquote><h5 id="1-1-1-行锁"><a href="#1-1-1-行锁" class="headerlink" title="1.1.1 行锁"></a>1.1.1 行锁</h5>]]></content>
      
      
      <categories>
          
          <category> MySQL笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Mysql笔记</title>
      <link href="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mysql环境搭建"><a href="#一、Mysql环境搭建" class="headerlink" title="一、Mysql环境搭建"></a>一、Mysql环境搭建</h2><h3 id="1、mysql镜像地址"><a href="#1、mysql镜像地址" class="headerlink" title="1、mysql镜像地址"></a>1、mysql镜像地址</h3><blockquote><p>推荐使用docker搭建mysql环境，非常方便用来学习mysql</p><p><a href="https://registry.hub.docker.com/_/mysql">mysql的docker镜像地址</a></p></blockquote><h3 id="2、创建mysql容器"><a href="#2、创建mysql容器" class="headerlink" title="2、创建mysql容器"></a>2、创建mysql容器</h3><h4 id="2-1-拉取mysql镜像"><a href="#2-1-拉取mysql镜像" class="headerlink" title="2.1 拉取mysql镜像"></a>2.1 拉取mysql镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h4 id="2-2-创建mysql容器"><a href="#2-2-创建mysql容器" class="headerlink" title="2.2 创建mysql容器"></a>2.2 创建mysql容器</h4><blockquote><p>下面内容来自dockerhub里mysql的使用介绍</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Configuration without a cnf file</span></span><br><span class="line"><span class="comment">#Many configuration options can be passed as flags to mysqld. This will give you the flexibility to customize the container without needing a cnf file. For example, if you want to change the default encoding and collation for all tables to use UTF-8 (utf8mb4) just run the following:</span></span><br><span class="line"></span><br><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you would like to see a complete list of available options, just run:</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> mysql:tag --verbose --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">-------------------&gt;翻译如下&lt;--------------------------</span><br><span class="line"><span class="comment">#没有cnf文件的配置</span></span><br><span class="line"><span class="comment">#许多配置选项可以作为标志传递给mysqld。这将使你能够灵活地定制容器而不需要cnf文件。例如，如果你想改变所有表的默认编码和排序为使用UTF-8(utf8mb4)，只需运行以下内容。</span></span><br><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想看到可用选项的完整列表，只需运行。</span></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> mysql:tag --verbose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><blockquote><p>创建mysql容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># --name mysql 创建的容器名叫mysql</span></span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=123456   MYSQL_ROOT_PASSWORD指定了将为MySQL根超级用户账户设置的密码，可以看到是123456</span></span><br><span class="line"><span class="comment"># --character-set-server=utf8mb4  设置mysql字符编码为utf8mb4，表示可以支持中文和表情</span></span><br><span class="line"><span class="comment"># --collation-server=utf8mb4_unicode_ci 在字符集内用于比较或排序字符的一套规则，即校验规则</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220324152525798.png" class="" title="image-20220324152525798"><h4 id="2-3-连接数据库"><a href="#2-3-连接数据库" class="headerlink" title="2.3 连接数据库"></a>2.3 连接数据库</h4><blockquote><p>这里使用了<code>mycli</code>这个包来连接数据库测试</p><p><code>mycli</code>包时python写的一个具有代码提示的mysql使用工具</p></blockquote><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220324152502070.png" class="" title="image-20220324152502070"><blockquote><p>可以看到连接数据库成功，可以成功登录到mysql里面了</p></blockquote><h2 id="二、go连接mysql"><a href="#二、go连接mysql" class="headerlink" title="二、go连接mysql"></a>二、go连接mysql</h2><h3 id="1、go连接mysql用到的包"><a href="#1、go连接mysql用到的包" class="headerlink" title="1、go连接mysql用到的包"></a>1、go连接mysql用到的包</h3><h4 id="1-1-database-x2F-sql"><a href="#1-1-database-x2F-sql" class="headerlink" title="1.1 database&#x2F;sql"></a>1.1 database&#x2F;sql</h4><blockquote><p>go语言中的<code>database/sql</code>包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动，使用<code>database/sql</code>包时必须注入一个数据库驱动</p><ul><li>也就是说<code>database/sql</code>里面定义了SQL的需要实现的方法</li></ul></blockquote><h4 id="1-2-mysql数据库驱动"><a href="#1-2-mysql数据库驱动" class="headerlink" title="1.2 mysql数据库驱动"></a>1.2 mysql数据库驱动</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载mysql驱动</span></span><br><span class="line"><span class="keyword">go</span> get -u github.com/<span class="keyword">go</span>-sql-driver/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// -u：表示所有的依赖都是下载最新的</span></span><br><span class="line"><span class="comment">// github地址：https://github.com/go-sql-driver/mysql</span></span><br></pre></td></tr></table></figure><h3 id="2、使用mysql驱动"><a href="#2、使用mysql驱动" class="headerlink" title="2、使用mysql驱动"></a>2、使用mysql驱动</h3><h4 id="2-1-Open方法"><a href="#2-1-Open方法" class="headerlink" title="2.1 Open方法"></a>2.1 Open方法</h4><blockquote><p>go语言中没有数据库驱动，所以需要外部导入一个数据库驱动来注入</p><p>使用<code>database/sql</code>的Open()方法</p><p>下面内容来自Open方法注释翻译</p><ul><li>打开一个由其数据库驱动名称和一个特定的数据源名称指定的数据库。</li><li>驱动程序特定的数据源名称，通常至少包括一个数据库名称和连接信息。</li><li>大多数用户会通过一个特定驱动程序的连接来打开一个数据库辅助函数来打开数据库，该函数返回一个*DB。<ul><li>Go标准库中没有包含数据库驱动没有包括在Go标准库中。参见 <a href="https://golang.org/s/sqldrivers">https://golang.org/s/sqldrivers</a> 以了解第三方驱动程序的列表。</li><li>Open可以只验证它的参数，而不创建一个与数据库的连接与数据库的连接。为了验证数据源的名称是否有效，可以调用Ping。</li></ul></li><li>返回的DB对于多个goroutine的并发使用是安全的并维护它自己的空闲连接池。<ul><li>因此，Open函数应该只被调用一次。很少有必要关闭一个数据库。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// open方法打开指定驱动的数据库</span></span><br><span class="line"><span class="comment">// Open opens a database specified by its database driver name and a</span></span><br><span class="line"><span class="comment">// driver-specific data source name, usually consisting of at least a</span></span><br><span class="line"><span class="comment">// database name and connection information.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Most users will open a database via a driver-specific connection</span></span><br><span class="line"><span class="comment">// helper function that returns a *DB. No database drivers are included</span></span><br><span class="line"><span class="comment">// in the Go standard library. See https://golang.org/s/sqldrivers for</span></span><br><span class="line"><span class="comment">// a list of third-party drivers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Open may just validate its arguments without creating a connection</span></span><br><span class="line"><span class="comment">// to the database. To verify that the data source name is valid, call</span></span><br><span class="line"><span class="comment">// Ping.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The returned DB is safe for concurrent use by multiple goroutines</span></span><br><span class="line"><span class="comment">// and maintains its own pool of idle connections. Thus, the Open</span></span><br><span class="line"><span class="comment">// function should be called just once. It is rarely necessary to</span></span><br><span class="line"><span class="comment">// close a DB.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(driverName, dataSourceName <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>) &#123;</span><br><span class="line">driversMu.RLock()</span><br><span class="line">driveri, ok := drivers[driverName]</span><br><span class="line">driversMu.RUnlock()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;sql: unknown driver %q (forgotten import?)&quot;</span>, driverName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> driverCtx, ok := driveri.(driver.DriverContext); ok &#123;</span><br><span class="line">connector, err := driverCtx.OpenConnector(dataSourceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OpenDB(connector), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> OpenDB(dsnConnector&#123;dsn: dataSourceName, driver: driveri&#125;), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Open方法</p><ul><li><p>打开一个driverName指定的数据库</p></li><li><p>DataSourceName指定数据源，一般包括数据库文件名和连接信息</p></li></ul></blockquote><h4 id="2-2-DB结构体"><a href="#2-2-DB结构体" class="headerlink" title="2.2 DB结构体"></a>2.2 DB结构体</h4><blockquote><p>一般都是通过数据库特定的链接帮助函数打开数据库，返回一个<code>*DB</code>(DB结构体指针)</p><p>下面内容来自DB结构体的翻译</p><ul><li>DB是一个数据库句柄，代表一个由0个或更多的底层连接。它可以安全地被多个goroutines同时使用。<ul><li>0或多个底层连接，这里是指有一个连接池，当要连接数据库时从连接池里拿一个sql连接对象来用，用完了再放回去</li><li>连接池的优势：<ul><li>当需要频繁的操作sql数据时，会提前将sql数据库连接提前创建好并放到链接池里</li><li>而不是每次需要操作sql时，再去创建连接，节省时间和提高效率</li><li>当使用完以后，再将链接放回到链接池</li><li>并且连接池是可以被多个<code>goroutine</code>同时使用</li></ul></li></ul></li><li>sql包自动创建和释放连接；它也维护一个空闲的连接池。<ul><li>如果数据库有有每个连接状态的概念，这种状态可以被可靠地观察到在一个事务（Tx）或连接（Conn）中可靠地观察到这种状态。</li><li>一旦DB.Begin被调用，返回的返回的Tx被绑定到一个单一的连接。</li><li>一旦提交或称为 “回滚”，该事务的连接被返回到DB的闲置连接池。</li><li>池的大小 可以用SetMaxIdleConns来控制。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是DB结构体的实现</span></span><br><span class="line"><span class="comment">// DB is a database handle representing a pool of zero or more</span></span><br><span class="line"><span class="comment">// underlying connections. It&#x27;s safe for concurrent use by multiple</span></span><br><span class="line"><span class="comment">// goroutines.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The sql package creates and frees connections automatically; it</span></span><br><span class="line"><span class="comment">// also maintains a free pool of idle connections. If the database has</span></span><br><span class="line"><span class="comment">// a concept of per-connection state, such state can be reliably observed</span></span><br><span class="line"><span class="comment">// within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the</span></span><br><span class="line"><span class="comment">// returned Tx is bound to a single connection. Once Commit or</span></span><br><span class="line"><span class="comment">// Rollback is called on the transaction, that transaction&#x27;s</span></span><br><span class="line"><span class="comment">// connection is returned to DB&#x27;s idle connection pool. The pool size</span></span><br><span class="line"><span class="comment">// can be controlled with SetMaxIdleConns.</span></span><br><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Atomic access only. At top of struct to prevent mis-alignment</span></span><br><span class="line"><span class="comment">// on 32-bit platforms. Of type time.Duration.</span></span><br><span class="line">waitDuration <span class="type">int64</span> <span class="comment">// Total time waited for new connections.</span></span><br><span class="line"></span><br><span class="line">connector driver.Connector</span><br><span class="line"><span class="comment">// numClosed is an atomic counter which represents a total number of</span></span><br><span class="line"><span class="comment">// closed connections. Stmt.openStmt checks it before cleaning closed</span></span><br><span class="line"><span class="comment">// connections in Stmt.css.</span></span><br><span class="line">numClosed <span class="type">uint64</span></span><br><span class="line"></span><br><span class="line">mu           sync.Mutex <span class="comment">// protects following fields</span></span><br><span class="line">freeConn     []*driverConn</span><br><span class="line">connRequests <span class="keyword">map</span>[<span class="type">uint64</span>]<span class="keyword">chan</span> connRequest</span><br><span class="line">nextRequest  <span class="type">uint64</span> <span class="comment">// Next key to use in connRequests.</span></span><br><span class="line">numOpen      <span class="type">int</span>    <span class="comment">// number of opened and pending open connections</span></span><br><span class="line"><span class="comment">// Used to signal the need for new connections</span></span><br><span class="line"><span class="comment">// a goroutine running connectionOpener() reads on this chan and</span></span><br><span class="line"><span class="comment">// maybeOpenNewConnections sends on the chan (one send per needed connection)</span></span><br><span class="line"><span class="comment">// It is closed during db.Close(). The close tells the connectionOpener</span></span><br><span class="line"><span class="comment">// goroutine to exit.</span></span><br><span class="line">openerCh          <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">closed            <span class="type">bool</span></span><br><span class="line">dep               <span class="keyword">map</span>[finalCloser]depSet</span><br><span class="line">lastPut           <span class="keyword">map</span>[*driverConn]<span class="type">string</span> <span class="comment">// stacktrace of last conn&#x27;s put; debug only</span></span><br><span class="line">maxIdleCount      <span class="type">int</span>                    <span class="comment">// zero means defaultMaxIdleConns; negative means 0</span></span><br><span class="line">maxOpen           <span class="type">int</span>                    <span class="comment">// &lt;= 0 means unlimited</span></span><br><span class="line">maxLifetime       time.Duration          <span class="comment">// maximum amount of time a connection may be reused</span></span><br><span class="line">maxIdleTime       time.Duration          <span class="comment">// maximum amount of time a connection may be idle before being closed</span></span><br><span class="line">cleanerCh         <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">waitCount         <span class="type">int64</span> <span class="comment">// Total number of connections waited for.</span></span><br><span class="line">maxIdleClosed     <span class="type">int64</span> <span class="comment">// Total number of connections closed due to idle count.</span></span><br><span class="line">maxIdleTimeClosed <span class="type">int64</span> <span class="comment">// Total number of connections closed due to idle time.</span></span><br><span class="line">maxLifetimeClosed <span class="type">int64</span> <span class="comment">// Total number of connections closed due to max connection lifetime limit.</span></span><br><span class="line"></span><br><span class="line">stop <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="comment">// stop cancels the connection opener.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、mysql连接"><a href="#3、mysql连接" class="headerlink" title="3、mysql连接"></a>3、mysql连接</h3><h4 id="3-1-Open数据库"><a href="#3-1-Open数据库" class="headerlink" title="3.1 Open数据库"></a>3.1 Open数据库</h4><blockquote><p>使用Open方法打开数据库:</p><ul><li>dataSourceName格式：<code>“用户名:密码@tcp(host:port)/数据库名称”</code></li><li>Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确<ul><li>当dataSourceName格式不正确的时候，会报错</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开数据库失败:%v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库的打开成功:%#+v\n&quot;</span>, db)</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库db类型:%T\n&quot;</span>, db)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面代码返回的DB数据</span></span><br><span class="line"><span class="comment">// 数据库的打开成功:</span></span><br><span class="line">&amp;sql.DB&#123;</span><br><span class="line">    waitDuration:<span class="number">0</span>, </span><br><span class="line">    connector:(*mysql.connector)(<span class="number">0xc00012a018</span>), </span><br><span class="line">    numClosed:<span class="number">0x0</span>, </span><br><span class="line">    mu:sync.Mutex&#123;state:<span class="number">0</span>, sema:<span class="number">0x0</span>&#125;nn:[]*sql.driverConn(<span class="literal">nil</span>), </span><br><span class="line">    connRequests:<span class="keyword">map</span>[<span class="type">uint64</span>]<span class="keyword">chan</span> sql.connRequest&#123;&#125;, </span><br><span class="line">    nextRequest:<span class="number">0x0</span>, </span><br><span class="line">    numOpen:<span class="number">0</span>, </span><br><span class="line">    openerCh:(<span class="keyword">chan</span> <span class="keyword">struct</span> &#123;&#125;)(<span class="number">0xc0001020c0</span>), </span><br><span class="line">    closed:<span class="literal">false</span>, </span><br><span class="line">    dep:<span class="keyword">map</span>[sql.finalCloser]sql.depSet(<span class="literal">nil</span>), </span><br><span class="line">    lastPut:<span class="keyword">map</span>[*sql.driverConn]<span class="type">string</span>&#123;&#125;, </span><br><span class="line">    maxIdleCount:<span class="number">0</span>, </span><br><span class="line">    maxOpen:<span class="number">0</span>, </span><br><span class="line">    maxLifetime:<span class="number">0</span>, </span><br><span class="line">    maxIdleTime:<span class="number">0</span>, </span><br><span class="line">    cleanerCh:(<span class="keyword">chan</span> <span class="keyword">struct</span> &#123;&#125;)(<span class="literal">nil</span>), </span><br><span class="line">    waitCount:<span class="number">0</span>, </span><br><span class="line">    maxIdleClosed:<span class="number">0</span>, </span><br><span class="line">    maxIdleTimeClosed:<span class="number">0</span>, </span><br><span class="line">    maxLifetimeClosed:<span class="number">0</span>, </span><br><span class="line">    stop:(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>)(<span class="number">0x107d760</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数据库db类型: *sql.DB</span></span><br></pre></td></tr></table></figure><h5 id="3-1-1-Open数据库正确"><a href="#3-1-1-Open数据库正确" class="headerlink" title="3.1.1 Open数据库正确"></a>3.1.1 Open数据库正确</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dsn格式正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">_, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库参数失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库成功\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516104406809.png" class="" title="image-20220516104406809"><h5 id="3-1-2-Open数据库失败"><a href="#3-1-2-Open数据库失败" class="headerlink" title="3.1.2 Open数据库失败"></a>3.1.2 Open数据库失败</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dsn格式不正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:root@tcp(127.0.0.1:3306)————prc_ly&quot;</span></span><br><span class="line">_, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库参数失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库成功\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516104457767.png" class="" title="image-20220516104457767"><h4 id="3-2-Ping数据库"><a href="#3-2-Ping数据库" class="headerlink" title="3.2 Ping数据库"></a>3.2 Ping数据库</h4><blockquote><p>通过Ping方法来真正连接数据库，校验是否连接正确</p></blockquote><h5 id="3-2-1-Ping数据库正确"><a href="#3-2-1-Ping数据库正确" class="headerlink" title="3.2.1 Ping数据库正确"></a>3.2.1 Ping数据库正确</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dsn格式正确，密码不正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库参数失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据库打开是否成功</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开数据库失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开数据库成功\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516105118247.png" class="" title="image-20220516105118247"><h5 id="3-2-2-Ping数据库失败"><a href="#3-2-2-Ping数据库失败" class="headerlink" title="3.2.2 Ping数据库失败"></a>3.2.2 Ping数据库失败</h5><blockquote><p>比如将dsn里的数据库密码写错</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dsn格式正确，密码不正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:root@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;校验数据库参数失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据库打开是否成功</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开数据库失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开数据库成功\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516104653089.png" class="" title="image-20220516104653089"><h4 id="3-3-驱动注入原理简单介绍"><a href="#3-3-驱动注入原理简单介绍" class="headerlink" title="3.3 驱动注入原理简单介绍"></a>3.3 驱动注入原理简单介绍</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用mysql驱动</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是以匿名导入&quot;github.com/go-sql-driver/mysql&quot;包，所以只会导入这个包的Init方法</span></span><br><span class="line"><span class="comment">// 路径：/Users/xxx/Desktop/Code/go_study/pkg/mod/github.com/go-sql-driver/mysql@v1.6.0/driver.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package mysql provides a MySQL driver for Go&#x27;s database/sql package.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The driver should be used via the database/sql package:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  import &quot;database/sql&quot;</span></span><br><span class="line"><span class="comment">//  import _ &quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  db, err := sql.Open(&quot;mysql&quot;, &quot;user:password@/dbname&quot;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// See https://github.com/go-sql-driver/mysql#usage for details</span></span><br><span class="line"><span class="keyword">package</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;database/sql/driver&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">sql.Register(<span class="string">&quot;mysql&quot;</span>, &amp;MySQLDriver&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实可以看到是导入了go原生的<code>database/sql</code>这个包，然后init方法里进行了注册</p><ul><li><p>所以在我们写代码的时候，只需要匿名导入<code>&quot;github.com/go-sql-driver/mysql&quot;</code>这个包，会自动执行init方法，帮我们调用<code>database/sql</code>包里的<code>Register</code>方法来完成mysql的注入</p></li><li><p>Register注册并命名一个数据库，可以在Open函数中使用该命名启用该驱动</p></li><li><p>如果 Register注册同一名称两次，或者driver参数为nil，会导致panic。</p></li></ul></blockquote><h2 id="三、go增删改查数据库"><a href="#三、go增删改查数据库" class="headerlink" title="三、go增删改查数据库"></a>三、go增删改查数据库</h2><h3 id="1、定义全局db连接池"><a href="#1、定义全局db连接池" class="headerlink" title="1、定义全局db连接池"></a>1、定义全局db连接池</h3><blockquote><p>在第二章我们了解到，使用Open方法打开mysql数据库:</p><p>得到的db是<code>database/sql</code>包里定义的<code>DB</code>结构体对象，并且DB是一个连接池，所以我们可以将其定义为全局的变量，供其他地方使用</p><ul><li>另外再initDB方法里，因为db这个变量已经定义为全局变量了，就不需要再重新声明并定义了<ul><li>在db, err &#x3D; sql.Open(“mysql”, dsn)这块代码，如果仍写成<code>:=</code>，就会将db这个变量声明未局部变量，那边全局db仍然是一个空指针，这块需要注意</li><li>另外为什么err也可以直接用<code>=</code>号接收，因为在返回值里定义了</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义db为全局的连接池</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局db连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据库打开是否成功</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、查询数据"><a href="#2、查询数据" class="headerlink" title="2、查询数据"></a>2、查询数据</h3><blockquote><p>查询数据用到了两个方法，queryRow和Scan</p></blockquote><h4 id="2-1-查询单条记录"><a href="#2-1-查询单条记录" class="headerlink" title="2.1 查询单条记录"></a>2.1 查询单条记录</h4><h5 id="2-1-1-QueryRow方法"><a href="#2-1-1-QueryRow方法" class="headerlink" title="2.1.1 QueryRow方法"></a>2.1.1 QueryRow方法</h5><blockquote><p>QueryRow()</p><ul><li>表示是从一个连接池里拿出来一个连接去数据库查询单条记录</li><li>注释翻译：<ul><li>QueryRow执行一个查询，预计最多返回一条记录。</li><li>QueryRow总是返回一个非零的值。</li><li>错误被推迟到Row的Scan方法被调用。</li><li>如果查询没有选择任何行，<em>Row的扫描将返回ErrNoRows。否则，</em>Row’s Scan会扫描第一条被选择的行，并丢弃其余的。</li><li>QueryRow内部使用context.Background。要指定context，请使用QueryRowContext.Background。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QueryRow</span></span><br><span class="line"><span class="comment">// QueryRow executes a query that is expected to return at most one row.</span></span><br><span class="line"><span class="comment">// QueryRow always returns a non-nil value. Errors are deferred until</span></span><br><span class="line"><span class="comment">// Row&#x27;s Scan method is called.</span></span><br><span class="line"><span class="comment">// If the query selects no rows, the *Row&#x27;s Scan will return ErrNoRows.</span></span><br><span class="line"><span class="comment">// Otherwise, the *Row&#x27;s Scan scans the first selected row and discards</span></span><br><span class="line"><span class="comment">// the rest.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// QueryRow uses context.Background internally; to specify the context, use</span></span><br><span class="line"><span class="comment">// QueryRowContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> QueryRow(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) *Row &#123;</span><br><span class="line"><span class="keyword">return</span> db.QueryRowContext(context.Background(), query, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-Scan方法"><a href="#2-1-2-Scan方法" class="headerlink" title="2.1.2 Scan方法"></a>2.1.2 Scan方法</h5><blockquote><p>Scan()</p><ul><li>从queryRow方法拿到的Row对象，然后传进一个结构体来接收查询到结果，对结构体进行重新赋值，所以需要传入结构体指针</li><li>注释翻译<ul><li>扫描将匹配的行中的列复制到目的地的值中。</li><li>指向的值。详情请参见Rows.Scan的文档。</li><li>如果有多条记录符合查询要求。扫描使用第一条记录，并丢弃其余的记录。</li><li>如果没有任何行符合 查询，Scan会返回ErrNoRows。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scan copies the columns from the matched row into the values</span></span><br><span class="line"><span class="comment">// pointed at by dest. See the documentation on Rows.Scan for details.</span></span><br><span class="line"><span class="comment">// If more than one row matches the query,</span></span><br><span class="line"><span class="comment">// Scan uses the first row and discards the rest. If no row matches</span></span><br><span class="line"><span class="comment">// the query, Scan returns ErrNoRows.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Row)</span></span> Scan(dest ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO(bradfitz): for now we need to defensively clone all</span></span><br><span class="line"><span class="comment">// []byte that the driver returned (not permitting</span></span><br><span class="line"><span class="comment">// *RawBytes in Rows.Scan), since we&#x27;re about to close</span></span><br><span class="line"><span class="comment">// the Rows in our defer, when we return from this function.</span></span><br><span class="line"><span class="comment">// the contract with the driver.Next(...) interface is that it</span></span><br><span class="line"><span class="comment">// can return slices into read-only temporary memory that&#x27;s</span></span><br><span class="line"><span class="comment">// only valid until the next Scan/Close. But the TODO is that</span></span><br><span class="line"><span class="comment">// for a lot of drivers, this copy will be unnecessary. We</span></span><br><span class="line"><span class="comment">// should provide an optional interface for drivers to</span></span><br><span class="line"><span class="comment">// implement to say, &quot;don&#x27;t worry, the []bytes that I return</span></span><br><span class="line"><span class="comment">// from Next will not be modified again.&quot; (for instance, if</span></span><br><span class="line"><span class="comment">// they were obtained from the network anyway) But for now we</span></span><br><span class="line"><span class="comment">// don&#x27;t care.</span></span><br><span class="line"><span class="keyword">defer</span> r.rows.Close()</span><br><span class="line"><span class="keyword">for</span> _, dp := <span class="keyword">range</span> dest &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := dp.(*RawBytes); ok &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;sql: RawBytes isn&#x27;t allowed on Row.Scan&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !r.rows.Next() &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ErrNoRows</span><br><span class="line">&#125;</span><br><span class="line">err := r.rows.Scan(dest...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Make sure the query can be processed to completion with no errors.</span></span><br><span class="line"><span class="keyword">return</span> r.rows.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-3-单条记录查询示例"><a href="#2-1-3-单条记录查询示例" class="headerlink" title="2.1.3 单条记录查询示例"></a>2.1.3 单条记录查询示例</h5><blockquote><p>下面是单条记录查询的示例，需要先定一个数据库对应表的结构体，来传入给Scan方法进行接收QueryRow对象获得的值</p><p>注意：</p><ul><li>需要传入的是结构体指针，因为go语言中函数传值一般都是值拷贝，我们不希望值拷贝，如果是值拷贝，拿到的结果就不会重新赋值给声明的结构体</li><li>所以对声明的结构体重新赋值，必须穿入指针，保证是传入的同一个</li><li>并且select语句里如果是用的<code>*</code>（表示表的所有字段）查询，那么Scan里的接收的结构体字段必须要和表里的字段值、个数一致，否则会提示”“</li></ul><p>查询时，传递给QueryRow的sqlStr时，可以在sqlStr里使用<code>?</code>来表示占位符，用来动态传递值</p><p>必须对RowQuery查询到的结果调用Scan方法，因为Scan方法里定义了自动释放数据库连接的方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局db连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义user结构体，结构体字段必须要和查询数据库表的字段定义一致</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">hobby <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据库打开是否成功</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单条记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryData</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sqlStr := <span class="string">&quot;select * from user where id=?;&quot;</span></span><br><span class="line"><span class="comment">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class="line">rowObj := db.QueryRow(sqlStr, id)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接收的结构体对象</span></span><br><span class="line"><span class="keyword">var</span> u1 user</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到结果</span></span><br><span class="line"><span class="comment">// 必须调用Scan方法，Scan会自动归还db的连接，传入user结构体的指针</span></span><br><span class="line">rowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span><br><span class="line">fmt.Printf(<span class="string">&quot;u1:%+#v\n&quot;</span>, u1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;initDB err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queryData(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516145006179.png" class="" title="image-20220516145006179"><h4 id="2-2、最大连接数"><a href="#2-2、最大连接数" class="headerlink" title="2.2、最大连接数"></a>2.2、最大连接数</h4><blockquote><p>因为<code>DB</code>这个结构体自己维护了一个数据库连接池，那么这个连接池可以设置数据库连接池大小</p></blockquote><h5 id="2-2-1-SetMaxOpenConns方法"><a href="#2-2-1-SetMaxOpenConns方法" class="headerlink" title="2.2.1 SetMaxOpenConns方法"></a>2.2.1 SetMaxOpenConns方法</h5><blockquote><p>用来设置数据库连接池最大连接数</p><p>注释翻译:</p><ul><li>SetMaxOpenConns设置到数据库的最大mysql的连接数。</li><li>如果MaxIdleConns大于0，而新的MaxOpenConns小于MaxIdleConns，那么MaxIdleConns将被减少以符合新的MaxOpenConns限制。</li><li>如果n&lt;&#x3D;0，那么对开放连接的数量没有限制。默认是0（无限）。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库连接数</span></span><br><span class="line"><span class="comment">// SetMaxOpenConns sets the maximum number of open connections to the database.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than</span></span><br><span class="line"><span class="comment">// MaxIdleConns, then MaxIdleConns will be reduced to match the new</span></span><br><span class="line"><span class="comment">// MaxOpenConns limit.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If n &lt;= 0, then there is no limit on the number of open connections.</span></span><br><span class="line"><span class="comment">// The default is 0 (unlimited).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxOpenConns(n <span class="type">int</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果设置了SetMaxOpenConns的最大数，比如10</p><ul><li>当连接池的db连接被使用完了，程序就会夯住，</li><li>因为没有连接池里没有闲置的db连接了，此时会一直等待有闲置的db来使用，但是池子里已经没有可用的db连接了，那么程序就卡住了</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局db连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义user结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">hobby <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line"><span class="comment">// 连接数据库， Open方法不会校验用户名和密码正确，只会校验dsn格式是否正确</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数据库打开是否成功</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置db最大连接池的连接个数</span></span><br><span class="line"></span><br><span class="line">db.SetMaxOpenConns(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单条记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryData</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sqlStr := <span class="string">&quot;select * from user where id=?;&quot;</span></span><br><span class="line"><span class="comment">// 从db连接池里拿出来一个连接去查询记录</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">11</span>; i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;开始第%v次查询\n&quot;</span>, i)</span><br><span class="line">db.QueryRow(sqlStr, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接收的结构体对象</span></span><br><span class="line"><span class="keyword">var</span> u1 user</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到结果</span></span><br><span class="line"><span class="comment">// 必须调用Scan方法，Scan会自动归还db的连接</span></span><br><span class="line"><span class="comment">// rowObj.Scan(&amp;u1.id, &amp;u1.name, &amp;u1.age, &amp;u1.hobby)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;u1:%+#v\n&quot;</span>, u1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;initDB err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queryData(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220516171940580.png" class="" title="image-20220516171940580"><h5 id="3-2-2-SetMaxIdleConns"><a href="#3-2-2-SetMaxIdleConns" class="headerlink" title="3.2.2  SetMaxIdleConns"></a>3.2.2  SetMaxIdleConns</h5><blockquote><p>连接池中的最大闲置连接数，如果n大于最大开启连接数，那新的最大闲置连接数会减少到匹配最大开启连接数的显示</p><p>如果n&lt;&#x3D;0，不会保留闲置连接数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxIdleConns(n <span class="type">int</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、查询多条记录"><a href="#2-3、查询多条记录" class="headerlink" title="2.3、查询多条记录"></a>2.3、查询多条记录</h4><blockquote><p>多行查询(db.Query())执行查询后，会返回多行结果（Rows），一般用于执行select命令</p><p>参数args表示query中的占位符</p><p>注意：</p><ul><li>Query方法返回的是<code>Rows对象类型</code>，和查询单条记录的QueryRow方法返回的<code>Row对象类型</code>不一样</li><li>Query方法需要手动的进行归还拿到的那个数据库连接，所以需要再查询方法里添加<code>defer rows.Close()</code></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query 源码</span></span><br><span class="line"><span class="comment">// Query executes a query that returns rows, typically a SELECT.</span></span><br><span class="line"><span class="comment">// The args are for any placeholder parameters in the query.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Query uses context.Background internally; to specify the context, use</span></span><br><span class="line"><span class="comment">// QueryContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Query(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (*Rows, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> db.QueryContext(context.Background(), query, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultiData</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1、sql语句 ?是占位符</span></span><br><span class="line">sqlStr := <span class="string">&quot;select id, name, age from user where id &gt; ?&quot;</span></span><br><span class="line"><span class="comment">// 2、执行查询</span></span><br><span class="line">rowsObj, err := db.Query(sqlStr, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err!= <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s查询多行数据错误:%v\n&quot;</span>, sqlStr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、关闭rows</span></span><br><span class="line"><span class="keyword">defer</span> rowsObj.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、定义返回结果的user结构体对象</span></span><br><span class="line"><span class="keyword">var</span> userMore user</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、循环取值</span></span><br><span class="line"><span class="keyword">for</span> rowsObj.Next() &#123;</span><br><span class="line">rowsObj.Scan(&amp;userMore.id, &amp;userMore.name, &amp;userMore.age)</span><br><span class="line">fmt.Printf(<span class="string">&quot;userMore:%+#v\n&quot;</span>, userMore)</span><br><span class="line">fmt.Printf(<span class="string">&quot;userMore.name:%v\n&quot;</span>, userMore.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、插入数据"><a href="#3、插入数据" class="headerlink" title="3、插入数据"></a>3、插入数据</h3><blockquote><p>插入、更新和删除都是用的<code>Exec</code>方法</p><p>Exec方法：</p><ul><li>执行一次命令（增、删、改、查），返回的Result是对已执行的Sql命令的综合，Result是一个接口</li><li>参数args表示执行sql语句中（也就是Exec方法里query参数）中的占位参数</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exec方法源码</span></span><br><span class="line"><span class="comment">// Exec executes a query without returning any rows.</span></span><br><span class="line"><span class="comment">// The args are for any placeholder parameters in the query.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Exec uses context.Background internally; to specify the context, use</span></span><br><span class="line"><span class="comment">// ExecContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Exec(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (Result, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> db.ExecContext(context.Background(), query, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exec方法返回结果的Result是一个接口类型</span></span><br><span class="line"><span class="comment">// A Result summarizes an executed SQL command.</span></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// LastInsertId returns the integer generated by the database</span></span><br><span class="line"><span class="comment">// in response to a command. Typically this will be from an</span></span><br><span class="line"><span class="comment">// &quot;auto increment&quot; column when inserting a new row. Not all</span></span><br><span class="line"><span class="comment">// databases support this feature, and the syntax of such</span></span><br><span class="line"><span class="comment">// statements varies.</span></span><br><span class="line">LastInsertId() (<span class="type">int64</span>, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RowsAffected returns the number of rows affected by an</span></span><br><span class="line"><span class="comment">// update, insert, or delete. Not every database or database</span></span><br><span class="line"><span class="comment">// driver may support this.</span></span><br><span class="line">RowsAffected() (<span class="type">int64</span>, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-插入数据实例"><a href="#3-1-插入数据实例" class="headerlink" title="3.1 插入数据实例"></a>3.1 插入数据实例</h4><blockquote><p>插入数据的时候，调用db的<code>Exec</code>方法，返回的Result是一个接口类型，这个接口类型有两个方法</p><ul><li>LastInsertId()<ul><li>如果id是自增的，可以拿到插入数据后，插入数据的主键id</li></ul></li><li>RowsAffected()<ul><li>插入数据时还可以拿到操作影响的行数</li></ul></li></ul></blockquote><blockquote><p>从原生数据库中插入数据时，当插入数据成功，会返回两个消息</p><ul><li>Query OK</li><li>1 row affected(0.00 sec)<ul><li>RowsAffected()方法返回的结果就是影响行数的这个数字<code>1</code></li></ul></li></ul></blockquote><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220522230340452.png" class="" title="image-20220522230340452"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertDBData</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>, hobby <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.插入数据的sql</span></span><br><span class="line">insertSql := <span class="string">&quot;insert into user(name, age, hobby) value(?,?,?)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行插入数据</span></span><br><span class="line">ret, err := db.Exec(insertSql, name, age, hobby)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s插入数据错误:%v\n&quot;</span>, insertSql, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.如果是插入数据的操作，能拿到插入数据的id</span></span><br><span class="line">id, err := ret.LastInsertId()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 插入数据还可以拿到操作影响的行数</span></span><br><span class="line">rowsAffect, err := ret.RowsAffected()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取id失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;获取到的Id: %v\n&quot;</span>, id)</span><br><span class="line">fmt.Printf(<span class="string">&quot;操作影响的行数: %v\n&quot;</span>, rowsAffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220522230559355.png" class="" title="image-20220522230559355"><h3 id="4、更新数据"><a href="#4、更新数据" class="headerlink" title="4、更新数据"></a>4、更新数据</h3><blockquote><p>update操作也是用<code>Exec</code>方法，代码和插入操作一致，下面是源码</p><p>注意：</p><ul><li>更新操作可以调用LastInsertId()方法，但是返回的是0，所以调用了也没意义</li><li>更新操作可以调用RowsAffected()方法，仍能看到影响的行数</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateDBData</span><span class="params">(age, id <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.更新数据的sql</span></span><br><span class="line">updateSql := <span class="string">&quot;update user set age = ? where id = ?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行更新数据</span></span><br><span class="line">ret, err := db.Exec(updateSql, age, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s更新数据错误:%v\n&quot;</span>, updateSql, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.如果是更新数据的操作，是不能更新的数据的id</span></span><br><span class="line">updateId, err := ret.LastInsertId()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 更新数据可以拿到操作影响的行数</span></span><br><span class="line">rowsAffect, errAffect := ret.RowsAffected()</span><br><span class="line"><span class="keyword">if</span> errAffect != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;更新数据失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;更新数据获取到的Id: %v\n&quot;</span>, updateId)</span><br><span class="line">fmt.Printf(<span class="string">&quot;更新数据操作影响的行数: %v\n&quot;</span>, rowsAffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220522231716463.png" class="" title="image-20220522231716463"><h3 id="5、删除数据"><a href="#5、删除数据" class="headerlink" title="5、删除数据"></a>5、删除数据</h3><blockquote><p>Delete操作也是用<code>Exec</code>方法，代码和插入操作一致，下面是源码</p><p>注意：</p><ul><li>删除操作可以调用LastInsertId()方法，但是返回的是0，所以调用了也没意义</li><li>删除操作可以调用RowsAffected()方法，仍能看到影响的行数</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDBData</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.删除数据的sql</span></span><br><span class="line">deleteSql := <span class="string">&quot;delete from user where id = ?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.执行删除数据</span></span><br><span class="line">ret, err := db.Exec(deleteSql, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s删除数据错误:%v\n&quot;</span>, deleteSql, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.如果是删除数据的操作，不能拿到删除数据的id</span></span><br><span class="line">deleteId, err := ret.LastInsertId()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 删除数据可以拿到操作影响的行数</span></span><br><span class="line">rowsAffect, errDelete := ret.RowsAffected()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errDelete != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;删除数据失败:%v\n&quot;</span>, errDelete)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;删除数据获取到的Id: %v\n&quot;</span>, deleteId)</span><br><span class="line">fmt.Printf(<span class="string">&quot;删除数据操作影响的行数: %v\n&quot;</span>, rowsAffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220522232456037.png" class="" title="image-20220522232456037"><h3 id="6、Mysql语句预处理"><a href="#6、Mysql语句预处理" class="headerlink" title="6、Mysql语句预处理"></a>6、Mysql语句预处理</h3><h4 id="6-1-预处理的定义"><a href="#6-1-预处理的定义" class="headerlink" title="6.1 预处理的定义"></a>6.1 预处理的定义</h4><blockquote><p>预处理的定义可以从普通SQL执行和预处理执行的区别来理解</p><p>普通SQL执行过程</p><ul><li>1.客户端对SQL语句进行占位符替换得到完整的SQL语句</li><li>2.客户端发送完整SQL语句给Mysql服务端</li><li>3.MYSQL服务端执行完整的SQL语句并将结果返回到客户端</li></ul><p>预处理过程</p><ul><li>1.把SQL语句分为两部分，命令部分和数据部分</li><li>2.客户端<code>先</code>把命令部分发给MYSQL服务器，Mysql服务器进行SQL预处理</li><li>3.<code>然后</code>客户端再把数据发给MYSQL服务器，MYSQL服务器对SQL语句进行占位符替换</li><li>4.MYSQL服务端执行完整的SQL语句并将结果返回到客户端</li></ul></blockquote><h4 id="6-2-预处理的优点"><a href="#6-2-预处理的优点" class="headerlink" title="6.2 预处理的优点"></a>6.2 预处理的优点</h4><blockquote><p>1.预处理SQL后，可以优化MYSQL服务端<code>重复执行SQL</code>的方法，提高服务器性能，提前让MYSQL服务器编译，一次编译多次执行，节省编译的成本</p><p>2.避免SQL注入问题</p></blockquote><h4 id="6-3-GO处理MYSQL预处理"><a href="#6-3-GO处理MYSQL预处理" class="headerlink" title="6.3 GO处理MYSQL预处理"></a>6.3 GO处理MYSQL预处理</h4><blockquote><p>go语言中使用<code>Prepare</code>方法进行SQL语句预处理</p><p>Prepare方法返回的是<code>stmt</code>结构体的指针</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prepare 源码</span></span><br><span class="line"><span class="comment">// Prepare creates a prepared statement for later queries or executions.</span></span><br><span class="line"><span class="comment">// Multiple queries or executions may be run concurrently from the</span></span><br><span class="line"><span class="comment">// returned statement.</span></span><br><span class="line"><span class="comment">// The caller must call the statement&#x27;s Close method</span></span><br><span class="line"><span class="comment">// when the statement is no longer needed.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Prepare uses context.Background internally; to specify the context, use</span></span><br><span class="line"><span class="comment">// PrepareContext.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Prepare(query <span class="type">string</span>) (*Stmt, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> db.PrepareContext(context.Background(), query)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stmt结构体</span></span><br><span class="line"><span class="comment">// Stmt is a prepared statement.</span></span><br><span class="line"><span class="comment">// A Stmt is safe for concurrent use by multiple goroutines.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a Stmt is prepared on a Tx or Conn, it will be bound to a single</span></span><br><span class="line"><span class="comment">// underlying connection forever. If the Tx or Conn closes, the Stmt will</span></span><br><span class="line"><span class="comment">// become unusable and all operations will return an error.</span></span><br><span class="line"><span class="comment">// If a Stmt is prepared on a DB, it will remain usable for the lifetime of the</span></span><br><span class="line"><span class="comment">// DB. When the Stmt needs to execute on a new underlying connection, it will</span></span><br><span class="line"><span class="comment">// prepare itself on the new connection automatically.</span></span><br><span class="line"><span class="keyword">type</span> Stmt <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Immutable:</span></span><br><span class="line">db        *DB    <span class="comment">// where we came from</span></span><br><span class="line">query     <span class="type">string</span> <span class="comment">// that created the Stmt</span></span><br><span class="line">stickyErr <span class="type">error</span>  <span class="comment">// if non-nil, this error is returned for all operations</span></span><br><span class="line"></span><br><span class="line">closemu sync.RWMutex <span class="comment">// held exclusively during close, for read otherwise.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If Stmt is prepared on a Tx or Conn then cg is present and will</span></span><br><span class="line"><span class="comment">// only ever grab a connection from cg.</span></span><br><span class="line"><span class="comment">// If cg is nil then the Stmt must grab an arbitrary connection</span></span><br><span class="line"><span class="comment">// from db and determine if it must prepare the stmt again by</span></span><br><span class="line"><span class="comment">// inspecting css.</span></span><br><span class="line">cg   stmtConnGrabber</span><br><span class="line">cgds *driverStmt</span><br><span class="line"></span><br><span class="line"><span class="comment">// parentStmt is set when a transaction-specific statement</span></span><br><span class="line"><span class="comment">// is requested from an identical statement prepared on the same</span></span><br><span class="line"><span class="comment">// conn. parentStmt is used to track the dependency of this statement</span></span><br><span class="line"><span class="comment">// on its originating (&quot;parent&quot;) statement so that parentStmt may</span></span><br><span class="line"><span class="comment">// be closed by the user without them having to know whether or not</span></span><br><span class="line"><span class="comment">// any transactions are still using it.</span></span><br><span class="line">parentStmt *Stmt</span><br><span class="line"></span><br><span class="line">mu     sync.Mutex <span class="comment">// protects the rest of the fields</span></span><br><span class="line">closed <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css is a list of underlying driver statement interfaces</span></span><br><span class="line"><span class="comment">// that are valid on particular connections. This is only</span></span><br><span class="line"><span class="comment">// used if cg == nil and one is found that has idle</span></span><br><span class="line"><span class="comment">// connections. If cg != nil, cgds is always used.</span></span><br><span class="line">css []connStmt</span><br><span class="line"></span><br><span class="line"><span class="comment">// lastNumClosed is copied from db.numClosed when Stmt is created</span></span><br><span class="line"><span class="comment">// without tx and closed connections in css are removed.</span></span><br><span class="line">lastNumClosed <span class="type">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-1-预处理stmt返回的实例结果"><a href="#6-3-1-预处理stmt返回的实例结果" class="headerlink" title="6.3.1 预处理stmt返回的实例结果"></a>6.3.1 预处理stmt返回的实例结果</h5><blockquote><p>stmt是一个结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理SQL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareSQLAction</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.需要重复执行的语句</span></span><br><span class="line">sqlStr := <span class="string">&quot;select name, age from user where id = ?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 预处理sql</span></span><br><span class="line">stmt, _ := db.Prepare(sqlStr)</span><br><span class="line">fmt.Printf(<span class="string">&quot;预处理的stmt:%+#v\n&quot;</span>, stmt)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 关闭预处理</span></span><br><span class="line"><span class="keyword">defer</span> stmt.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stmt返回值</span></span><br><span class="line">&amp;sql.Stmt&#123;</span><br><span class="line">    db:(*sql.DB)(<span class="number">0xc000103040</span>), </span><br><span class="line">    query:<span class="string">&quot;select name, age from user where id = ?&quot;</span>, </span><br><span class="line">    stickyErr:<span class="type">error</span>(<span class="literal">nil</span>), </span><br><span class="line">    closemu:sync.RWMutex&#123;</span><br><span class="line">        w:sync.Mutex&#123;</span><br><span class="line">            state:<span class="number">0</span>, </span><br><span class="line">            sema:<span class="number">0x0</span></span><br><span class="line">        &#125;, </span><br><span class="line">    writerSem:<span class="number">0x0</span>, </span><br><span class="line">    readerSem:<span class="number">0x0</span>, </span><br><span class="line">    readerCount:<span class="number">0</span>, </span><br><span class="line">    eaderWait:<span class="number">0</span></span><br><span class="line">    &#125;, </span><br><span class="line">    cg:sql.stmtConnGrabber(<span class="literal">nil</span>), </span><br><span class="line">    cgds:(*sql.driverStmt)(<span class="number">0xc0000260c0</span>), </span><br><span class="line">    parentStmt:(*sql.Stmt)(<span class="literal">nil</span>), </span><br><span class="line">    mu:sync.Mutex&#123;</span><br><span class="line">        state:<span class="number">0</span>, </span><br><span class="line">        sema:<span class="number">0x0</span></span><br><span class="line">    &#125;, </span><br><span class="line">    closed:<span class="literal">false</span>, </span><br><span class="line">    css:[]sql.connStmt&#123;</span><br><span class="line">        sql.connStmt&#123;</span><br><span class="line">            dc:(*sql.driverConn)(<span class="number">0xc00011e090</span>), </span><br><span class="line">            ds:(*sql.driverStmt)(<span class="number">0xc0000260c0</span>)</span><br><span class="line">        &#125;             </span><br><span class="line">    &#125;, </span><br><span class="line">    lastNumClosed:<span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-2-预处理进行查询操作实例"><a href="#6-3-2-预处理进行查询操作实例" class="headerlink" title="6.3.2 预处理进行查询操作实例"></a>6.3.2 预处理进行查询操作实例</h5><blockquote><p>预处理可以进行增、删、改、查进行操作</p><p>注意：</p><ul><li>查操作<ul><li>调用的是<code>stmt.QueryRow</code>或<code>stmt.Query</code>方法，然后拿到<code>Row</code>对象，再调用<code>Row</code>对象的<code>Scan</code>获取结果<ul><li>当sql语句里的查询字段没有写的时候，那么返回的结果肯定是该类型的零值<ul><li>比如下面的id、hobby没有查询，所以返回的是零值</li></ul></li><li>Scan方法里放的参数顺序必须和Sql语句里查询字段对应起来，否则也是该该类型的零值<ul><li>比如下面给Scan方法里传入name、age参数时，先后顺序不能乱，否则得到的也是对应类型的零值</li></ul></li></ul></li></ul></li><li>增、删、改操作<ul><li>调用的是<code>stmt.Exec</code>方法，然后得到<code>Result</code>接口类型，再调用<code>Result</code>接口类型里的方法</li></ul></li></ul></blockquote><blockquote><p>下面演示的是预处理进行查询操作，增、删、改操作一样，不做过多赘述</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理SQL</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareSQLAction</span><span class="params">(ids []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 需要重复执行的语句</span></span><br><span class="line">sqlStr := <span class="string">&quot;select name, age from user where id = ?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 预处理sql</span></span><br><span class="line">stmt, err := db.Prepare(sqlStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;预处理的stmt错误：%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 关闭预处理</span></span><br><span class="line"><span class="keyword">defer</span> stmt.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 拿到stmt就去执行重复操作</span></span><br><span class="line"><span class="keyword">var</span> uObj user</span><br><span class="line"><span class="keyword">for</span> _, id := <span class="keyword">range</span> ids &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;查询的Id:%v\n&quot;</span>, id)</span><br><span class="line">rowObj := stmt.QueryRow(id)</span><br><span class="line">rowObj.Scan(&amp;uObj.name, &amp;uObj.age)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj:%+#v\n&quot;</span>, uObj)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj.name:%v\n&quot;</span>, uObj.name)</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj.age:%v\n\n&quot;</span>, uObj.age)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\033[1;32m预处理所有数据完成\033[0m&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523001643890.png" class="" title="image-20220523001643890"><h3 id="7、Mysql事务"><a href="#7、Mysql事务" class="headerlink" title="7、Mysql事务"></a>7、Mysql事务</h3><h4 id="7-1-事务定义"><a href="#7-1-事务定义" class="headerlink" title="7.1 事务定义"></a>7.1 事务定义</h4><blockquote><ul><li><p>事务是一个最小的不可再分的工作单元</p></li><li><p>通常事务对应一个完整的业务</p><ul><li>比如银行转账，就是一个最小的工作单元</li><li>同时这个业务需要执行多次增删改等语句共同完成</li></ul></li><li><p>Mysql中使用了<code>Innodb</code>引擎的数据库或表才支持事务</p></li><li><p>事务处理用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行</p></li></ul></blockquote><h4 id="7-2-事务的ACID"><a href="#7-2-事务的ACID" class="headerlink" title="7.2 事务的ACID"></a>7.2 事务的ACID</h4><blockquote><p>通常事务必须满足四个条件(ACID)</p><ul><li>原子性(Atomicity)，也叫不可分割性<ul><li>一个事务(transaction)中所有的操作，要么都全部完成，要么全部不完成，不会结束在中间某个环节</li><li>实物在执行过程中发生错误，会被回滚(Rollback)到事务开始的状态，就像是这和个事务从来没有被执行过</li></ul></li><li>一致性(Consistency)<ul><li>在事务开始之前和事务结束结束以后，数据库的完整性没有被破坏</li><li>表示写入的数据必须完全符合所有的预设规则，包含数据的精确度、串联型，以及后续数据库可以自发性的完成预定的工作</li></ul></li><li>隔离性(Isolation)，也叫独立性<ul><li>数据库允许多个并发事务同时对其数据进行读写和修改的能力</li><li>隔离性可以防止多个事务并发执行时，由于交叉执行而导致数据的不一致</li><li>事务隔离分为不同级别，包括<ul><li>读未提交（Read uncommitted）</li><li>读提交（read committed）</li><li>可重复读（repeatable read）</li><li>串行化（serializable）</li></ul></li></ul></li><li>持久性(Durability)<ul><li>事务处理结束后，对数据的修改就是永久的，即使系统故障也不会丢失</li></ul></li></ul></blockquote><h4 id="7-3-go中事务方法"><a href="#7-3-go中事务方法" class="headerlink" title="7.3 go中事务方法"></a>7.3 go中事务方法</h4><blockquote><p>go语言中有三个方法可以来实现mysql中的事务操作</p></blockquote><h5 id="7-3-1-开始事务"><a href="#7-3-1-开始事务" class="headerlink" title="7.3.1 开始事务"></a>7.3.1 开始事务</h5><blockquote><p>开启事务是database&#x2F;sql这个包里的Begin方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Begin starts a transaction. The default isolation level is dependent on</span></span><br><span class="line"><span class="comment">// the driver.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Begin uses context.Background internally; to specify the context, use</span></span><br><span class="line"><span class="comment">// BeginTx.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Begin() (*Tx, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> db.BeginTx(context.Background(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-3-2-提交事务"><a href="#7-3-2-提交事务" class="headerlink" title="7.3.2 提交事务"></a>7.3.2 提交事务</h5><blockquote><p>提交事务是开启事务后，返回的Tx结构体里的方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Commit commits the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Commit() <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Check context first to avoid transaction leak.</span></span><br><span class="line"><span class="comment">// If put it behind tx.done CompareAndSwap statement, we can&#x27;t ensure</span></span><br><span class="line"><span class="comment">// the consistency between tx.done and the real COMMIT operation.</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">case</span> &lt;-tx.ctx.Done():</span><br><span class="line"><span class="keyword">if</span> atomic.LoadInt32(&amp;tx.done) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ErrTxDone</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tx.ctx.Err()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !atomic.CompareAndSwapInt32(&amp;tx.done, <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrTxDone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel the Tx to release any active R-closemu locks.</span></span><br><span class="line"><span class="comment">// This is safe to do because tx.done has already transitioned</span></span><br><span class="line"><span class="comment">// from 0 to 1. Hold the W-closemu lock prior to rollback</span></span><br><span class="line"><span class="comment">// to ensure no other connection has an active query.</span></span><br><span class="line">tx.cancel()</span><br><span class="line">tx.closemu.Lock()</span><br><span class="line">tx.closemu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">withLock(tx.dc, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err = tx.txi.Commit()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != driver.ErrBadConn &#123;</span><br><span class="line">tx.closePrepared()</span><br><span class="line">&#125;</span><br><span class="line">tx.<span class="built_in">close</span>(err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-3-3-回滚事务"><a href="#7-3-3-回滚事务" class="headerlink" title="7.3.3 回滚事务"></a>7.3.3 回滚事务</h5><blockquote><p>提交事务是开启事务后，返回的Tx结构体里的方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rollback aborts the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Rollback() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.rollback(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-事务操作实例"><a href="#7-4-事务操作实例" class="headerlink" title="7.4 事务操作实例"></a>7.4 事务操作实例</h4><h5 id="7-4-1-开启事务前表数据"><a href="#7-4-1-开启事务前表数据" class="headerlink" title="7.4.1 开启事务前表数据"></a>7.4.1 开启事务前表数据</h5><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523095756292.png" class="" title="image-20220523095756292"><h5 id="7-4-2-事务操作成功"><a href="#7-4-2-事务操作成功" class="headerlink" title="7.4.2 事务操作成功"></a>7.4.2 事务操作成功</h5><blockquote><p>下面代码里</p><ul><li>事务开启</li><li>然后执行2个sql语句<ul><li>sqlstr1，将age更新为3</li><li>sqlstr2，将age更新为4</li></ul></li><li>如果sql1str1和sqlstr2都执行成功，那么事务就执行成功，本次事务就会提交<ul><li>也就是说要么sql都执行成功，就进行事务提交</li><li>要么sql只要有一处执行失败，就进行事务回滚</li></ul></li><li>如果sql1str1和sqlstr2其中一个执行失败，那么就会直接进行回滚，函数return，本次执行结束</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局db，表示数据库连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// dsn: data source name</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line"><span class="comment">// 打开数据库</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;open mysql err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ping mysql</span></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;conn mysql err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;数据库初始化成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据库字段结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">hobby <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transactionDBData</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">fmt.Println(<span class="string">&quot;开始开启事务&quot;</span>)</span><br><span class="line">tx, err := db.Begin()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;开始事务失败:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交多个sql操作</span></span><br><span class="line">sqlStr1 := <span class="string">&quot;update user set age = 3 where id = 1&quot;</span></span><br><span class="line">sqlStr2 := <span class="string">&quot;update user set age = 4 where id = 2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sqlstr1</span></span><br><span class="line">_, err = tx.Exec(sqlStr1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 执行sql有错误，事务要回滚，并且直接函数返回</span></span><br><span class="line">tx.Rollback()</span><br><span class="line">fmt.Printf(<span class="string">&quot;执行sqlstr1错误需要回滚:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行sqlstr1</span></span><br><span class="line">_, err = tx.Exec(sqlStr2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 执行sql有错误，事务要回滚，并且直接函数返回</span></span><br><span class="line">tx.Rollback()</span><br><span class="line">fmt.Printf(<span class="string">&quot;执行sqlstr1错误需要回滚:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面没问题就开始提交事务</span></span><br><span class="line">err = tx.Commit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">tx.Rollback()</span><br><span class="line">fmt.Printf(<span class="string">&quot;提交事务出错需要回滚:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;事务执行成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库初始化失败:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务执行</span></span><br><span class="line">transactionDBData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523095904385.png" class="" title="image-20220523095904385"><h5 id="7-4-3-事务成功后表数据"><a href="#7-4-3-事务成功后表数据" class="headerlink" title="7.4.3 事务成功后表数据"></a>7.4.3 事务成功后表数据</h5><blockquote><p>可以看到事务实行成功以后，id&#x3D;1和id&#x3D;2的age都进行了更新</p></blockquote><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523095943669.png" class="" title="image-20220523095943669"><h5 id="7-4-4-事务操作失败"><a href="#7-4-4-事务操作失败" class="headerlink" title="7.4.4 事务操作失败"></a>7.4.4 事务操作失败</h5><blockquote><p>事务操作失败：只要事务中有一个sql执行失败、或者提交事务失败，那么本次事务就会回滚，有增删改操作的sql数据就不会修改</p><ul><li>模拟事务执行失败，此时<code>user</code>表的数据里只有id等于1和2的数据，所以可以模拟更新age字段时，将<code>age</code>字段写错，比如写成<code>ages</code></li><li>将id&#x3D;1和id&#x3D;2的<code>age</code>故意写错为<code>ages</code>(正确字段是age)更新为2<ul><li>此时的id&#x3D;1数据，age字段原本的值是3（上面7.4.2小节事务操作成功后修改的数据）</li><li>此时的id&#x3D;2数据，age字段原本的值是4（上面7.4.2小节事务操作成功后修改的数据）</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键修改的代码，将age字段写错，比如写成ages</span></span><br><span class="line">sqlStr1 := <span class="string">&quot;update user set ages = 2 where id = 1&quot;</span></span><br><span class="line">sqlStr2 := <span class="string">&quot;update user set ages = 2 where id = 2&quot;</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523101004206.png" class="" title="image-20220523101004206"><blockquote><p>从执行结果看到执行事务失败后，进行了事务回滚，再次查看表的数据，id&#x3D;1和id&#x3D;2的这两条数据里的age字段的值没有被修改为2，仍是3和4</p></blockquote><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523101057390.png" class="" title="image-20220523101057390"><h3 id="8、SQL中的占位符"><a href="#8、SQL中的占位符" class="headerlink" title="8、SQL中的占位符"></a>8、SQL中的占位符</h3><blockquote><p>sql中的占位符是原生数据库本来的语法，和<code>golang</code>语言没有关系</p></blockquote><table><thead><tr><th>数据库</th><th>占位符</th></tr></thead><tbody><tr><td>MySQL</td><td>?</td></tr><tr><td>PostgreSql</td><td>$1、$2、$3等</td></tr><tr><td>SQLite</td><td>?和$1</td></tr></tbody></table><h2 id="四、sqlx"><a href="#四、sqlx" class="headerlink" title="四、sqlx"></a>四、sqlx</h2><blockquote><p>sqlx是一个库，它在go的标准数据库&#x2F;sql库上提供了一系列的扩展。sqlx版本的sql.DB、sql.TX、sql.Stmt等都没有动用底层接口，因此它们的接口是标准接口的超集。这使得用sqlx整合现有的数据库&#x2F;sql的代码库变得相对容易。</p><p>Sqlx主要的附加概念是：</p><ul><li>将行转入结构（支持嵌入式结构）、映射和切片中</li><li>支持命名的参数，包括准备好的语句</li><li>获取和选择以快速从查询到结构&#x2F;切片</li><li>除了godoc API文档外，还有一些用户文档，解释了如何与sqlx一起使用数据库&#x2F;sql。</li></ul></blockquote><blockquote><p>sql会遇到的坑</p><p><a href="https://zhuanlan.zhihu.com/p/98161107">https://zhuanlan.zhihu.com/p/98161107</a></p></blockquote><h3 id="1、sqlx安装"><a href="#1、sqlx安装" class="headerlink" title="1、sqlx安装"></a>1、sqlx安装</h3><blockquote><p>sqlx是个第三方库，能简化数据库操作，提交效率</p><p>sqlx替换了原生的<code>database/sql</code>这个包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sqlx安装</span></span><br><span class="line">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure><h3 id="2、sqlx连接数据库"><a href="#2、sqlx连接数据库" class="headerlink" title="2、sqlx连接数据库"></a>2、sqlx连接数据库</h3><blockquote><p>sqlx.Connect()直接连数据库，并且将原来<code>database/sql</code>的open和ping方法二者结合为一</p><p>注意：</p><ul><li>定义全局变量db时，是定义的<code>*sqlx.DB</code></li><li>也可使用MustConnect来校验连接，连接失败就会panic<ul><li>MustConnect底层调用的就是Connect方法</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sqlx.Connect代码源码</span></span><br><span class="line"><span class="comment">// Connect to a database and verify with a ping.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Connect</span><span class="params">(driverName, dataSourceName <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>) &#123;</span><br><span class="line">db, err := Open(driverName, dataSourceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">db.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> db, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MustConnect方法源码</span></span><br><span class="line"><span class="comment">// MustConnect connects to a database and panics on error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MustConnect</span><span class="params">(driverName, dataSourceName <span class="type">string</span>)</span></span> *DB &#123;</span><br><span class="line">db, err := Connect(driverName, dataSourceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="comment">// 这个包替换了database/sql这个包</span></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义sqlx.DB全局变量，表示一个连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库连接失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;初始化数据失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523103145835.png" class="" title="image-20220523103145835"><h3 id="3、sqlx操作数据库"><a href="#3、sqlx操作数据库" class="headerlink" title="3、sqlx操作数据库"></a>3、sqlx操作数据库</h3><h4 id="3-1-查询"><a href="#3-1-查询" class="headerlink" title="3.1 查询"></a>3.1 查询</h4><h5 id="3-1-1-单条记录查询"><a href="#3-1-1-单条记录查询" class="headerlink" title="3.1.1 单条记录查询"></a>3.1.1 单条记录查询</h5><blockquote><p>使用的<code>Get</code>方法，其实可以看到需要传入的参数里</p><ul><li>dest: 是一个空接口类型，可以是一个结构体指针，来接收查询到的值</li><li>query: 是一个字符串，表示是执行sql的字符串<ul><li>可以用<code>?</code>进行占位符</li></ul></li><li>args: 表示是参数<ul><li>可以用来传递<code>?</code>占位符的值</li></ul></li><li>注意：<ul><li>在定义接收查询结果的结构体里，字段名需要写成首字母大写</li><li>因为Get方法里的<code>Get</code>用到了反射，那么为了在别的包能找到定义接收结果的结构体，结构体字段的首字母都要大写</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get方法源码</span></span><br><span class="line"><span class="comment">// Get using this DB.</span></span><br><span class="line"><span class="comment">// Any placeholder parameters are replaced with supplied args.</span></span><br><span class="line"><span class="comment">// An error is returned if the result set is empty.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Get(dest <span class="keyword">interface</span>&#123;&#125;, query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Get(db, dest, query, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="comment">// 这个包替换了database/sql这个包</span></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义sqlx.DB全局变量，表示一个连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库连接失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单条查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowData</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sqlStr := <span class="string">&quot;select name, age from user where id = ?&quot;</span></span><br><span class="line"><span class="keyword">var</span> uObj user</span><br><span class="line">err := db.Get(&amp;uObj, sqlStr, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;查询数据失败：%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj:%+#v\n&quot;</span>, uObj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;初始化数据失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">queryRowData(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523221603385.png" class="" title="image-20220523221603385"><h5 id="3-1-2-多条记录查询"><a href="#3-1-2-多条记录查询" class="headerlink" title="3.1.2 多条记录查询"></a>3.1.2 多条记录查询</h5><blockquote><p>查询多条使用<code>Select</code>方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select方法</span></span><br><span class="line"><span class="comment">// Select using this DB.</span></span><br><span class="line"><span class="comment">// Any placeholder parameters are replaced with supplied args.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Select(dest <span class="keyword">interface</span>&#123;&#125;, query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Select(db, dest, query, args...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询多条记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultiRowData</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">sqlStr := <span class="string">&quot;select name, age from user where id &gt; ?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化切片</span></span><br><span class="line">uObj := <span class="built_in">make</span>([]user, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">err := db.Select(&amp;uObj, sqlStr, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;查询多条数据失败：%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj:%+v\n&quot;</span>, uObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523222434551.png" class="" title="image-20220523222434551"><h4 id="3-2-增删改数据"><a href="#3-2-增删改数据" class="headerlink" title="3.2 增删改数据"></a>3.2 增删改数据</h4><blockquote><p>sqlx里的增删改数据操作和原生的<code>database/sql</code>里的方法一致，都是用<code>Exec</code>方法，就不做赘述</p></blockquote><h4 id="3-3-事务支持"><a href="#3-3-事务支持" class="headerlink" title="3.3 事务支持"></a>3.3 事务支持</h4><blockquote><p><code>sqlx</code>中提供了：</p><ul><li><p><code>db.Beginx()</code>：开启事务</p></li><li><p><code>tx.Exec()</code>：事务执行sql语句</p></li><li><p><code>tx.Rollback()</code>: 事务进行回滚</p></li><li><p><code>tx.Commit()</code>:  提交事务</p></li></ul><p>因为sqlx里的事务操作也和原生的<code>database/sql</code>里的事务操作类似，所以就不做重复记录了</p></blockquote><h3 id="4、sqlx常见问题"><a href="#4、sqlx常见问题" class="headerlink" title="4、sqlx常见问题"></a>4、sqlx常见问题</h3><h4 id="4-1-missing-destination-name-xx-in-xxx"><a href="#4-1-missing-destination-name-xx-in-xxx" class="headerlink" title="4.1 missing destination name xx in xxx"></a>4.1 missing destination name xx in xxx</h4><p>问题背景</p><blockquote><ul><li>当sql语句中是select *</li><li>当使用的是sqlx.Select函数查询所有记录</li><li>当Select函数传入的结构体没有使用<code>db</code>tag来标记字段</li></ul></blockquote><p>问题原因</p><blockquote><p>1、当定义的结构体没有添加<code>db</code>这个tag时，</p><ul><li>追踪sqlx的调用链你会找到<code>scanAny</code>函数，而此函数会有一个对比操作，下面这段代码会对比你查询的数据库字段和映射的结构体字段,如果结构体中不存在这个字段就会报 “missing destination name”</li></ul><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/98161107">https://zhuanlan.zhihu.com/p/98161107</a></p><p><a href="https://stackoverflow.com/questions/44985354/sqlx-missing-destination-name-for-struct-tag-through-pointer">https://stackoverflow.com/questions/44985354/sqlx-missing-destination-name-for-struct-tag-through-pointer</a></p><p><a href="https://stackoverflow.com/questions/53655515/sqlx-missing-destination-name-when-using-table-name-in-the-struct-tag">https://stackoverflow.com/questions/53655515/sqlx-missing-destination-name-when-using-table-name-in-the-struct-tag</a></p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// v.Type() 为你传入的struct的反射类型</span><br><span class="line">// columns 为你查询的数据库列</span><br><span class="line">fields := m.TraversalsByName(v.Type(), columns)</span><br><span class="line">// if we are not unsafe and are missing fields, return an error</span><br><span class="line">if f, err := missingFields(fields); err != nil &amp;&amp; !r.unsafe &#123;</span><br><span class="line">    return fmt.Errorf(&quot;missing destination name %s in %T&quot;, columns[f], dest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、当定义的结构体添加了<code>db</code>这个tag时</p><ul><li>需要检查是否漏掉了<code>db</code>tag的两个引号导致的问题</li><li><code>db</code>tag中的字段吗是否和数据库中的字段名对应</li></ul><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_44336275/article/details/113830594">https://blog.csdn.net/qq_44336275&#x2F;article&#x2F;details&#x2F;113830594</a></li></ul></blockquote><p>问题解决</p><blockquote><ul><li>给Select函数传入的结构体使用<code>db</code>tag来标记数据库字段</li><li>并且<code>db</code>tag中的写入的字段名和数据库表中字段名一致</li></ul></blockquote><h2 id="五、SQL注入理解"><a href="#五、SQL注入理解" class="headerlink" title="五、SQL注入理解"></a>五、SQL注入理解</h2><h3 id="1、SQL注入示例"><a href="#1、SQL注入示例" class="headerlink" title="1、SQL注入示例"></a>1、SQL注入示例</h3><blockquote><p>SQL注入就是在查询数据库时，尝试性的在数据查询后面拼接上<code>or 1=1 #</code>这样的语句，就会把所有数据都查出来</p><ul><li><code>#</code>表示后面的语句都注释掉</li></ul><p>如何避免SQL注入</p><ul><li>不要自己拼接SQL语句</li><li>让SQL语句在SQL服务器进行预编译</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="comment">// 这个包替换了database/sql这个包</span></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义sqlx.DB全局变量，表示一个连接池</span></span><br><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/prc_ly&quot;</span></span><br><span class="line">db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;数据库连接失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sql注入查询记录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlInjectDBData</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 手动拼接sql</span></span><br><span class="line">sqlStr := fmt.Sprintf(<span class="string">&quot;select name, age from user where name = &#x27;%v&#x27;&quot;</span>, name)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;手动拼接的sql：%v\n&quot;</span>, sqlStr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化切片</span></span><br><span class="line">uObj := <span class="built_in">make</span>([]user, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">err := db.Select(&amp;uObj, sqlStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;查询多条数据失败：%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;uObj:%+v\n&quot;</span>, uObj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;初始化数据失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确查询</span></span><br><span class="line">sqlInjectDBData(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sql注入查询实例</span></span><br><span class="line">sqlInjectDBData(<span class="string">&quot;sam&#x27; or 1=1 #&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_mysql%E4%BD%BF%E7%94%A8/go_mysql%E4%BD%BF%E7%94%A8/image-20220523225248038.png" class="" title="image-20220523225248038"><h3 id="2、注入分析"><a href="#2、注入分析" class="headerlink" title="2、注入分析"></a>2、注入分析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在编写查询代码时，在代码里进行手动拼接sql</span></span><br><span class="line">sqlStr := fmt.Sprintf(<span class="string">&quot;select name, age from user where name = &#x27;%v&#x27;&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行时，写了如下代码</span></span><br><span class="line">sqlInjectDBData(<span class="string">&quot;sam&#x27; or 1=1 #&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么上面写的语句在sqlStr里就会变成</span></span><br><span class="line"><span class="keyword">select</span> name, age from user where name = <span class="string">&#x27;sam&#x27;</span> or <span class="number">1</span>=<span class="number">1</span> #<span class="string">&#x27; &quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 这样去查询数据库,当有sam这个值时，查询出了sam的记录，并且1=1，表示永远为真，会把所有数据都查出来，这样就是SQL注入了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go Mysql笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Gin笔记</title>
      <link href="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Web框架"><a href="#一、Web框架" class="headerlink" title="一、Web框架"></a>一、Web框架</h2><blockquote><p>框架是一系列工具的集合,可以让开发变得更加便捷</p><p>下方表格罗列了go常见的web框架</p></blockquote><table><thead><tr><th>框架</th><th>特点</th><th>备注</th></tr></thead><tbody><tr><td>go原生的net&#x2F;http</td><td>支持快速开发一个简单的web应用</td><td></td></tr><tr><td>gin框架</td><td>go官方推荐相当流行的一个轻量级的web框架，性能高效，非常推荐学习</td><td></td></tr><tr><td>Beego</td><td>最早的web框架，工具比较全，但是性能较差</td><td></td></tr><tr><td>fiber</td><td>202年发布的框架，性能比较高，上手较快，和gin类似</td><td></td></tr></tbody></table><h3 id="1、gin框架介绍"><a href="#1、gin框架介绍" class="headerlink" title="1、gin框架介绍"></a>1、gin框架介绍</h3><blockquote><p>gin框架的官网：<a href="https://gin-gonic.com/">https://gin-gonic.com/</a></p><p>go官方文档的一个Gin快速教程：<a href="https://golang.google.cn/doc/tutorial/web-service-gin">https://golang.google.cn/doc/tutorial/web-service-gin</a></p><p>Bilibili的Gin视频教程：<a href="https://www.bilibili.com/video/BV1gJ411p7xC?p=3">https://www.bilibili.com/video/BV1gJ411p7xC?p=3</a></p></blockquote><h4 id="1-1-gin框架的特点"><a href="#1-1-gin框架的特点" class="headerlink" title="1.1 gin框架的特点"></a>1.1 gin框架的特点</h4><blockquote><p>gin框架的特点（以下来自官网介绍）：</p><ul><li>快速<ul><li>基于 Radix 树的路由，小内存占用。没有反射。</li><li>可预测的 API 性能</li></ul></li><li>支持路由组<ul><li>Gin帮助您更好地组织您的路由，例如，按照需要授权和不需要授权和不同API版本进行分组。</li><li>此外，路由分组可以无限嵌套而不降低性能。</li></ul></li><li>支持中间件<ul><li>传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</li></ul></li><li>crash处理<ul><li>Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</li></ul></li><li>JSON 验证<ul><li>Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</li></ul></li><li>错误管理<ul><li>Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。</li><li>最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</li></ul></li><li>内置渲染<ul><li>Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</li></ul></li></ul></blockquote><h3 id="2、gin框架初体验"><a href="#2、gin框架初体验" class="headerlink" title="2、gin框架初体验"></a>2、gin框架初体验</h3><blockquote><p>在<code>go1.11</code>以后的版本推荐使用<code>go mod</code>管理版本依赖的问题，关于<code>go mod</code>的使用，可移步<code>go语言基础</code>中查看</p></blockquote><h4 id="1-1-创建项目目录"><a href="#1-1-创建项目目录" class="headerlink" title="1.1 创建项目目录"></a>1.1 创建项目目录</h4><blockquote><ol><li>打开goland，找一个需要存放gin代码的文件夹，比如<code>gin_demo</code>这个文件夹</li><li>然后使用goland以项目形式打开<code>gin_demo</code>，此时<code>gin_demo</code>文件夹下会显示什么内容都没有</li></ol></blockquote><h4 id="1-2-go-mod管理依赖"><a href="#1-2-go-mod管理依赖" class="headerlink" title="1.2 go mod管理依赖"></a>1.2 go mod管理依赖</h4><blockquote><p>此时goland打开以后，<code>gin_demo</code>文件夹下什么东西都没有，所以需要使用如下命令进行<code>mod依赖</code>配置文件的初始化</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以当前的gin_demo文件夹作为mod里的模块名</span></span><br><span class="line">go mod init gin_demo</span><br><span class="line"><span class="comment"># go mod 此时可能会提示需要go mod tidy，如果提示了就执行，没提示可以先忽略</span></span><br><span class="line"><span class="comment"># go mod tidy主要用来根据go.mod里的依赖包进行自动拉取或者将不用的包删除</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220307235440072.png" class="" title="image-20220307235440072"><h4 id="1-3-安装gin"><a href="#1-3-安装gin" class="headerlink" title="1.3 安装gin"></a>1.3 安装gin</h4><blockquote><p>至此，我们项目初始化已经做好了，可以安装gin框架进行使用了，这里需要注意有两种方式可以安装gin</p><ul><li>第一种，可以写一个main.go文件，里面写上gin的样板代码<ul><li>样板代码可以从gin官网复制并且可以跑起来的</li><li>然后执行<code>go mod tidy</code>，此时go会自动拉取github上最新的gin包</li><li>需要注意的是如果拉不下需要看下<code>GO111MODULE</code>和<code>GOPROXY</code>有没有设置，</li></ul></li><li>第二种，当go.mod创建好以后，直接使用go get拉取gin这个包<ul><li><code>go get github.com/gin-gonic/gin</code>命令来下载安装gin框架</li><li>此时下载以后还看不到包被拉到哪了，所以可以创建一个main.go，使用gin的样板代码，然后再执行，就可以看到goland引入了外部的包</li></ul></li></ul></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220308000232662.png" class="" title="image-20220308000232662"><h4 id="1-4-发起请求基础版"><a href="#1-4-发起请求基础版" class="headerlink" title="1.4 发起请求基础版"></a>1.4 发起请求基础版</h4><blockquote><p>下面代码来自Gin的官网</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-发起请求进阶版"><a href="#1-5-发起请求进阶版" class="headerlink" title="1.5 发起请求进阶版"></a>1.5 发起请求进阶版</h4><blockquote><p>抽离<code>r.GET</code>里的匿名函数，<code>r.GET</code>里除了传<code>访问路径</code>，还需要传一个函数名，先看源码</p><p>从源码可以看到，HandlerFunc需要传入的参数类型是<code>*Context</code>。所以抽离出来以后，传入的参数指定类型必须是<code>*gin.Context</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET方法源码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> GET(relativePath <span class="type">string</span>, handlers ...HandlerFunc) IRoutes &#123;</span><br><span class="line"><span class="keyword">return</span> group.handle(http.MethodGet, relativePath, handlers)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  参数handlers ...HandlerFunc 这个HandlerFunc是解释如下</span></span><br><span class="line"><span class="comment">// HandlerFunc defines the handler used by gin middleware as return value.</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func(*Context)里面的的Context是一个结构体，因为这个结构体字段很多，所以需要使用指针来接收</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/03/07 21:35</span></span><br><span class="line"><span class="comment">    @File: gin_demo</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">putMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, getMethod)</span><br><span class="line">r.POST(<span class="string">&quot;/ping&quot;</span>, postMethod)</span><br><span class="line">r.PUT(<span class="string">&quot;/ping&quot;</span>, putMethod)</span><br><span class="line">r.DELETE(<span class="string">&quot;/ping&quot;</span>, deleteMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、gin常用操作"><a href="#二、gin常用操作" class="headerlink" title="二、gin常用操作"></a>二、gin常用操作</h2><h3 id="1、操作GET请求"><a href="#1、操作GET请求" class="headerlink" title="1、操作GET请求"></a>1、操作GET请求</h3><blockquote><p>gin操作GET请求，主要用来获取资源</p></blockquote><h4 id="1-1-GET函数源码"><a href="#1-1-GET函数源码" class="headerlink" title="1.1 GET函数源码"></a>1.1 GET函数源码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET is a shortcut for router.Handle(&quot;GET&quot;, path, handle).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> GET(relativePath <span class="type">string</span>, handlers ...HandlerFunc) IRoutes &#123;</span><br><span class="line"><span class="keyword">return</span> group.handle(http.MethodGet, relativePath, handlers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从英文的注释可以看出来，GET哈桉树是router.Handle(“GET”, path, handle)的简写，需要传入3个参数</p><ul><li>relativePath：相对地址，也就是path路径，是个字符串类型</li><li>handlers：类型是…HandlerFunc，表示是可变长参数，可以接受多个形参，每个形参的类型是HandlerFunc，HandlerFunc类型的声明如下，可以看到类型其实是一个函数类型，并且函数中的形参是*gin.Context，所以给handlers这个形参传入实参时，类型也必须为HandlerFunc</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HandlerFunc：定义了gin中间件使用的处理程序作为返回值</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br></pre></td></tr></table></figure><h4 id="1-2-GET请求示例"><a href="#1-2-GET请求示例" class="headerlink" title="1.2 GET请求示例"></a>1.2 GET请求示例</h4><blockquote><p>下面是简单的一个GET请求示例，并且使用c.String函数返回字符串响应</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;this is first gin api&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">err := r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-获取GET请求PATH参数"><a href="#1-3-获取GET请求PATH参数" class="headerlink" title="1.3 获取GET请求PATH参数"></a>1.3 获取GET请求PATH参数</h4><h5 id="1-3-1-精准匹配"><a href="#1-3-1-精准匹配" class="headerlink" title="1.3.1 精准匹配"></a>1.3.1 精准匹配</h5><blockquote><p>当GET请求中的PATH参数写成 <code>:id</code>形式，表示精准匹配，在路由处理函数中需要使用<code>c.Param</code>函数来根据PATH参数获取传入的参数值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 精准匹配id</span></span><br><span class="line">r.GET(<span class="string">&quot;/user/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取路由上传入的id参数值</span></span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;id:%v&quot;</span>, id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">err := r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230201225759306.png" class="" title="image-20230201225759306"><blockquote><p>其实可以看到&#x2F;user&#x2F;后面传入的参数，赋值给了代码里的路由<code>/user/:id</code>中的id参数，后续可以在路由处理函数中获取</p></blockquote><h5 id="1-3-2-模糊匹配"><a href="#1-3-2-模糊匹配" class="headerlink" title="1.3.2 模糊匹配"></a>1.3.2 模糊匹配</h5><blockquote><p>精准匹配只能匹配一次，当路由有多个&#x2F;隔开是，比如’&#x2F;user&#x2F;sam&#x2F;19’，此时精准匹配就匹配不到了，因为路由<code>/user/:id</code>只能接收到传入的sam值，19没有对应的参数接收，gin会认为该路径不存在，就会报404</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230201230139137.png" class="" title="image-20230201230139137"><blockquote><p>使用模糊匹配，路由改写为<code>/user/:id/*action</code>，使用<code>*action</code>去模糊匹配剩余的路由内容，无论<code>/user/:id</code>路由后面的剩余内容有多少</p><p>模糊匹配使用星号标记的变量，会以*标记的部分开始，一直获取到路径末尾，并且会追加一个<code>/</code>在获取到的值的开头</p><p>模糊匹配严格意义上来说，是匹配的一部分路由内容，并非某个特定参数的值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/:id/*action&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">action := c.Param(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;id: %v \naction: %v&quot;</span>, id, action)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">err := r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230201232136822.png" class="" title="image-20230201232136822"><h4 id="1-4-获取GET请求query参数"><a href="#1-4-获取GET请求query参数" class="headerlink" title="1.4 获取GET请求query参数"></a>1.4 获取GET请求query参数</h4><blockquote><p>query参数是指URI中以<code>?</code>号隔开的右边内容，比如：<a href="http://127.0.0.1:8000/user?name=sam&amp;age=19">http://127.0.0.1:8000/user?name=sam&amp;age=19</a></p><p>query参数就是<code>name=sam&amp;age=19</code>，query参数以<code>&amp;</code>隔开</p></blockquote><h5 id="1-4-1-Query方法"><a href="#1-4-1-Query方法" class="headerlink" title="1.4.1 Query方法"></a>1.4.1 Query方法</h5><blockquote><p>gin中使用Query()方法来获取参数以及值，从Query方法源码也可以看出来用法</p><p>注意：</p><ul><li>Query有返回值，是个string</li><li>获取不到就是一个空的字符串</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Query源码</span></span><br><span class="line"><span class="comment">// Query returns the keyed url query value if it exists,</span></span><br><span class="line"><span class="comment">// otherwise it returns an empty string `(&quot;&quot;)`.</span></span><br><span class="line"><span class="comment">// It is shortcut for `c.Request.URL.Query().Get(key)`</span></span><br><span class="line"><span class="comment">//     GET /path?id=1234&amp;name=Manu&amp;value=</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;id&quot;) == &quot;1234&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;name&quot;) == &quot;Manu&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;value&quot;) == &quot;&quot;</span></span><br><span class="line"><span class="comment">//    c.Query(&quot;wtf&quot;) == &quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">value, _ := c.GetQuery(key)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">age := c.Query(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span> : <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: age,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, getMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316220031084.png" class="" title="image-20220316220031084"><h5 id="1-4-2-GetQuery方法"><a href="#1-4-2-GetQuery方法" class="headerlink" title="1.4.2 GetQuery方法"></a>1.4.2 GetQuery方法</h5><blockquote><p>GetQuery方法也可获取参数值，但是除了会返回查到的值，也会返回一个布尔类型，当布尔为<code>true</code>表示可以获取值，否则获取不到就返回<code>false</code></p><p>多个参数取值，然后通过返回的布尔值进行判断时，需要注意不能用<code>&amp;&amp;</code>(逻辑与)操作符，需要使用<code>||</code>（逻辑或），意思是只要有一个为false，就直接返回到错误</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">name, nameOk := c.GetQuery(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">age, ageOk := c.GetQuery(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%v nameOk:%v\n&quot;</span>, name, nameOk)</span><br><span class="line">fmt.Printf(<span class="string">&quot;age:%v ageOk:%v\n&quot;</span>, age, ageOk)</span><br><span class="line"><span class="keyword">if</span> !nameOk || !ageOk &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name参数和age参数未获取到&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span> : <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: age,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, getMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316221116347.png" class="" title="image-20220316221116347"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316221128643.png" class="" title="image-20220316221128643"><h5 id="1-4-3-DefaultQuery方法"><a href="#1-4-3-DefaultQuery方法" class="headerlink" title="1.4.3 DefaultQuery方法"></a>1.4.3 DefaultQuery方法</h5><blockquote><p>DefaultQuery方法在获取不到指定参数的值时，给定一个默认值，比如这样一个场景，接口需要传入一个bool值，不传默认是false，传了就是用传的bool值，就可以使用DefaultQuery方法来做这个事</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.DefaultQuery(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;id: %v&quot;</span>, id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">err := r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230201233239388.png" class="" title="image-20230201233239388"><blockquote><p>直接请求<code>/user</code>接口不传id参数，那么id参数的值默认就是设置的10</p></blockquote><h4 id="1-5-返回响应数据"><a href="#1-5-返回响应数据" class="headerlink" title="1.5 返回响应数据"></a>1.5 返回响应数据</h4><blockquote><p>gin中提供N种返回响应的函数，常见的有</p><ul><li>返回json数据：<a href="https://pkg.go.dev/github.com/gin-gonic/gin@v1.8.1#Context.JSON">func (c *Context) JSON(code int, obj any)</a></li><li>返回string数据：<a href="https://pkg.go.dev/github.com/gin-gonic/gin@v1.8.1#Context.String">func (c *Context) String(code int, format string, values …any)</a></li><li>返回jsonnp数据：<a href="https://pkg.go.dev/github.com/gin-gonic/gin@v1.8.1#Context.JSONP">func (c *Context) JSONP(code int, obj any)</a></li></ul></blockquote><h5 id="1-5-1-返回string数据"><a href="#1-5-1-返回string数据" class="headerlink" title="1.5.1 返回string数据"></a>1.5.1 返回string数据</h5><blockquote><p>使用gin中Context的String方法，不在此做赘述</p></blockquote><h5 id="1-5-2-使用gin-H返回json数据"><a href="#1-5-2-使用gin-H返回json数据" class="headerlink" title="1.5.2 使用gin.H返回json数据"></a>1.5.2 使用gin.H返回json数据</h5><blockquote><p>gin返回json数据，也是目前比较流行的API接口返回响应数据格式</p><p>gin中返回json数据使用的是使用gin包中Context的JSON方法</p><p>在gin中，提供了<code>gin.H</code>类型来定义返回的json数据，<code>gin.H</code>本质是一个<code>map</code>类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ginn.H源码，从哪个注释可以看出来其实就是map，key是字符串类型，value是空接口类型</span></span><br><span class="line"><span class="comment">// H is a shortcut for map[string]interface&#123;&#125;</span></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]any</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用C.JSON进行数据返回</span></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: uName,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  gin.H 是 map[string]interface&#123;&#125;的简写</span></span><br><span class="line"><span class="comment">// H is a shortcut for map[string]interface&#123;&#125;</span></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: uName,</span><br><span class="line"><span class="string">&quot;age&quot;</span> : <span class="number">19</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;user&quot;</span>, getMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316214332014.png" class="" title="image-20220316214332014"><h5 id="1-5-3-使用map返回json数据"><a href="#1-5-3-使用map返回json数据" class="headerlink" title="1.5.3 使用map返回json数据"></a>1.5.3 使用map返回json数据</h5><blockquote><p>可以使用map来返回数据</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用map</span></span><br><span class="line">data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;hum&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, getMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316214842921.png" class="" title="image-20220316214842921"><h5 id="1-5-4-返回json数据流程解析"><a href="#1-5-4-返回json数据流程解析" class="headerlink" title="1.5.4 返回json数据流程解析"></a>1.5.4 返回json数据流程解析</h5><blockquote><p>当我们写了如下代码，并且请求接口时返回了一个json的响应，gin底层是怎么处理的，做了哪些事情，可以通过代码断点查看出具体的流转处理逻辑</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/say-hi/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">      <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;你好呀&quot;</span>,</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到&#x2F;say-hi&#x2F;请求接口返回了json格式的响应</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230206233328044.png" class="" title="image-20230206233328044"><blockquote><p>接下来使用goland的断点功能，一步一步来分析gin是如何返回json数据的，由于链路较长，所以如下只展示对应的代码，是按照调用顺序显示</p></blockquote><blockquote><p>第一步：</p><ul><li>先调用了<code>gin</code>包中定义的<code>Context</code>结构体的JSON方法</li><li>需要传入code和obj两个参数，对应的就是在代码中调用JSON方法时，传入的状态码200和响应数据gin.H{}</li><li>在JSON方法中调用了<code>Context</code>结构体的<code>Render</code>方法</li><li>在<code>Render</code>方法中传入两个参数<ul><li>code参数：也就是传入的状态码200</li><li>render.JSON{Data: obj}参数：表示是gin框架中render包中的<code>JSON</code>结构体，并且render包中的<code>JSON</code>结构体里面的字段类型为<code>any</code>，并且因为render包中的<code>JSON</code>结构体实现了render包中的Render接口类型定义的Render(http.ResponseWriter) error和WriteContentType(w http.ResponseWriter)方法，所以render包中的<code>JSON</code>结构体初始化的类型也是render包中的Render接口类型，所以能够将render.JSON{Data: obj}参数传给<code>Context</code>结构体的<code>Render</code>方法</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON将给定的结构体序列化为JSON，放入响应体</span></span><br><span class="line"><span class="comment">// 还会将Content-Type设置为&quot;application/json&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj any) &#123;</span><br><span class="line">c.Render(code, render.JSON&#123;Data: obj&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render包中的`JSON`结构体</span></span><br><span class="line"><span class="keyword">type</span> JSON <span class="keyword">struct</span> &#123;  </span><br><span class="line">  Data any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二步：</p><ul><li>在JSON方法中调用了<code>Context</code>结构体的<code>Render</code>方法，需要传入两个参数：<ul><li>code参数：也就是传入的状态码200</li><li>r参数，并且类型是render.Render，所以将render.JSON{Data: obj}参数传入，为什么可以传入第一步中已经解释过了</li></ul></li><li>接下来看下Render方法的实现，在Render方法中调用了三个方法<ul><li>c.Status(code)</li><li>bodyAllowedForStatus(code)</li><li>r.Render(c.Writer)</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Render写下响应头并调用render.Render来渲染数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Render(code <span class="type">int</span>, r render.Render) &#123;</span><br><span class="line">c.Status(code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !bodyAllowedForStatus(code) &#123;</span><br><span class="line">r.WriteContentType(c.Writer)</span><br><span class="line">c.Writer.WriteHeaderNow()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := r.Render(c.Writer); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、操作POST请求"><a href="#2、操作POST请求" class="headerlink" title="2、操作POST请求"></a>2、操作POST请求</h3><h4 id="2-1-POST处理请求的三种方式"><a href="#2-1-POST处理请求的三种方式" class="headerlink" title="2.1 POST处理请求的三种方式"></a>2.1 POST处理请求的三种方式</h4><blockquote><p><code>POST</code>方法起初是用来向服务器输入数据的，使用<code>method</code>为<code>POST</code>时，可以为POST方法指定属性 <code>enctype</code>（也叫编码类型），<code>enctype</code>的值在表单提交的时候一般会对应<code>HTTP</code>报文首部中的<code>Content-Type</code>的值（<code>Content-Type</code>的位置就在请求 <code>headers中）</code>，<code>enctypec</code>常见的值可能为以下三个：</p><ul><li><p>application&#x2F;x-www-form-urlencoded</p></li><li><p>multipart&#x2F;form-data</p></li><li><p>application&#x2F;json</p></li></ul><p>参考：<a href="https://juejin.cn/post/6844903623206371342#comment">https://juejin.cn/post/6844903623206371342#comment</a></p></blockquote><h4 id="2-2-application-x2F-x-www-form-urlencoded格式"><a href="#2-2-application-x2F-x-www-form-urlencoded格式" class="headerlink" title="2.2 application&#x2F;x-www-form-urlencoded格式"></a>2.2 application&#x2F;x-www-form-urlencoded格式</h4><blockquote><ul><li>是最常见的表单提交方式</li><li>当提交的表单中的<code>enctype</code>不指定值，则表单默认采用的提交方式就是这种方法</li></ul></blockquote><blockquote><ul><li>表单提交时，是将 <code>&lt;form/&gt;</code>下所有表单控件的<code>name</code>和 <code>value</code>进行了组合，<code>name</code>和<code>value</code>间使用<code>=</code>连接，多个 <code>name=value</code>键值对间使用<code>&amp;</code>连接的组合形式，形如：age&#x3D;19&amp;id&#x3D;33&amp;address&#x3D;beijing</li><li>出现的所有空格必须使用 <code>+</code>代替之外，还需要对表单提交内容中非数字、字母部分进行编码转义<ul><li>其实<code>+</code>实际上转义后是<code>%20</code></li></ul></li></ul></blockquote><blockquote><p>在gin中可以使用下面代码获取到<code>application/x-www-form-urlencoded</code>的原始提交信息，方便进行理解</p><p>下面代码中：</p><ul><li>使用c.Request.Body获取到本次请求的body体，c.Request.Body是ReadCloser接口类型，那么也一定是io.Reader接口类型</li><li>io.ReadAll方法的入参就是io.Reader类型，那么就可以用io.ReadAll去读取body体内容</li><li>io.ReadAll方法返回值有两个，一个是读取到内容，一个是err，读取到内容的类型是[]byte类型</li><li>那么就可以调用string方法将[]byte转为可读字符串</li><li>并且有时候传参被编码转义了，还可以调用url.Parse方法进行url解码，看到真正的body数据</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    contentType := c.Request.Header[<span class="string">&quot;Content-Type&quot;</span>][<span class="number">0</span>]</span><br><span class="line">    fmt.Printf(<span class="string">&quot;contentType ==&gt; %v\n&quot;</span>, contentType)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> reader io.Reader = c.Request.Body</span><br><span class="line">    s, _ := io.ReadAll(reader)</span><br><span class="line">  </span><br><span class="line">    showBodyStr := <span class="type">string</span>(s)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;body 解码前 ==&gt; %#v\n&quot;</span>, showBodyStr)</span><br><span class="line">    <span class="comment">// 调用net/url进行url解码</span></span><br><span class="line">    ds, _ := url.Parse(showBodyStr)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;body 解码后 ==&gt; %#v\n&quot;</span>, ds.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230227235942737.png" class="" title="image-20230227235942737"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230227234923350.png" class="" title="image-20230227234923350"><blockquote><p>从上面返回结果就可以清晰看到当post提交方式到后端时</p><ul><li><code>Content-Type</code>为<code>application/x-www-form-urlencoded</code></li><li>在解码前，可以看到body中的中文内容被编码了</li><li>在解码后，变为可读的中文</li></ul><p>完全符合上面对<code>application/x-www-form-urlencoded</code>的解释</p></blockquote><h4 id="2-3-multipart-x2F-form-data格式"><a href="#2-3-multipart-x2F-form-data格式" class="headerlink" title="2.3 multipart&#x2F;form-data格式"></a>2.3 multipart&#x2F;form-data格式</h4><blockquote><p><code>multipart/form-data</code>主要是用来在HTML文档中上传二进制文件，当然也支持字符串以及二进制文件同时进行表单提交</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUser</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">contentType := c.Request.Header[<span class="string">&quot;Content-Type&quot;</span>][<span class="number">0</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;contentType ==&gt; %v\n&quot;</span>, contentType)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader io.Reader = c.Request.Body</span><br><span class="line">s, _ := io.ReadAll(reader)</span><br><span class="line">  showBodyStr := <span class="type">string</span>(s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;body 解码前 ==&gt; %#v\n&quot;</span>, showBodyStr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230228000000214.png" class="" title="image-20230228000000214"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230228000030803.png" class="" title="image-20230228000030803"><blockquote><p><code>multipart/form-data</code>表单提交的请求：</p><ul><li><p><code>Content-Type</code>指定为<code>multipart/form-data</code>，然后还指定了一个<code>boundary</code>值，<code>boundary</code>的内容是一串自定义字符串</p></li><li><p>因为body请求体的内容是三个字段，所以只对其中一个字段的格式内容做解释，其余字段的格式都一样</p><ul><li>分隔符：用–和boundary值拼接的格式</li><li><code>\r\n</code>：一个换行符</li><li>Content-disposition: form-data; name&#x3D;&quot;name&quot;\r\n\r\nsam\r\n<ul><li>multipart&#x2F;form-data传输的内容可以有很多个字段，每个字段的开头都必须要声明<code>Content-disposition: form-data</code>，并且指定当前字段的<code>name</code></li></ul></li><li>Content-Type<ul><li>从<code>img</code>字段可以看到，Content-Type值为<code>image/png</code></li><li>Content-Type也可以不设置，默认就是text&#x2F;plain</li></ul></li><li>两个<code>\r\n</code>：两个换行符</li><li>然后接着显示本次提交字段的值，如果是文件类型，那么就是二进制文件，从上图可以看出是二进制文件</li></ul></li></ul></blockquote><blockquote><p>当整个<code>multipart/form-data</code>表单提交结束以后，会以<code>boundary的值</code>和<code>--</code>作为本次提交的结束标识符</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20230228002115922.png" class="" title="image-20230228002115922"><h4 id="2-4-application-x2F-json格式请求数据"><a href="#2-4-application-x2F-json格式请求数据" class="headerlink" title="2.4 application&#x2F;json格式请求数据"></a>2.4 application&#x2F;json格式请求数据</h4><blockquote><p>json格式应该是目前使用最常见的格式，尤其是目前前后端分离的web项目中，最为常见的就是json格式传输数据</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-5-gin处理form-data和x-www-form-urlencode的表单数据"><a href="#2-5-gin处理form-data和x-www-form-urlencode的表单数据" class="headerlink" title="2.5 gin处理form-data和x-www-form-urlencode的表单数据"></a>2.5 gin处理form-data和x-www-form-urlencode的表单数据</h4><blockquote><ul><li>gin提供了PostForm方法来快捷获取<code>form-data</code>格式和<code>x-www-form-urlencode</code>格式的表单数据，当获取不到表单中请求参数的值时就会返回一个默认的空字符串</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用PostForm方法来获取参数</span></span><br><span class="line"><span class="comment">// PostForm returns the specified key from a POST urlencoded form or multipart form</span></span><br><span class="line"><span class="comment">// when it exists, otherwise it returns an empty string `(&quot;&quot;)`.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">value, _ := c.GetPostForm(key)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postMethod</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取请求方法</span></span><br><span class="line">method := c.Request.Method</span><br><span class="line"><span class="comment">// 获取post参数</span></span><br><span class="line">name := c.PostForm(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">age := c.PostForm(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;age&quot;</span>: age,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: method,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/user&quot;</span>, postMethod)</span><br><span class="line">r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220316222032369.png" class="" title="image-20220316222032369"><h3 id="3、使用结构体获取请求参数"><a href="#3、使用结构体获取请求参数" class="headerlink" title="3、使用结构体获取请求参数"></a>3、使用结构体获取请求参数</h3><blockquote><p><a href="https://blog.csdn.net/wohu1104/article/details/121928193">https://blog.csdn.net/wohu1104/article/details/121928193</a></p></blockquote><blockquote><ul><li>gin中使用结构体获取请求参数<ul><li>第2、第3章获取请求参数的方式比较单一，gin中提供了更便捷的获取请求参数的方式</li><li>可以通过请求的<code>Content-Type</code>的类型通过反射来自动提取请求中的<code>querystring(GET方式)、form表单(POST方式)、json、xml</code>等参数到结构体</li><li>可以使用<code>.ShouldBind()</code>来自动提取这几种类型的数据，并把值绑定到对应的结构体对象上</li><li>绑定参数也就是不需要通过上面的第2、第3章的方式去获取参数了，统一使用结构体来提取参数</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShouldBind</span></span><br><span class="line"><span class="comment">// ShouldBind checks the Content-Type to select a binding engine automatically,</span></span><br><span class="line"><span class="comment">// Depending the &quot;Content-Type&quot; header different bindings are used:</span></span><br><span class="line"><span class="comment">//     &quot;application/json&quot; --&gt; JSON binding</span></span><br><span class="line"><span class="comment">//     &quot;application/xml&quot;  --&gt; XML binding</span></span><br><span class="line"><span class="comment">// otherwise --&gt; returns an error</span></span><br><span class="line"><span class="comment">// It parses the request&#x27;s body as JSON if Content-Type == &quot;application/json&quot; using JSON or XML as a JSON input.</span></span><br><span class="line"><span class="comment">// It decodes the json payload into the struct specified as a pointer.</span></span><br><span class="line"><span class="comment">// Like c.Bind() but this method does not set the response status code to 400 and abort if the json is not valid.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> ShouldBind(obj <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">b := binding.Default(c.Request.Method, c.ContentType())</span><br><span class="line"><span class="keyword">return</span> c.ShouldBindWith(obj, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>shouldBind绑定数据顺序<ul><li>如果是get请求，只是用form绑定引擎(query)</li><li>如果是post请求，先检查content-type是不是JSON&#x2F;XML，然后再使用form(form-data)</li></ul></li></ul></blockquote><h4 id="5-1-结构体字段小写"><a href="#5-1-结构体字段小写" class="headerlink" title="5.1 结构体字段小写"></a>5.1 结构体字段小写</h4><blockquote><p>使用结构体绑定传过来的参数，当结构体里的字段都是小写的时候，会发现请求时传过来的值获取不到，如下代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindUserData</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> userObj UserInfo</span><br><span class="line">err := c.ShouldBind(&amp;userObj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">404</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: userObj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, bindUserData)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321210054599.png" class="" title="image-20220321210054599"><h4 id="5-2-结构体字段大写"><a href="#5-2-结构体字段大写" class="headerlink" title="5.2 结构体字段大写"></a>5.2 结构体字段大写</h4><blockquote><ul><li>为什么获取不到呢？<ul><li>因为结构体是<code>gin</code>这个包要访问我们在自己包里定义的结构体里的字段，</li><li>在o语言中，一个包要访问另一个包里的字段，这个字段首字母必须是大写的才可以被访问到</li><li>那么将结构体字段改成大写试试</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindUserData</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> userObj UserInfo</span><br><span class="line">err := c.ShouldBind(&amp;userObj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">404</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: userObj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, bindUserData)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321210628756.png" class="" title="image-20220321210628756"><blockquote><p>可以看到结构体字段被返回了，但是返回值是空的？</p><ul><li>从结果来看，结构体字段的值都是对应类型的零值，其实就说明了即使进行了请求参数的<code>shouldBind</code>，但是并没有获取请求参数里的值给<code>UserInfo</code>这个结构体中的对应字段，也就是<code>shouldBind</code>的时候，传进来的参数<code>name</code>和<code>age</code>仍然没有找到对应字段进行绑定</li></ul></blockquote><blockquote><ul><li>由于<code>UserInfo</code>结构体字段修改成了首字母大写的，那么我们把<code>GET</code>请求里的<code>name</code>和<code>age</code>改成首字母大写试试重新请求，看看<code>shouldBind</code>是否可以获取到请求参数里对应<code>Name</code>和<code>Age</code>传进来的值</li></ul></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321210841637.png" class="" title="image-20220321210841637"><blockquote><p>可以看到请求参数首字母大写后，<code>UserInfo</code>这个结构体里设置的<code>Name</code>和<code>Age</code>字段通过<code>ShouldBind</code>方法成功绑定了请求参数的值</p></blockquote><h4 id="5-3-接口请求字段都小写"><a href="#5-3-接口请求字段都小写" class="headerlink" title="5.3 接口请求字段都小写"></a>5.3 接口请求字段都小写</h4><blockquote><p>从第5.2章看到有数据返回了，但是前后端交互时肯定不能是请求和返回时的字段值都是首字母大写，那么就需要使用结构体tag了，让字段都变为小写，tag表示是用了反射来获取结构体中的字段：</p><ul><li>Gin中的GET请求大多用<code>form</code>这个tag</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">string</span> <span class="string">`form:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindUserData</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> userObj UserInfo</span><br><span class="line">err := c.ShouldBind(&amp;userObj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">404</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: userObj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, bindUserData)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321211550814.png" class="" title="image-20220321211550814"><h4 id="5-4-json请求结构体字段小写"><a href="#5-4-json请求结构体字段小写" class="headerlink" title="5.4 json请求结构体字段小写"></a>5.4 json请求结构体字段小写</h4><blockquote><p>这里处理的json方式请求gin框架时，对所有参数进行小写</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`form:&quot;name&quot; json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">string</span> <span class="string">`form:&quot;age&quot; json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindUserData</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> userObj UserInfo</span><br><span class="line">err := c.ShouldBind(&amp;userObj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">404</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: userObj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, bindUserData)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321211734519.png" class="" title="image-20220321211734519"><h4 id="5-5-请求和响应使用的tag总结"><a href="#5-5-请求和响应使用的tag总结" class="headerlink" title="5.5 请求和响应使用的tag总结"></a>5.5 请求和响应使用的tag总结</h4><blockquote><p><code>form</code>这个tag负责将接收进来的参数进行转化，让内部的结构体可以接收到并赋值</p><p><code>json</code>这个tag负责将对应结构体字段以小写形式给返回</p></blockquote><h4 id="5-6-json数据请求"><a href="#5-6-json数据请求" class="headerlink" title="5.6 json数据请求"></a>5.6 json数据请求</h4><blockquote><p>在前后端分离的项目，前端请求的参数也大多是以json格式来发请求，所以绑定参数也可以来处理json的请求</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`form:&quot;name&quot; json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`form:&quot;age&quot; json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bindUserData</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> userObj UserInfo</span><br><span class="line">err := c.ShouldBind(&amp;userObj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">404</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: userObj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/jsondata&quot;</span>, bindUserData)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321212437785.png" class="" title="image-20220321212437785"><h3 id="4、文件上传"><a href="#4、文件上传" class="headerlink" title="4、文件上传"></a>4、文件上传</h3><h4 id="4-1-单个文件上传"><a href="#4-1-单个文件上传" class="headerlink" title="4.1 单个文件上传"></a>4.1 单个文件上传</h4><blockquote><p>处理multipart forms提交文件时默认的内存限制是32MiNB</p><p>可以通过gin中的MaxMultipartMemory 进行修改</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">uploadFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 从请求中读取文件</span></span><br><span class="line"><span class="comment">//fobj, err := c.FormFile(&quot;pic&quot;)</span></span><br><span class="line">fobj, err := c.FormFile(<span class="string">&quot;pic&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>: <span class="string">&quot;读取文件错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err.Error(),</span><br><span class="line"><span class="string">&quot;fobj&quot;</span>: fobj,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fobj:%v\n&quot;</span>, fobj)</span><br><span class="line"><span class="comment">// 将读取的文件保存在本地(服务端本地)</span></span><br><span class="line">dst := path.Join(<span class="string">&quot;./&quot;</span>, fobj.Filename)</span><br><span class="line">err := c.SaveUploadedFile(fobj, dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>: <span class="string">&quot;保存文件错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: err,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;errNo&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;保存文件成功&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/uploadfile&quot;</span>, uploadFile)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下图是在postman请求的截图</p><ul><li>第一张是设置<code>header</code>里的<code>Content-Type</code>为：<code>multipart/form-data; boundary=&lt;calculated when request is sent&gt;</code><ul><li>这个<code>boundary</code>一定要有，否则会爆这个错误：<code>no multipart boundary param in Content-Type</code></li></ul></li><li>第二张图是设置body里的请求，设置<code>pic</code>参数的类型为<code>file</code>，然后进行上传</li></ul></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321220609748.png" class="" title="image-20220321220609748"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321220803728.png" class="" title="image-20220321220803728"><h3 id="5、路由重定向"><a href="#5、路由重定向" class="headerlink" title="5、路由重定向"></a>5、路由重定向</h3><blockquote><p>gin中可以对路由进行重定向，当前这部分是前端需要干的活</p></blockquote><h4 id="5-1-请求重定向"><a href="#5-1-请求重定向" class="headerlink" title="5.1 请求重定向"></a>5.1 请求重定向</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示将`index`这个函数的请求转发到百度</span></span><br><span class="line">c.Redirect(<span class="number">301</span>, <span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexFunc</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 请求重定向</span></span><br><span class="line">c.Redirect(<span class="number">301</span>, <span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/index&quot;</span>, indexFunc)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-路由重定向"><a href="#5-2-路由重定向" class="headerlink" title="5.2 路由重定向"></a>5.2 路由重定向</h4><blockquote><p>请求时转换到&#x2F;xx的路由处理函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由重定向,将请求转给user这个路由对应的函数</span></span><br><span class="line">c.Request.URL.Path = <span class="string">&quot;/user&quot;</span></span><br><span class="line"><span class="comment">// 用router下的HandleContext处理上下文</span></span><br><span class="line">r.HandleContext(c)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexFunc</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 路由重定向</span></span><br><span class="line">c.Request.URL.Path = <span class="string">&quot;/user&quot;</span></span><br><span class="line">r.HandleContext(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userFunc</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 请求重定向</span></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;action&quot;</span>: <span class="string">&quot;this is userFunc&quot;</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.GET(<span class="string">&quot;/index&quot;</span>, indexFunc)</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, userFunc)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220321224528484.png" class="" title="image-20220321224528484"><blockquote><p>从上图可以看出，访问<code>/index</code>返回了<code>/user</code>对应函数的结果</p></blockquote><h3 id="6、路由管理"><a href="#6、路由管理" class="headerlink" title="6、路由管理"></a>6、路由管理</h3><h4 id="6-1-路由"><a href="#6-1-路由" class="headerlink" title="6.1 路由"></a>6.1 路由</h4><blockquote><p>路由是指URI到函数的映射</p><p>一个UIR示例：<a href="http://127.0.0.1:8080/api/user/?uid=123&amp;age=19">http://127.0.0.1:8080/api/user/?uid=123&amp;age=19</a></p><ul><li>协议：http&#x2F;https等</li><li>域名与端口：比如：127.0.0.1:8000</li><li>path：&#x2F;api&#x2F;user</li><li>query参数：uri以?隔开，后面的uid&#x3D;123&amp;age&#x3D;19</li></ul></blockquote><blockquote><p>gin中路由使用的是<code>httprouter</code>这个库</p><p>路由就是访问的<code>url</code>，<code>url</code>在<code>gin</code>中指向了处理的函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userFunc</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;action&quot;</span>: <span class="string">&quot;this is userFunc&quot;</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, userFunc)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322205612475.png" class="" title="image-20220322205612475"><h4 id="6-2-路由组"><a href="#6-2-路由组" class="headerlink" title="6.2 路由组"></a>6.2 路由组</h4><blockquote><p>路由组就是将一组拥有共同前缀的路由，将公共前缀提取出来，组件一个组，然后这个组里再进行其他路由划分</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Group前缀</span></span><br><span class="line"><span class="comment">// Group creates a new router group. You should add all the routes that have common middlewares or the same path prefix.</span></span><br><span class="line"><span class="comment">// For example, all the routes that use a common middleware for authorization could be grouped.</span></span><br><span class="line"><span class="comment">// 翻译</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    组创建一个新的路由器组。你应该添加所有有共同的中间件或相同路径前缀的路由。</span></span><br><span class="line"><span class="comment">    例如，所有使用共同的中间件进行授权的路由都可以被分组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Group(relativePath <span class="type">string</span>, handlers ...HandlerFunc) *RouterGroup &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;RouterGroup&#123;</span><br><span class="line">Handlers: group.combineHandlers(handlers),</span><br><span class="line">basePath: group.calculateAbsolutePath(relativePath),</span><br><span class="line">engine:   group.engine,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;this is user addr&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;this is user info&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;userGroup: %+v\n&quot;</span>, *userGroup)</span><br><span class="line">&#123;</span><br><span class="line">userGroup.GET(<span class="string">&quot;/addr&quot;</span>, userAddr)</span><br><span class="line">userGroup.GET(<span class="string">&quot;/info&quot;</span>, userInfo)</span><br><span class="line">&#125;</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-路由组的值"><a href="#6-3-路由组的值" class="headerlink" title="6.3 路由组的值"></a>6.3 路由组的值</h4><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322211113679.png" class="" title="image-20220322211113679"><blockquote><p>从启动gin的截图来看，userGroup是RouterGroup结构体类型，里面有<code>basePath</code>这个字段，表示是公共的路径，所以访问<code>/user/info</code>时，先找<code>/user</code>这个路由组，再从<code>/user</code>这个路由组里去找<code>/info</code>这个路由，找到就返回值，找不到就提示404</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322211323252.png" class="" title="image-20220322211323252"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322211343422.png" class="" title="image-20220322211343422"><h4 id="6-4-路由组嵌套"><a href="#6-4-路由组嵌套" class="headerlink" title="6.4 路由组嵌套"></a>6.4 路由组嵌套</h4><blockquote><p>路由组也支持嵌套，就是路由组里继续套用一个路由组，那么访问的链接就是形如：&#x2F;group1&#x2F;group2&#x2F;xxx</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;this is user addr&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;this is user info&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;userGroup: %+v\n&quot;</span>, *userGroup)</span><br><span class="line">&#123;</span><br><span class="line">userGroup.GET(<span class="string">&quot;/addr&quot;</span>, userAddr)</span><br><span class="line">infoGroup := userGroup.Group(<span class="string">&quot;/info&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">infoGroup.GET(<span class="string">&quot;/pinfo&quot;</span>, userInfo)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322213637665.png" class="" title="image-20220322213637665"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322213650783.png" class="" title="image-20220322213650783"><blockquote><p>可以看到有共同的路由前缀，就可以表示不同的业务线，或者使用api版本(比如v1&#x2F;v2)进行区分</p></blockquote><h3 id="7、Any任意请求"><a href="#7、Any任意请求" class="headerlink" title="7、Any任意请求"></a>7、Any任意请求</h3><blockquote><p>any函数可以接收任意请求方法，下面是代码和截图可以看出来不管是get还是post都可以来请求</p><p>从源代码可以看出来，any包装了所有的请求方式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any源代码</span></span><br><span class="line"><span class="comment">// Any registers a route that matches all the HTTP methods.</span></span><br><span class="line"><span class="comment">// GET, POST, PUT, PATCH, HEAD, OPTIONS, DELETE, CONNECT, TRACE.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Any(relativePath <span class="type">string</span>, handlers ...HandlerFunc) IRoutes &#123;</span><br><span class="line">group.handle(http.MethodGet, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodPost, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodPut, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodPatch, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodHead, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodOptions, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodDelete, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodConnect, relativePath, handlers)</span><br><span class="line">group.handle(http.MethodTrace, relativePath, handlers)</span><br><span class="line"><span class="keyword">return</span> group.returnObj()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;this is user addr&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.Any(<span class="string">&quot;/useraddr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322212449668.png" class="" title="image-20220322212449668"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322212501626.png" class="" title="image-20220322212501626"><h3 id="8、NoRoute函数"><a href="#8、NoRoute函数" class="headerlink" title="8、NoRoute函数"></a>8、NoRoute函数</h3><blockquote><p>gin中有一个NoRoute函数，可以定义当路由找不到时的错误信息，表示所有找不到路由都指到这个函数下，当然也可以对路由组设定自己的NoRoute处理函数</p><ul><li>NoRoute不需要指定路由，直接传入处理NoRoute的函数即可</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notFoundErr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">404</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;router not found in server&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.NoRoute(notFoundErr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322213003931.png" class="" title="image-20220322213003931"><h2 id="三、gin中间件"><a href="#三、gin中间件" class="headerlink" title="三、gin中间件"></a>三、gin中间件</h2><h3 id="1、中间件简介"><a href="#1、中间件简介" class="headerlink" title="1、中间件简介"></a>1、中间件简介</h3><blockquote><p>gin允许在处理请求过程中，加入开发者自己的处理函数，这些函数就是中间件，中间件适合处理：</p><ul><li>公共的业务逻辑<ul><li>比如登录认证、权限校验、数据分页、记录日志等等</li></ul></li></ul></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322215119814.png" class="" title="image-20220322215119814"><blockquote><p>从上图就可以看出来，当浏览器发起请求时，先经过中间件处理以后，再转给真正的路由函数处理，最后再将结果返回给浏览器</p><p>这样就做到了拦截请求，然后对请求做处理后再转给真正的路由函数，这也是钩子函数</p></blockquote><h3 id="2、中间件注册"><a href="#2、中间件注册" class="headerlink" title="2、中间件注册"></a>2、中间件注册</h3><blockquote><p><code>gin</code>的中间件</p><ul><li>中间件方法定义的时候，必须是<code>gin.HandlerFunc</code>类型，这个类型也是路由处理函数的类型</li><li>中间件方法是可以有值的</li><li>路由组支持注册中间件</li><li>设置好中间件以后，中间件后面的路由都会使用这个中间件</li><li>设置在中间件之前的路由则不会生效</li><li>中间件可以注册N个，不受个数限制</li></ul></blockquote><h4 id="2-1-路由处理函数中注册中间件"><a href="#2-1-路由处理函数中注册中间件" class="headerlink" title="2.1 路由处理函数中注册中间件"></a>2.1 路由处理函数中注册中间件</h4><blockquote><p>可以在每个路由请求前加入中间件注册函数</p><ul><li>当请求路由时，如果存在中间件，会先执行中间件，再执行路由处理函数</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mw1 就是中间件函数</span></span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, mw1, userInfo)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.GET(<span class="string">&quot;/user&quot;</span>, mw1, userInfo)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322220010964.png" class="" title="image-20220322220010964"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322220024407.png" class="" title="image-20220322220024407"><blockquote><p>从执行结果来看，中间件函数先执行，再执行的后面的路由函数</p></blockquote><h4 id="2-2-全局注册中间件"><a href="#2-2-全局注册中间件" class="headerlink" title="2.2 全局注册中间件"></a>2.2 全局注册中间件</h4><blockquote><p>当有很多个函数都需要中间件函数的时候，每个路由函数注册的前面都需要写中间件函数就比较麻烦，所以可以设置为全局注册模式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Use方法来注册中间件</span></span><br><span class="line"><span class="comment">// 通过Use()注册的中间件将被包含在每个请求的处理程序链中。即使是404，405，静态文件...，</span></span><br><span class="line"><span class="comment">// 例如日志、权限等</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Use(middleware ...HandlerFunc) IRoutes &#123;</span><br><span class="line">engine.RouterGroup.Use(middleware...)</span><br><span class="line">engine.rebuild404Handlers()</span><br><span class="line">engine.rebuild405Handlers()</span><br><span class="line"><span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.Use(mw1)</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, userInfo)</span><br><span class="line">r.GET(<span class="string">&quot;/useraddr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322222144657.png" class="" title="image-20220322222144657"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322222159652.png" class="" title="image-20220322222159652"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322222126918.png" class="" title="image-20220322222126918"><h3 id="3、中间件中的Next方法"><a href="#3、中间件中的Next方法" class="headerlink" title="3、中间件中的Next方法"></a>3、中间件中的Next方法</h3><blockquote><p>既然中间件执行完以后就会执行路由函数，那么为什么还需要<code>Next</code>函数呢？从下面的分析可以看出来</p></blockquote><h4 id="3-1-中间件中没有Next方法"><a href="#3-1-中间件中没有Next方法" class="headerlink" title="3.1 中间件中没有Next方法"></a>3.1 中间件中没有Next方法</h4><blockquote><p>中间函数里没有Next方法：</p><ul><li>相当于先把中间件方法的<code>所有代码</code>执行完以后，再执行后面的路由函数</li><li>如果想在中间件里执行一部分代码后，再执行后续的路由函数，等路由函数执行完成再返回来执行剩下的中间件函数，这样就做不到，因为中间件函数全部执行完成了，从下面的执行结果图就可以看到</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1开始执行了\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1执行完了\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322223206926.png" class="" title="image-20220322223206926"><blockquote><p>从打印的结果来看，将mw1中间件方法的两条fmt打印语句都执行完了，采取执行的userAddr路由函数</p></blockquote><h4 id="3-2-中间件有Next方法"><a href="#3-2-中间件有Next方法" class="headerlink" title="3.2 中间件有Next方法"></a>3.2 中间件有Next方法</h4><blockquote><p>中间函数里的Next函数，相当于是遇到Next函数是，会先调用后面的路由处理函数，当后面的路由处理函数处理完成以后，再来执行中间件函数剩余部分代码，这样就可以做到以一些条件来控制是否要执行路由函数，比如权限控制等功能</p><ul><li>从下图也可以看出来，先执行了中间件函数的开始部分，<code>遇到Next函数</code>后去处理后面的userAddr这个路由函数了，当userAddr路由函数处理完成后，并将路由函数处理的基础进行返回，再又回来接着处理中间件函数的剩余代码功能了</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1开始执行了\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">c.Next()</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1执行完了\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322223410381.png" class="" title="image-20220322223410381"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322224817341.png" class="" title="image-20220322224817341"><h3 id="4、中间件中的Abort方法"><a href="#4、中间件中的Abort方法" class="headerlink" title="4、中间件中的Abort方法"></a>4、中间件中的Abort方法</h3><blockquote><p>Abort函数用户<code>不处理</code>中间件后面的路由函数，表示放弃执行</p><p>从下图可以看出只执行了中间件函数，中间件后面的路由函数并没有执行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1开始执行了\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">c.Abort()</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1执行完了\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.Use(mw1)</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, userInfo)</span><br><span class="line">r.GET(<span class="string">&quot;/useraddr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322230832839.png" class="" title="image-20220322230832839"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322230841974.png" class="" title="image-20220322230841974"><h3 id="5、多个中间件函数"><a href="#5、多个中间件函数" class="headerlink" title="5、多个中间件函数"></a>5、多个中间件函数</h3><blockquote><p>当有多个中间件函数时，执行的顺序如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1开始执行了\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">c.Next()</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw1执行完了\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mw2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw2开始执行了\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是中间件函数mw2&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">// 继续调用后面的路由函数</span></span><br><span class="line">c.Next()</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是中间件函数mw2执行完了\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.Use(mw1, mw2)</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, userInfo)</span><br><span class="line">r.GET(<span class="string">&quot;/useraddr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322225047911.png" class="" title="image-20220322225047911"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322225100631.png" class="" title="image-20220322225100631"><blockquote><p>可以看到是按中间件函数注册的顺序，先执行中间件函数开始的代码，遇到Next函数时，转过头去执行路由处理函数，当路由处理函数执行完以后，再来执行和路由函数挨得最近的那个中间件函数，依次往外执行中间件函数，直到执行完成</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322230038530.png" class="" title="image-20220322230038530"><blockquote><p>从上图可以看出</p><ul><li>执行mw1函数开始时，接着遇到Next函数，mw1里的Next函数执行的就是mw2函数里的代码</li><li>接着执行mw2函数里的代码开始，接着遇到Next函数，mw2里的Next函数执行的就是useraddr路由函数的代码</li><li>useraddr路由函数执行完成以后，mw2里的Next函数执行完成，接着执行mw2函数结束代码</li><li>mw2函数结束代码执行完成以后， mw1的next函数执行完成</li><li>最后执行mw1函数结束代码，请求结束完成</li></ul></blockquote><h3 id="6、中间件的传参"><a href="#6、中间件的传参" class="headerlink" title="6、中间件的传参"></a>6、中间件的传参</h3><blockquote><p>定义一个闭包函数，返回一个匿名函数，匿名函数的类型是<code>gin.HandlerFunc</code>，这那么这样就做到了一个中间件既可以传参，返回值又符合gin需要的中间件函数类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件函数可以传参的写法</span></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r.Use(authV1(<span class="literal">false</span>))</span><br><span class="line">r.GET(<span class="string">&quot;/userinfo&quot;</span>, userInfo)</span><br><span class="line">r.GET(<span class="string">&quot;/useraddr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当传参为false时，不会执行路由处理函数</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322233053545.png" class="" title="image-20220322233053545"><blockquote><p>当传参为true时，则执行路由处理函数</p></blockquote><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220322233139511.png" class="" title="image-20220322233139511"><h3 id="7、路由组注册中间件"><a href="#7、路由组注册中间件" class="headerlink" title="7、路由组注册中间件"></a>7、路由组注册中间件</h3><blockquote><p>路由组也可以注册中间件，有两种方式</p></blockquote><h4 id="7-1-注册方式一"><a href="#7-1-注册方式一" class="headerlink" title="7.1 注册方式一"></a>7.1 注册方式一</h4><blockquote><p>在初始化路由组的时候，将中间件注册到路由组中，这样这个路由组中所有的路由都会应用到该中间件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将中间件函数注册到初始化路由组的位置</span></span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>, authV1(<span class="literal">true</span>))</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 将中间件函数注册到初始化路由组的位置</span></span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>, authV1(<span class="literal">true</span>))</span><br><span class="line">userGroup.GET(<span class="string">&quot;/info&quot;</span>, userInfo)</span><br><span class="line">userGroup.GET(<span class="string">&quot;/addr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220324074936707.png" class="" title="image-20220324074936707"><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220324075009225.png" class="" title="image-20220324075009225"><h4 id="7-2-注册方式二"><a href="#7-2-注册方式二" class="headerlink" title="7.2 注册方式二"></a>7.2 注册方式二</h4><blockquote><p>先声明路由组，然后在路由组中使用<code>Use</code>方法来注册中间件</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在路由组使用Use方法来注册中间件</span></span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">userGroup.Use(authV1(<span class="literal">true</span>))</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userInfo函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 将中间件函数注册到路由组的Use方法</span></span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">userGroup.Use(authV1(<span class="literal">true</span>))</span><br><span class="line">userGroup.GET(<span class="string">&quot;/info&quot;</span>, userInfo)</span><br><span class="line">userGroup.GET(<span class="string">&quot;/addr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果和注册方式一一样</p></blockquote><h3 id="8、中间件向后续处理方法传值"><a href="#8、中间件向后续处理方法传值" class="headerlink" title="8、中间件向后续处理方法传值"></a>8、中间件向后续处理方法传值</h3><blockquote><p>可以将中间件获取到的值，传递给中间件后面的路由处理函数，比如用户名，日志，关键参数等</p></blockquote><h4 id="8-1-中间件设置值"><a href="#8-1-中间件设置值" class="headerlink" title="8.1 中间件设置值"></a>8.1 中间件设置值</h4><blockquote><p>中间件用Set方法，进行对请求获取到值传递给后面的路由处理函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> uObj UserData</span><br><span class="line">bindErr := c.ShouldBind(&amp;uObj)</span><br><span class="line"><span class="keyword">if</span> bindErr != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;绑定参数时失败&quot;</span>,</span><br><span class="line"><span class="string">&quot;binErr&quot;</span>: bindErr.Error(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 在中间件函数里设置获取到name, password值</span></span><br><span class="line">c.Set(<span class="string">&quot;name&quot;</span>, uObj.Name)</span><br><span class="line">c.Set(<span class="string">&quot;password&quot;</span>, uObj.Password)</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;绑定参数成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;setName&quot;</span>: uObj.Name,</span><br><span class="line"><span class="string">&quot;setPawword&quot;</span>: uObj.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-路由方法获取中间件设置的值"><a href="#8-2-路由方法获取中间件设置的值" class="headerlink" title="8.2 路由方法获取中间件设置的值"></a>8.2 路由方法获取中间件设置的值</h4><blockquote><p>中间件设置请求里获取到的参数名和参数值，传递给后面的路由处理函数，使用<code>GET</code>获取</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">name, nameOk := c.Get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">password, pwdOk := c.Get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !nameOk &amp;&amp; !pwdOk &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&quot;tom&quot;</span> &amp;&amp; password == <span class="number">123</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值正确&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line"><span class="string">&quot;登录状态&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line"><span class="string">&quot;登录状态&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用中间件获取请求值，并set进去，然后传递给后面的路由处理函数，路由处理函数获取值以后，做对应的处理</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserData <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">Password <span class="type">int</span> <span class="string">`form:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userInfo</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userInfo函数\n&quot;</span>)</span><br><span class="line">name, nameOk := c.Get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">password, pwdOk := c.Get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !nameOk &amp;&amp; !pwdOk &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&quot;tom&quot;</span> &amp;&amp; password == <span class="number">123</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值正确&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line"><span class="string">&quot;登录状态&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取参数值错误&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: name,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line"><span class="string">&quot;登录状态&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的中间件函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authV1</span><span class="params">(checkLogin <span class="type">bool</span>)</span></span> gin.HandlerFunc&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> checkLogin &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限通过&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> uObj UserData</span><br><span class="line">bindErr := c.ShouldBind(&amp;uObj)</span><br><span class="line"><span class="keyword">if</span> bindErr != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;绑定参数时失败&quot;</span>,</span><br><span class="line"><span class="string">&quot;binErr&quot;</span>: bindErr.Error(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 在中间件函数里设置获取到name, password值</span></span><br><span class="line">c.Set(<span class="string">&quot;name&quot;</span>, uObj.Name)</span><br><span class="line">c.Set(<span class="string">&quot;password&quot;</span>, uObj.Password)</span><br><span class="line">c.JSON(<span class="number">500</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;绑定参数成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;setName&quot;</span>: uObj.Name,</span><br><span class="line"><span class="string">&quot;setPawword&quot;</span>: uObj.Password,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验权限失败&quot;</span>)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userAddr</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是userAddr函数\n&quot;</span>)</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;这是userAddr函数&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 将中间件函数注册到路由组的Use方法</span></span><br><span class="line">userGroup := r.Group(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">userGroup.Use(authV1(<span class="literal">true</span>))</span><br><span class="line">userGroup.GET(<span class="string">&quot;/info&quot;</span>, userInfo)</span><br><span class="line">userGroup.GET(<span class="string">&quot;/addr&quot;</span>, userAddr)</span><br><span class="line">err := r.Run(<span class="string">&quot;:8090&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go_gin%E5%AD%A6%E4%B9%A0/go_gin%E5%AD%A6%E4%B9%A0/image-20220324081853774.png" class="" title="image-20220324081853774"><h2 id="四、gin使用swagger"><a href="#四、gin使用swagger" class="headerlink" title="四、gin使用swagger"></a>四、gin使用swagger</h2><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/gin-swagger/">https://www.liwenzhou.com/posts/Go/gin-swagger/</a></p><p><a href="https://swaggo.github.io/swaggo.io/declarative_comments_format/api_operation.html">https://swaggo.github.io/swaggo.io/declarative_comments_format/api_operation.html</a></p><p><a href="https://github.com/swaggo/swag/blob/master/README.md#declarative-comments-format">https://github.com/swaggo/swag/blob/master/README.md#declarative-comments-format</a></p><p><a href="https://www.dgrt.cn/news/show-4574445.html?action=onClick">https://www.dgrt.cn/news/show-4574445.html?action=onClick</a></p><p><a href="http://www.taodudu.cc/news/show-4574445.html">http://www.taodudu.cc/news/show-4574445.html</a></p></blockquote><h2 id="五、validator"><a href="#五、validator" class="headerlink" title="五、validator"></a>五、validator</h2><blockquote><p><a href="https://www.liwenzhou.com/posts/Go/validator-usages/">https://www.liwenzhou.com/posts/Go/validator-usages/</a></p></blockquote><h2 id="六、打包相关"><a href="#六、打包相关" class="headerlink" title="六、打包相关"></a>六、打包相关</h2><h3 id="1、go程序瘦身"><a href="#1、go程序瘦身" class="headerlink" title="1、go程序瘦身"></a>1、go程序瘦身</h3><blockquote><p><a href="http://www.meilongkui.com/archives/1012">http://www.meilongkui.com/archives/1012</a></p><p><a href="https://zhuanlan.zhihu.com/p/313053187">https://zhuanlan.zhihu.com/p/313053187</a></p></blockquote><h3 id="2、打第三方文件到程序中"><a href="#2、打第三方文件到程序中" class="headerlink" title="2、打第三方文件到程序中"></a>2、打第三方文件到程序中</h3><blockquote><p><a href="https://www.bilibili.com/read/cv12161591/">https://www.bilibili.com/read/cv12161591/</a></p></blockquote><h2 id="七、gin常见错误"><a href="#七、gin常见错误" class="headerlink" title="七、gin常见错误"></a>七、gin常见错误</h2><h4 id="1、redirecting-request-304"><a href="#1、redirecting-request-304" class="headerlink" title="1、redirecting request 304"></a>1、redirecting request 304</h4><blockquote><p>原因是因为路径的问题：</p><ul><li>例如 Gin路由中的的url是<code>/a/b</code>, 如果客户端发送的请求是 <code>/a/b/</code> 就会出现这个问题，因为请求路径多了个<code>/</code></li></ul></blockquote><h2 id="八、链路追踪"><a href="#八、链路追踪" class="headerlink" title="八、链路追踪"></a>八、链路追踪</h2><h4 id="1、jaeger"><a href="#1、jaeger" class="headerlink" title="1、jaeger"></a>1、jaeger</h4><blockquote><p><a href="https://www.jaegertracing.io/docs/1.41/">https://www.jaegertracing.io/docs/1.41/</a></p><p><a href="https://www.lixueduan.com/posts/tracing/05-jaeger-deploy/">https://www.lixueduan.com/posts/tracing/05-jaeger-deploy/</a></p></blockquote><blockquote><p>目前使用jaeger进行链路追踪比较麻烦的一点是需要找一台机器去部署该jaeger服务，除非有多余机器支持jaeger的部署，目前先不采用jaaeger进行链路追踪</p></blockquote><h4 id="2、uuid"><a href="#2、uuid" class="headerlink" title="2、uuid"></a>2、uuid</h4><blockquote><p>uuid是go中提供生成uuid的一个库，可以生成traceId用作链路追踪</p><p>uuid库的地址：<a href="https://pkg.go.dev/github.com/google/uuid#section-readme">https://pkg.go.dev/github.com/google/uuid#section-readme</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成UUID，因为UUID生成是以-间隔开的一长串字符串，所以对其进行切割成切片然后取切片的最后一个元素作为traceId</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genUUID</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">uuidStr := uuid.New().String()</span><br><span class="line">uuidStrList := strings.Split(uuidStr, <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> uuidStrList[<span class="built_in">len</span>(uuidStrList) - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在gin中将uuid作为traceId写成中间件，提供全局的链路追踪</span></span><br><span class="line"><span class="comment">// SetTracingID 设置追踪ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetTracingID</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">RequestId := c.GetHeader(<span class="string">&quot;Request-X-ID&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(RequestId) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 不使用全量的uuid</span></span><br><span class="line"><span class="comment">//RequestId = uuid.New().String()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 - 切割，只返回生成的UUID最后一个</span></span><br><span class="line">RequestId = genUUID()</span><br><span class="line">&#125;</span><br><span class="line">c.Header(<span class="string">&quot;Request-X-ID&quot;</span>, RequestId)</span><br><span class="line">c.Set(<span class="string">&quot;Request-X-ID&quot;</span>, RequestId)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码来看，将SetTracingID函数作为一个中间件函数，返回值就是gin.HandlerFunc类型</p><p>每次请求打进来时，先从Header中获取<code>Request-X-ID</code>这个key的值，如果获取不到，就调用genUUID生成一个新的UUID作为traceId，如果可以获取到，就将获取到的值重新设置到c(类型是gin.Context指针类型)中，供后面的处理函数中获取traceId，这样一直透传下去</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将traceId模块作为中间件加载到路由中</span></span><br><span class="line"><span class="comment">// 追加链路跟踪,r的类型是*gin.Engine，也就是gin初始化出来的路由对象</span></span><br><span class="line">router.Use(middleware.SetTracingID())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go Gin笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础编程</title>
      <link href="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、GO语言简介与配置"><a href="#一、GO语言简介与配置" class="headerlink" title="一、GO语言简介与配置"></a>一、GO语言简介与配置</h2><blockquote><h3 id="推荐资料："><a href="#推荐资料：" class="headerlink" title="推荐资料："></a>推荐资料：</h3><p><a href="https://www.liwenzhou.com/">https://www.liwenzhou.com/</a> （七米老师博客，推荐）</p><p><a href="https://www.qcrao.com/">https://www.qcrao.com/</a></p><p><a href="https://golang.design/">https://golang.design/</a></p><p><a href="https://golang.design/go-questions/%EF%BC%88%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E5%AE%9D%E5%85%B8%EF%BC%89">https://golang.design/go-questions/（程序员面试笔试宝典）</a></p><p><a href="https://www.flysnow.org/">https://www.flysnow.org/</a></p><p><a href="https://www.cnblogs.com/sunsky303/default.html?page=2">https://www.cnblogs.com/sunsky303/default.html?page=2</a></p></blockquote><h3 id="1、Go包的官方地址"><a href="#1、Go包的官方地址" class="headerlink" title="1、Go包的官方地址"></a>1、Go包的官方地址</h3><blockquote><p>官网：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p><p>国内镜像站：<a href="https://golang.google.cn/dl">https://golang.google.cn/dl</a></p><p>流程图地址：<a href="https://app.diagrams.net/">https://app.diagrams.net/</a></p><p>Golang内置库文档：<a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a></p></blockquote><h3 id="2、Go优势"><a href="#2、Go优势" class="headerlink" title="2、Go优势"></a>2、Go优势</h3><blockquote><p>交叉编译、编译快速</p><p>开发效率高</p><p>执行性能好</p><p>天生支持并发</p><p>使用<code>UTF-8</code>编码方式来存放代码</p></blockquote><h3 id="3、学习心得"><a href="#3、学习心得" class="headerlink" title="3、学习心得"></a>3、学习心得</h3><blockquote><p>使用<code>golang Idea</code>编辑器或<code>vs code</code>，但是不要开启自动提示功能，使用省电模式，因为一开始就自己手写所有语法才能记得住</p><p>本笔记代码建议是<code>缩进4个空格</code>，但笔记代码缩进有可能不是2格，写代码时需要注意！</p></blockquote><h3 id="4、GO版本"><a href="#4、GO版本" class="headerlink" title="4、GO版本"></a>4、GO版本</h3><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026110955968.png" class="" title="image-20211026110955968"><h3 id="5、GOPATH"><a href="#5、GOPATH" class="headerlink" title="5、GOPATH"></a>5、GOPATH</h3><blockquote><p><code>gopath</code>是环境变量，用来表明写的<code>go</code>项目的工作目录</p><p><code>gopath</code>最好设置一个，所有代码都放到<code>gopath</code>的<code>src</code>目录下</p></blockquote><ul><li><p>创建GO项目的步骤</p><blockquote><ol><li>创建一个目录作为存放<code>Go</code>语言代码，比如：<code>/xx/go</code></li><li>在环境变量中新增 <code>GOPATH:/xx/go</code></li><li>在<code>/xx/go</code>下新建三个文件夹，分别为<ol><li><code>bin</code>：用来存放我们写好的go代码编译后的二进制文件</li><li><code>src</code>：存放<code>go</code>语言的源代码，以及第三方下载的源代码<ol><li>常见的<code>src</code>中代码目录结构就是：<code>golang.org</code>(网站域名) -&gt; <code>username</code>(作者机构) -&gt; 项目1&#x2F;项目2(项目名) -&gt; 模块A&#x2F;模块B&#x2F;模块C&#x2F;模块D</li></ol></li><li><code>pkg</code>：存放编译后的库文件或缓存文件</li></ol></li><li>最后把<code>/xx/go/bin</code>目录添加到<code>PATH</code>里即可</li></ol></blockquote></li></ul><h3 id="6、MAC配置自定义GOPATH"><a href="#6、MAC配置自定义GOPATH" class="headerlink" title="6、MAC配置自定义GOPATH"></a>6、MAC配置自定义GOPATH</h3><blockquote><p>通过<code>go env</code>查看go的所有环境变量，包括<code>gopath</code></p></blockquote><ul><li>先看默认的<code>go env</code></li></ul><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026113415106.png" class="" title="image-20211026113415106"><blockquote><ul><li>可以看到默认的<code>GOPATH</code>是在: <code>/Users/xxx/go</code>下面，是<code>go</code>默认的<code>GOPATH</code>，同时可以到这个目录里去看，会看到有三个目录，也就是我们需要手动创建的三个目录</li></ul><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026113713432.png" class="" title="image-20211026113713432"><ul><li><p><code>GOROOT</code>是<code>GO</code>安装包的位置</p></li><li><p>接下来创建自己的<code>GOPATH</code></p></li></ul></blockquote><h4 id="6-1-创建目录"><a href="#6-1-创建目录" class="headerlink" title="6.1 创建目录"></a>6.1 创建目录</h4><ul><li>创建go目录以及那三个目录</li></ul><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026113846716.png" class="" title="image-20211026113846716"><h4 id="6-2-添加环境变量"><a href="#6-2-添加环境变量" class="headerlink" title="6.2 添加环境变量"></a>6.2 添加环境变量</h4><blockquote><ol><li><p>编辑：<code>vim   ~/.zshrc</code></p></li><li><p>添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/Users/xxx/Desktop/Code/go_study</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;GOPATH&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>重新加载配置文件：<code>source  ~/.zshrc</code></p></li></ol></blockquote><h4 id="6-3-查看GOPATH"><a href="#6-3-查看GOPATH" class="headerlink" title="6.3 查看GOPATH"></a>6.3 查看GOPATH</h4><blockquote><ol><li>重新查看<code>GOPATH</code>，可以看到<code>GOPATH</code>已经修改过来了</li></ol></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026114200717.png" class="" title="image-20211026114200717"><h3 id="7、Windows配置GOPATH"><a href="#7、Windows配置GOPATH" class="headerlink" title="7、Windows配置GOPATH"></a>7、Windows配置GOPATH</h3><blockquote><p>在官网下载<code>GO</code>的安装包，默认安装完会配置默认的<code>GOROOT</code>和<code>GOPATH</code></p></blockquote><ul><li><p>默认的<code>GOPATH</code></p><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103003520566.png" class="" title="image-20211103003520566"></li><li><p>在环境变量中默认显示<code>GOPATH</code>和<code>GOPATH</code>下的<code>bin</code></p><ul><li><p>在环境变量里打开会显示成这样：<code>GOPATH=%USERPROFILE%\go</code></p><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103004055548.png" class="" title="image-20211103004055548"></li><li><p>然后看到<code>%USERPROFILE%\go</code>解析出来就是<code>C:\User\XXX\go</code></p></li></ul><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103003651813.png" class="" title="image-20211103003651813"><ul><li>打开PATH可以看到最后一条是：<code>%USERPROFILE%\go\bin</code></li><li>所以需要修改为自己的<code>GOPATH</code>和<code>GOPATH\bin</code></li></ul><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103003726031.png" class="" title="image-20211103003726031"></li></ul><h4 id="7-1-修改自己的GOPATH值"><a href="#7-1-修改自己的GOPATH值" class="headerlink" title="7.1 修改自己的GOPATH值"></a>7.1 修改自己的GOPATH值</h4><blockquote><p>在存放<code>go</code>代码的位置创建目录，将对应的目录地址填写过来</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103004455355.png" class="" title="image-20211103004455355"><h4 id="7-2-修改GOPATH-bin"><a href="#7-2-修改GOPATH-bin" class="headerlink" title="7.2 修改GOPATH\bin"></a>7.2 修改<code>GOPATH\bin</code></h4><blockquote><p>需要在<code>PATH</code>这个环境变量修改，修改成：<code>%GOPATH%\bin</code>，表示进到在上面设置的<code>GOPATH</code>的<code>bin</code>目录下</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103004636063.png" class="" title="image-20211103004636063"><h4 id="7-3-检查GOPATH"><a href="#7-3-检查GOPATH" class="headerlink" title="7.3 检查GOPATH"></a>7.3 检查<code>GOPATH</code></h4><blockquote><p>看到已经修改过来了</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211103004908553.png" class="" title="image-20211103004908553"><h3 id="8、创建代码目录"><a href="#8、创建代码目录" class="headerlink" title="8、创建代码目录"></a>8、创建代码目录</h3><blockquote><p>按照上述说明的进行创建目录</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026115327001.png" class="" title="image-20211026115327001"><h3 id="9、最新配置Go开发环境"><a href="#9、最新配置Go开发环境" class="headerlink" title="9、最新配置Go开发环境"></a>9、最新配置Go开发环境</h3><blockquote><p><a href="https://www.bilibili.com/video/BV1bV41177KD?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1bV41177KD?spm_id_from&#x3D;333.999.0.0</a></p></blockquote><h3 id="10、Goland相关配置"><a href="#10、Goland相关配置" class="headerlink" title="10、Goland相关配置"></a>10、Goland相关配置</h3><h4 id="10-1-配置go-root"><a href="#10-1-配置go-root" class="headerlink" title="10.1 配置go root"></a>10.1 配置go root</h4><blockquote><p>低版本的<code>goland</code>配置高版本的<code>go sdk</code>会提示报错：</p><p><code>&quot;The selected directory is not a valid home for Go Sdk&quot;</code></p><p>比如</p><ul><li>goland版本是2018.1</li><li>go sdk是1.17.8</li></ul><p>此时goland添加go sdk就会报错，可按如下解决</p></blockquote><blockquote><p>找到go sdk安装目录下的<code>go\src\runtime\internal\sys\zversion.go</code></p><p>添加如下代码保存</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zversion.go ,TheVersion 为安装的go sdk版本</span></span><br><span class="line"><span class="keyword">const</span> TheVersion = <span class="string">`go1.17.8`</span></span><br></pre></td></tr></table></figure><blockquote><p>保存后重启goland编辑器，然后就可以配置go sdk了</p></blockquote><h4 id="10-2-取消代码折叠"><a href="#10-2-取消代码折叠" class="headerlink" title="10.2 取消代码折叠"></a>10.2 取消代码折叠</h4><blockquote><p>代码折叠之前是这样的，可以看到</p><ul><li>导入的包被折叠</li><li>函数参数被折叠</li></ul><p>查看的时候需要一个一个点开，很不方便</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230109235020556.png" class="" title="image-20230109235020556"><blockquote><p>关闭代码折叠，配置路径在Goland编辑器的Preferences-&gt;编辑器-&gt;代码折叠</p><ul><li>去掉勾选”导入”,表示代码顶部的import语句不再折叠</li><li>去掉勾选”格式化字符串”,表示代码中有字符串格式化的参数都不进行折叠</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230109235242167.png" class="" title="image-20230109235242167"><blockquote><p>查看取消折叠的效果，就不用手动挨个点开了</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230109235456394.png" class="" title="image-20230109235456394"><h4 id="10-3-设置函数参数提示"><a href="#10-3-设置函数参数提示" class="headerlink" title="10.3 设置函数参数提示"></a>10.3 设置函数参数提示</h4><blockquote><p>可以设置在调用函数是函数形参名是否展示，配置路径在Goland编辑器的Preferences-&gt;编辑器-&gt;嵌入提示-&gt;Go</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230109235643606.png" class="" title="image-20230109235643606"><h3 id="11、goproxy设置"><a href="#11、goproxy设置" class="headerlink" title="11、goproxy设置"></a>11、goproxy设置</h3><blockquote><p>参照七牛云设置即可：<a href="https://goproxy.cn/">https://goproxy.cn/</a></p></blockquote><h4 id="11-1-windows设置"><a href="#11-1-windows设置" class="headerlink" title="11.1 windows设置"></a>11.1 windows设置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// windows打开PowerShell并执行</span></span><br><span class="line">C:\&gt; $env:GO111MODULE = <span class="string">&quot;on&quot;</span></span><br><span class="line">C:\&gt; $env:GOPROXY = <span class="string">&quot;https://goproxy.cn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是这样设置在goland中使用的终端是普通的命令行.exe，不是powershell，可能不会生效，所以需要这样设置</span></span><br><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=<span class="string">&quot;https://goproxy.cn&quot;</span></span><br></pre></td></tr></table></figure><h4 id="11-2-macos-x2F-linux设置"><a href="#11-2-macos-x2F-linux设置" class="headerlink" title="11.2 macos&#x2F;linux设置"></a>11.2 macos&#x2F;linux设置</h4><blockquote><p>如果macos终端使用iterm2，应该是在~&#x2F;.zshrc中配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><h2 id="二、运行代码"><a href="#二、运行代码" class="headerlink" title="二、运行代码"></a>二、运行代码</h2><h3 id="1、第一行代码HelloWorld"><a href="#1、第一行代码HelloWorld" class="headerlink" title="1、第一行代码HelloWorld"></a>1、第一行代码HelloWorld</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211026110718850.png" class="" title="image-20211026110718850"><h3 id="2、编译build"><a href="#2、编译build" class="headerlink" title="2、编译build"></a>2、编译build</h3><blockquote><p>构建<code>go</code>代码:<code>go build</code></p><ul><li>是通过<code>GOPATH</code>去找代码，<code>GOPATH</code>在哪，<code>GO BUILD</code>就执行在哪</li></ul><p>通过<code>-o</code>可以指定编译的可执行程序的名字: <code>go build -o &#39;hello&#39;</code></p></blockquote><h3 id="3、运行run"><a href="#3、运行run" class="headerlink" title="3、运行run"></a>3、运行run</h3><blockquote><p>直接运行代码</p><p><code>go run xxx.go</code></p></blockquote><h3 id="4、安装install"><a href="#4、安装install" class="headerlink" title="4、安装install"></a>4、安装install</h3><blockquote><p>分为两步</p><ul><li>先编译得到一个可执行编译文件</li><li>然后将可执行文件拷贝到<code>GOPATH/bin</code>目录</li></ul></blockquote><h3 id="5、单引号与双引号"><a href="#5、单引号与双引号" class="headerlink" title="5、单引号与双引号"></a>5、单引号与双引号</h3><blockquote><ul><li>在<code>go</code>语法中，双引号是常用的来表达字符串，如果你使用了单引号，编译器会提示出错<ul><li><code>invalid character literal (more than one character)</code></li><li>这个报错提示了无效的字符字面，超过了一个字符，因为字符串一般是大于一个字符的数量的字符串<ul><li>单引号只能包含一个字符，例如<code>&#39;b&#39;</code> ，程序会输出<code>98</code>表示字符<code>b</code>的<code>ascii</code>码</li><li><code>ascii</code>码是用数字对应字母的</li></ul></li></ul></li></ul></blockquote><blockquote><ul><li>如果非要使用单引号输出必须使用string函数转换,如下</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="type">string</span>(<span class="string">&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p><code>Printf</code>和<code>Println</code>的区别</p><p><code>Printf</code>输出后不换行,<code>Println</code>输出后自动换行<br><code>Printf</code>格式化输出,<code>Println</code>直接输出内容</p></blockquote><h3 id="6、跨平台编译代码"><a href="#6、跨平台编译代码" class="headerlink" title="6、跨平台编译代码"></a>6、跨平台编译代码</h3><blockquote><p><code>GO</code>代码可以做到跨平台编译，在打包时需要指定对应目标操作系统的平台和处理器架构就可以构建出跨平台的可执行程序</p></blockquote><h4 id="6-1-mac平台编译linux-windows程序"><a href="#6-1-mac平台编译linux-windows程序" class="headerlink" title="6.1 mac平台编译linux/windows程序"></a>6.1 <code>mac</code>平台编译<code>linux/windows</code>程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译64位linux程序</span></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译64位windows程序</span></span><br><span class="line">CGO_ENABLED=0 GOOS=win dows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure><h4 id="6-2-linux平台编译mac-windows程序"><a href="#6-2-linux平台编译mac-windows程序" class="headerlink" title="6.2 linux平台编译mac/windows程序"></a>6.2 <code>linux</code>平台编译<code>mac/windows</code>程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译64位mac程序</span></span><br><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译64位windows程序</span></span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure><h4 id="6-3-windows平台编译mac-windows程序"><a href="#6-3-windows平台编译mac-windows程序" class="headerlink" title="6.3 windows平台编译mac/windows程序"></a>6.3 <code>windows</code>平台编译<code>mac/windows</code>程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译64位mac程序</span></span><br><span class="line"><span class="built_in">set</span> CGO_ENABLED=0 <span class="built_in">set</span> GOOS=darwin <span class="built_in">set</span> GOARCH=amd64 go build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译64位linux程序</span></span><br><span class="line"><span class="built_in">set</span> CGO_ENABLED=0 <span class="built_in">set</span> GOOS=linux <span class="built_in">set</span> GOARCH=amd64 go build</span><br></pre></td></tr></table></figure><h3 id="7、代码注释"><a href="#7、代码注释" class="headerlink" title="7、代码注释"></a>7、代码注释</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="三、变量与常量"><a href="#三、变量与常量" class="headerlink" title="三、变量与常量"></a>三、变量与常量</h2><h3 id="1、第一行代码解释"><a href="#1、第一行代码解释" class="headerlink" title="1、第一行代码解释"></a>1、第一行代码解释</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是指声明的包</span></span><br><span class="line"><span class="comment">// main包表示可以编译执行的二进制文件</span></span><br><span class="line"><span class="comment">// 非main包表示是给别人用的</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入一个fmt包，用来提供打印功能</span></span><br><span class="line"><span class="comment">// 引入的包必须是双引号</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数外只能放置标识符(变量、常量、函数、类型)的声明，不可以放语句</span></span><br><span class="line"><span class="comment">// 语句比如: a + b = c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main包必须有一个main函数，是整个程序的入口，所有代码都从main函数里进行执行</span></span><br><span class="line"><span class="comment">// main函数没有参数，也没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello, go!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、标识符-x2F-关键字"><a href="#2、标识符-x2F-关键字" class="headerlink" title="2、标识符&#x2F;关键字"></a>2、标识符&#x2F;关键字</h3><h4 id="2-1-标识符"><a href="#2-1-标识符" class="headerlink" title="2.1 标识符"></a>2.1 标识符</h4><blockquote><p>表示定义的具有特殊意义的单词，比如变量名、常量名、函数名等等</p><p><code>Go</code>中由字母、数字、下划线(_)组成</p></blockquote><h4 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h4><blockquote><p>编程语言内部定义好的关键字</p><p>比如：<code>import</code>、<code>break、func</code>等等</p></blockquote><h3 id="3、变量声明"><a href="#3、变量声明" class="headerlink" title="3、变量声明"></a>3、变量声明</h3><blockquote><p><code>GO</code>语言中的变量是静态类型，需要先声明再使用</p></blockquote><h4 id="3-1-变量声明的几种方式"><a href="#3-1-变量声明的几种方式" class="headerlink" title="3.1 变量声明的几种方式"></a>3.1 变量声明的几种方式</h4><h5 id="3-1-1-var关键字"><a href="#3-1-1-var关键字" class="headerlink" title="3.1.1  var关键字"></a>3.1.1  <code>var</code>关键字</h5><h6 id="1、声明变量不赋值"><a href="#1、声明变量不赋值" class="headerlink" title="1、声明变量不赋值"></a>1、声明变量不赋值</h6><blockquote><ul><li>适用于任何地方来声明变量，比如函数外，函数内，适合声明全局变量</li><li>这种方式声明变量会有默认值，常见的如下<ul><li>字符串类型初始值为<code>&quot;&quot;</code></li><li>整型类型初始值为0</li><li>布尔类型初始值为<code>false</code></li></ul></li><li>变量名不可以重复声明</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明格式</span></span><br><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明推荐使用小驼峰</span></span><br><span class="line"><span class="keyword">var</span> isMyName <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明后给变量赋值</span></span><br><span class="line">name = <span class="string">&quot;sam&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">isOk = <span class="literal">true</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="2、声明变量的同时赋值"><a href="#2、声明变量的同时赋值" class="headerlink" title="2、声明变量的同时赋值"></a>2、声明变量的同时赋值</h6><blockquote><ul><li>适用于任何地方来声明变量，比如函数外，函数内，适合声明全局变量</li><li>并且变量的值就是赋值的值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明推荐使用小驼峰</span></span><br><span class="line"><span class="keyword">var</span> isMyName <span class="type">string</span> = <span class="string">&quot;sam&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="3、自动推导变量类型"><a href="#3、自动推导变量类型" class="headerlink" title="3、自动推导变量类型"></a>3、自动推导变量类型</h6><blockquote><ul><li>这种方式不需要指定变量类型，直接赋值即可，<code>go</code>会自动推导出变量类型</li><li>适用于任何地方来声明变量，比如函数外，函数内，适合声明全局变量，不过为了能够清楚看出变量是什么类型，还是指定变量类型比较好</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明推荐使用小驼峰</span></span><br><span class="line"><span class="keyword">var</span> isMyName = <span class="string">&quot;sam&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="4、批量声明变量"><a href="#4、批量声明变量" class="headerlink" title="4、批量声明变量"></a>4、批量声明变量</h6><blockquote><ul><li><p>因式分解形式来声明变量后会有一个初始值，也是批量声明变量</p></li><li><p>格式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">变量名 类型</span><br><span class="line">  变量名 类型</span><br><span class="line">  变量名 类型</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>注意点：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用批量声明变量必须指定变量类型，否则会报错</span></span><br><span class="line"><span class="comment">// 需要指定期望的变量类型</span></span><br><span class="line">syntax <span class="type">error</span>: unexpected newline, expecting <span class="keyword">type</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="5、一行声明多个变量"><a href="#5、一行声明多个变量" class="headerlink" title="5、一行声明多个变量"></a>5、一行声明多个变量</h6><blockquote><ul><li>可以使用var关键字一行声明变量，但是必须指定变量类型</li><li>格式</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量a,变量b,变量c,变量d 变量类型</span><br></pre></td></tr></table></figure><ul><li>注意点</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用批量声明变量必须指定变量类型，否则会报错</span></span><br><span class="line"><span class="comment">// 需要指定期望的变量类型</span></span><br><span class="line">syntax <span class="type">error</span>: unexpected newline, expecting <span class="keyword">type</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="3-1-2-短变量声明"><a href="#3-1-2-短变量声明" class="headerlink" title="3.1.2 短变量声明"></a>3.1.2 短变量声明</h5><blockquote><ul><li><p><code>go</code>语言中可以使用短变量声明方式进行声明变量，会自动推到变量类型</p></li><li><p>格式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 := 变量值</span><br></pre></td></tr></table></figure><ul><li>注意</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种方式只适用于函数体内，如果在函数体外定义，就会报错</span></span><br><span class="line"><span class="comment">// 提示不能在函数体外声明变量</span></span><br><span class="line">non-declaration statement outside function body</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如下，短变量声明</span></span><br><span class="line">sf := <span class="string">&quot;sf&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-注意点"><a href="#3-2-注意点" class="headerlink" title="3.2 注意点"></a>3.2 注意点</h4><blockquote><ul><li><p>变量声明注意点</p><ul><li><code>var</code>  变量声明，可以适用于函数内外 </li><li><code>:=</code>  短变量声明，只能在函数内声明</li><li><code>_</code>  匿名变量多用于占位，表示忽略某个值</li><li>同一个作用域不可重复声明同名的变量</li></ul></li><li><p>一个花括号就是一个作用域</p><ul><li>需要注意的是<code>Go</code>语言中变量声明必须使用，不使用就编译不过去</li><li>这里需要注意的是全局变量可以声明但不使用，在函数外面使用<code>var</code>声明的变量</li><li>非全局变量声明后赋值且必须使用，在函数内声明变量</li></ul></li><li><p>因为编译器会减少编译后的体积，所以声明了变量但未使用就会编译不通过</p></li><li><p><code>Go</code>语言没有什么缩进格式要求，当然好的代码格式是比较方便阅读的</p></li></ul></blockquote><h3 id="4、匿名变量"><a href="#4、匿名变量" class="headerlink" title="4、匿名变量"></a>4、匿名变量</h3><blockquote><p>匿名变量可以想象成linux中的标准输入，表示我不需要查看该输出，相当于忽略</p><p>如果想要忽略某个值，可以使用匿名变量，匿名变量使用一个下划线<code>_</code>表示</p><p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明</p><p>匿名变量适用于批量声明变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a1 = <span class="number">100</span></span><br><span class="line">a2</span><br><span class="line">_   <span class="comment">// 这里就代表将这个值以匿名变量跳过</span></span><br><span class="line">a3 = <span class="literal">iota</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;第一个批量定义常量&quot;</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a2)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、常量"><a href="#5、常量" class="headerlink" title="5、常量"></a>5、常量</h3><blockquote><p>程序运行期间固定不变的值</p><p>推荐在函数外部进行声明</p><p>常量声明以后不可以再重新赋值</p></blockquote><h4 id="5-1-常量声明"><a href="#5-1-常量声明" class="headerlink" title="5.1 常量声明"></a>5.1 常量声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量是指程序运行期间永不变的值</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并且常量定义后不能重新赋值</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pi = <span class="number">45</span>  <span class="comment">// 对常量进行重复赋值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, pi)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出报错如下图</span></span><br><span class="line"><span class="comment">// 翻译过来就是不能指定给pi，已声明未const</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211206141410106.png" class="" title="image-20211206141410106"><h4 id="5-2-批量声明"><a href="#5-2-批量声明" class="headerlink" title="5.2 批量声明"></a>5.2 批量声明</h4><blockquote><p>因式分解形式进行批量声明常量</p><p>批量声明变量，如果后面没写值就和上一行一样的值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量声明</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    CODE_OK = <span class="number">200</span></span><br><span class="line">    CODE_NOT_FOUND = <span class="number">404</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量声明变量，如果后面没写值就和上一行一样的值</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="number">100</span></span><br><span class="line">    n2</span><br><span class="line">    n3 = <span class="number">300</span></span><br><span class="line">    n4</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(CODE_OK) <span class="comment">// 200</span></span><br><span class="line">    fmt.Println(CODE_NOT_FOUND) <span class="comment">// 404</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;---&gt;</span></span><br><span class="line">    fmt.Println(n1) <span class="comment">// 100</span></span><br><span class="line">    fmt.Println(n2) <span class="comment">// 100</span></span><br><span class="line">    fmt.Println(n3) <span class="comment">// 300</span></span><br><span class="line">    fmt.Println(n4) <span class="comment">// 300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-iota"><a href="#5-3-iota" class="headerlink" title="5.3 iota"></a>5.3 <code>iota</code></h4><blockquote><p><code>iota</code>是常量计数器，只能在<code>conts</code>常量中使用</p><ul><li><code>iota</code>的初始值为0</li><li><code>const</code>中每新增一行常量声明，将使<code>iota</code>的计数加一</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//批量声明变量，如果后面没写值就和上一行一样的值</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="literal">iota</span> <span class="comment">// 0</span></span><br><span class="line">    n2        <span class="comment">// 1</span></span><br><span class="line">    n3        <span class="comment">// 2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    b1 = <span class="literal">iota</span> <span class="comment">// 0</span></span><br><span class="line">    b2        <span class="comment">// 1</span></span><br><span class="line">    _         <span class="comment">// 2 匿名变量表示不需要这个值，可以丢弃掉</span></span><br><span class="line">    b3        <span class="comment">// 3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(n1) <span class="comment">// 0</span></span><br><span class="line">    fmt.Println(n2) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(n3) <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// ----</span></span><br><span class="line">    fmt.Println(b1) <span class="comment">// 0</span></span><br><span class="line">    fmt.Println(b2) <span class="comment">// 1</span></span><br><span class="line">    fmt.Println(b3) <span class="comment">// 3 因为是匿名变量将iota等于2的舍弃掉了，所以b3=3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-iota的几种场景"><a href="#5-4-iota的几种场景" class="headerlink" title="5.4 iota的几种场景"></a>5.4 iota的几种场景</h4><h5 id="5-4-1-iota被插队"><a href="#5-4-1-iota被插队" class="headerlink" title="5.4.1 iota被插队"></a>5.4.1 iota被插队</h5><blockquote><ul><li><code>iota</code>的核心: 每新增一行常量声明，将使<code>iota</code>的计数加一</li><li>同一个<code>const</code>关键字声明里，如果iota有一行被插队了，那么被插队的下一个常量仍是会继续加一</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iota插队: const中每新增一行常量声明，将使iota的计数加一，</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">b1 = <span class="literal">iota</span></span><br><span class="line">b2 = <span class="number">100</span> <span class="comment">// 表示在const中新增一行，并且是在同一个const中</span></span><br><span class="line">b3 = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><ul><li>使用<code>const</code>关键字重新声明常量时，再新的const中iota才会置为0</li><li>出现<code>iota</code>才会置为0</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iota默认从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iota插队: const中每新增一行常量声明，将使iota的计数加一，</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">b1 = <span class="literal">iota</span></span><br><span class="line">b2 = <span class="number">100</span> <span class="comment">// 表示在const中新增一行，并且是在同一个const中</span></span><br><span class="line">b3 = <span class="literal">iota</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个常量声明在一行，那么一行的iota值是同一个</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// d1和d2在同一行，所以iota是0，所以d1:0 + 1 = 1, d2: 0 + 2 = 2</span></span><br><span class="line">d1, d2 = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// d3和d4在同一行，所以iota是1，所以d3:1 + 1 = 2, d4: 1 + 2 = 3</span></span><br><span class="line">d3, d4 = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(b1) <span class="comment">// 0</span></span><br><span class="line">fmt.Println(b2) <span class="comment">// 100</span></span><br><span class="line">fmt.Println(b3) <span class="comment">// 2</span></span><br><span class="line">fmt.Println(b4) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;&lt;--&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(d1) <span class="comment">// 1</span></span><br><span class="line">fmt.Println(d2) <span class="comment">// 2</span></span><br><span class="line">fmt.Println(d3) <span class="comment">// 2</span></span><br><span class="line">fmt.Println(d4) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-4-3-iota位运算"><a href="#5-4-3-iota位运算" class="headerlink" title="5.4.3 iota位运算"></a>5.4.3 iota位运算</h5><h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><h3 id="1、整型"><a href="#1、整型" class="headerlink" title="1、整型"></a>1、整型</h3><blockquote><p><a href="https://www.jianshu.com/p/793efa912d4e">https://www.jianshu.com/p/793efa912d4e</a></p><p><a href="https://www.jianshu.com/p/d02f454f6439#comments">https://www.jianshu.com/p/d02f454f6439#comments</a></p><p><a href="https://www.jianshu.com/p/d02f454f6439?ivk_sa=1024320u">https://www.jianshu.com/p/d02f454f6439?ivk_sa=1024320u</a></p><p><a href="https://www.jianshu.com/p/a011fb51f2f4">https://www.jianshu.com/p/a011fb51f2f4</a></p><p><a href="https://www.cnblogs.com/tmtony/p/11804575.html">https://www.cnblogs.com/tmtony/p/11804575.html</a></p><p>整型分为以下两个大类，按长度分为：</p><ul><li><p>有符号整型：<code>int8、int16、int32、int64</code> </p></li><li><p>对应的无符号整型：<code>uint8、uint16、uint32、uint64</code></p></li></ul><p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定义整型变量</span></span><br><span class="line">    i1 := <span class="number">101</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i1) <span class="comment">// 表示输出10进制数, 101</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, i1) <span class="comment">// 10进制转换为2进制, 1100101</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o\n&quot;</span>, i1) <span class="comment">// 10进制转换为8进制, 145</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, i1) <span class="comment">// 10进制转换为16进制, 65</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 八进制,表示0-7的数字，一般以0开头，用于文件权限</span></span><br><span class="line">    i2 := <span class="number">077</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i2) <span class="comment">// 表示将8进制转换为10进制，63</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制，表示0-f的值，一般以0x开头,用于内存地址</span></span><br><span class="line">    i3 := <span class="number">0x1234567</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i3) <span class="comment">// 表示将16进制转换为10进制，19088743</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明int8的类型,指定数字为什么类型，否则就是int类型</span></span><br><span class="line">    i4 := <span class="type">int8</span>(<span class="number">9</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i4) <span class="comment">// 9</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, i4) <span class="comment">// int8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、浮点数"><a href="#2、浮点数" class="headerlink" title="2、浮点数"></a>2、浮点数</h3><blockquote><p>1、Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code></p><p>2、这两种浮点型数据格式遵循<code>IEEE 754</code>标准：</p><ul><li><code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code></li><li><code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code></li></ul><p>3、打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code></p><p>4、默认<code>Go</code>语言的小数都是<code>float64</code></p><p>5、<code>float32</code>的变量值不能赋值给<code>float64</code>位</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, math.Pi) <span class="comment">// 3.141593</span></span><br><span class="line">    <span class="comment">// %.2f 表示保留小数点后两位</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, math.Pi) <span class="comment">// 3.14</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, math.Pi) <span class="comment">// float64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义float32类型</span></span><br><span class="line">    s2 := <span class="type">float32</span>(<span class="number">1.3245</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, s2) <span class="comment">// 1.324500</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、布尔值"><a href="#3、布尔值" class="headerlink" title="3、布尔值"></a>3、布尔值</h3><blockquote><p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p><p><strong>注意：</strong></p><ol><li>布尔类型变量的默认值为<code>false</code>。</li><li>Go 语言中不允许将整型强制转换为布尔型。</li><li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 <span class="type">bool</span> <span class="comment">// 只声明布尔值不赋值，默认值是false</span></span><br><span class="line">    s2 := <span class="literal">true</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// bool</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// bool</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// false</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、字符串"><a href="#4、字符串" class="headerlink" title="4、字符串"></a>4、字符串</h3><blockquote><p><code>Go</code>语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样</p><p><code>Go</code>语言里的字符串的内部实现使用<code>UTF-8</code>编码</p><p>字符串的值为<code>双引号(&quot;)</code>中的内容</p><p><code>Go</code>语言中字符串必须是双引号<code>(&quot;)</code>，单引号<code>(&#39;)</code>表示字符</p><p><code>golang</code>中<code>string</code>底层是通过<code>byte数组</code>实现的</p><p>中文字符在<code>unicode</code>下占<code>2个字节</code>，在<code>utf-8编</code>码下占<code>3个字节</code>，而<code>golang</code>默认编码正好是<code>utf-8</code>,所以一个中文表示3个字符</p></blockquote><h4 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">    s1 := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// string</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, s1) <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单独的字母，汉字、符号表示一个字符</span></span><br><span class="line">    s2 := <span class="string">&#x27;h&#x27;</span></span><br><span class="line">    s3 := <span class="string">&#x27;e&#x27;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// int32</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// 104</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字节: 1字节=8bit(8个二进制位)</span></span><br><span class="line">    <span class="comment">// 1个字符&#x27;A&#x27;等于1个字节</span></span><br><span class="line">    <span class="comment">// 1个utf8编码的汉字&#x27;沙&#x27; 一般占3个字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-转义符号"><a href="#4-2-转义符号" class="headerlink" title="4.2 转义符号"></a>4.2 转义符号</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`\r回车符（返回行首）</span></span><br><span class="line"><span class="string">\n换行符（直接跳到下一行的同列位置）</span></span><br><span class="line"><span class="string">\t制表符</span></span><br><span class="line"><span class="string">\&#x27;单引号</span></span><br><span class="line"><span class="string">\&quot;双引号</span></span><br><span class="line"><span class="string">\\反斜杠`</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">&quot;\&quot;D:\\Go\\src\\code.xx.name\\day01\&quot;&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, path) <span class="comment">// &quot;D:\Go\src\code.xx.name\day01&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-多行字符串"><a href="#4-3-多行字符串" class="headerlink" title="4.3 多行字符串"></a>4.3 多行字符串</h4><blockquote><p>输出多行字符串，需要使用反引号，在<code>esc</code>键位下方的按键</p><p>反引号的内容会原样输出，可以用来输出文件路径</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">`this is</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">good</span></span><br><span class="line"><span class="string">day!</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-字符串长度"><a href="#4-4-字符串长度" class="headerlink" title="4.4 字符串长度"></a>4.4 字符串长度</h4><blockquote><p><code>len(str)</code>返回一个<code>int</code>型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;hi, go~&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="built_in">len</span>(s1)) <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-字符串拼接"><a href="#4-5-字符串拼接" class="headerlink" title="4.5 字符串拼接"></a>4.5 字符串拼接</h4><blockquote><p>返回一个新的字符串变量</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s2 := <span class="string">&quot;good&quot;</span></span><br><span class="line">s3 := <span class="string">&quot; day&quot;</span></span><br><span class="line"><span class="comment">// 拼接法1： +号</span></span><br><span class="line">s4 := s2 + s3</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s4) <span class="comment">// good day</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接法2：使用fmt包的Sprintf接收两个变量值然后拼接后返回给一个变量</span></span><br><span class="line">s5 := fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, s2, s3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s5) <span class="comment">// good day</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-分割"><a href="#4-6-分割" class="headerlink" title="4.6 分割"></a>4.6 分割</h4><blockquote><p>需要引入包<code>strings</code></p><p>分割后返回值为一个切片<code>list</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;hi\\go\\haha&quot;</span></span><br><span class="line">s2 := strings.Split(s1, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// [hi go haha]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-包含"><a href="#4-7-包含" class="headerlink" title="4.7 包含"></a>4.7 包含</h4><blockquote><p>返回值是<code>true/false</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;hi\\go\\haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line">s2 := strings.Contains(s1, <span class="string">&quot;go&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不包含</span></span><br><span class="line">s3 := strings.Contains(s1, <span class="string">&quot;gos&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8-前缀-x2F-后缀"><a href="#4-8-前缀-x2F-后缀" class="headerlink" title="4.8 前缀&#x2F;后缀"></a>4.8 前缀&#x2F;后缀</h4><blockquote><p>返回值是<code>true/false</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;hi\\go\\haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断前缀是否是以hi开头</span></span><br><span class="line">s2 := strings.HasPrefix(s1, <span class="string">&quot;hi&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断后缀是否是以gos结尾</span></span><br><span class="line">s3 := strings.HasSuffix(s1, <span class="string">&quot;gos&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-9-子串位置"><a href="#4-9-子串位置" class="headerlink" title="4.9 子串位置"></a>4.9 子串位置</h4><blockquote><p>返回子串的索引位置</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;hi\\go\\haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回子串的第一个字符出现的索引位置</span></span><br><span class="line">s2 := strings.Index(s1, <span class="string">&quot;hi&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回子串最后一个字符出现的索引位置</span></span><br><span class="line">s3 := strings.LastIndex(s1, <span class="string">&quot;go&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-10-join"><a href="#4-10-join" class="headerlink" title="4.10 join"></a>4.10 join</h4><blockquote><p><code>join</code>可以将数组以某个格式拼接起来，比如：<code>-</code>、<code>+</code>等</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 先将字符串切割为数组</span></span><br><span class="line">s1 := <span class="string">&quot;hi\\go\\haha&quot;</span></span><br><span class="line">s2 := strings.Split(s1, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line"><span class="comment">// 再将数组join连接成字符串</span></span><br><span class="line">s3 := strings.Join(s2, <span class="string">&quot;+&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// hi+go+haha</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-11-字符串修改"><a href="#4-11-字符串修改" class="headerlink" title="4.11 字符串修改"></a>4.11 字符串修改</h4><blockquote><p>首先字符串不可以修改，不过可将字符串修改为其他类型再进行修改</p><p>将字符串先转换为一个切片，切片里保存的就是字符</p><p>然后对切换的字符进行重新赋值后再输出就达到了字符串修改</p><p><code>rune</code>类型是<code>int32</code>类型的</p><p><code>byte</code>是<code>uint8</code>类型的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s2 := <span class="string">&quot;白萝卜&quot;</span></span><br><span class="line">s3 := []<span class="type">rune</span>(s2) <span class="comment">// 把字符串强制转换成了一个rune切片,切换里保存的就是字符</span></span><br><span class="line">s3[<span class="number">0</span>] = <span class="string">&#x27;红&#x27;</span></span><br><span class="line">s4 := <span class="type">string</span>(s3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s4) <span class="comment">// 红萝卜</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-12-强制类型转换"><a href="#4-12-强制类型转换" class="headerlink" title="4.12 强制类型转换"></a>4.12 强制类型转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// 整型和浮点型转换</span></span><br><span class="line">s1 := <span class="number">10</span></span><br><span class="line">s2 := <span class="type">float64</span>(s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// 10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、字符类型"><a href="#5、字符类型" class="headerlink" title="5、字符类型"></a>5、字符类型</h3><blockquote><p>在go语言中，组成每个字符串的元素叫做<code>字符</code>，所以可以通过循环遍历拿到字符</p><ul><li>字符使用<code>单引号</code>包裹起来</li><li>字符的值和类型<ul><li>值是输出的<code>ASCII</code>的值，对应<code>ASCII</code>表查询整数对应的字符，就可以查看到字符，比如<code>a</code>对应97</li><li>类型是int32</li></ul></li><li>字符只能输入一个元素，不能大于两个</li><li><code>%c</code>用来原样输出字符</li><li>字符分类为：byte类型和rune类型</li></ul></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 字符</span></span><br><span class="line">char1 := <span class="string">&#x27;a&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, char1) <span class="comment">// 97</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, char1) <span class="comment">// int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-字符类型一：byte类型"><a href="#5-1-字符类型一：byte类型" class="headerlink" title="5.1 字符类型一：byte类型"></a>5.1 字符类型一：byte类型</h4><blockquote><ul><li><p>uint8类型(uint表示无符号，是正整数)，表示byte（字节）类型，代表了<code>ASCII</code>码的有一个字符</p></li><li><p>字符串中的每个字符是uint8类型</p></li><li><p>一个汉字占用3个字节，一个字母占用一个字节</p><ul><li>汉字使用utf8编码</li></ul></li></ul></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;golang&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;值v:%v 原样输出:%c 类型：%T\n&quot;</span>, s1[i], s1[i], s1[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220807222652263.png" class="" title="image-20220807222652263"><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="string">&quot;你好go&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 len:%v\n&quot;</span>, <span class="built_in">len</span>(s1)) <span class="comment">// s1 len:8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-字符类型二：rune类型"><a href="#5-2-字符类型二：rune类型" class="headerlink" title="5.2 字符类型二：rune类型"></a>5.2 字符类型二：rune类型</h4><blockquote><p><code>rune</code>官方解释：</p><ul><li><p>rune is an alias for int32 and is equivalent to int32 in all ways. It is used, by convention, to distinguish character values from integer values</p></li><li><p>int32的别名，几乎在所有方面等同于int32，一般用来表示字符的</p></li><li><p>可以使用<code>%c</code>取到对应的字符</p></li><li><p>用于区分字符值（rune用来表示字符值）和整数值</p></li><li><p>当需要处理中文等其他符合字符时，都需要用到<code>rune</code>类型，<code>rune</code>类型是int32</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">rune</span> = <span class="type">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello 你好&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len(str):&quot;</span>, <span class="built_in">len</span>(str)) <span class="comment">// 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>结果是12，从字符串字面量看 len(str) 的结果应该是8<ul><li>因为<code>go</code>是<code>utf-8</code>编码，而<code>go</code>底层字符串是用<code>byte</code>编码的，一个汉字表示3个字符</li><li>所以<code>str</code>的长度是<code>hello(5个字符)</code>+<code>空格(1个字符)</code>+<code>你好(6个字符)</code>&#x3D;&#96;12个字符</li></ul></li></ul></blockquote><blockquote><p>如果字符串里汉字，那么就可以将字符串转为rune类型，来计算字符串长度，这样就符合肉眼看到的字符串长度</p><p>转换了以后就不会单独根据汉字或字母自身占用的字符去计算长度了</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">&quot;hello 世界&quot;</span></span><br><span class="line">str1 := []<span class="type">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;v:%c\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;str1:%v\n&quot;</span>, str1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str1 len:%v\n&quot;</span>, <span class="built_in">len</span>(str1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从执行结果来看，返回的字符串长度是8，符合我们的预期了</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220413190349824.png" class="" title="image-20220413190349824"><h2 id="五、流程控制"><a href="#五、流程控制" class="headerlink" title="五、流程控制"></a>五、流程控制</h2><h3 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h3><blockquote><p>常见的<code>if</code>判断语句</p><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式 &#123;</span><br><span class="line">  语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="1-1-单个if语句"><a href="#1-1-单个if语句" class="headerlink" title="1.1 单个if语句"></a>1.1 单个if语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// 整型和浮点型转换</span></span><br><span class="line">s1 := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> s1 == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 等于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 不等于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// s1 等于 10</span></span><br></pre></td></tr></table></figure><h4 id="1-2-嵌套if语句"><a href="#1-2-嵌套if语句" class="headerlink" title="1.2 嵌套if语句"></a>1.2 嵌套if语句</h4><blockquote><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式 &#123;</span><br><span class="line">  语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 表达式 &#123;</span><br><span class="line">  语句<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// 整型和浮点型转换</span></span><br><span class="line">s1 := <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> s1 &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 大于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> s1 &lt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 小于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 等于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-特殊写法"><a href="#1-3-特殊写法" class="headerlink" title="1.3 特殊写法"></a>1.3 特殊写法</h4><blockquote><p>可以将变量写到if判断里，以减少内存占用</p><p>并且在if语句外是无法访问到if里的变量值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 将变量和if写在一行，这个s1变量的作用域只在if判断里生效，if判断外无法进行变量访问</span></span><br><span class="line"><span class="comment">// 这样可以减少内存占用</span></span><br><span class="line"><span class="keyword">if</span> s1 := <span class="number">10</span>; s1 == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 等于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 不等于 %v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里是没法访问到s1的，因为s1在if的作用域里</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// undefined: s1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、for语句"><a href="#2、for语句" class="headerlink" title="2、for语句"></a>2、for语句</h3><h4 id="2-1-基础格式"><a href="#2-1-基础格式" class="headerlink" title="2.1 基础格式"></a>2.1 基础格式</h4><blockquote><p>格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始语句;条件表达式;结束语句&#123;</span><br><span class="line">    循环体语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    0</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">    4</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-2-for变种1"><a href="#2-2-for变种1" class="headerlink" title="2.2 for变种1"></a>2.2 <code>for</code>变种1</h4><blockquote><p>将初始值提到<code>for</code>循环外面</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> ;i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-3-for变种2"><a href="#2-3-for变种2" class="headerlink" title="2.3 for变种2"></a>2.3 <code>for</code>变种2</h4><blockquote><p>将初始值提到<code>for</code>循环外面</p><p>将结束语句放到<code>for</code>循环内部</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    5</span></span><br><span class="line"><span class="comment">    6</span></span><br><span class="line"><span class="comment">    7</span></span><br><span class="line"><span class="comment">    8</span></span><br><span class="line"><span class="comment">    9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-4-无限循环"><a href="#2-4-无限循环" class="headerlink" title="2.4 无限循环"></a>2.4 无限循环</h4><blockquote><p>切记不要轻易尝试，这是死循环，<code>go</code>性能很高，很容易将机器性能打满</p><p>死循环代码格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">循环语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当前也可以给<code>for</code>后面跟条件判断语句,有点类似于其他语言的<code>while</code>语句，达成某种条件后退出循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s &lt; <span class="number">3</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是for循环\n&quot;</span>)</span><br><span class="line">s++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为三个for循环结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是for循环</span></span><br><span class="line"><span class="comment">这是for循环</span></span><br><span class="line"><span class="comment">这是for循环</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="3、for-range循环"><a href="#3、for-range循环" class="headerlink" title="3、for range循环"></a>3、<code>for range</code>循环</h3><h4 id="3-1-基础格式"><a href="#3-1-基础格式" class="headerlink" title="3.1 基础格式"></a>3.1 基础格式</h4><blockquote><ul><li><p><code>Go</code>语言中可以使用<code>for range</code>遍历数组、切片、字符串、<code>map</code>及通道（<code>channel</code>），通过<code>for range</code>遍历的返回值有以下规律：</p><ul><li>数组、切片、字符串返回索引和值</li><li><code>map</code>返回键和值</li><li>通道（<code>channel</code>）只返回通道内的值</li></ul></li><li><p><code>for</code>循环中输出每个字符，那必须使用<code>%c</code>来输出字符</p></li></ul></blockquote><blockquote><p>代码格式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里面的i是循环的索引值</span></span><br><span class="line"><span class="comment">// v是值</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;Hello测几&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d : %c&quot;</span>,i, v)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// for range 循环</span></span><br><span class="line">s := <span class="string">&quot;Hello悦悦&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">1</span> &#123;    </span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i)  <span class="comment">// 索引值 0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, v)  <span class="comment">// int32 ,所以需要转换成字符类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, v)  <span class="comment">// H</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-只有一个变量"><a href="#3-1-只有一个变量" class="headerlink" title="3.1 只有一个变量"></a>3.1 只有一个变量</h4><blockquote><p>当<code>for range</code>中只有一个变量时，那这个变量是索引值而不是元素值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;for range 只有一个变量&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> rangeNameStr &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-匿名变量接收索引值"><a href="#3-3-匿名变量接收索引值" class="headerlink" title="3.3 匿名变量接收索引值"></a>3.3 匿名变量接收索引值</h4><blockquote><p>在<code>3.2</code>中描述只有一个变量时，这个变量是索引值而不是元素值，当不想要索引值时，可以使用匿名变量来接收索引值</p><p>这里就是匿名变量的用处，可以作为一个</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;for range 使用匿名变量接收索引&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> rangeNameStr &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、for循环例子"><a href="#4、for循环例子" class="headerlink" title="4、for循环例子"></a>4、<code>for</code>循环例子</h3><blockquote><p>9x9乘法口诀</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">z := i * j</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d * %d = %d\t &quot;</span>, i, j, z)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、break"><a href="#5、break" class="headerlink" title="5、break"></a>5、break</h3><blockquote><p><code>break</code>用来表示直接退出循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line">i = <span class="number">3</span></span><br><span class="line">i = <span class="number">4</span></span><br><span class="line">i = <span class="number">5</span></span><br><span class="line"><span class="comment">// 可以看到等于5就退出循环了</span></span><br></pre></td></tr></table></figure><h3 id="6、continue"><a href="#6、continue" class="headerlink" title="6、continue"></a>6、continue</h3><blockquote><p>跳过这一次循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果,可以看到5被跳过不输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    i = 1</span></span><br><span class="line"><span class="comment">    i = 2</span></span><br><span class="line"><span class="comment">    i = 3</span></span><br><span class="line"><span class="comment">    i = 4</span></span><br><span class="line"><span class="comment">    i = 6</span></span><br><span class="line"><span class="comment">    i = 7</span></span><br><span class="line"><span class="comment">    i = 8</span></span><br><span class="line"><span class="comment">    i = 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="7、switch"><a href="#7、switch" class="headerlink" title="7、switch"></a>7、switch</h3><blockquote><p>主要是简化大量判断</p><p>当大量<code>if</code>需要判断某个变量等于某个值，然后执行一些功能块时，就可用<code>switch</code>语句来简化代码</p><p><code>switch</code>和<code>case</code>两个关键字是同一列，不需要<code>case</code>在<code>switch</code>下缩进</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 多个if判断可以使用switch语句</span></span><br><span class="line">    age := <span class="number">18</span></span><br><span class="line">    <span class="keyword">if</span> age == <span class="number">1</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;age = 1&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> age == <span class="number">2</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;age = 2&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;age = 3&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch简化大量判断</span></span><br><span class="line">    <span class="keyword">switch</span> age &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      fmt.Println(<span class="string">&quot;age = 1&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      fmt.Println(<span class="string">&quot;age = 2&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      fmt.Println(<span class="string">&quot;age not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-switch变种"><a href="#7-1-switch变种" class="headerlink" title="7.1 switch变种"></a>7.1 <code>switch</code>变种</h4><blockquote><p>可以在<code>swicth</code>语句的<code>case</code>里放置多个值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 多个if判断可以使用switch语句</span></span><br><span class="line">    age := <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch的case可以放置多个值</span></span><br><span class="line">    <span class="keyword">switch</span> age &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;age = 1&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;age = 2&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;age not found&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、goto-了解"><a href="#8、goto-了解" class="headerlink" title="8、goto(了解)"></a>8、<code>goto</code>(了解)</h3><blockquote><p><code>goto</code>表示跳到某个位置，在代码里可以指定对应标签</p><p>建议：<code>goto</code>尽量少用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// goto 语句，表示调到这个位置</span></span><br><span class="line">    <span class="comment">// goto 后面跟着标签Label，这可以直接跳出多个循环</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line">        <span class="keyword">goto</span> LABEL_BREAK</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LABEL_BREAK:</span><br><span class="line">    fmt.Println(<span class="string">&quot;done!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h2><h3 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h3><blockquote><p>常见的加减乘除余</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">int</span></span><br><span class="line">    c <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="number">4</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    fmt.Println(a + b) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 减法</span></span><br><span class="line">    fmt.Println(a - b) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乘法</span></span><br><span class="line">    fmt.Println(a * b) <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 除法</span></span><br><span class="line">    fmt.Println(a / b) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取余</span></span><br><span class="line">    fmt.Println(a % b) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、递减与递增"><a href="#2、递减与递增" class="headerlink" title="2、递减与递增"></a>2、递减与递增</h3><blockquote><ul><li><p>变量递增：<code>a++</code></p><ul><li>单独的语句， 不能放在&#x3D;的右边赋值， 等价于：a &#x3D; a + 1</li></ul></li><li><p>变量递减：<code>a--</code></p><ul><li>单独的语句， 不能放在&#x3D;的右边赋值， 等价于：a &#x3D; a - 1</li></ul></li><li><p>注意：</p><ul><li>变量与<code>++</code>&#x2F;<code>--</code>符号之间可以留一个空格，或者不留都可以进行递增或递减运算，个人建议可以不留空格</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;---&gt;\n&quot;</span>)</span><br><span class="line">s1 := <span class="number">10</span></span><br><span class="line">s1++</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、关系运算符"><a href="#3、关系运算符" class="headerlink" title="3、关系运算符"></a>3、关系运算符</h3><blockquote><p>关系运算可以包含等于、不等于、大于等于、小于等于、大于、小于这几种关系</p><p>关系运算返回的一定是<code>bool</code>类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">int</span></span><br><span class="line">    c <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="number">4</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关系运算符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等于</span></span><br><span class="line">    fmt.Println( a == b) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不等于</span></span><br><span class="line">    fmt.Println( a != b) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大于等于</span></span><br><span class="line">    fmt.Println( a &gt;= b) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于等于</span></span><br><span class="line">    fmt.Println( a &lt;= b) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大于</span></span><br><span class="line">    fmt.Println( a &gt; b) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于</span></span><br><span class="line">    fmt.Println( a &lt; b) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h3><blockquote><p>和其他语言一样，<code>go</code>语言可以进行多个逻辑判断</p></blockquote><h4 id="4-1-与运算"><a href="#4-1-与运算" class="headerlink" title="4.1 与运算"></a>4.1 与运算</h4><blockquote><p><code>&amp;&amp; </code>表示与</p><p>两个条件都为真才为真</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">int</span></span><br><span class="line">    c <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="number">4</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与运算符</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">3</span> &amp;&amp; b &lt; <span class="number">3</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Print(<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-或运算"><a href="#4-2-或运算" class="headerlink" title="4.2 或运算"></a>4.2 或运算</h4><blockquote><p><code>||</code>表示或运算</p><p>只要有一个条件为真则为真</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">int</span></span><br><span class="line">    c <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="number">4</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或运算符</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">3</span> || b &lt; <span class="number">3</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Print(<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3-非运算"><a href="#4-3-非运算" class="headerlink" title="4.3 非运算"></a>4.3 非运算</h4><blockquote><p><code>!</code>表示非，取反</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a = <span class="number">4</span></span><br><span class="line">    b = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或运算符</span></span><br><span class="line">    <span class="keyword">if</span> !b &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Print(<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意<code>非运算</code>只能跟布尔类型的值，其他的类型会报错，不能对一个变量直接判断是否为true&#x2F;false</p><p>这个和其他语言是最不一样的地方，<code>python</code>中是可以对其他类型进行非运算判断</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="number">10</span></span><br><span class="line">s2 := <span class="string">&quot;sam&quot;</span></span><br><span class="line"><span class="keyword">if</span> !s1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;不是10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !s2 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;不是10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211206161257244.png" class="" title="image-20211206161257244"><h3 id="5、位运算"><a href="#5、位运算" class="headerlink" title="5、位运算"></a>5、位运算</h3><blockquote><p>针对的是二进制数</p></blockquote><h4 id="5-1-按位与"><a href="#5-1-按位与" class="headerlink" title="5.1 按位与"></a>5.1 按位与</h4><blockquote><p>符号：<code>&amp;</code></p><p>两位都为1才为1</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 5的二进制： 101</span></span><br><span class="line"><span class="comment">// 2的二进制：  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位与 (两位都为1才为1)</span></span><br><span class="line"><span class="comment">// 5的二进制数每一位和2的二进制的每一位进行运算</span></span><br><span class="line"><span class="comment">// 5    1 0 1</span></span><br><span class="line"><span class="comment">// 2      1 0</span></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"><span class="comment">//      0 0 0</span></span><br><span class="line"><span class="comment">// 结果是3个0，那么</span></span><br><span class="line">    <span class="comment">// 0 X 2^2 + 0x2^1 + 0x2^0 = 0 + 0 + 0 = 0</span></span><br><span class="line">    <span class="comment">// 所以 5 &amp; 2就是0</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &amp; <span class="number">2</span>) <span class="comment">// 000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-按位或"><a href="#5-2-按位或" class="headerlink" title="5.2 按位或"></a>5.2 按位或</h4><blockquote><p>符号: <code>|</code></p><p>两位有一个为1就为1</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 5的二进制： 101</span></span><br><span class="line"><span class="comment">// 2的二进制：  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位与 (两位有一个为1就为1)</span></span><br><span class="line"><span class="comment">// 5的二进制数每一位和2的二进制的每一位进行运算</span></span><br><span class="line"><span class="comment">// 5    1 0 1</span></span><br><span class="line"><span class="comment">// 2      1 0</span></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"><span class="comment">//      1 1 1</span></span><br><span class="line"><span class="comment">// 1 X 2^2 + 1x2^1 + 1x2^0 = 4 + 2 + 1 = 7</span></span><br><span class="line">fmt.Println(<span class="number">5</span> | <span class="number">2</span>) <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-按位异或"><a href="#5-3-按位异或" class="headerlink" title="5.3 按位异或"></a>5.3 按位异或</h4><blockquote><p>符号: <code>^</code></p><p>两位不一样就为1</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 5的二进制： 101</span></span><br><span class="line"><span class="comment">// 2的二进制：  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位异或 (两位不一样就为1)</span></span><br><span class="line"><span class="comment">// 5的二进制数每一位和2的二进制的每一位进行运算</span></span><br><span class="line"><span class="comment">// 5    1 0 1</span></span><br><span class="line"><span class="comment">// 2      1 0</span></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"><span class="comment">//      1 1 1</span></span><br><span class="line"><span class="comment">// 1 X 2^2 + 1x2^1 + 1x2^0 = 4 + 2 + 1 = 7</span></span><br><span class="line">fmt.Println(<span class="number">5</span> ^ <span class="number">2</span>) <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-左移"><a href="#5-4-左移" class="headerlink" title="5.4 左移"></a>5.4 左移</h4><blockquote><p>符号：<code>&lt;&lt;</code></p><p>将二进制数往左移动指定的数字,移动后的空出来的位数由0补全</p></blockquote><blockquote><p>比如5的二进制： 101</p><p>将5往左位移动1位,相当于将5的二进制101整体往左移动一位，移动后空出来的位置由0补全，所以就变成了101 + 0 &#x3D; 1010</p><p>详细计算见下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 5的二进制： 101</span></span><br><span class="line"><span class="comment">// 往左移动1位, 变成了 1010</span></span><br><span class="line"><span class="comment">// 5 &lt;&lt; 1 等价于</span></span><br><span class="line"><span class="comment">// 1 x 2^3 + 0 x 2^2 + 1 x 2^1 + 1 x 2^0 = 8 + 0 + 2 + 0 = 10</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &lt;&lt; <span class="number">1</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左移动2位, 变成了 10100</span></span><br><span class="line"><span class="comment">// 5 &lt;&lt; 2 等价于</span></span><br><span class="line"><span class="comment">// 1 x 2^4 + 0 x 2^3 + 1 x 2^2 + 0 x 2^1 + 0 x 2^0  = 16 + 0 + 4 + 0 + 0 = 20</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &lt;&lt; <span class="number">2</span>) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左移动3位, 变成了 101000</span></span><br><span class="line"><span class="comment">// 5 &lt;&lt; 2 等价于</span></span><br><span class="line"><span class="comment">// 1 x 2^5 + 0 x 2^4 + 1 x 2^3 + 0 x 2^2 + 0 x 2^1 + 0 x 2^0  = 32 + 0 + 8 + 0 + 0 + 0 = 40</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &lt;&lt; <span class="number">3</span>) <span class="comment">// 40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-右移"><a href="#5-5-右移" class="headerlink" title="5.5 右移"></a>5.5 右移</h4><blockquote><p>符号：<code>&gt;&gt;</code></p><p>将二进制数往右移动指定的数字,相当于将二进制数从右边删除对应的位数，这样来看就相当于是往右边移动了</p></blockquote><blockquote><p>比如5的二进制： 101</p><p>将5往右位移动1位,相当于将5的二进制101整体往右减少一位，那么101右边减少一位就变成了10， 101最右边的1被减去了</p><p>详细计算见下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 5的二进制： 101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左移动1位, 变成了 10</span></span><br><span class="line"><span class="comment">// 5 &gt;&gt; 1 等价于</span></span><br><span class="line"><span class="comment">// 1 x 2^1 + 0 x 2^0 = 2 + 0 = 2</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &gt;&gt; <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左移动2位, 变成了 1</span></span><br><span class="line"><span class="comment">// 5 &gt;&gt; 1 等价于</span></span><br><span class="line"><span class="comment">// 1 x 2^0 = 1</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &gt;&gt; <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左移动3位, 变成了 0</span></span><br><span class="line"><span class="comment">// 5 &gt;&gt; 1 等价于</span></span><br><span class="line"><span class="comment">// 0 x 2^0 = 0</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &gt;&gt; <span class="number">3</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 依次往下继续右移也会一直为0</span></span><br><span class="line">fmt.Println(<span class="number">5</span> &gt;&gt; <span class="number">4</span>) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-左移与右移理解"><a href="#5-5-左移与右移理解" class="headerlink" title="5.5 左移与右移理解"></a>5.5 左移与右移理解</h4><blockquote><p>类比在计算器上输入数字的例子，在计算器里输入数字:<code>23</code></p><ul><li>想让23往左移动，那么就需要<ul><li>左移一位，23后面补0，变为230</li><li>左移二位，230后面补0，变为2300</li><li>左移三位，2300后面补0，变为23000</li><li>这样来看屏幕就相当于把23往左移动了</li><li>当然也要注意，当定义的整数位数的长度不能被左移超过，如果超过也没什么意义</li></ul></li><li>想让23往右移动，那么就需要：<ul><li>右移一位，23先把3删除，变为2</li><li>右移二位，2把自己删除，变为0</li><li>右移三位，0继续删除自己然后补0，所以会一直为0</li><li>这样来看屏幕就相当于把23往右移动了，有点类似于删除的感觉，当右移位数超过该值的位数，最终一直会为0</li></ul></li></ul></blockquote><h4 id="5-6-左移与右移例子"><a href="#5-6-左移与右移例子" class="headerlink" title="5.6 左移与右移例子"></a>5.6 左移与右移例子</h4><blockquote><p>可以用来定义数量集</p><p>这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将1的二进制表示向左移10位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的1024</p><p>同理<code>2&lt;&lt;2</code>表示将2的二进制表示向左移2位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的8</p><p>左移与右移常用于权限配置这一类设置</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数量集</span></span><br><span class="line"><span class="comment">// &lt;&lt; 表示左移符号，向左移动几位</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _ = <span class="literal">iota</span></span><br><span class="line">    KB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>) <span class="comment">// 表示向左移动10位，也就是2的10次方，转换为二进制就是1024</span></span><br><span class="line">    MB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    GB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    TB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(KB) <span class="comment">// 1024</span></span><br><span class="line">    fmt.Println(MB) <span class="comment">// 1048576</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、赋值运算符"><a href="#6、赋值运算符" class="headerlink" title="6、赋值运算符"></a>6、赋值运算符</h3><blockquote><p>给变量赋值</p><p><code>+=</code> 相加后再赋值</p><p><code>-=</code> 相减后再赋值</p><p><code>*=</code> 相乘后再赋值</p><p><code>/=</code> 相除后再赋值</p><p><code>%=</code> 求余后再赋值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="number">13</span></span><br><span class="line">s1 += <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line">s1 -= <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、复合数据类型"><a href="#七、复合数据类型" class="headerlink" title="七、复合数据类型"></a>七、复合数据类型</h2><h3 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h3><blockquote><p>数组类似于其他语言的列表，比如<code>python</code>的<code>list</code>、<code>shell</code>语言的数组，但又完全不一样</p><p>常用来存储元素，元素是基本数据类型：字符串、整型、布尔值</p><p><code>一个数组只能指定一种数据类型，不支持一个数组中有多种数据类型的元素存在</code></p><ul><li><p>注意</p><ul><li><code>go</code>中的数组需要指定长度和类型</li><li>并且长度和元素类型是数组整个类型的一部分，这是和其他语言的不一样的地方</li></ul></li><li><p>数组使用场景不多，用的比较多的是切片</p></li></ul></blockquote><h4 id="1-1-数组声明"><a href="#1-1-数组声明" class="headerlink" title="1.1 数组声明"></a>1.1 数组声明</h4><blockquote><ul><li>数组声明<ul><li>数组声明只是相当于定义了一个数组，并没有给数组指定具体的值，数组声明的所有元素值都是<code>go</code>语言中的零值</li><li>数组声明以后长度和类型都确定好了，不能再修改</li><li>数组只声明，不初始化，那这个数组每种类型的元素都有一个零值(默认值)，没有具体的值，默认零值如下<ul><li>字符串类型初始值为<code>&quot;&quot;</code></li><li>整型类型初始值为<code>0</code></li><li>布尔类型初始值为<code>false</code></li></ul></li></ul></li></ul></blockquote><h5 id="1-1-1-var关键字声明数组"><a href="#1-1-1-var关键字声明数组" class="headerlink" title="1.1.1 var关键字声明数组"></a>1.1.1 <code>var</code>关键字声明数组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">var</span> 数组名 [数组长度]数组类型</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组名：定义的数组变量名</span></span><br><span class="line"><span class="comment">// 数组长度：一个具体的数字，可以为0，但是没有意义</span></span><br><span class="line"><span class="comment">// 数组类型：支持int/string/bool三种常见类型</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">3</span>]<span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> arr3 [<span class="number">3</span>]<span class="type">bool</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, arr1) <span class="comment">// [0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到arr1的类型不仅包含长度，还包含了元素类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, arr1) <span class="comment">// [3]int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, arr2) <span class="comment">// [     ]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, arr2) <span class="comment">// [3]string</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, arr3) <span class="comment">// [false false false]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, arr3) <span class="comment">// [3]bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-短变量声明数组"><a href="#1-2-1-短变量声明数组" class="headerlink" title="1.2.1 短变量声明数组"></a>1.2.1 短变量声明数组</h5><blockquote><p>除了<code>var</code>关键字声明数组，也可以用短变量方式声明数组</p><ul><li>短变量声明数组有两种格式<ul><li>第一种：指定确定的数组长度值</li><li>第二种：用<code>...</code>代替确定的数组长度值，表示数组值的个数由go自动推导长度，这种方式声明的数组个数都是0</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数组名 := [数组长度]数组类型&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">数组名：定义的数组变量名</span></span><br><span class="line"><span class="comment">数组长度：一个具体的数字，可以为0，但是没有意义，必须是一个数字，不能是三个点</span></span><br><span class="line"><span class="comment">数组类型：支持int/string/bool三种常见类型</span></span><br><span class="line"><span class="comment">&#123;&#125; : 用短变量声明一定要有，不带会报错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="comment">// 指定长度，此时该数组长度就是指定的长度</span></span><br><span class="line">s1 := [<span class="number">3</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">fmt.Println(s1) <span class="comment">// [0 0 0]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s1)) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-数组初始化赋值"><a href="#1-2-数组初始化赋值" class="headerlink" title="1.2 数组初始化赋值"></a>1.2 数组初始化赋值</h4><blockquote><p>为什么要对数组初始化？</p><ul><li>定义完数组后，<code>go</code>会自动给数组元素设置初始的零值(默认值)，这应该不是我们想要的，所以要对数组已经设置的值进行重新赋值，所以需要初始化赋值，相当于覆盖了默认值</li><li>数组定义以后每种类型的元素都有一个零值(默认值)<ul><li>字符串类型初始值为<code>&quot;&quot;</code></li><li>整型类型初始值为<code>0</code></li><li>布尔类型初始值为<code>false</code></li></ul></li></ul><p>下面代码是初始化数组的三种方式</p><ul><li><p>初始化赋值方式</p><ul><li>第一种：先声明，再初始化</li><li>第二种：短变量方式声明并且初始化，一步完成</li><li>第三种：根据索引来初始化，其他元素用零值(默认值)补全</li></ul></li><li><p>注意：</p><ul><li>其实数组不管哪种方式声明并且初始化赋值<ul><li>既可以分步骤执行，先声明，再初始化完成</li><li>也可以声明和初始化赋值在一行代码完成</li><li>使用哪种方式取决于自己</li></ul></li><li>用短变量方式直接定义数组，但是必须要对数组进行初始化(也就是要一定带上{}符号，表示创建了一个数组)，否则会下面的错误<ul><li>错误提示：<code>./main.go:7:8: type []int is not an expression</code></li></ul></li></ul></li></ul></blockquote><h5 id="1-2-1-var初始化赋值"><a href="#1-2-1-var初始化赋值" class="headerlink" title="1.2.1 var初始化赋值"></a>1.2.1 <code>var</code>初始化赋值</h5><blockquote><p>推荐使用：</p><ul><li>通过<code>var</code>关键字需要分两步<ul><li>先声明</li><li>再初始化赋值数组</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(arr1) <span class="comment">// [0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组初始化赋值</span></span><br><span class="line">arr1 = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(arr1) <span class="comment">// [1 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不推荐：</p><ul><li>当然也可以将声明和初始化一步完成</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 不推荐：一行代码完成声明和初始化赋值</span></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(arr2) <span class="comment">// [4, 5, 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-短变量初始化赋值"><a href="#1-2-2-短变量初始化赋值" class="headerlink" title="1.2.2 短变量初始化赋值"></a>1.2.2 短变量初始化赋值</h5><blockquote><p>推荐使用：</p><ul><li>短变量方式声明和初始化赋值一行代码完成，推荐使用<code>[...]</code>形式<ul><li>可以在<code>[]</code>设置确认的长度值</li><li>可以在<code>[]</code>用三个<code>...</code>代替(<code>[...]</code>)，表示数组值的个数由<code>go</code>自动推导长度</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ！！！推荐：一行代码完成，三个点表示数组值的个数由go自动推导长度</span></span><br><span class="line">arr2 := [...]<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(arr2) <span class="comment">// [4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组初始化赋值</span></span><br><span class="line">    arr1 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(arr1) <span class="comment">// [1 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不推荐使用分步骤先声明、再赋值</p></blockquote><h5 id="1-2-3-固定索引值初始化赋值"><a href="#1-2-3-固定索引值初始化赋值" class="headerlink" title="1.2.3 固定索引值初始化赋值"></a>1.2.3 固定索引值初始化赋值</h5><blockquote><p>指定固定索引值进行声明初始化数组，其余元素有零值补全</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 一行代码完成</span></span><br><span class="line">arr1 := [...]<span class="type">int</span>&#123;<span class="number">0</span>:<span class="number">3</span>, <span class="number">4</span>:<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(arr1) <span class="comment">// [4, 5, 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-数组比较"><a href="#1-3-数组比较" class="headerlink" title="1.3 数组比较"></a>1.3 数组比较</h4><blockquote><p><code>数组长度和元素类型是数组整个类型的一部分</code>,所以长度不同，即使类型相同的数组也不能进行比较</p><p>这是和其他语言的不一样的地方</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> arr3 [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr1 == arr2) <span class="comment">// true</span></span><br><span class="line">fmt.Println(arr1 == arr3)  <span class="comment">// invalid operation: arr1 == arr3 (mismatched types [3]int and [4]int)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr1 == arr3 不能比较，会报错，因为长度也是数组的一部分,那么arr1和arr3不相等</span></span><br><span class="line"><span class="comment">// 会报错：invalid operation: arr1 == arr3 (mismatched types [3]int and [4]int)</span></span><br><span class="line"><span class="comment">// 翻译过来就是：无效操作：arr1 == arr3（类型[3]int和[4]int不匹配）</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211206173943254.png" class="" title="image-20211206173943254"><h4 id="1-4-数组的遍历"><a href="#1-4-数组的遍历" class="headerlink" title="1.4 数组的遍历"></a>1.4 数组的遍历</h4><blockquote><p>对数组进行变量，使用<code>for</code>循环</p></blockquote><blockquote><p>c语言风格for循环</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>]<span class="type">string</span></span><br><span class="line">arr1 = [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;lily&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c语言风格for循环</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr1); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v: %v\n&quot;</span>,i, arr1[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    0: sam</span></span><br><span class="line"><span class="comment">    1: bob</span></span><br><span class="line"><span class="comment">    2: lily</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>for range</code>循环数组</p><p><code>for range</code>只有一个变量时，这个值为索引值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// for range遍历</span></span><br><span class="line">arr2 := [...]<span class="type">string</span>&#123;<span class="string">&quot;jix&quot;</span>, <span class="string">&quot;sem&quot;</span>, <span class="string">&quot;eop&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> arr2 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    0:jix</span></span><br><span class="line"><span class="comment">    1:sem</span></span><br><span class="line"><span class="comment">    2:eop</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-5-多维数组"><a href="#1-5-多维数组" class="headerlink" title="1.5 多维数组"></a>1.5 多维数组</h4><h5 id="1-5-1-定义多维数组"><a href="#1-5-1-定义多维数组" class="headerlink" title="1.5.1 定义多维数组"></a>1.5.1 定义多维数组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>][<span class="number">2</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(arr1) <span class="comment">// [[0 0] [0 0] [0 0]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">arr1 = [<span class="number">3</span>][<span class="number">2</span>]<span class="type">int</span>&#123;</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr1) <span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-2-遍历多维数组"><a href="#1-5-2-遍历多维数组" class="headerlink" title="1.5.2 遍历多维数组"></a>1.5.2 遍历多维数组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line"><span class="keyword">var</span> arr1 [<span class="number">3</span>][<span class="number">2</span>]<span class="type">int</span></span><br><span class="line">fmt.Println(arr1) <span class="comment">// [[0 0] [0 0] [0 0]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">arr1 = [<span class="number">3</span>][<span class="number">2</span>]<span class="type">int</span>&#123;</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">[<span class="number">2</span>]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr1) <span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言风格</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr1); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:= <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr1[i]); j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;每个元素: %v\n&quot;</span>, arr1[i][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for range风格</span></span><br><span class="line"><span class="keyword">for</span> _, v1 := <span class="keyword">range</span> arr1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n最外层的元素: %v\n&quot;</span>, v1)</span><br><span class="line"><span class="keyword">for</span> _, v2 := <span class="keyword">range</span> v1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;最里面的元素: %v\n&quot;</span>, v2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211206181116451.png" class="" title="image-20211206181116451"><h4 id="1-6-数组是值类型"><a href="#1-6-数组是值类型" class="headerlink" title="1.6 数组是值类型"></a>1.6 数组是值类型</h4><blockquote><p>将一个<code>A数组</code>赋值给另一个<code>B数组</code>，这样就相当于是将<code>A</code>数组完全复制了一份给<code>B数组</code></p><p>修改<code>B数组</code>的元素，不会影响<code>A数组</code>，相当于<code>B数组</code>是<code>A数组</code>的副本，完全拷贝了<code>A数组</code>一份</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 数组是值类型</span></span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 := s1</span><br><span class="line">s2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s1) <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [100 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-数组例题"><a href="#1-7-数组例题" class="headerlink" title="1.7 数组例题"></a>1.7 数组例题</h4><blockquote><p>求数组元素的所有和</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addArrSum</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">sum = sum + v</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;sum = %v&quot;</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>求数组和为数组中指定的两个元素的下标</p><p>例如：[1,2,3,4,5]</p><p>求和为5的两个元素的下标</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sum = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(s1); j++ &#123;</span><br><span class="line"><span class="keyword">if</span> s1[i] + s1[j] == sum &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;(%v, %v)\n&quot;</span>, i, j)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">(0, 3)</span></span><br><span class="line"><span class="comment">(1, 2)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="2、切片"><a href="#2、切片" class="headerlink" title="2、切片"></a>2、切片</h3><blockquote><p><code>!!!比较重要</code></p><ul><li>切片是一个用于相同类型元素的可变长的序列</li><li>是数组类型的一层包装，更加灵活，支持自动增加数组长度</li><li>切片属于<code>引用类型</code><ul><li>内部包含: <code>地址</code>、<code>长度</code>和<code>容量</code></li></ul></li><li>切片可以快速操作数据集合</li></ul></blockquote><h4 id="2-1-声明切片"><a href="#2-1-声明切片" class="headerlink" title="2.1 声明切片"></a>2.1 声明切片</h4><blockquote><p>切片声明时只指定了类型，不需要指定切片长度，别的声明、初始化赋值切片格式都和数组一致，不做过多赘述</p><ul><li><p>不过切片底层还是数组</p></li><li><p>切片声明以后</p><ul><li>切片是没有零值(默认值)的，这个和数组是很大的区别</li><li>因为该切片长度为0，容量也为0</li><li>切片没有零值(默认值)，那这个切片的值是空，一个元素都没有，该切片的值就是<code>nil</code>，在其他编程语言里表示空，<code>redis</code>里表示空就是用<code>nil</code>表示</li><li>声明切片和nil相比较等于关系，一定是<code>true</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明切片格式</span></span><br><span class="line"><span class="keyword">var</span> 切片变量名 []T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片名： 也叫变量名</span></span><br><span class="line"><span class="comment">// [] ：表示不需要设置切片长度</span></span><br><span class="line"><span class="comment">// T：表示切片中的元素类型</span></span><br><span class="line"><span class="comment">// 可以看到声明切片就不需要指定长度了</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义整型类型的切片</span></span><br><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义字符串类型的切片</span></span><br><span class="line"><span class="keyword">var</span> s2 []<span class="type">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义布尔类型的切片</span></span><br><span class="line"><span class="keyword">var</span> s3 []<span class="type">bool</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, s1) <span class="comment">// []int(nil)</span></span><br><span class="line">    fmt.Printf(s1 == <span class="literal">nil</span>) <span class="comment">// true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// []int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// []</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// []string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// []</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s3) <span class="comment">// []bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-切片初始化"><a href="#2-2-切片初始化" class="headerlink" title="2.2 切片初始化"></a>2.2 切片初始化</h4><blockquote><p>切片初始化和数组初始化是一样进行操作的，切片不需要在<code>[]</code>中写长度</p><p>支持三种方式</p><ul><li><p>第一种：先声明，再初始化</p></li><li><p>第二种：短变量方式声明并且初始化，一步完成，一定要带花括号(<code>&#123;&#125;</code>)</p></li><li><p>第三种：根据索引来初始化，其他元素用零值(默认值)补全</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义整型类型的切片</span></span><br><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">s1 = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// []int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短变量声明切片</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// []int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定固定索引值</span></span><br><span class="line">s3 := []<span class="type">int</span>&#123;<span class="number">0</span>:<span class="number">4</span>, <span class="number">4</span>:<span class="number">9</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// [4 0 0 0 9]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s3) <span class="comment">// []int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-由数组得到切片"><a href="#2-3-由数组得到切片" class="headerlink" title="2.3 由数组得到切片"></a>2.3 由数组得到切片</h4><blockquote><p>可以由原始数组得到切片，和<code>python</code>的切片操作一致</p><ul><li>切片<code>s[x:y]</code><ul><li>表示<code>左包含右不包含</code>(左闭右开)，俗称”顾头不顾腚”</li><li>那么<code>切片s</code>就是从<code>原始数组</code>的<code>x索引开始</code>，到<code>原始数组</code>的<code>(y-1)索引结束</code>的这一段元素</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义一个数组</span></span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片1</span></span><br><span class="line">s2 := s1[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">fmt.Println(s2) <span class="comment">// [1 2 3 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片2</span></span><br><span class="line">s3 := s1[:<span class="number">4</span>] <span class="comment">// 等价于 s1[0:4]</span></span><br><span class="line">fmt.Println(s3) <span class="comment">// [1 2 3 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片3</span></span><br><span class="line">s4 := s1[:<span class="built_in">len</span>(s1)] <span class="comment">// 等价于 s1[:len(s1)],因为是左闭右开，所以右边的值会比索引小1</span></span><br><span class="line">fmt.Println(s4) <span class="comment">// [1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片3</span></span><br><span class="line">s5 := s1[:] <span class="comment">// 表示切片了整个数组，相当于是复制了整个数组，但是注意切片是引用类型</span></span><br><span class="line">fmt.Println(s5) <span class="comment">// [1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-切片长度和容量"><a href="#2-4-切片长度和容量" class="headerlink" title="2.4 切片长度和容量"></a>2.4 切片长度和容量</h4><blockquote><ul><li><p>切片长度：<code>len(切片变量名)</code>，求出切片的元素个数</p></li><li><p>切片容量：<code>cap(切片变量名)</code>, 是指将从原始数组被切片的第一个元素开始，到切片原始数组的的最后一个元素的全部元素个数</p><ul><li>切片容量表示了可以往右边切元素，直到切到原始数组最后一个元素，也就是说可以切片的总体容量</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="comment">// 由数组得到切片</span></span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示切片了整个数组，相当于是复制了整个数组，但是注意切片是引用类型</span></span><br><span class="line">s2 := s1[:<span class="number">4</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2) <span class="comment">// [1 2 3 4]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="built_in">len</span>(s2)) <span class="comment">// 4</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="built_in">cap</span>(s2)) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">s3 := s1[<span class="number">4</span>:<span class="number">7</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3) <span class="comment">// [5 6 7]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="built_in">len</span>(s3)) <span class="comment">// 3</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, <span class="built_in">cap</span>(s3)) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211206194456407.png" class="" title="image-20211206194456407"><h4 id="2-5-切片再切片"><a href="#2-5-切片再切片" class="headerlink" title="2.5 切片再切片"></a>2.5 切片再切片</h4><blockquote><p>可以对切片再进行切片，但是索引长度不能超过原数组长度，否则会出现数组索引越界情况 </p><ul><li><code>切片是引用类型，指向了底层数组</code>:<ul><li>引用类型：表示切片和原始数组都指向了同一个数组</li><li>修改了底层数组的元素值，那么切片对应位置元素的值也会被修改</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">s1 = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先对定义的切片s1进行切片s2</span></span><br><span class="line">s2 := s1[<span class="number">2</span>:]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s2)=%v cap(s2)=%v\n&quot;</span>, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再对切片s2再进行切片出来s3</span></span><br><span class="line">s3 := s2[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s3)=%v cap(s3)=%v\n&quot;</span>, <span class="built_in">len</span>(s3), <span class="built_in">cap</span>(s3))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片是引用类型，指向了底层数组</span></span><br><span class="line"><span class="comment">// 可以看到修改了原始切片s1，对应的s2切片的值也会修改成和s1一样</span></span><br><span class="line">s1[<span class="number">4</span>] = <span class="number">400</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-make函数定义切片"><a href="#2-6-make函数定义切片" class="headerlink" title="2.6 make函数定义切片"></a>2.6 <code>make</code>函数定义切片</h4><blockquote><p>上面的<code>切片声明</code>、<code>由数组获得切片</code>都是基于数组而产生切片，这两种方式创建的切片，长度和容量是由原始数组限制了，不能超过原始数组的长度和容量，没法在指定切片的时候就指定切片的长度和容量，那有没有直接定义切片的方式，那就是<code>make</code>函数</p><ul><li><code>make</code>函数是内置函数，可以动态创建切片<ul><li>为什么说动态呢？<ul><li>因为<code>make</code>提供了两个参数：<code>size</code>和<code>cap</code>，可以自由指定切片长度和容量</li><li>定义以后的切片根据<code>size</code>值通过零值(默认值)填充切片</li><li>定义后初始化切片，切片的容量可以不受<code>cap</code>值的限制，可以在初始化时定义大于<code>cap</code>值数量的元素，那么这个初始化以后的切片的长度和容量会根据初始化时填写的元素数量动态变化</li><li>那为什么<code>make</code>函数定义切片时还需要指定<code>size</code>和<code>cap</code>，个人理解是定义切片时只是作为一个初始值，但是初始化切片(往切片里塞元素值)时可以无限增大，这就是动态创建切片</li><li>但是<code>make</code>函数定义切片时可以省略<code>cap</code>参数值(不传<code>cap</code>值表示和<code>size</code>值一样)，不能不传<code>len</code>参数，会报错提示缺少<code>len</code>参数<ul><li><code>./main.go:6:12: missing len argument to make([]int)</code></li></ul></li></ul></li></ul></li><li><code>make</code>函数定义后，需要进行初始化，初始化和声明切片的方式一样，但是不能超过容量长度，否则会爆错</li><li>注意<ul><li>make函数定义切片是，size参数值不能大于cap参数值，否则会报错<ul><li><code>./main.go:6:12: len larger than cap in make([]int)</code></li></ul></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make函数创建切片</span></span><br><span class="line"><span class="built_in">make</span>([]T, size, <span class="built_in">cap</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// []T: 表示切片的类型</span></span><br><span class="line"><span class="comment">// size: 表示切片的长度，也就是len()切片元素个数返回的值</span></span><br><span class="line"><span class="comment">// cap: 表示切片的容量，也就是cap()切片容量返回的值</span></span><br><span class="line"><span class="comment">// 当size、cap参数只写一个数字时，表示size和cap都是同一个值</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 只写size的值，表示size和cap参数值都是同一个</span></span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>,s1) <span class="comment">// [0 0 0 0 0]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v cap(s1)=%v\n&quot;</span>,<span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=5 cap(s1)=5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面表示切片长度为0，容量为10</span></span><br><span class="line">    <span class="comment">// s2=[]，表示底层数组就是空的,但是这个切片的容量长度是10</span></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>,s2) <span class="comment">// </span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s2)=%v cap(s2)=%v\n&quot;</span>,<span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))  <span class="comment">// len(s1)=0 cap(s1)=10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过make函数初始化的切片，对切片进行初始化</span></span><br><span class="line">s1 = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-切片比较运算"><a href="#2-7-切片比较运算" class="headerlink" title="2.7 切片比较运算"></a>2.7 切片比较运算</h4><blockquote><p>因为切片是<code>引用类型</code>，不能使用<code>==</code>来进行两个切片的全部元素是否相等比较</p><p>切片只能和<code>nil</code>进行比较</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(s1 == s2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下图的报错提示了slice只能用nil来比较</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211207130223515.png" class="" title="image-20211207130223515"><h4 id="2-8-切片nil值"><a href="#2-8-切片nil值" class="headerlink" title="2.8 切片nil值"></a>2.8 切片<code>nil</code>值</h4><blockquote><ul><li><p>只有声明切片方式得到的切片的值是<code>nil</code></p></li><li><p>切片值是<code>nil</code></p><ul><li>这个切片的长度和容量都是0</li><li>表示这个切片是没有底层数组的</li></ul></li><li><p>不能说<code>长度为0</code>、<code>容量为0</code>的切片一定是<code>nil</code></p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明一个切片，它的值才是nil</span></span><br><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">fmt.Println(s1 == <span class="literal">nil</span>) <span class="comment">// true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%#v len(s1)=%v cap(s1)=%v\n&quot;</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// s1=[]int(nil) len(s1)=0 cap(s1)=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短变量声明并初始化一个切片，可以看到s2的长度和容量都是0，但是s2不等于nil</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s2=%#v len(s2)=%v cap(s2)=%v\n&quot;</span>, s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2)) <span class="comment">// s2=[]int&#123;&#125; len(s2)=0 cap(s2)=0</span></span><br><span class="line">fmt.Println(s2 == <span class="literal">nil</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// make函数构造一个切片</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(s3 == <span class="literal">nil</span>) <span class="comment">// false</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s3=%#v len(s3)=%v cap(s3)=%v\n&quot;</span>, s3, <span class="built_in">len</span>(s3), <span class="built_in">cap</span>(s3)) <span class="comment">// s3=[]int&#123;&#125; len(s3)=0 cap(s3)=0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-判断切片是否为空"><a href="#2-9-判断切片是否为空" class="headerlink" title="2.9 判断切片是否为空"></a>2.9 判断切片是否为空</h4><blockquote><p>判断切片是否为空，不能用<code>nil</code>判断，而是要用<code>len() == 0</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明一个切片，它的值才是nil</span></span><br><span class="line">    <span class="comment">// s1长度是0</span></span><br><span class="line"><span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%#v len(s1)=%v cap(s1)=%v\n&quot;</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// s1=[]int(nil) len(s1)=0 cap(s1)=0</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s1) == <span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短变量声明并初始化一个切片，可以看到s2的长度和容量都是0，s2的长度是0</span></span><br><span class="line">s2 := []<span class="type">int</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s2=%#v len(s2)=%v cap(s2)=%v\n&quot;</span>, s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2)) <span class="comment">// s2=[]int&#123;&#125; len(s2)=0 cap(s2)=0</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s2) == <span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211207132221179.png" class="" title="image-20211207132221179"><h4 id="2-10-切片赋值"><a href="#2-10-切片赋值" class="headerlink" title="2.10 切片赋值"></a>2.10 切片赋值</h4><blockquote><p>可以将切片作为另一个变量的值</p><p>可以看出来<code>s2</code>引用了<code>s1</code>切片，<code>s1</code>的第三个元素值变化了，那么<code>s2</code>的第三值也会变化</p><p>切片不保存值，切片只是一个框，切片的值指向底层的数组</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">s2 := s1</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;修改切片s1之前&quot;</span>)</span><br><span class="line">fmt.Println(s1) <span class="comment">// [1 2 3 4]</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [1 2 3 4]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1[<span class="number">2</span>] = <span class="number">1000</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\n修改切片s1以后&quot;</span>)</span><br><span class="line">fmt.Println(s1) <span class="comment">// [1 2 1000 4]</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [1 2 1000 4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-11-切片遍历"><a href="#2-11-切片遍历" class="headerlink" title="2.11 切片遍历"></a>2.11 切片遍历</h4><blockquote><p>可以使用<code>for</code>循环对切片进行遍历,和遍历数组一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过make函数初始化的切片，对切片进行初始化</span></span><br><span class="line">s1 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line"></span><br><span class="line"><span class="comment">// c语言风格</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\nc语言风格&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s1); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>, i, s1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for range形式</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\nfor range形式&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-切片append添加元素"><a href="#2-12-切片append添加元素" class="headerlink" title="2.12 切片append添加元素"></a>2.12 切片<code>append</code>添加元素</h4><blockquote><ul><li>调用<code>append</code>函数必须要用原数组变量名接收返回值</li><li>追加元素时，原来的底层数组放不下时，<code>go</code>会将底层数组更换一个新的数组内存地址，并且新的数组内存地址进行了自动扩容，那么更换了个那就必须接收，所以要用原来的切片变量名来进行接收</li><li>自动扩容有时候是原来数组长度的2倍</li><li><code>append</code>函数可以追加一个元素，追加多个元素，追加切片<ul><li>相当于是两个切片相加</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">切片 = <span class="built_in">append</span>(切片变量名，需要追加的元素)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义切片</span></span><br><span class="line">s1 := []<span class="type">string</span>&#123;<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;lily&quot;</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v  cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=3  cap(s1)=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用append函数必须要用原数组变量名接收返回值</span></span><br><span class="line"><span class="comment">// 追加一个元素</span></span><br><span class="line">s1 = <span class="built_in">append</span>(s1, <span class="string">&quot;six_people&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// [sam bob lily six_people]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v  cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=4  cap(s1)=6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加多个元素</span></span><br><span class="line">s1 = <span class="built_in">append</span>(s1, <span class="string">&quot;aliy&quot;</span>, <span class="string">&quot;wide&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// [sam bob lily six_people wide wide]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v  cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=4  cap(s1)=6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将一个切片追加到另一个切片</p><p><code>append</code>函数里追加另一个切片</p><ul><li><code>s1 = append(s1, s2...)</code></li><li><code>s2...</code>表示将s2切片拆开，不是省略号</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义切片</span></span><br><span class="line">s1 := []<span class="type">string</span>&#123;<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;lily&quot;</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v  cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=3  cap(s1)=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加一个切片</span></span><br><span class="line">s2 := []<span class="type">string</span>&#123;<span class="string">&quot;lining&quot;</span>, <span class="string">&quot;xiaohong&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// s2... 表示将s2拆开，不是省略号，将s2切片整个都追加到s1切片</span></span><br><span class="line">s1 = <span class="built_in">append</span>(s1, s2...)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// [sam bob lily lining xiaohong]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len(s1)=%v  cap(s1)=%v\n&quot;</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1)) <span class="comment">// len(s1)=7  cap(s1)=12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-13-切片copy"><a href="#2-13-切片copy" class="headerlink" title="2.13 切片copy"></a>2.13 切片<code>copy</code></h4><blockquote><p>由于切片是引用类型，当把一个切片指向另一个切片时，修改一个切片的值，另一个切片也会跟着修改</p><p>为了解决这种问题，引入了<code>copy</code>函数</p><ul><li><code>copy</code>函数可以快速的将一个切片完整复制到另一个切片空间中</li><li>即使修改了原始的切片元素值，<code>copy</code>过去的切片对应位置的元素值也不会修改</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">copy</span>(目标切片， 源切片 []T)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义切片</span></span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 := s1</span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// copy切片，s3是目标切片，s1是源切片</span></span><br><span class="line"><span class="built_in">copy</span>(s3, s1)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改源切片s1的第一个元素值为100</span></span><br><span class="line">s1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1 = %v\n&quot;</span>, s1) <span class="comment">//  [100 2 3]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s2 = %v\n&quot;</span>, s2) <span class="comment">//  [100 2 3]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s3 = %v\n&quot;</span>, s3) <span class="comment">//  [1 2 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到s3 copy了s1切片后，即使s1的元素值修改了，s3的也不会变</span></span><br></pre></td></tr></table></figure><h4 id="2-14-切片append删除元素"><a href="#2-14-切片append删除元素" class="headerlink" title="2.14 切片append删除元素"></a>2.14 切片append删除元素</h4><blockquote><p><code>go</code>语言中没有特定删除切片指定元素的方法，需要自己写</p><ul><li><code>切片</code>修改的是底层数组</li><li>切片修改了某个值，底层数组的值也会进行修改，因为切片是引用类型，指向的也是底层的数组</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a[:index], a[index+<span class="number">1</span>:]...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这三个点(...)是表示把切片元素拆开追加到另一个数组里，不是省略号的意思</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 删除切片指定索引位置元素</span></span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如删除索引位置为2，值为3的元素</span></span><br><span class="line">s1 = <span class="built_in">append</span>(s1[:<span class="number">2</span>], s1[<span class="number">3</span>:]...)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ul><li><code>append</code>切片删除元素时，给<code>append</code>里传入的第一个值一定必须是切片类型，不能是其他类型，否则会下面的报错，提示<code>append</code>第一个元素必须是切片(<code>slice</code>)</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">// 拿到切片</span></span><br><span class="line">s2 := s1[:]</span><br><span class="line"><span class="comment">// 删除元素3前:</span></span><br><span class="line"><span class="comment">// 切片s2是 [1 2 3 4 5 6]</span></span><br><span class="line"><span class="comment">// len(s2) = 6, cap(s2)=6</span></span><br><span class="line">fmt.Println(s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切片是引用类型，如果对切片进行了删除值的操作</span></span><br><span class="line"><span class="comment">// 那么底层数组的值也会被修改，但是切片不保存值</span></span><br><span class="line"><span class="comment">// 切片操作的是底层数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素3前，s2[0]的内存地址：0xc00000c450</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;s2[<span class="number">0</span>])</span><br><span class="line">s2 = <span class="built_in">append</span>(s2[:<span class="number">2</span>], s2[<span class="number">3</span>:]...)  <span class="comment">// 操作的是底层数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素3后，s2[0]的内存地址：0xc00000c450</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;s2[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看出来，删除元素前后，切片的内存地址没有变</span></span><br><span class="line"><span class="comment">// 那么也说明了切片不存值，对应操作的也是底层数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素3后:</span></span><br><span class="line"><span class="comment">// 切片s2变成了 [1 2 4 5 6]</span></span><br><span class="line"><span class="comment">// len(s2) = 5, cap(s2)=6</span></span><br><span class="line">fmt.Println(<span class="string">&quot;s1:&quot;</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">fmt.Println(<span class="string">&quot;s2:&quot;</span>, s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如修改切片s2的第一个元素值</span></span><br><span class="line"><span class="comment">//s2[0] = 100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s2[0]的内存地址: %p\n&quot;</span>, &amp;s2[<span class="number">0</span>])</span><br><span class="line">fmt.Printf(<span class="string">&quot;底层数组s1: %v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;切片s2: %v\n&quot;</span>, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-15-切片是引用类型验证"><a href="#2-15-切片是引用类型验证" class="headerlink" title="2.15 切片是引用类型验证"></a>2.15 切片是引用类型验证</h4><blockquote><p><code>切片是引用类型，指向了底层数组</code></p><p>下面是切片属于引用类型的验证</p><ul><li>可以看到从<code>数组s1</code>进行了切片得到了<code>切片s2</code></li><li>然后对切片后得到的<code>切片s2</code>进行了第一个元素重新赋值</li><li>以及对<code>原始数组s1</code>的第三个元素重新赋值</li><li>最后输出<code>数组s1</code>和<code>数组s2</code>的元素都为一致</li></ul><p>由此可以看出切片是引用类型，不管是修改了切片的某个元素值，还是修改了原始数组的某个元素值，原始数组或切片共同位置的元素也会进行同步修改</p><p>对于引用类型，若使用var进行声明变量，<code>必须使用make函数对其进行分配内存,</code>若不初始化，该变量默认值为nil，向其添加元素时会导致panic。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="comment">// 由数组得到切片</span></span><br><span class="line">s1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示切片了整个数组，相当于是复制了整个数组，但是注意切片是引用类型</span></span><br><span class="line">s2 := s1[:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改s2的第一元素的值</span></span><br><span class="line">s2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改s1的第三元素的值</span></span><br><span class="line">s1[<span class="number">2</span>] = <span class="number">399</span></span><br><span class="line"><span class="comment">// 可以看到s1和s2的第一个元素的值都被修改了</span></span><br><span class="line">fmt.Println(s2) <span class="comment">// [100 2 399 4 5 6 7 8 9]</span></span><br><span class="line">fmt.Println(s1) <span class="comment">// [100 2 399 4 5 6 7 8 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-16-切片本质"><a href="#2-16-切片本质" class="headerlink" title="2.16 切片本质"></a>2.16 切片本质</h4><blockquote><p>切片本质就是一个框，框住了一段连续的内存区域，真正的数据是保存在底层数组中</p><p>切片是引用类型</p><p>切片不保存具体的值</p><p>切片对应一个底层数组</p><p>底层数组是一段连续的内存区域</p></blockquote><h4 id="2-17-切片练习题"><a href="#2-17-切片练习题" class="headerlink" title="2.17 切片练习题"></a>2.17 切片练习题</h4><h5 id="2-17-1-for循环生成切片"><a href="#2-17-1-for循环生成切片" class="headerlink" title="2.17.1 for循环生成切片"></a>2.17.1 <code>for</code>循环生成切片</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建切片,下面是长度为5，有5个0的切片</span></span><br><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++&#123;</span><br><span class="line">s1 = <span class="built_in">append</span>(s1, i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v&quot;</span>, s1) <span class="comment">// 追加到5个0后面，所以结果是: [0 0 0 0 0 0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-17-2-实现lstrip-函数"><a href="#2-17-2-实现lstrip-函数" class="headerlink" title="2.17.2 实现lstrip()函数"></a>2.17.2 实现lstrip()函数</h5><blockquote><p>编写删除字符串首部的空格代码，和<code>python</code>的<code>lstrip()</code>一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strLeftStrip</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//  去除字符串首位左侧的空格</span></span><br><span class="line"><span class="keyword">if</span> !strings.HasPrefix(s, <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将s转换为切片</span></span><br><span class="line">sToSlice := strings.Split(s, <span class="string">&quot;&quot;</span>)</span><br><span class="line">sToSlice = <span class="built_in">append</span>(sToSlice[:<span class="number">0</span>], sToSlice[<span class="number">1</span>:]...)</span><br><span class="line">ret := strings.Join(sToSlice, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-17-3-实现rstrip-函数"><a href="#2-17-3-实现rstrip-函数" class="headerlink" title="2.17.3 实现rstrip()函数"></a>2.17.3 实现rstrip()函数</h5><blockquote><p>编写删除字符串尾部的空格代码，和<code>python</code>的<code>rstrip()</code>一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strRightStrip</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//  去除字符串首位左侧的空格</span></span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(s, <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将s转换为切片</span></span><br><span class="line">sToSlice := strings.Split(s, <span class="string">&quot;&quot;</span>)</span><br><span class="line">sToSlice = <span class="built_in">append</span>(sToSlice[<span class="number">0</span>:<span class="built_in">len</span>(sToSlice) - <span class="number">1</span>], <span class="string">&quot;&quot;</span>)</span><br><span class="line">ret := strings.Join(sToSlice, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-17-4-实现strip-函数"><a href="#2-17-4-实现strip-函数" class="headerlink" title="2.17.4 实现strip()函数"></a>2.17.4 实现strip()函数</h5><blockquote><p>编写删除字符串首部和尾部的空格代码，和<code>python</code>的<code>strip()</code>一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStrip</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.HasSuffix(s, <span class="string">&quot; &quot;</span>) &amp;&amp; !strings.HasPrefix(s, <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先处理左侧首部空格</span></span><br><span class="line">s = strLeftStrip(s)</span><br><span class="line"></span><br><span class="line">s = strRightStrip(s)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、指针"><a href="#3、指针" class="headerlink" title="3、指针"></a>3、指针</h3><blockquote><p><a href="https://studygolang.com/articles/29273">https://studygolang.com/articles/29273</a></p><p><a href="https://blog.csdn.net/yonggeit/article/details/102521391">https://blog.csdn.net/yonggeit/article/details/102521391</a></p></blockquote><blockquote><p><code>go</code>语言中不存在指针运算，仅可以操作指针</p><ul><li><code>指针</code>：<ul><li>是指某一个指针类型的一个值，通过<code>&amp;变量名</code>获取到的值就是<code>指针</code>(表示这个<code>变量名</code>指向的内存地址)</li><li>一个指针可以存一个内存地址，所以指针也就是内存地址</li><li>一个指针中存储的内存地址为另外一个值(也叫变量)的地址</li></ul></li></ul></blockquote><h4 id="3-1-指针操作"><a href="#3-1-指针操作" class="headerlink" title="3.1 指针操作"></a>3.1 指针操作</h4><h5 id="3-1-1-获取指针"><a href="#3-1-1-获取指针" class="headerlink" title="3.1.1 获取指针"></a>3.1.1 获取指针</h5><blockquote><p><code>&amp;</code> : 取变量的内存地址，内存地址是一个16进制数</p><p><code>%p</code>: 是指直接使用<code>fmt</code>打印指针值，打印的时候需要在变量前面加<code>&amp;</code>符号</p><ul><li>十六进制(前缀0x)表示</li><li>一般是用来打印指针的，<code>fmt.Printf(“%p\n”, &amp;s1)</code></li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211221174834896.png" class="" title="image-20211221174834896"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 查看内存地址符号：&amp;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//age的值:18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;age值:%v\n&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接打印age的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址: %v\n&quot;</span>, &amp;age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接打印age的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址: %p\n&quot;</span>, &amp;age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// age的内存地址: *int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址类型: %T\n&quot;</span>, &amp;age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出来</p><ul><li>使用%v和%p打印变量age的内存地址都可以，因为%v表示接收任意类型的变量，而%p专门打印16进制的值，所以后面打印内存地址都使用%p</li><li>可以看到打印变量age的内存地址的类型是<code>*int</code><ul><li>以后遇到变量类型的前面有个星号，那就表示是该类型对应的指针类型</li></ul></li></ul></blockquote><h5 id="3-1-2-根据指针获取值"><a href="#3-1-2-根据指针获取值" class="headerlink" title="3.1.2 根据指针获取值"></a>3.1.2 根据指针获取值</h5><blockquote><p><code>*</code> : 根据指针(内存地址)取值，获取到的是这个内存地址指向的原始值</p><ul><li>注意：<ul><li>给函数中传入一个指针类型形参，就表示这个形参是一个内存地址</li><li>所以在函数内部，要取得这个内存地址的值，就需要使用<code>*变量名</code>拿到内存地址对应的具体值，然后进行操作</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 查看内存地址符号：&amp;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//age的值:18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;age值:%v\n&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接打印age的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址: %p\n&quot;</span>, &amp;age)</span><br><span class="line"></span><br><span class="line">ageVal := *(&amp;age)</span><br><span class="line"><span class="comment">// 获取age的原始值: 18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;获取age的原始值: %v\n&quot;</span>, ageVal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-3-变量重新赋值指针不变"><a href="#3-1-3-变量重新赋值指针不变" class="headerlink" title="3.1.3 变量重新赋值指针不变"></a>3.1.3 变量重新赋值指针不变</h5><blockquote><ul><li>从下面代码可以看出来，代码运行期间：<ul><li>变量<code>a</code>定义后会申请一块内存空间，用来存变量<code>a</code>的值</li><li>那么申请的内存空间的地址在代码运行期间永远不会变，但是变量<code>a</code>的值可以变，就是说变量<code>a</code>可以进行重复赋值，但是变量<code>a</code>的内存地址永不会变</li></ul></li><li>就是说变量<code>a</code>申请好内存地址以后，可以放任意值进去，也可以对放进去的值进行修改(也叫重新赋值)，但是变量<code>a</code>的内存地址申请好以后是永远不会变的</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 查看内存地址符号：&amp;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//age的值:18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;age值:%v\n&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;符号获取age的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址: %p\n&quot;</span>, &amp;age)</span><br><span class="line"></span><br><span class="line">age = <span class="number">28</span></span><br><span class="line"><span class="comment">//age变量重新赋值的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;age变量重新赋值的内存地址: %p\n&quot;</span>, &amp;age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-4-指针打印理解"><a href="#3-1-4-指针打印理解" class="headerlink" title="3.1.4 指针打印理解"></a>3.1.4 指针打印理解</h5><blockquote><p>在fmt包中，有两种格式都可以打印内存地址</p><p><code>%v</code>万能打印占位符，什么类型都可以打印</p><p><code>%p</code>专门打印16进制0x开头的值，所以后面打印内存地址就使用<code>%p</code>，专门的占位符打印内存地址</p></blockquote><h4 id="3-2-指针类型"><a href="#3-2-指针类型" class="headerlink" title="3.2 指针类型"></a>3.2 指针类型</h4><blockquote><p>如果定义变量的是什么类型，那么他的指针就是什么类型，常见的就是<code>string</code>、<code>int</code>、<code>bool</code>三种指针类型，后面会有结构体类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">strData <span class="type">string</span></span><br><span class="line">intData <span class="type">int</span></span><br><span class="line">boolData <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果定义变量的是什么类型，那么他的指针就是什么类型</span></span><br><span class="line"><span class="comment">// string类型指针</span></span><br><span class="line">strData = <span class="string">&quot;hello&quot;</span></span><br><span class="line">strDataAddr := &amp;strData</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, strDataAddr) <span class="comment">// 是hello的内存地址: 0x113cf30</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, strDataAddr) <span class="comment">// *string 类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int类型指针</span></span><br><span class="line">intData = <span class="number">13</span></span><br><span class="line">intDataAddr := &amp;intData</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, intDataAddr) <span class="comment">// 是13的内存地址: 0x116bd30</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, intDataAddr) <span class="comment">// *int 类型指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool类型指针</span></span><br><span class="line">boolData = <span class="literal">true</span></span><br><span class="line">boolDataAddr := &amp;boolData</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, boolDataAddr) <span class="comment">// 是bool的内存地址: 0x116bca1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, boolDataAddr) <span class="comment">// *bool 类型指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-变量接收内存地址值"><a href="#3-3-变量接收内存地址值" class="headerlink" title="3.3 变量接收内存地址值"></a>3.3 变量接收内存地址值</h4><blockquote><p>在一个数据类型获取内存地址时，可以把获取到的内存地址用一个纯新变量来接收</p><p>注意：</p><ul><li>此时纯新变量的值就是获取到的内存地址</li><li>而纯新变量自己的内存地址是自己，而不是获取到内存地址</li></ul><p>从下图来看：</p><ul><li>a变量赋值18</li><li>获取a的内存地址后，赋值给b<ul><li>此时b的值就是a的内存地址</li><li>b的类型就是指针类型，因为b的值是a的内存地址</li></ul></li><li>但是b自己的内存地址和b的值是两个值，这一块要注意，有时候会搞混</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220424080913306.png" class="" title="image-20220424080913306"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 查看内存地址符号：&amp;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//age的值:18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;age值:%v\n&quot;</span>, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;符号获取age的内存地址: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;&amp;符号获取age的内存地址: %p\n&quot;</span>, &amp;age)</span><br><span class="line"></span><br><span class="line">ageMer := &amp;age</span><br><span class="line"><span class="comment">// ageMer变量接收age内存地址的值: 0xc00000a098</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ageMer变量接收age内存地址的值: %p\n&quot;</span>, ageMer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ageMer变量接收age内存地址的值: *int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ageMer变量接收age内存地址的值: %T\n&quot;</span>, ageMer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ageMer的内存地址: 0xc000006030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ageMer的内存地址: %p\n&quot;</span>, &amp;ageMer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、new"><a href="#4、new" class="headerlink" title="4、new"></a>4、<code>new</code></h3><blockquote><p><code>new</code>函数用来申请内存地址</p><p><code>new</code>很少用，一般用来给基础数据类型申请内存，string\int, 返回的是对应类型指针 </p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// var 声明变量时需要指定类型，下面是给a1指定的类型是 指针类型，表示我想定义一个空指针变量, 然后对这个空指针经过*号获取原来的值进行重新赋值</span></span><br><span class="line"><span class="comment">// 但是指针类型的零值是nil，</span></span><br><span class="line"><span class="comment">// 所以会报错：panic: runtime error: invalid memory address or nil pointer dereference，翻译过来: 解除对空指针的引用</span></span><br><span class="line"><span class="comment">//var a1 *int</span></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;%v\n&quot;, a1)</span></span><br><span class="line"><span class="comment">//*a = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new函数申请内存地址</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line"><span class="comment">// 申请了一个内存地址</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a2)  <span class="comment">// 0xc00001e098</span></span><br><span class="line"><span class="comment">// *a2表示根据内存地址找到对应的值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, *a2) <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 重新对这个内存地址对应的值进行赋值,因为它是一个int类型的内存地址,所以int类型的零值是0，所以输出为0</span></span><br><span class="line"><span class="comment">// 再对这个内存地址对应的值重新赋值为100，其实可以把(*a2)理解为一个变量名，一开始它的值是0，下面重新又赋一个值100</span></span><br><span class="line">*a2 = <span class="number">100</span></span><br><span class="line"><span class="comment">// 再次打印出该内存地址对应的值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, *a2) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、make和new的区别"><a href="#5、make和new的区别" class="headerlink" title="5、make和new的区别"></a>5、<code>make</code>和<code>new</code>的区别</h3><blockquote><p><code>make</code>也是用于内存分配，区别于<code>new</code></p><p><code>make</code>区别点:</p><ul><li>只用于切片<code>slice</code>、<code>map</code>、<code>chanl</code>的内存创建</li><li>并且返回的是上面这三种类型本身，不是他们的指针类型, 因为这三种属于引用类型</li></ul></blockquote><h3 id="6、map"><a href="#6、map" class="headerlink" title="6、map"></a>6、<code>map</code></h3><blockquote><p><code>map</code>是一种无序的基于<code>key-value</code>的数据结构</p><p><code>map</code>属于引用类型</p><p>必须初始化才可以用</p><p><code>map</code>和<code>python</code>里的<code>dict</code>很类似</p></blockquote><h4 id="6-1-var关键字声明map"><a href="#6-1-var关键字声明map" class="headerlink" title="6.1 var关键字声明map"></a>6.1 <code>var</code>关键字声明<code>map</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">map</span>[KeyType]ValueType</span><br><span class="line"></span><br><span class="line"><span class="comment">// KeyType:表示键类型</span></span><br><span class="line"><span class="comment">// ValueType:表示值类型</span></span><br></pre></td></tr></table></figure><blockquote><p>从下面代码可以看到</p><ul><li><code>var</code>关键字声明的<code>map</code>本来就是<code>map[]</code>，本质的值是<code>nil</code>,所以和<code>nil</code>比较是<code>true</code></li><li><code>map</code>的类型是包含了<code>KeyType</code>和<code>ValueType</code>，<code>key-value</code>的<code>type</code>也是<code>map</code>整个类型的一部分</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, m1) <span class="comment">// map[string]int(nil)</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;m1==nil:%v\n&quot;</span>, m1==<span class="literal">nil</span>) <span class="comment">// m1==nil:true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, m1) <span class="comment">// map[string]int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>map</code>类型初始值是<code>nil</code>，不能直接给<code>map</code>来赋值，会报错的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m1[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会看到有一个panic错误</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211208233358205.png" class="" title="image-20211208233358205"><h4 id="6-2-map初始化"><a href="#6-2-map初始化" class="headerlink" title="6.2 map初始化"></a>6.2 <code>map</code>初始化</h4><h5 id="6-2-1-var关键字初始化"><a href="#6-2-1-var关键字初始化" class="headerlink" title="6.2.1 var关键字初始化"></a>6.2.1 <code>var</code>关键字初始化</h5><blockquote><p>如果只是用var声明了一个<code>map</code>,并没有初始化，那这个<code>map</code>的值是<code>nil</code>，表示还没有初始化（也就是没有在内存里开辟空间）</p><p>需要使用<code>make()</code>函数来分配内存，也就是初始化<code>map</code></p></blockquote><blockquote><p>先来看看<code>make()</code>函数初始化格式</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[KeyType]ValueType, [<span class="built_in">cap</span>])</span><br><span class="line"><span class="comment">// make的第一个参数：map[KeyType]ValueType 表示是一个map类型</span></span><br><span class="line"><span class="comment">// make的第二个参数： [cap]表示map的容量，非必填参数，但还需要给指定一个容量</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>) <span class="comment">// </span></span><br><span class="line">m1[<span class="string">&quot;age1&quot;</span>] = <span class="number">18</span></span><br><span class="line">m1[<span class="string">&quot;age2&quot;</span>] = <span class="number">28</span></span><br><span class="line">m1[<span class="string">&quot;age2&quot;</span>] = <span class="number">900</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[age1:18 age2:900]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1[<span class="string">&quot;age1&quot;</span>]) <span class="comment">// 18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1[<span class="string">&quot;age2&quot;</span>]) <span class="comment">// 900</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出，在初始化好<code>map</code>以后：</p><ul><li>可以正常填充键值对</li><li>当键有多个一样时，最终在<code>map</code>里只会留下最后一个相同的<code>key-value</code></li><li>因为容量是可以自动扩容的，所以建议在使用<code>make</code>函数定义容量时，估算好容量，避免自动扩容，因为自动扩容会增大运行速度</li></ul></blockquote><h5 id="6-2-2-短变量初始化"><a href="#6-2-2-短变量初始化" class="headerlink" title="6.2.2 短变量初始化"></a>6.2.2 短变量初始化</h5><blockquote><p><code>map</code>也可以使用短变量进行初始化，省去了声明的步骤，一步做到声明+初始化</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">5</span>)</span><br><span class="line">m1[<span class="number">0</span>] = <span class="string">&quot;bob&quot;</span></span><br><span class="line">m1[<span class="number">1</span>] = <span class="string">&quot;sam&quot;</span></span><br><span class="line">m1[<span class="number">2</span>] = <span class="string">&quot;alop&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[0:bob 1:sam 2:alop]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-map获取key-value"><a href="#6-3-map获取key-value" class="headerlink" title="6.3 map获取key-value"></a>6.3 <code>map</code>获取<code>key-value</code></h4><blockquote><p><code>map</code>取值也是用中括号里面放<code>key</code>来取值，和<code>python</code>一样</p><p>注意：</p><ul><li>取值时是可以接收两个值，第一个是值本身，第二个是这个值是否存在的布尔说明，如果存在则返回<code>true</code>，不存在则返回<code>false</code><ul><li><code>v1, ok := m1[&quot;age1&quot;]</code> 这个ok是约定成俗的一个接收<code>key</code>是否存在的变量，就和<code>python</code>面向对象里的<code>self</code>一样,换成别的也可以<ul><li>所以就可以用<code>ok</code>这个值来判断<code>key</code>是否存在</li></ul></li><li>当获取的<code>key</code>不存在时，<code>ok</code>是<code>false</code>,并且查找的值是值类型的零值(默认值)</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">m1[<span class="string">&quot;age1&quot;</span>] = <span class="number">18</span></span><br><span class="line">m1[<span class="string">&quot;age2&quot;</span>] = <span class="number">28</span></span><br><span class="line">m1[<span class="string">&quot;age3&quot;</span>] = <span class="number">900</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1[<span class="string">&quot;age1&quot;</span>])</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1[<span class="string">&quot;age2&quot;</span>])</span><br><span class="line"></span><br><span class="line">v1, ok := m1[<span class="string">&quot;age1&quot;</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;v1=%v ok=%v\n&quot;</span>, v1, ok) <span class="comment">// v1=18 ok=true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;v1=%T ok=%T\n&quot;</span>, v1, ok) <span class="comment">// v1=int ok=bool</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;age1的val:%v\n&quot;</span>, v1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;age1这个key不存在\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果key不存在直接去获取，那么拿到的是对应值类型的零值(默认值)</span></span><br><span class="line">v2， ok := m1[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;v2=%v\n&quot;</span>, v2) <span class="comment">// v2=0 ok=false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-map遍历"><a href="#6-3-map遍历" class="headerlink" title="6.3 map遍历"></a>6.3 <code>map</code>遍历</h4><blockquote><p>使用<code>for range</code>来遍历<code>map</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">m1[<span class="string">&quot;age1&quot;</span>] = <span class="number">18</span></span><br><span class="line">m1[<span class="string">&quot;age2&quot;</span>] = <span class="number">28</span></span><br><span class="line">m1[<span class="string">&quot;age3&quot;</span>] = <span class="number">900</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历map的key-value</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;遍历map的key-value\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>,k,v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只遍历map的key</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;\n只遍历map的key\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>,k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只遍历map的value</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;\n只遍历map的value\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-删除键值对"><a href="#6-5-删除键值对" class="headerlink" title="6.5 删除键值对"></a>6.5 删除键值对</h4><blockquote><p>使用<code>delete函数</code>删除<code>map</code>的键值对</p><p>当删除的<code>key</code>不存在时，不做任何处理</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">delete</span>(<span class="keyword">map</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map: 表示要删除的map</span></span><br><span class="line"><span class="comment">// key: 表示要删除的键值对的键</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义map</span></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">m1[<span class="string">&quot;age1&quot;</span>] = <span class="number">18</span></span><br><span class="line">m1[<span class="string">&quot;age2&quot;</span>] = <span class="number">28</span></span><br><span class="line">m1[<span class="string">&quot;age3&quot;</span>] = <span class="number">900</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除键值对</span></span><br><span class="line"><span class="built_in">delete</span>(m1, <span class="string">&quot;age1&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[age2:28 age3:900]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除不存在的键</span></span><br><span class="line"><span class="built_in">delete</span>(m1, <span class="string">&quot;age&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[age2:28 age3:900]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-6-map和切片互相转换"><a href="#6-6-map和切片互相转换" class="headerlink" title="6.6 map和切片互相转换"></a>6.6 <code>map</code>和切片互相转换</h4><blockquote><p><code>map</code>里可以放切片，同时切片里可以放<code>map</code></p></blockquote><h5 id="6-6-1-切片的元素值是map"><a href="#6-6-1-切片的元素值是map" class="headerlink" title="6.6.1 切片的元素值是map"></a>6.6.1 切片的元素值是<code>map</code></h5><blockquote><p>切片的每个元素的值都是<code>map</code>类型</p><p>注意：</p><ul><li>因为定义的切片的元素是<code>map</code>，所以要对每个元素还要进行分配内存初始化(<code>make</code>函数分配内存)</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 元素类型为map的切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先对切片初始化，分配内存空间</span></span><br><span class="line"><span class="keyword">var</span> s1  = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要先对切片里，内部的map进行初始化</span></span><br><span class="line">s1[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">s1[<span class="number">1</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">s1[<span class="number">2</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line">s1[<span class="number">0</span>][<span class="string">&quot;name1&quot;</span>] = <span class="number">13</span></span><br><span class="line">s1[<span class="number">1</span>][<span class="string">&quot;name2&quot;</span>] = <span class="number">23</span></span><br><span class="line">s1[<span class="number">2</span>][<span class="string">&quot;name3&quot;</span>] = <span class="number">33</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1[<span class="number">2</span>][<span class="string">&quot;name3&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-6-2-map的元素值是切片"><a href="#6-6-2-map的元素值是切片" class="headerlink" title="6.6.2 map的元素值是切片"></a>6.6.2 <code>map</code>的元素值是切片</h5><blockquote><p><code>map</code>的每个元素的值都是切片</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// map的键值对的值是切片类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并初始化map,并且ValueType是一个切片类型: []int</span></span><br><span class="line"><span class="keyword">var</span> m1  = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对切片类型进行初始化</span></span><br><span class="line">m1[<span class="string">&quot;name1&quot;</span>] = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">m1[<span class="string">&quot;name2&quot;</span>] = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对切片进行重新赋值</span></span><br><span class="line">m1[<span class="string">&quot;name1&quot;</span>] = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">m1[<span class="string">&quot;name2&quot;</span>] = []<span class="type">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, m1) <span class="comment">// map[name1:[1 2 3] name2:[4 5 6]]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-7-map练习题"><a href="#6-7-map练习题" class="headerlink" title="6.7 map练习题"></a>6.7 <code>map</code>练习题</h4><blockquote><p> <code>map</code>可以用来统计长段字符串里每个单词出现的次数，下面是<code>go</code>&#x2F;<code>python</code>版本</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go版本</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// how do you do每个单词出现的次数</span></span><br><span class="line">longStr := <span class="string">&quot;how do you do&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转换成切片</span></span><br><span class="line">longStrToList := strings.Split(longStr, <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个空map</span></span><br><span class="line">longStrToMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> longStrToList &#123;</span><br><span class="line">_, ok := longStrToMap[v]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">longStrToMap[v] = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">longStrToMap[v]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n%v\n&quot;</span>, longStrToMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211209122734426.png" class="" title="image-20211209122734426"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_words_times</span>():</span><br><span class="line">    <span class="comment"># 统计&quot;how do you do&quot;每个单词出现的次数</span></span><br><span class="line">    say_hi = <span class="string">&quot;how do you do&quot;</span></span><br><span class="line">    say_hi_list = say_hi.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    say_hi_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> say_hi_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> say_hi_dict:</span><br><span class="line">            say_hi_dict[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            say_hi_dict[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> say_hi_dict</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211209122721022.png" class="" title="image-20211209122721022"><blockquote><p>其实能够看出来，<code>go</code>和<code>python</code>语法有较多类似的地方，核心编程思想都是一样的，就是看如何用不同语言去实现</p></blockquote><h3 id="7、值类型和引用类型区别"><a href="#7、值类型和引用类型区别" class="headerlink" title="7、值类型和引用类型区别"></a>7、值类型和引用类型区别</h3><h4 id="1-1-值类型"><a href="#1-1-值类型" class="headerlink" title="1.1 值类型"></a>1.1 值类型</h4><blockquote><ul><li><strong>定义</strong>：值类型包括基本类型（如 <code>int</code>, <code>float64</code>, <code>string</code> 等）和结构体（<code>struct</code>）。</li><li><strong>底层实现</strong>：值类型的底层实现不涉及指针，它们在传递时是按值传递的。</li><li><strong>行为</strong>：<ul><li>传递值类型时，传递的是该值的副本。对副本的修改不会影响原始值。</li><li>值类型在使用<code>var</code>声明时会分配内存，并初始化为默认值。</li></ul></li></ul></blockquote><h4 id="1-2-引用类型"><a href="#1-2-引用类型" class="headerlink" title="1.2 引用类型"></a>1.2 引用类型</h4><blockquote><ul><li><strong>定义</strong>：引用类型包括 <code>slice</code>, <code>map</code>, <code>channel</code>, <code>function</code>, <code>interface</code>。</li><li><strong>底层实现</strong>：引用类型的底层实现涉及指针，它们在传递时是按引用传递的。</li><li><strong>行为</strong>：<ul><li>传递引用类型时，传递的是该值的引用。对引用的修改会影响原始值。</li><li>引用类型在使用<code>var</code>声明但未初始化时，其值为 <code>nil</code>。</li></ul></li></ul></blockquote><h4 id="1-3-var、make、new区别"><a href="#1-3-var、make、new区别" class="headerlink" title="1.3 var、make、new区别"></a>1.3 var、make、new区别</h4><blockquote><h4 id="var声明方式："><a href="#var声明方式：" class="headerlink" title="var声明方式："></a>var声明方式：</h4><ul><li><strong>用途</strong>：用于声明变量，并可以选择性地初始化它。</li><li><strong>适用范围</strong>：适用于所有类型，包括基本类型（如 <code>int</code>, <code>float64</code>, <code>string</code> 等）和引用类型（如 <code>slice</code>, <code>map</code>, <code>channel</code> 等）。</li><li><strong>初始化</strong>：<ul><li>对于基本类型，<code>var</code> 可以直接初始化。</li><li>对于引用类型，<code>var</code> 只能声明它们，但不能分配内存或初始化它们。声明的引用类型变量是 <code>nil</code>，不能直接使用。</li></ul></li></ul></blockquote><blockquote><h4 id="make声明方式"><a href="#make声明方式" class="headerlink" title="make声明方式"></a>make声明方式</h4><ul><li><strong>用途</strong>：专门用于创建和初始化引用类型（<code>slice</code>, <code>map</code>, <code>channel</code>）。</li><li><strong>适用范围</strong>：只适用于引用类型。</li><li><strong>初始化</strong>：<code>make</code> 不仅会分配内存，还会初始化内部结构，使得这些引用类型可以立即使用。</li></ul></blockquote><blockquote><h4 id="new声明方式"><a href="#new声明方式" class="headerlink" title="new声明方式"></a>new声明方式</h4><ul><li><strong>new</strong>创建的变量是指定类型的零值，并返回该变量的指针</li><li><strong>new</strong>适用于创建引用类型以外的其他类型变量</li></ul></blockquote><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><blockquote><p>比较重要的语法: <code>函数</code></p><p>支持匿名函数、闭包</p></blockquote><h3 id="1、函数定义"><a href="#1、函数定义" class="headerlink" title="1、函数定义"></a>1、函数定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数)</span></span> (返回值) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数名：见名知意的函数名</span></span><br><span class="line"><span class="comment">// 参数： 参数由参数名和参数变量组成，多个以逗号隔开</span></span><br><span class="line"><span class="comment">// 返回值：由返回值变量和其类型组成，也可以只写返回类型，多个返回值用()包裹，用逗号(,)隔开</span></span><br><span class="line"><span class="comment">// 函数体：具体函数代码实现</span></span><br></pre></td></tr></table></figure><h4 id="1-1-有参数和返回值变量"><a href="#1-1-有参数和返回值变量" class="headerlink" title="1.1 有参数和返回值变量"></a>1.1 有参数和返回值变量</h4><blockquote><p>参数可以命名也可以不命名，<br>命名的返回值：</p><ul><li>相当于是在函数中提前声明一遍变量，比如下面的<code>ret</code><ul><li>可以在函数中直接使用,因为在函数定义时已经声明了<code>ret</code>这个变量</li><li>并且return时不需要显式指出<code>ret</code>这个变量名，因为都在函数定义时已经指明了返回值名字叫<code>ret</code></li></ul></li><li>并且需要用<code>括号</code>将命名的返回值包裹起来<code>(ret int)</code><ul><li>表示返回值的变量名是<code>ret</code>，并且是一个<code>int</code>类型</li></ul></li><li>当然不管是形参、还是返回值变量名可以定义，也可不定义，不定义就只写返回类型，但是需要在函数<code>return</code>时显式的指定返回值</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有参数有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">ret = a + b</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-函数定义变种"><a href="#1-2-函数定义变种" class="headerlink" title="1.2 函数定义变种"></a>1.2 函数定义变种</h4><blockquote><p>下面的几种变种都是围绕<code>1.1</code>来扩展的</p></blockquote><h5 id="1-2-1-有形参但没有返回值"><a href="#1-2-1-有形参但没有返回值" class="headerlink" title="1.2.1 有形参但没有返回值"></a>1.2.1 有形参但没有返回值</h5><blockquote><p>只有<code>形参</code>，没有返回值</p><p>没有返回值的函数，不能用变量接收函数，直接<code>函数名+()</code>执行就可以</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">c := a + b</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v + %v = %v\n&quot;</span>,a,b,c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-没有形参但有返回值"><a href="#1-2-2-没有形参但有返回值" class="headerlink" title="1.2.2 没有形参但有返回值"></a>1.2.2 没有形参但有返回值</h5><blockquote><p>只有返回值，没有形参</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := add()</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret = %v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">c := <span class="number">1</span> + <span class="number">3</span></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-2-3-没有形参和返回值"><a href="#1-2-3-没有形参和返回值" class="headerlink" title="1.2.3 没有形参和返回值"></a>1.2.3 没有形参和返回值</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">add()</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;ret = %v\n&quot;, ret)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">s := <span class="number">45</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-4-返回值没有指定变量名"><a href="#1-2-4-返回值没有指定变量名" class="headerlink" title="1.2.4 返回值没有指定变量名"></a>1.2.4 返回值没有指定变量名</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := add()</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret = %v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">s := <span class="number">45</span></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-5-返回值有多个"><a href="#1-2-5-返回值有多个" class="headerlink" title="1.2.5 返回值有多个"></a>1.2.5 返回值有多个</h5><blockquote><ul><li>返回值有多个，用括号包裹，然后逗号隔开</li><li>在执行函数时，返回多少个值，必须用多少个值来接收<ul><li>或者考虑将多个返回值组装成<code>切片</code>或者<code>map</code>返回</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x,y,z := add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, x) <span class="comment">// 1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, y) <span class="comment">// 2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, z) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x,y <span class="type">int</span>)</span></span> (<span class="type">int</span>,<span class="type">int</span>,<span class="type">int</span>) &#123;</span><br><span class="line">z := x + y</span><br><span class="line"><span class="keyword">return</span> x, y, z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-6-形参类型省略"><a href="#1-2-6-形参类型省略" class="headerlink" title="1.2.6 形参类型省略"></a>1.2.6 形参类型省略</h5><blockquote><p>当传入多个形参的类型都一样时，可以值留最后一个形参的类型，前面的都可以省略，这个只适用于同种类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, ret) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">ret = x + y</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-7-函数签名"><a href="#1-2-7-函数签名" class="headerlink" title="1.2.7 函数签名"></a>1.2.7 函数签名</h5><blockquote><p>Go语言中，函数名和函数签名都是用来描述方法（函数）</p><p>函数签名：函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{}</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SayHello</span><span class="params">(name <span class="type">string</span>)</span></span><span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span> + name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码来看：</p><ul><li>函数签名就是: func(string) string</li></ul></blockquote><h4 id="1-3-可变长参数"><a href="#1-3-可变长参数" class="headerlink" title="1.3 可变长参数"></a>1.3 可变长参数</h4><blockquote><p>很像<code>python</code>里的可变长参数<code>args</code>和<code>kwargs</code>,可以接收<code>n</code>个参数进来，接收进来是一个<code>切片类型</code>,切片的类型依据传进函数的值类型是什么就是什么类型切片</p><p>可变长参数使用三个点(<code>...</code>)表示,如下面的形参的<code>y</code></p><p>可变长参数必须放在形参后面</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参 ...T)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参: 形参名</span></span><br><span class="line"><span class="comment">// ...T: 可变长参数的类型</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x, y := add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;x = %v\n&quot;</span>, x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;y = %v\n&quot;</span>, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y ...<span class="type">int</span>)</span></span> (<span class="type">int</span>, []<span class="type">int</span>)&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x: %v\n&quot;</span>, x) </span><br><span class="line">fmt.Printf(<span class="string">&quot;y: %v\n&quot;</span>, y) <span class="comment">//[2, 3]</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;y type: %T\n&quot;</span>, y) <span class="comment">// []int</span></span><br><span class="line"><span class="keyword">return</span> x,y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可变长参数的函数，在别的函数内部调用他的时候，因为a是一个切片，所以需要将他打散再传进去，否则传递进去的是一个切片套切片</p><p>参数打散传递进去，需要对切片使用<code>切片…</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reciveArgs</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;a=%v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">useReciveArgs</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 因为a是一个空接口类型的切片，传递给reciveArgs需要打散传递进去，使用a...</span></span><br><span class="line">reciveArgs(a...) <span class="comment">// a=[19 bob [1 2 3 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不打散，直接传递a进去，就是会把a作为一个整体给递给reciveArgs，这不是我们想要的</span></span><br><span class="line">reciveArgs(a) <span class="comment">// a=[[19 bob [1 2 3 4]]]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">useReciveArgs(<span class="number">19</span>, <span class="string">&quot;bob&quot;</span>, []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-形参没有默认值"><a href="#1-4-形参没有默认值" class="headerlink" title="1.4 形参没有默认值"></a>1.4 形参没有默认值</h4><blockquote><p><code>go</code>语言中形参是没有默认值，不像<code>python</code>的函数，可以在形参指定一个默认值</p></blockquote><h4 id="1-5-变量作用域"><a href="#1-5-变量作用域" class="headerlink" title="1.5 变量作用域"></a>1.5 变量作用域</h4><h5 id="1-5-1-全局作用域"><a href="#1-5-1-全局作用域" class="headerlink" title="1.5.1 全局作用域"></a>1.5.1 全局作用域</h5><blockquote><p>全局作用域是指定义在函数外部区域，这里的变量可以在全局的任意位置访问到</p><ul><li>函数中查找变量的规则顺序：<ol><li>先在函数内部查找</li><li>如果可以找到，就是用函数内部定义的变量</li><li>如果找不到，那就在函数外部的全局变量查找，找到则是用</li><li>在函数内部、函数外部都找不到，会报<code>undefined</code>的错误</li></ol></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">10</span>  <span class="comment">// 定义的是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">函数中查找变量的规则顺序</span></span><br><span class="line"><span class="comment">1、先在函数内部查找</span></span><br><span class="line"><span class="comment">2、如果可以找到，就是用函数内部定义的变量</span></span><br><span class="line"><span class="comment">3、如果找不到，那就在函数外部的全局变量查找，找到则是用</span></span><br><span class="line"><span class="comment">4、在函数内部、函数外部都找不到，会报undefined的错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">x = <span class="number">123</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;x=%v\n&quot;</span>, x) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果变量在函数内外都没有定义，因为找不到该变量，会报<code>undefined</code>错误</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span> = <span class="number">10</span>  <span class="comment">// 定义的是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x = <span class="number">123</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;x=%v\n&quot;</span>, x) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出变量y</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;y=%v\n&quot;</span>, y) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20211213144417133.png" class="" title="image-20211213144417133"><h5 id="1-5-2-局部作用域"><a href="#1-5-2-局部作用域" class="headerlink" title="1.5.2 局部作用域"></a>1.5.2 局部作用域</h5><blockquote><p>局部作用域就是在函数内部区域的</p><p>局部作用域和全局作用域变量重名，优先使用局部作用域，表示是<code>就近原则</code></p></blockquote><h5 id="1-5-3-语法块作用域"><a href="#1-5-3-语法块作用域" class="headerlink" title="1.5.3 语法块作用域"></a>1.5.3 语法块作用域</h5><blockquote><p><code>go</code>语言中一些语法块也有自己的作用域，比如:<code>if循环</code>、<code>for循环</code>、<code>switch语句</code>常见的这三种</p><p>如果在语法块外部访问语法块内部的变量，都会报<code>undefined</code>错误</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">13</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">13</span> &#123;</span><br><span class="line">y := <span class="number">23</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;y=%v\n&quot;</span>, y) <span class="comment">// if语句内的变量只能if语句内访问到，if外面访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;y=%v\n&quot;</span>, y) <span class="comment">// undefined: y</span></span><br><span class="line"></span><br><span class="line">s1 := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">d := <span class="number">99</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;v=%v\n&quot;</span>, v)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d=%v\n&quot;</span>, d)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;d=%v\n&quot;</span>, d) <span class="comment">// undefined: d</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-形参是函数类型"><a href="#1-6-形参是函数类型" class="headerlink" title="1.6 形参是函数类型"></a>1.6 形参是函数类型</h4><blockquote><p>函数传入的形参时需要指定类型，形参的类型除了<code>int</code>&#x2F;<code>string</code>&#x2F;<code>boolean</code>，还可以是函数类型</p></blockquote><blockquote><p>那什么是函数类型？下面代码展示了什么是函数类型</p><ul><li>从<code>main</code>函数可以看出<ul><li><code>f1</code>函数的类型是<code>func()</code></li><li><code>f2</code>函数的类型是<code>func() int</code></li><li><code>f3</code>函数的类型是<code>func(int, string) int</code></li></ul></li><li>所以函数类型是什么依据与函数定义时，设置的形参类型和返回值类型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是f1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x := <span class="number">4</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数传入到函数里</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(x <span class="type">int</span>, y <span class="type">string</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x=%v\n&quot;</span>, x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;y=%v\n&quot;</span>, y)</span><br><span class="line">ret := <span class="number">33</span></span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := f1</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 = %v\n&quot;</span>, f1) <span class="comment">// f1的内存地址：0x108b480</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 Type is:%T\n&quot;</span>, f1) <span class="comment">// f1函数的类型: func()</span></span><br><span class="line"></span><br><span class="line">f2 := f2</span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 = %v\n&quot;</span>, f2) <span class="comment">// f2的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 Type is:%T\n&quot;</span>, f2)<span class="comment">// f2函数的类型: func() int</span></span><br><span class="line"></span><br><span class="line">f3 := f3</span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 = %v\n&quot;</span>, f3) <span class="comment">// f3的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 Type is:%T\n&quot;</span>, f3)<span class="comment">// f3函数的类型: func(int, string) int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>知道了函数类型是什么，那么就可以将函数类型作为形参的一种类型传入函数中</p><ul><li>下面代码的函数<code>f3</code>定义时，给形参<code>x</code>指定的类型是<code>func() int</code>,<ul><li><code>func() int</code>类型就表示形参<code>x</code>的类型是一个函数类型，并且这个函数类型本身是没有形参传入，但是有一个<code>int</code>型的返回值</li><li>执行<code>x()</code>就相当于是在执行<code>func() int</code>这个类型的函数<ul><li><code>func() int</code>函数有一个返回值是2，那么<code>x()</code>的结果就是<code>4</code>,所以函数<code>f3</code>里的<code>ret</code>值就是<code>4</code>,并且<code>ret</code>是整型，所以可以作为函数<code>f3</code>的返回值</li></ul></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;这是f1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x := <span class="number">4</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数传入到函数里</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(x <span class="keyword">func</span>()</span></span> <span class="type">int</span>) <span class="type">int</span>&#123;</span><br><span class="line">ret := x()</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := f1</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 = %v\n&quot;</span>, f1) <span class="comment">// f1的内存地址：0x108b480</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 Type is:%T\n&quot;</span>, f1) <span class="comment">// f1函数的类型: func()</span></span><br><span class="line"></span><br><span class="line">f2 := f2</span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 = %v\n&quot;</span>, f2) <span class="comment">// f2的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 Type is:%T\n&quot;</span>, f2)<span class="comment">// f2函数的类型: func() int</span></span><br><span class="line"></span><br><span class="line">f3 := f3(f2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 = %v\n&quot;</span>, f3) <span class="comment">// f3的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 Type is:%T\n&quot;</span>, f3)<span class="comment">// f3的类型: int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-函数返回值是函数类型"><a href="#1-7-函数返回值是函数类型" class="headerlink" title="1.7 函数返回值是函数类型"></a>1.7 函数返回值是函数类型</h4><blockquote><p>形参的类型可以使函数类型，那么函数返回值也可以是函数类型</p><p><code>func() int</code>是一种函数类型，作为了函数返回值，那么最后在<code>f3</code>返回时，就可以把符合<code>func() int</code>类型的返回值的函数返回，比如<code>f1</code>函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x := <span class="number">4</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数传入到函数里</span></span><br><span class="line"><span class="comment">// 返回值是函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(x <span class="keyword">func</span>()</span></span> <span class="type">int</span>) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line"><span class="keyword">return</span> f1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := f1</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 = %v\n&quot;</span>, f1) <span class="comment">// f1的内存地址：0x108b480</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1 Type is:%T\n&quot;</span>, f1) <span class="comment">// f1函数的类型: func() int</span></span><br><span class="line"></span><br><span class="line">f2 := f2</span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 = %v\n&quot;</span>, f2) <span class="comment">// f2的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f2 Type is:%T\n&quot;</span>, f2)<span class="comment">// f2函数的类型: func() int</span></span><br><span class="line"></span><br><span class="line">f3 := f3(f2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 = %v\n&quot;</span>, f3) <span class="comment">// f3的内存地址：0x108b4e0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f3 Type is:%T\n&quot;</span>, f3)<span class="comment">// f3函数的类型: func() int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-8-匿名函数"><a href="#1-8-匿名函数" class="headerlink" title="1.8 匿名函数"></a>1.8 匿名函数</h4><blockquote><ul><li><code>匿名函数</code>出现的原因：在函数内部没法声明一个带名字的函数，但是可以声明匿名函数</li><li><code>匿名函数</code>定义：<ul><li>声明函数时，没有指定函数名的函数叫匿名函数</li></ul></li><li><code>匿名函数</code>出现的时机：一般都用在<code>函数内部</code></li><li>如果函数只调用一次，那么匿名函数可以是<code>立即执行函数</code><ul><li>立即执行函数就是在匿名函数定义后的后面放上括号表示立即执行</li></ul></li><li>注意：<ul><li>匿名函数是不指定函数名，但是可以<code>带形参</code>和<code>返回值</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 声明匿名函数</span></span><br><span class="line"><span class="comment">// 在函数内部定义</span></span><br><span class="line">f1 := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">c := a + b</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ret := f1(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret: %v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是执行调用一次，可以定义成立即执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x, y <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">z := x + y</span><br><span class="line">fmt.Printf(<span class="string">&quot;z = %v\n&quot;</span>, z)</span><br><span class="line">&#125;(<span class="number">12</span>,<span class="number">14</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-9-函数闭包"><a href="#1-9-函数闭包" class="headerlink" title="1.9 函数闭包"></a>1.9 函数闭包</h4><blockquote><p><code>函数闭包</code>是指：函数与外部变量的引用，就叫闭包</p><p>闭包是指当一个函数内部有变量，并且这个函数内部的变量是引用的这个函数外部作用域的一个变量，就是闭包</p><p>常见于一个有名函数里包含了一个匿名函数，匿名函数里使用的变量引用的是有名函数定义的变量，如下代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := closeBag(<span class="number">3</span>)</span><br><span class="line">ret() <span class="comment">// tmp匿名函数中x的值: 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeBag</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp匿名函数中x的值: %v&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-9-1-类比替换形参为函数类型"><a href="#1-9-1-类比替换形参为函数类型" class="headerlink" title="1.9.1 类比替换形参为函数类型"></a>1.9.1 类比替换形参为函数类型</h5><blockquote><p>在作用域概念里，当前函数内部引用变量时，优先在自己的函数内部找，没有找到的话，就在函数外层找</p><ul><li><p>那么类型到下面的<code>closeBag</code>函数就可以看到：</p><ul><li><p><code>tmp</code>变量接收一个匿名函数，里面打印一个变量<code>x</code>，这个变量在这个匿名函数里没有，就会往外层找，</p></li><li><p>可以看到外层函数的形参就是有一个变量<code>x</code>，那么打印的就是这个形参<code>x</code>的值</p></li><li><p>从返回值可以看到变量<code>tmp</code>的值是匿名函数的<code>指针</code>(内存地址)，并且<code>tmp</code>的类型是<code>func()</code>,是一个函数类型，那么<code>tmp</code>加上括号就在执行这个匿名函数</p></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">closeBag(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeBag</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp匿名函数: %v&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp值: %v\n&quot;</span>, tmp) <span class="comment">// 0x4965c0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp带类型说明的值:%#v\n&quot;</span>, tmp) <span class="comment">// (func())(0x4965c0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示在执行tmp这个匿名函数</span></span><br><span class="line">tmp() <span class="comment">// tmp匿名函数: 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行结果:</span></span><br><span class="line"><span class="comment">tmp值: 0x4965c0</span></span><br><span class="line"><span class="comment">tmp带类型说明的值:(func())(0x4965c0)</span></span><br><span class="line"><span class="comment">tmp匿名函数: 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>那么最外层的形参<code>x</code>可以是<code>int</code>类型，<code>x</code>类型替换一下就可以是<code>函数类型</code></p><ul><li>要传入一个形参是函数类型，就必须先有一个这样的函数，才可以在<code>main</code>函数中进行调用，执行后才可以看到最终的效果<ul><li>因为在函数<code>closeBag</code>中传入的函数类型是<code>func(int, int)</code>,那么定义这种类型的函数就是<code>f1</code></li><li>另外<code>f1</code>函数需要接收两个<code>int</code>形参，那么在<code>closeBag</code>函数中的<code>tmp</code>匿名函数时就需要将这两个<code>int</code>形参定义</li></ul></li><li>然后执行<code>closeBag</code>函数时，除了需要传入符合的函数类型<code>func(int, int)</code>外，还需要传入两个<code>int</code>变量<code>a和b</code>，因为他内部的<code>x</code>需要接收两个<code>int</code>形参</li><li>最后可以看到执行的结果：<ul><li>先打印了： <code>f1函数的内部地址:0x496460</code></li><li>接着打印了: <code>tmp值: 0x496730</code><ul><li>可以看到tmp的内存地址是他自己的匿名函数的内存地址</li></ul></li><li>继续打印： <code>tmp带类型说明的值:(func())(0x496730)</code><ul><li>可以看到tmp的类型是<code>func()</code>,表示他是一个匿名函数类型</li></ul></li><li>继续打印： <code>tmp匿名函数中的x: 0x496460</code><ul><li>注意看这里的x是<code>tmp</code>匿名函数里传入的变量<code>x</code>,并且这个变量x的值是一个指针(函数内存地址)，该<code>x</code>的值和<code>f1</code>函数的内存地址一致，那就说明<code>x</code>等价于<code>f1</code>,所以执行<code>x(a,b)</code>就等价于执行<code>f1(a,b)</code>函数</li></ul></li><li>继续打印：<code>tmp匿名函数中的x: (func(int, int))(0x496460)</code><ul><li>可以看到<code>x</code>的类型是<code>func(int, int)</code>,值是<code>0x496460</code>，和<code>f1</code>函数的内存地址一致</li></ul></li><li>最后打印：<code>4 + 5 = 9</code><ul><li>这里就是在执行<code>f1</code>函数里的代码</li></ul></li></ul></li><li>至此可以看出<code>tmp</code>匿名函数就是闭包，接收外部喊出传入的参数，传入的参数类型可以使基础数据类型，也可以是函数类型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1函数的内部地址:%v\n&quot;</span>,f1)</span><br><span class="line">closeBag(f1, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为要传入一个函数类型是: func(int, int)</span></span><br><span class="line"><span class="comment">// 需要先定义一个符合这个类型条件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v + %v = %v\n&quot;</span>, a, b, a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeBag</span><span class="params">(x <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span>, a, b <span class="type">int</span>) &#123;</span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp匿名函数中的x: %v\n&quot;</span>, x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp匿名函数中的x: %#v\n&quot;</span>, x)</span><br><span class="line">x(a, b)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp值: %v\n&quot;</span>, tmp)</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp带类型说明的值:%#v\n&quot;</span>, tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行tmp这个匿名函数</span></span><br><span class="line">tmp()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">f1函数的内部地址:0x496460</span></span><br><span class="line"><span class="comment">        tmp值: 0x496730</span></span><br><span class="line"><span class="comment">        tmp带类型说明的值:(func())(0x496730)</span></span><br><span class="line"><span class="comment">        tmp匿名函数中的x: 0x496460</span></span><br><span class="line"><span class="comment">        tmp匿名函数中的x: (func(int, int))(0x496460)</span></span><br><span class="line"><span class="comment">        4 + 5 = 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="1-9-2-闭包函数分析"><a href="#1-9-2-闭包函数分析" class="headerlink" title="1.9.2 闭包函数分析"></a>1.9.2 闭包函数分析</h5><blockquote><p>下面是闭包函数例子的一个分析</p></blockquote><blockquote><ul><li>下面的<code>addr</code>函数：<ul><li><code>addr</code>函数自身是没有形参，<code>addr</code>函数的返回值是函数类型(<code>func(int) int</code>)，表示返回值的类型是一个函数类型，并且这个函数类型返回值自身是先形参接收一个<code>int</code>变量，然后返回值是一个<code>int</code></li><li><code>addr</code>函数内部定义了一个<code>int</code>的<code>x</code>,赋值为<code>100</code></li><li>使用变量<code>tmp</code>接收一个带形参以及返回值的匿名函数，最后将<code>tmp</code>值<code>return</code>返回</li></ul></li><li>从<code>addr</code>函数执行结果来看<ul><li><code>ret</code>就是<code>tmp</code>，是<code>addr</code>函数内部定义的<code>tmp</code>这个匿名函数的内存地址，并且该匿名函数符合<code>func(int) int</code>函数类型，所以<code>tmp</code>的值是一个函数内存地址</li><li>因为<code>ret</code>的值是一个函数的内存地址，当拿到了<code>ret</code>的内存地址，要执行<code>ret</code>函数，那就按<code>ret</code>函数接收形参和返回值的格式输入对应的形参值，就可以得到返回值了</li><li>执行<code>ret</code>函数，其实就是在执行<code>tmp</code>函数，相当于执行<code>ret(y int) int</code>,就是在执行&#96;&#96;ret(y int) int<code>这个函数，只需要传入给函数对应的</code>y&#96;参数就可以了</li><li>最后因为<code>x</code>是100，<code>y</code>是传入的200，最后<code>addr</code>函数执行结果就是：<code>100 + 200 = 300</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := addr()</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法执行 ret的值和类型: %#v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line">data := ret(<span class="number">200</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;data是:%v\n&quot;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addr</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x += y <span class="comment">// x += y 等价于 x = x + y</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;addr函数内部 tmp的值和类型: %#v\n&quot;</span>, tmp)</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">addr函数内部 tmp的值和类型: (func(int) int)(0x496610)</span></span><br><span class="line"><span class="comment">        main方法执行 ret的值和类型: (func(int) int)(0x496610)</span></span><br><span class="line"><span class="comment">        data是:300</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>既然可以在<code>addr</code>里面定义<code>x</code>，那就可以将<code>x</code>提出来，放到<code>addr</code>函数的形参里，这样是把<code>x</code>写活了，可以穿入任意的整数值</p><p>再次执行<code>addr</code>函数可以看到执行结果和上面的一样</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := addr(<span class="number">100</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法执行 ret的值和类型: %#v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line">data := ret(<span class="number">200</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;data是:%v\n&quot;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addr</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x += y <span class="comment">// x += y 等价于 x = x + y</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;addr函数内部 tmp的值和类型: %#v\n&quot;</span>, tmp)</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果:</span></span><br><span class="line"><span class="comment">addr函数内部 tmp的值和类型: (func(int) int)(0x496610)</span></span><br><span class="line"><span class="comment">        main方法执行 ret的值和类型: (func(int) int)(0x496610)</span></span><br><span class="line"><span class="comment">        data是:300</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>既然<code>x</code>可以放到<code>addr</code>函数的形参里，并且类型是<code>int</code>，那么就可以对<code>x</code>类型替换为<code>函数类型</code></p><p>分析传入形参是函数类型的<code>addr</code>函数:</p><ul><li><code>addr</code>函数定义一个类型为<code>func(int, int) int</code>的形参<code>x</code>，表示传入<code>x</code>的类型一定是函数类型，这个函数类型接收两个<code>int</code>参数，并且有一个<code>int</code>类型的返回值</li><li><code>x</code>在<code>addr</code>函数内部被匿名函数使用，因为<code>x</code>本身是一个函数，所以在匿名函数内部就可以调用<code>x</code>函数，传入两个<code>int</code>形参，那这两个值就可以通过<code>addr</code>函数传入<ul><li>最后tmp返回的是<code>addr</code>函数内部的匿名函数的内存地址，在<code>main</code>函数里执行<code>addr</code>函数得到匿名函数的内存地址<code>ret</code>和<code>addr</code>函数内部<code>temp</code>函数的内存地址一样，并且<code>addr</code>函数内部的匿名函数接收一个<code>int</code>类型类型的形参并且返回一个<code>int</code>类型的值</li><li>所以在<code>main</code>函数中就可以给<code>ret</code>继续传入一个<code>int</code>值</li></ul></li><li>最终就将<code>addr</code>执行完毕，注意给<code>x</code>传入函数时一定要符合<code>addr</code>函数中<code>x</code>的类型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法里的f1函数: %#v\n&quot;</span>, f1) <span class="comment">//  main方法里的f1函数: (func(int, int) int)(0x496570)</span></span><br><span class="line"></span><br><span class="line">ret := addr(f1, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法执行 ret的值和类型: %#v\n&quot;</span>, ret) <span class="comment">// (func(int) int)(0x4966b0)</span></span><br><span class="line"></span><br><span class="line">data := ret(<span class="number">200</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;data是:%v\n&quot;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addr</span><span class="params">(x <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, a <span class="type">int</span>, b <span class="type">int</span>) <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">tmp := <span class="function"><span class="keyword">func</span><span class="params">(y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;tmp匿名函数中的x: %#v\n&quot;</span>, x) <span class="comment">// tmp匿名函数中的x: (func(int, int) int)(0x496570)</span></span><br><span class="line">ret := x(a, b) + y</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;addr函数内部 tmp的值和类型: %#v\n&quot;</span>, tmp) <span class="comment">// (func(int) int)(0x4966b0)</span></span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        执行结果:</span></span><br><span class="line"><span class="comment">           main方法里的f1函数: (func(int, int) int)(0x496570)</span></span><br><span class="line"><span class="comment">           addr函数内部 tmp的值和类型: (func(int) int)(0x4966b0)</span></span><br><span class="line"><span class="comment">           main方法执行 ret的值和类型: (func(int) int)(0x4966b0)</span></span><br><span class="line"><span class="comment">           tmp匿名函数中的x: (func(int, int) int)(0x496570)</span></span><br><span class="line"><span class="comment">           data是:500</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="1-9-3-闭包例子"><a href="#1-9-3-闭包例子" class="headerlink" title="1.9.3 闭包例子"></a>1.9.3 闭包例子</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is from f1\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">z := x + y</span><br><span class="line"><span class="keyword">return</span> z </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(f <span class="keyword">func</span>()</span></span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is from f1\n&quot;</span>)</span><br><span class="line"><span class="comment">// 这里执行closeBag返回的匿名函数</span></span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeBag</span><span class="params">(f <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, x <span class="type">int</span>, y <span class="type">int</span>) <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">temp := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 这里会执行符合条件的f2函数</span></span><br><span class="line">ret := f(x, y)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fileSuffixData</span><span class="params">(sufstr <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">string</span>&#123;</span><br><span class="line">temp := <span class="function"><span class="keyword">func</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ! strings.HasSuffix(name, sufstr) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;文件不是以%v结尾的\n&quot;</span>, sufstr)</span><br><span class="line">fmt.Printf(<span class="string">&quot;传入的name:%v \t 传入的sufstr:%v\n&quot;</span>, name, sufstr)</span><br><span class="line">name = name + sufstr</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;文件是以%v结尾的\n&quot;</span>, sufstr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;temp的值:%v\n&quot;</span>, temp)</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 直接执行f1函数</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line">f1 := f1</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1: %v\n&quot;</span>, f1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1: %#v\n&quot;</span>, f1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1的类型: %T\n&quot;</span>, f1) <span class="comment">//func()</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;\n\n执行闭包函数！！！！\n&quot;</span>)</span><br><span class="line">closeBag := closeBag(f2, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;closeBag: %v\n&quot;</span>, closeBag)</span><br><span class="line">fmt.Printf(<span class="string">&quot;closeBag Type is: %T\n&quot;</span>, closeBag)</span><br><span class="line"></span><br><span class="line">f3(closeBag)</span><br><span class="line"></span><br><span class="line">jpgSuffix := fileSuffixData(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;jpgSuffix值是:%v\t jpgSuffix的类型是:%T\n&quot;</span>, jpgSuffix, jpgSuffix)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret:%v&quot;</span>, jpgSuffix(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-10-函数传参都是值拷贝"><a href="#1-10-函数传参都是值拷贝" class="headerlink" title="1.10 函数传参都是值拷贝"></a>1.10 函数传参都是值拷贝</h4><blockquote><p>函数内部传参都是值拷贝形式</p><ul><li>从下面代码可以看到<ul><li>当给函数<code>f1</code>传入<code>x</code>和在<code>main</code>函数里的<code>x</code>的内存地址不一样</li><li>所以函数<code>f1</code>对<code>x</code>的修改只发生在函数内部，退出函数后原来的<code>x</code>值不会变</li></ul></li><li>这就是值拷贝</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">strData <span class="type">string</span></span><br><span class="line">intData <span class="type">int</span></span><br><span class="line">boolData <span class="type">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 当传给函数的形参是一个变量时，该变量是值拷贝</span></span><br><span class="line">x := <span class="number">3</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1函数外传递进来的x的内存地址: %p\n&quot;</span>, &amp;x)</span><br><span class="line">f1 := f1(x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, f1)             <span class="comment">// 结果是: 4</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1函数外最后x的值是: %v\n&quot;</span>, x) <span class="comment">// 结果是: 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line"><span class="comment">// 函数内传参都是值拷贝，所以函数内x的值变化不会影响函数外x的值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;f1函数内传递进来的x的内存地址: %p\n&quot;</span>, &amp;x)</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-11-defer关键字"><a href="#1-11-defer关键字" class="headerlink" title="1.11 defer关键字"></a>1.11 <code>defer</code>关键字</h4><blockquote><ul><li>defer主要是用来回收资源</li><li>一个函数中有多个defer存在时，是以<code>栈(先进后出)</code>的形式运行，先执行最后一个defer函数，依次反着来</li><li><code>defer</code>主要用于延迟执行，清理回收资源等，在遇到defer语句时：<ul><li>先将该条defer语句后面的代码存起来，不执行</li><li>然后继续往下走，当其他代码都执行完以后，再来执行defer语句的代码</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;第一个defer\n&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;第二个defer\n&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;第三个defer\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220104143521838.png" class="" title="image-20220104143521838"><h5 id="1-11-1-defer执行时机"><a href="#1-11-1-defer执行时机" class="headerlink" title="1.11.1 defer执行时机"></a>1.11.1 defer执行时机</h5><blockquote><p>在<code>go</code>语言的函数中，<code>return</code>语句在底层并不是原子操作，它分为返回值赋值和RET指令两步，在函数被调用后最终返回值时按如下步骤：</p><ul><li>return语句的第一步先给返回值赋值</li><li><code>defer</code>语句开始执行</li><li>return语句的第二步执行<code>RET</code>指令真正执行返回值</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20240616234157805.png" class="" title="image-20240616234157805"><blockquote><p>return第一步给返回值赋值，那么返回值赋值的变量暂时命名为 retval</p></blockquote><h5 id="1-11-2-defer例子分析一"><a href="#1-11-2-defer例子分析一" class="headerlink" title="1.11.2 defer例子分析一"></a>1.11.2 defer例子分析一</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f1())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f1函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x := <span class="number">5</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">x++ <span class="comment">// 修改的是x，不是返回值</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>在这个例子中，<code>f1</code>函数的返回值没有被命名，它只是一个<code>int</code>类型的返回值。这意味着在函数内部，返回值没有直接关联的变量名。<ol><li>在<code>f1</code>函数内部，变量<code>x</code>被声明并初始化为<code>5</code></li><li><code>defer</code>语句中的匿名函数<code>func() &#123; x++ &#125;</code>被注册，它会在函数即将返回之前执行<ul><li>由于<code>defer</code>语句的存在，匿名函数<code>func() &#123; x++ &#125;</code>会在函数即将返回之前执行。</li><li>在这个匿名函数中，<code>x</code>的值被自增为<code>6</code>。但是，这个操作并不会影响到已经赋值给<code>retval</code>的值，因为<code>retval</code>是一个独立的实体，它只存储了在<code>return</code>语句执行时<code>x</code>的值</li><li><code>defer</code>语句中的函数调用修改了变量<code>x</code>的值，但这个修改不会影响到已经赋值给返回值的值，因为返回值是一个独立的实体</li></ul></li><li><code>return x</code> 语句被执行，这会将变量<code>x</code>的值<code>5</code>赋给返回值（我们称之为<code>retval</code>）。<ul><li>此时，<code>retval</code>的值是<code>5</code>，并且<code>retval</code>与变量<code>x</code>是两个不同的实体</li></ul></li></ol></li><li>因此，<code>f1</code>函数return执行RET指令最终返回的值是<code>5</code>，而不是<code>6</code></li></ul></blockquote><h5 id="1-11-3-defer例子分析二"><a href="#1-11-3-defer例子分析二" class="headerlink" title="1.11.3 defer例子分析二"></a>1.11.3 defer例子分析二</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f2())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f2函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> (x <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">x++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>f2</code>函数的返回值被命名为<code>x</code>，这意味着Go编译器会为f2函数的返回值创建一个变量<code>x</code>，并且这个变量在整个函数执行期间都是可见的。当使用<code>return</code>语句返回一个值时，这个值会被赋给返回值变量</li><li><code>return 5</code> 语句被执行，这会将值<code>5</code>赋给返回值变量<code>x</code>。</li><li>由于<code>defer</code>语句的存在，匿名函数<code>func() &#123; x++ &#125;</code>会在函数即将返回之前执行。<ul><li>在<code>defer</code>语句执行时，匿名函数捕获了外部变量<code>x</code>的当前值（此时<code>x</code>的值是<code>5</code>），并在函数体内对<code>x</code>进行自增操作，即<code>x++</code>，这会将<code>x</code>的值变为<code>6</code>。</li></ul></li><li>f2函数return执行RET指令返回的是变量<code>x</code>的值，即<code>6</code></li></ul></blockquote><h5 id="1-11-4-defer例子分析三"><a href="#1-11-4-defer例子分析三" class="headerlink" title="1.11.4 defer例子分析三"></a>1.11.4 defer例子分析三</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f3())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> (y <span class="type">int</span>) &#123;</span><br><span class="line">x := <span class="number">5</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">x++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p><code>f3</code>函数的返回值被命名为<code>y</code>，这意味着Go编译器会为f3函数的返回值创建一个变量<code>y</code>，并且这个变量在整个函数执行期间都是可见的。当使用<code>return</code>语句返回一个值时，这个值5会被赋给返回值变量</p></li><li><p>在<code>f3</code>函数内部，变量<code>x</code>被声明并初始化为<code>5</code>。</p></li><li><p><code>defer</code>语句中的匿名函数<code>func() &#123; x++ &#125;</code>被注册，它会在函数即将返回之前执行。</p></li><li><p><code>return x</code> 语句被执行，这会将变量<code>x</code>的值<code>5</code>直接赋给命名的返回值变量<code>y</code>。此时，<code>y</code>的值是<code>5</code>。</p></li><li><p>由于<code>defer</code>语句的存在，匿名函数<code>func() &#123; x++ &#125;</code>会在函数即将返回之前执行。在这个匿名函数中，<code>x</code>的值被自增为<code>6</code>。但是，这个操作并不会影响到已经赋值给<code>y</code>的值，因为<code>y</code>是一个独立的实体，它只存储了在<code>return</code>语句执行时<code>x</code>的值。</p></li><li><p>因此，<code>f3</code>函数return执行RET指令最终返回的值是<code>5</code>，而不是<code>6</code>，<code>defer</code>语句中的函数调用修改了变量<code>x</code>的值，但这个修改不会影响到已经赋值给返回值<code>y</code>的值，因为返回值是一个独立的实体</p></li></ul></blockquote><h5 id="1-11-5-defer例子分析四"><a href="#1-11-5-defer例子分析四" class="headerlink" title="1.11.5 defer例子分析四"></a>1.11.5 defer例子分析四</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f4())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">()</span></span> (x <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">x++</span><br><span class="line">&#125;(x)</span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>f4</code>函数的返回值被命名为<code>x</code>，这意味着Go编译器会为f4函数的返回值创建一个变量<code>x</code>，并且这个变量在整个函数执行期间都是可见的。当使用<code>return</code>语句返回一个值时，这个值会被赋给返回值变量</li><li><code>return 5</code> 语句被执行，这会将值<code>5</code>赋给返回值变量<code>x</code>。</li><li>由于<code>defer</code>语句的存在，匿名函数<code>func() &#123; x++ &#125;</code>会在函数即将返回之前执行。<ul><li>在<code>defer</code>语句执行时，匿名函数通过x传参的方式，将外部变量<code>x</code>的当前值（此时<code>x</code>的值是<code>5</code>）传入匿名函数，并在函数体内对<code>x</code>进行自增操作，即<code>x++</code></li><li>在匿名函数内部，<code>x</code>的值被自增为<code>6</code>。但是由于go函数中形参传值是值传递，所以自增修改只影响匿名函数内部的<code>x</code>副本，而不会影响到外部函数中的<code>x</code>。</li></ul></li><li>f4函数return执行RET指令返回的是变量<code>x</code>的值，即<code>5</code></li></ul></blockquote><h5 id="1-11-6-defer例子分析五"><a href="#1-11-6-defer例子分析五" class="headerlink" title="1.11.6 defer例子分析五"></a>1.11.6 defer例子分析五</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span></span><br><span class="line"><span class="keyword">defer</span> calc(<span class="string">&quot;10&quot;</span>, a, calc(<span class="string">&quot;10&quot;</span>, a, b))</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">defer</span> calc(<span class="string">&quot;20&quot;</span>, a, calc(<span class="string">&quot;20&quot;</span>, a, b))</span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(index <span class="type">string</span>, a, b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">ret := a + b</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v %#v %#v %#v\n&quot;</span>,index, a, b, ret)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第一个defer: defer calc(&quot;10&quot;, a, calc(&quot;10&quot;, a, b))</span></span><br><span class="line"><span class="comment">// 先执行defer中的calc函数: calc(&quot;10&quot;, a, b) ==&gt; calc(&quot;10&quot;, 1, 2) =&gt; return得到3，打印 &quot;10&quot;, 1, 2, 3</span></span><br><span class="line"><span class="comment">// 第一个defer就变成了: defer calc(&quot;10&quot;, 1, 3) 此时的defer先不执行存起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着执行第二个defer: defer calc(&quot;20&quot;, a, calc(&quot;20&quot;, a, b))，并且a重新赋值为0, b仍等于2</span></span><br><span class="line"><span class="comment">// 同样先执行第二个defer中的calc函数: calc(&quot;20&quot;, a, b) ==&gt; calc(&quot;20&quot;, 0, 2) ==&gt; return得到2， 打印&quot;20&quot;, 0, 2, 2</span></span><br><span class="line"><span class="comment">// 第二个defer就变成了: defer calc(&quot;20&quot;, 0, 2) 此时的defer也先不执行存起来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着继续往下走，将b重新赋值为了1</span></span><br><span class="line"><span class="comment">// 再执行defer语句,有多个defer语句时,逆序执行defer语句代码</span></span><br><span class="line"><span class="comment">// 所以第二个defer语句先执行, defer calc(&quot;20&quot;, 0, 2) ==&gt; 打印&quot;20&quot;, 0, 2, 2</span></span><br><span class="line"><span class="comment">// 接着第二个defer语句执行, defer calc(&quot;10&quot;, 1, 3) ==&gt; 打印&quot;10&quot;, 1, 3, 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后输出结果就是依次就是</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;10&quot;, 1, 2, 3</span></span><br><span class="line"><span class="comment">&quot;20&quot;, 0, 2, 2</span></span><br><span class="line"><span class="comment">&quot;20&quot;, 0, 2, 2</span></span><br><span class="line"><span class="comment">&quot;10&quot;, 1, 3, 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-12-常见内置函数"><a href="#1-12-常见内置函数" class="headerlink" title="1.12 常见内置函数"></a>1.12 常见内置函数</h4><blockquote><p>常见的有</p><ul><li><code>close</code>关闭<code>channel</code></li><li><code>len</code>用来求长度，比如<code>string/array/slice/map/channel</code></li><li><code>new</code>用来分配内存，主要是分配值类型，比如<code>int/struct</code>，返回的是指针</li><li><code>make</code>用来分配内存，只要用来分配引用类型，比如<code>channel/map/slice</code></li><li><code>append</code>用来追加元素到数组、切片中</li><li><code>panic</code>和<code>recover</code>用来错误处理</li></ul></blockquote><h5 id="1-12-1-panic"><a href="#1-12-1-panic" class="headerlink" title="1.12.1 panic"></a>1.12.1 panic</h5><blockquote><p>用来引出错误，类似于<code>python</code>的<code>raise</code>，主动抛出错误，表示程序出现严重错误</p><p>比如数据库连接失败</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">panicStu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panicStu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;哈哈哈，出错了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220113232527069.png" class="" title="image-20220113232527069"><h5 id="1-12-2-recover"><a href="#1-12-2-recover" class="headerlink" title="1.12.2 recover"></a>1.12.2 recover</h5><blockquote><p>用来出现错误时，恢复程序</p><p>还是少用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">panicStu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panicStu</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;释放数据库连接&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;数据库连接失败&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;outer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">err: 数据库连接失败</span></span><br><span class="line"><span class="comment">释放数据库连接</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-13-fmt-包使用总结"><a href="#1-13-fmt-包使用总结" class="headerlink" title="1.13 fmt 包使用总结"></a>1.13 <code>fmt </code>包使用总结</h4><h5 id="1-13-1-打印方法"><a href="#1-13-1-打印方法" class="headerlink" title="1.13.1 打印方法"></a>1.13.1 打印方法</h5><blockquote><p>常见的有三种：</p><ul><li><code>print</code></li><li><code>printf</code></li><li><code>println</code></li></ul><p>常用的fmt包输出格式：</p><ul><li><code>%v</code>:是万能输出变量的值，任何类型变量都可以输出</li><li><code>%#v</code>:输出变量并且与变量的类型</li><li><code>%T</code>:查看变量的类型</li><li><code>%s</code>:输出字符串</li><li><code>%d</code>:输出数字</li><li><code>%p</code>:输出内存地址<ul><li><code>fmt.Printf(&quot;%p\n&quot;, &amp;name)</code></li></ul></li><li><code>%f</code>:输出浮点值<ul><li><code>%.2f</code>：默认宽度，精度为2(就是小数点后面留两位)</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := <span class="number">100</span></span><br><span class="line">    <span class="comment">// 查看变量的类型</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1) <span class="comment">// int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看变量的值，任何类型都可以看</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, s1) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出整型的值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, s1) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将10进制转换为2进制</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, s1) <span class="comment">// 1100100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将10进制转换为8进制</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%o\n&quot;</span>, s1) <span class="comment">// 144</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将10进制转换为16进制</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, s1) <span class="comment">// 64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出字符,常用与for循环内输出每个元素值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%c\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">    s2 := <span class="string">&quot;bob&quot;</span></span><br><span class="line">    <span class="comment">// 输出字符串的值</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s2) <span class="comment">// string</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, s2) <span class="comment">// bob</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, s2) <span class="comment">// &quot;bob&quot; 即输出了值，也输出了类型</span></span><br><span class="line">    </span><br><span class="line">    s3 := <span class="number">12.34</span></span><br><span class="line">    <span class="comment">// 输出浮点值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%f\n&quot;</span>, s3) <span class="comment">// 12.340000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-13-2-获取输入"><a href="#1-13-2-获取输入" class="headerlink" title="1.13.2 获取输入"></a>1.13.2 获取输入</h5><blockquote><p><code>fmt</code>包可以获取标准输入，类似于<code>python</code>的<code>input</code>函数</p><p>常见的有三种</p><ul><li><code>fmt.Scan</code> <ul><li>会从标准输入扫描文本，读取空白符分隔的值保存到传递给<code>Sacn</code>函数的参数中，换行符为空白符</li><li><code>Sacn</code>函数返回成功扫描的数据个数和遇到的任何错误，如果读取的数据个数比提供的参数要，会返回一个错误原因</li></ul></li><li><code>fmt.Scanf</code>用法和<code>Scan</code>一样</li><li><code>fmt.Scanln</code>用法和<code>Scan</code>一样</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fmt.Scan代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">v, err := fmt.Scan(&amp;s)</span><br><span class="line">fmt.Printf(<span class="string">&quot;v=%v\n, err=%v\n&quot;</span>, v, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;您输入了: %v\n&quot;</span>,s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>fmt.Scan</code>上面代码分析：</p><ul><li>先定义了一个<code>s</code>变量，<code>s</code>的值是零值(“”)</li><li>然后将<code>s</code>的内存地址传给<code>Sacn</code>完成读取<ul><li>为什么要传<code>s</code>的内存地址？<ul><li>因为<code>Scan</code>会把标准输入获得的值保存到传递给<code>Sacn</code>函数的参数<code>s</code>，如果不传入<code>s</code>的内存地址，而是直接把<code>s</code>传入，那么会直接将<code>s</code>的值输出，而不会进行等待标准输入</li><li>只有传入了内存地址，才可以对<code>s</code>的原有值进行重新赋值（保存值），这样最后输出的时候才是我们从标准输入里输入的值</li></ul></li></ul></li><li>如果不传<code>s</code>的内存地址，就会报下面的错误，可以看到<code>Scan</code>也抛出了<code>string</code>类型不是一个指针</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220114000247128.png" class="" title="image-20220114000247128"><h5 id="1-13-3-输入有空格问题解决"><a href="#1-13-3-输入有空格问题解决" class="headerlink" title="1.13.3 输入有空格问题解决"></a>1.13.3 输入有空格问题解决</h5><blockquote><p>当标准输入的有空白符时，就会在输出时，只展示第一个空白符的前面的内容</p><p>为了解决这个问题，可以用bufio包来解决</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">fmt.Print(<span class="string">&quot;请输入内容:&quot;</span>)</span><br><span class="line"><span class="comment">// 注意这里不需要短变量声明，而是直接用定义的s变量进行接收输入的内容</span></span><br><span class="line">s, _ = reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;你输入了: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220220213806001.png" class="" title="image-20220220213806001"><h4 id="1-14-递归函数"><a href="#1-14-递归函数" class="headerlink" title="1.14 递归函数"></a>1.14 递归函数</h4><blockquote><p>递归就是函数自己调用自己</p><p><code>go</code>语言中的递归</p><ul><li>递归适合处理问题规模相同，规模越来越小的场景</li><li>需要对递归设置退出条件，否则会出现无限循环</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := jiechen(<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f:%v\n&quot;</span>, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="comment">// 5！ = 5 x 4 x 3 x 2 x 1 = 5 x 4!</span></span><br><span class="line"><span class="comment">// 4！ = 5 x 4 x 3 x 2 x 1 = 4 x 3!</span></span><br><span class="line"><span class="comment">// 3！ = 5 x 4 x 3 x 2 x 1 = 3 x 2!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jiechen</span><span class="params">(n <span class="type">uint64</span>)</span></span> <span class="type">uint64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;=<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">ret := n * jiechen(n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-14-1-递归例子"><a href="#1-14-1-递归例子" class="headerlink" title="1.14.1 递归例子"></a>1.14.1 递归例子</h5><blockquote><p>上台阶问题</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := step(<span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f:%v\n&quot;</span>, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// n个台阶，一次走1步，也可以走2步，有多少走法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(n <span class="type">uint64</span>)</span></span> <span class="type">uint64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// 只有一个台阶</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">// 走法1： 一步跨过2个</span></span><br><span class="line"><span class="comment">// 走法2： 一步一个台阶</span></span><br><span class="line"><span class="comment">// 总共2种走法</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">ret := step(n<span class="number">-1</span>) + step(n<span class="number">-2</span>)</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-15-练习题"><a href="#1-15-练习题" class="headerlink" title="1.15 练习题"></a>1.15 练习题</h4><blockquote><p>统计字符串里中文字符出现的次数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unicode&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 判断字符串中汉字的字符数量</span></span><br><span class="line"><span class="comment">// 思路：</span></span><br><span class="line"><span class="comment">// 1、拿到字符串的字符</span></span><br><span class="line"><span class="comment">// 2、判断字符串是否是汉字</span></span><br><span class="line"><span class="comment">// 3、然后统计中文字符出现的次数</span></span><br><span class="line">s := <span class="string">&quot;hello新年是新的年&quot;</span></span><br><span class="line"></span><br><span class="line">ret := <span class="number">0</span></span><br><span class="line"><span class="comment">// 1、拿到字符串的字符</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="comment">// 2、判断字符串是否是汉字</span></span><br><span class="line"><span class="keyword">if</span> unicode.Is(unicode.Han, v) &#123;</span><br><span class="line">ret += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;中文字符出现次数:%v\n&quot;</span>, ret) <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、结构体"><a href="#九、结构体" class="headerlink" title="九、结构体"></a>九、结构体</h2><h3 id="1、自定义类型"><a href="#1、自定义类型" class="headerlink" title="1、自定义类型"></a>1、自定义类型</h3><blockquote><p><code>go</code>语言中可以在内置类型基础上，自定义自己的类型，用<code>type</code>关键字来声明</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义类型格式</span></span><br><span class="line"><span class="keyword">type</span> 自定义类型名 T</span><br><span class="line"></span><br><span class="line">T表示内置的类型，比如<span class="type">int</span>/<span class="type">string</span>/<span class="type">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myint <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s myint</span><br><span class="line">s = <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s) <span class="comment">// 10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %T\n&quot;</span>, s) <span class="comment">// main.myint属于main函数里的myint类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、类型别名"><a href="#2、类型别名" class="headerlink" title="2、类型别名"></a>2、类型别名</h3><blockquote><p>可以对原有的内置数据类型起一个别名，在函数中可以用类型别名来代替原有类型名</p><ul><li><p>类型别名只在定义的程序中有效</p></li><li><p>比如<code>rune</code>就是<code>int32</code>的类型别名，底层里<code>rune</code>用来表示字符</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示给int类型起了个名字</span></span><br><span class="line"><span class="keyword">type</span> myint = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s myint</span><br><span class="line">s = <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s) <span class="comment">// 10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s: %T\n&quot;</span>, s) <span class="comment">// 本质还是int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="type">rune</span></span><br><span class="line">m = <span class="string">&#x27;中&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;m: %v\n&quot;</span>, m) <span class="comment">// 20013</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;m: %T\n&quot;</span>, m) <span class="comment">// 本质还是int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、结构体"><a href="#3、结构体" class="headerlink" title="3、结构体"></a>3、结构体</h3><blockquote><p>在<code>go</code>语言中，基础数据类型只能表示单一的属性，当我们需要表示复杂数据属性时，就显得不够用了，所以<code>go</code>语言中有一个自定义数据类型，可以用来封装多个基础数据类型，这种类型被称为&#96;结构体(struct)，用来表示混合数据类型</p><ul><li>结构体用来对标其他语言的面向对象<ul><li>结构体是一片连续的内存地址</li></ul><p></p></li><li>结构体类似于其他语言的面向对象编程，有<code>构造函数</code>、<code>方法</code>这种语法</li><li>内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的<ul><li>比如一个人有名字、年龄、兴趣爱好等属性，本质上是一种聚合型的数据类型，就可以用结构体来表示</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用type和struct关键字来定义结构体，具体代码格式如下：</span></span><br><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其中：</span></span><br><span class="line"><span class="comment">类型名：标识自定义结构体的名称，在同一个包内不能重复。</span></span><br><span class="line"><span class="comment">字段名：表示结构体字段名。结构体中的字段名必须唯一。</span></span><br><span class="line"><span class="comment">字段类型：表示结构体字段的具体类型。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-1-结构体定义"><a href="#3-1-结构体定义" class="headerlink" title="3.1 结构体定义"></a>3.1 结构体定义</h4><blockquote><p>下面代码就是表示定义一个结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>定义好的结构体不能直接打印，会提示不是一个表达式</li><li>需要使用给一个变量定义为定义好的结构体类型，再去打印就可以正常展示</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220117183743359.png" class="" title="image-20220117183743359"><h5 id="3-1-1-同类型字段一行定义"><a href="#3-1-1-同类型字段一行定义" class="headerlink" title="3.1.1 同类型字段一行定义"></a>3.1.1 同类型字段一行定义</h5><blockquote><p>结构体定义时，类型一样的多个值可以写在一行，和函数定义多个类型一样的形参一样</p><p>比如下面的<code>name</code>,<code>gender</code>都是<code>string</code>类型，所以可以定义在一行</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name, gender <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-1-2-结构体字段默认为零值"><a href="#3-1-2-结构体字段默认为零值" class="headerlink" title="3.1.2 结构体字段默认为零值"></a>3.1.2 结构体字段默认为零值</h5><blockquote><p>定义好结构体后：</p><ul><li>给一个变量指定为定义好的结构体类型，但是没有对该变量进行结构体的初始化，也就是没有给结构体里面的对应字段给值，那么结构体类型里对应字段的值就是字段定义时类型的零值(默认值)</li><li>比如下面的p1定义为person类型后，此时p1的类型就是person这个结构体类型了，但是没有对p1，而是直接打印p1<ul><li>那么p1的值和类型就是：<code>main.person&#123;name:&quot;&quot;, age:0&#125;</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%#v\n&quot;</span>, p1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%T\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220421171413351.png" class="" title="image-20220421171413351"><blockquote><p>从上面的结果可以看出：</p><ul><li>p1里的name字段的值为string类型的零值(空字符串)</li><li>p1里的age字段的值为int类型的零值(0)</li><li>p1的类型就是main包的person结构体类型</li></ul></blockquote><h5 id="3-1-3-某个变量为结构体类型理解"><a href="#3-1-3-某个变量为结构体类型理解" class="headerlink" title="3.1.3 某个变量为结构体类型理解"></a>3.1.3 某个变量为结构体类型理解</h5><blockquote><p>当某个变量定义为结构体类型的理解：</p><ul><li>将某个变量类型指定为结构体类型，可以类比到其他语言中的面向对象知识<ul><li>person结构体就是定义了一个类名为<code>person</code>的类，</li><li>指定p1这个变量的类型为结构体<code>person</code>时，就是对<code>person</code>这个类的进行了初始化，并且将初始化的结果指向了p1，所以p1也就是<code>person</code>类的实例对象</li><li>这个p1实例对象定义为person类型时，就是生成了p1这个实例对象，并且将p1这个对象里的name、age字段自动设置为字段类型的零值，后面可以对字段值重新赋值，重新赋值就是结构体的初始化了</li></ul></li><li>从下面的python的面向对象代码对比过来理解<ul><li>对一个变量类型定义为结构体类型，就是在使用这个结构体，也就是将一个变量进行类的实例化，不过是实例化过程中，将结构体定义的字段值默认设置为类型零值</li><li>最终变量的类型就是结构体的类型，也就是python里定义的类的类型</li><li>从下面代码可以清晰看出来</li></ul></li><li>所以针对结构体的理解，就可以对比面向对象的知识来理解</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面是python的面向对象，可以类比来理解变量类型为结构体类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;name=<span class="subst">&#123;self.name&#125;</span>, age=<span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接打印定义好的类Person，返回的值就是:Person = &lt;class &#x27;__main__.Person&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Person = <span class="subst">&#123;Person&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个a1对象，可以理解为是将a1的类型指定为类Person，并且传入两个预设字段name、age，完成类A的初始化</span></span><br><span class="line">a1 = Person(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印a1，可以看到a1的值就是通过类Person初始化的一个对象，并且a1这个变量有实际的内存地址</span></span><br><span class="line"><span class="comment"># a1 = &lt;__main__.Person object at 0x7fa09295a630&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a1 = <span class="subst">&#123;a1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印a1类型，可以看到a1的类型就是类Person这个类</span></span><br><span class="line"> <span class="comment"># a1 = &lt;class &#x27;__main__.Person&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a1 = <span class="subst">&#123;<span class="built_in">type</span>(a1)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go语言定义结构体</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个person结构体，也就是定义一个名字叫person的类</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 对变量p1的类型定为person，就表示是在对person类进行初始化，并且将初始化的值给p1</span></span><br><span class="line">  <span class="comment">// 类比到python就是 p1 = person(&quot;&quot;, 0)</span></span><br><span class="line">  <span class="comment">// 传入的是结构体字段类型的零值</span></span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以看到p1是person结构体实例对象，并且name是空，age是0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%#v\n&quot;</span>, p1) <span class="comment">// p1=main.person&#123;name:&quot;&quot;, age:0&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以看到p1的类型就是结构体类型</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;p1=%T\n&quot;</span>, p1) <span class="comment">// p1=main.person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综上：</p><ul><li>定义一个结构体就是声明了一个类</li><li>给一个变量声明了类型为定义的结构体，就是在实例化这个结构体，并且结构体的字段值都是对应类型的零值<ul><li><code>var p1 person</code>等价于python面向对象中的<code>a1 = A(&quot;sam&quot;, 19)</code>，表示在实例化对象p1</li></ul></li><li>这个变量的类型就是定义的结构体的类型</li></ul></blockquote><h4 id="3-2-结构体初始化"><a href="#3-2-结构体初始化" class="headerlink" title="3.2 结构体初始化"></a>3.2 结构体初始化</h4><blockquote><ol><li><code>type 结构体 struct&#123;&#125;</code><ol><li>定义结构体，表示声明了一个结构体</li></ol></li><li><code>var s 结构体</code><ol><li>表示在实例化这个结构体，并将实例化结果赋值给变量s</li><li>此时变量s就可以访问这个结构体的属性和方法了</li></ol></li><li>为什么要对结构体初始化?<ol><li>因为指定变量类型为结构体以后，这个变量就是结构体的实例对象，这个变量实例对象里的属性值都是初始零值，零值不是我们需要的</li><li>所以需要进行初始化，给实例对象里对应字段指定我们需要的值</li></ol></li></ol></blockquote><h5 id="3-2-1-key-value初始化-常用"><a href="#3-2-1-key-value初始化-常用" class="headerlink" title="3.2.1 key-value初始化(常用)"></a>3.2.1 key-value初始化(常用)</h5><blockquote><p>以key-value进行结构体初始化，类似于python字典的形式来指定结构体字段和值</p><ul><li>指定p1类型为person结构体，然后p1接收person结构体以key-value初始化，最终p1就是初始化好的结构体</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">  <span class="comment">// 以key-value进行结构体初始化</span></span><br><span class="line">p1 = person&#123;</span><br><span class="line">name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">age: <span class="number">29</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%+#v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">执行结果:</span></span><br><span class="line"><span class="comment">p1=main.person&#123;name:&quot;sam&quot;, age:29&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-2-2-值列表形式初始化"><a href="#3-2-2-值列表形式初始化" class="headerlink" title="3.2.2 值列表形式初始化"></a>3.2.2 值列表形式初始化</h5><blockquote><p>值列表形式进行初始化，值的顺序必需要和结构体定义时字段的顺序一致</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">  <span class="comment">// 值列表形式进行初始化，值的顺序必需要和结构体定义时字段的顺序一致</span></span><br><span class="line">p1 = person&#123;</span><br><span class="line"><span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="number">29</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%+#v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">执行结果:</span></span><br><span class="line"><span class="comment">p1=main.person&#123;name:&quot;sam&quot;, age:29&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>值列表初始化结构体的值顺序不能乱写，否则会报错，提示类型不匹配</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">p1 = person&#123;</span><br><span class="line"><span class="number">29</span>,</span><br><span class="line"><span class="string">&quot;sam&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%+#v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220422133536902.png" class="" title="image-20220422133536902"><h5 id="3-2-3-注意事项"><a href="#3-2-3-注意事项" class="headerlink" title="3.2.3 注意事项"></a>3.2.3 注意事项</h5><blockquote><p>key-value初始化和值列表初始化不能混合使用</p><p>报错提示：<code>mixture of field:value and value initializers（混合字段:值和值初始化式）</code></p><p>结构体初始化除了key-value初始化和值列表初始化，还由比较推荐使用的构造函数初始化，详见3.8</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p1 person</span><br><span class="line">p1 = person&#123;</span><br><span class="line">    <span class="comment">// name是key-value初始化</span></span><br><span class="line">name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">    <span class="comment">// 单独19是值列表初始化</span></span><br><span class="line"><span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%+#v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-访问结构体定义字段"><a href="#3-3-访问结构体定义字段" class="headerlink" title="3.3 访问结构体定义字段"></a>3.3 访问结构体定义字段</h4><blockquote><p>使用点(<code>.</code>)的方式来访问结构体定义的字段</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person</span><br><span class="line"><span class="comment">// 通过字段去赋值</span></span><br><span class="line">p.name = <span class="string">&quot;sam&quot;</span></span><br><span class="line">p.age = <span class="number">18</span></span><br><span class="line">p.hobby = []<span class="type">string</span>&#123;<span class="string">&quot;ft&quot;</span>, <span class="string">&quot;bt&quot;</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, p) <span class="comment">// &#123;sam 18 [ft bt]&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, p) <span class="comment">// main.person</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.age=%v\n&quot;</span>, p.age) <span class="comment">// 18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.hobby=%v\n&quot;</span>, p.hobby) <span class="comment">// [ft bt]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-匿名结构体"><a href="#3-4-匿名结构体" class="headerlink" title="3.4 匿名结构体"></a>3.4 匿名结构体</h4><blockquote><p>没有名字的匿名结构体，需要先声明，再初始化，常用临时场景：</p><ul><li>只用一次就可以使用匿名结构体</li><li>匿名结构体的类型是:<code>struct &#123; name string; age int &#125;</code></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">s.name = <span class="string">&quot;哈哈&quot;</span></span><br><span class="line">s.age = <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%v\n&quot;</span>,s) <span class="comment">// &#123;哈哈 1&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%T\n&quot;</span>,s) <span class="comment">// struct &#123; name string; age int &#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s.name=%v\n&quot;</span>, s.name) <span class="comment">// 哈哈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-结构体是值类型"><a href="#3-5-结构体是值类型" class="headerlink" title="3.5 结构体是值类型"></a>3.5 结构体是值类型</h4><blockquote><p>值类型就是表示是<code>原有值的复制和拷贝</code></p><ul><li><code>go</code>语言中函数的形参传值都是值拷贝，就是通过形参传进来的值的一个副本，二者的内存地址是不一样的，修改了函数内的变量的值，函数外的值是不会变得</li><li>所以想要变化的话，需要传入内存地址，也就是指针，才可以进行修改</li></ul></blockquote><blockquote><p>下面代码就可以看到，<code>f1</code>函数里对<code>person</code>类型的结构体的<code>age</code>值重新赋值，但是<code>f1</code>函数外面的<code>p.age</code>和<code>f1</code>函数内的<code>x.age</code>内存地址是不一样的，所以无法进行修改</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(x person)</span></span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x.age=%p\n&quot;</span>, &amp;x.age) <span class="comment">// x.age=0xc00000c058</span></span><br><span class="line">x.age = <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person</span><br><span class="line">p.name = <span class="string">&quot;sam&quot;</span></span><br><span class="line">p.age = <span class="number">10</span></span><br><span class="line">f1(p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p) <span class="comment">// p=&#123;sam 10&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.age=%v\n&quot;</span>, p.age) <span class="comment">// p.age=10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.age=%p\n&quot;</span>, &amp;p.age) <span class="comment">// p.age=0xc00000c040</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以一定要修改<code>age</code>的值，必须在<code>f1</code>函数x的类型必须是<code>person</code>的指针类型，因为<code>person</code>类型的结构体的内存地址的类型就是<code>*person</code></p><ul><li><code>f2</code>函数中<code>(*x).age=19</code>：表示根据内存地址找到原始变量，然后修改的就是原始的变量</li><li>并且<code>go</code>语言中，有语法糖，所以<code>(*x).age=19</code>也可以写成<code>x.age=19</code>，语法糖会自动根据指针找到对应的变量</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(x person)</span></span>&#123;</span><br><span class="line">x.age = <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(x *person)</span></span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x.age addr=%p\n&quot;</span>, &amp;(x.age))</span><br><span class="line">(*x).age = <span class="number">19</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person</span><br><span class="line">p.name = <span class="string">&quot;sam&quot;</span></span><br><span class="line">p.age = <span class="number">10</span></span><br><span class="line">f2(&amp;p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p) <span class="comment">// p=&#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.age addr=%p\n&quot;</span>, &amp;(p.age)) <span class="comment">// p.age=19</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p.age=%v\n&quot;</span>, p.age) <span class="comment">// p.age=19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-结构体指针"><a href="#3-6-结构体指针" class="headerlink" title="3.6 结构体指针"></a>3.6 结构体指针</h4><h5 id="3-6-1-new关键字创建结构体指针"><a href="#3-6-1-new关键字创建结构体指针" class="headerlink" title="3.6.1 new关键字创建结构体指针"></a>3.6.1 new关键字创建结构体指针</h5><blockquote><p>可以通过<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// new返回的是对应类型的指针</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">new</span>(person)</span><br><span class="line">p1.name = <span class="string">&quot;age&quot;</span>  <span class="comment">// 这里的p1本写全了应该是(*p1).name = &quot;age&quot;,但是go语言有语法糖，所以可以省略简写: p1.name = &quot;age&quot;</span></span><br><span class="line">p1.age = <span class="number">12</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1:%#v\n&quot;</span>, p1) <span class="comment">// &amp;main.person&#123;name:&quot;age&quot;, age:12&#125;  这是打印p1变量的类型和他所表示值，但是要真正打印出内存地址，需要使用%p</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1 type:%T\n&quot;</span>, p1) <span class="comment">// *main.person</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1:%p\n&quot;</span>, p1) <span class="comment">// 因为new返回的是对应类型的指针，所以这里p1保存的值就是一个内存地址:0xc000068420</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;p1) <span class="comment">// 这是求出p1变量的内存地址:0xc00009e018</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指针的存储示意图</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b := &amp;a</span><br><span class="line"><span class="comment">// a type: int, b type: *int，b的类型是 int类型的指针</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;type a:%T\t type b:%T\n&quot;</span>, a, b)</span><br><span class="line"><span class="comment">// 将a的十六进制内存地址打印</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;a) <span class="comment">// 0xc000072080表示a的内存地址</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, b) <span class="comment">// b本身的值是0xc000072080，也是a的内存地址</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;b) <span class="comment">// 0xc00009e018表示b的值(0xc000072080)的内存地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220130225728855.png" class="" title="image-20220130225728855"><h5 id="3-6-2-快速获取结构体指针-常用"><a href="#3-6-2-快速获取结构体指针-常用" class="headerlink" title="3.6.2 快速获取结构体指针(常用)"></a>3.6.2 快速获取结构体指针(常用)</h5><blockquote><p>一般在<code>go</code>中，快速获取结构体指针的方式就可以在<code>初始化结构体</code>的时候加一个<code>取址符号(&amp;)</code>,就可以快速获取到结构体的指针</p><p>可以看到下面代码就是在初始化定义结构体的时候加了一个取址符号：</p><ul><li>p1的值就是一个十六进制的内存地址</li><li>p1的类型就是对应person类型的指针类型</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 获取结构体的指针</span></span><br><span class="line">p1 := &amp;person&#123;</span><br><span class="line"><span class="string">&quot;sam&quot;</span>,</span><br><span class="line"><span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, p1) <span class="comment">// 0xc000004480</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, p1) <span class="comment">// *main.person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-结构体在内存是连续的"><a href="#3-7-结构体在内存是连续的" class="headerlink" title="3.7 结构体在内存是连续的"></a>3.7 结构体在内存是连续的</h4><blockquote><p>结构体在内存中占用的内存空间是连续的</p><p>从下面代码可以看到<code>a、b、c</code>是连续的，<code>d</code>没有连续，这是因为<code>go</code>语言中有内存地址对齐的概念，后面再解释</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> number <span class="keyword">struct</span>&#123;</span><br><span class="line">a <span class="type">int8</span></span><br><span class="line">b <span class="type">int8</span></span><br><span class="line">c <span class="type">int8</span></span><br><span class="line">d <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := number &#123;</span><br><span class="line">a: <span class="number">10</span>,</span><br><span class="line">b: <span class="number">20</span>,</span><br><span class="line">c: <span class="number">30</span>,</span><br><span class="line">d: <span class="string">&quot;kim&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;(p1.a)) <span class="comment">// 0xc000068420</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;(p1.b)) <span class="comment">// 0xc000068421</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;(p1.c)) <span class="comment">// 0xc000068422</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;(p1.d)) <span class="comment">// 0xc000068428</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0xc000068420</span></span><br><span class="line"><span class="comment">    0xc000068421</span></span><br><span class="line"><span class="comment">    0xc000068422</span></span><br><span class="line"><span class="comment">    0xc000068428</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-8-结构体构造函数-推荐初始化方式"><a href="#3-8-结构体构造函数-推荐初始化方式" class="headerlink" title="3.8 结构体构造函数(推荐初始化方式)"></a>3.8 结构体构造函数(推荐初始化方式)</h4><blockquote><p>结构体初始化的时候，除了可以使用变量初始化，也可以使用函数初始化，这个函数就是构造函数，在其他语言里有这个内置的函数，比如python面向对象的<code>__init__</code>方法</p><ol><li>构造函数返回一个结构体变量的函数</li><li>构造函数的存在就是为了简化结构体初始化过程，将重复要写的一些代码简化，通过函数来实现结构体初始化</li><li>核心思想：调用构造函数时，可以立刻返回一个定义好的结构体类型的变量</li><li>构造函数一般是以<code>new和结构体变量首字母大写</code>的函数，返回的也是结构体变量</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person结构体构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> person&#123;</span><br><span class="line"><span class="keyword">return</span> person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-8-1-构造函数返回结构体指针"><a href="#3-8-1-构造函数返回结构体指针" class="headerlink" title="3.8.1 构造函数返回结构体指针"></a>3.8.1 构造函数返回结构体指针</h5><blockquote><ol><li>构造函数什么时候返回结构体变量？<ul><li>当结构体定义的字段个数比较少的时候后，可以考虑在构造函数返回结构体变量</li></ul></li><li>构造函数为什么要返回结构体指针？<ul><li>因为结构体属于值类型，就是赋值和传参的时候都是值拷贝</li><li>当定义的结构体字段比较多的时候，结构体本身占用的内存资源就比较多，如果构造函数使用值拷贝的形式，在使用构造函数进行初始化结构体的时候，就会出现结构体会拷贝较多份，额外的占用内存资源</li><li>所以为了减少内存资源占用，推荐在构造函数返回结构体指针</li><li>因为返回结构体指针，其实就是是返回了一个十六进制的数，对一个十六进制的数来回使用，就不会有很大的内存占用</li></ul></li><li>构造函数什么时候要返回结构体指针？<ul><li>当结构体定义的字段数量比较多的时候，推荐使用构造函数返回结构体指</li></ul></li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> *person&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接打印p1：&amp;&#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;直接打印p1：%v\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1的类型：*main.person</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1的类型：%T\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1的内存地址：0xc00000c030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1的内存地址：%p\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1原本的值：&#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1原本的值：%v\n&quot;</span>, (*p1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论：</p><ol><li>构造函数返回类型为结构体指针时，初始化的实例变量<code>p1</code>的值就是<code>person</code>结构体的指针<ol><li>可以看到打印<code>p1</code>的类型就是<code>*main.person</code>类型的指针</li><li>既然p1是指针，那么就可以通过<code>%p</code>读取到p1的内存地址值</li><li>并且可以通过<code>*p1</code>拿到<code>p1</code>这个内存地址对应的原始值：{sam 19}</li></ol></li><li>从上面看出，当构造函数返回指针类型时，初始化的变量本身就是结构体的指针类型</li></ol></blockquote><h5 id="3-8-2-结构体指针访问成员变量"><a href="#3-8-2-结构体指针访问成员变量" class="headerlink" title="3.8.2 结构体指针访问成员变量"></a>3.8.2 结构体指针访问成员变量</h5><blockquote><p>从3.8.1可以看到构造函数返回指针类型时，初始化的变量本身就是结构体的指针类型，那么访问该结构体实例对象的成员变量时：</p><ul><li>需要带<code>(*p1).name</code>，表示通过p1先拿到p1这个内存地址对应的实际的结构体的值，再来访问<code>p1</code>结构体里的name字段</li><li>不过go语言中做了优化<ul><li>在Go语言中支持对结构体指针直接使用(<code>.</code>)来访问结构体的成员，而不需要显式的加<code>*</code>来获取到指针指向的原始值，再来调用成员变量</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> *person&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1原本的值：&#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1原本的值：%v\n&quot;</span>, (*p1))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始值访问成员变量</span></span><br><span class="line"><span class="comment">// p1.name原本的值：sam</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1.name原本的值：%v\n&quot;</span>, (*p1).name)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指针访问成员变量</span></span><br><span class="line"><span class="comment">// p1.name的值：sam</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1.name的值：%v\n&quot;</span>, p1.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-方法和接收者"><a href="#3-9-方法和接收者" class="headerlink" title="3.9 方法和接收者"></a>3.9 方法和接收者</h4><blockquote><p>结构体里的方法对标的是其他语言中面向对象的方法，比如<code>python</code>面向对象里的方法</p><ul><li><p>方法是作用于特定类型的函数</p><ul><li>特定类型就是需要限定类型，限定的类型就是我们定义的结构体类型</li></ul></li><li><p>接收者是调用该方法的具体类型变量，多用类型名首字母小写</p></li></ul><p>下面代码里的<code>方法(p person)就是接收者</code>,<code>p</code>就是表示接收者，表示传入的是结构体对象，一般是用定义的结构体的首字母来作为形参</p></blockquote><blockquote><p>格式：</p><p>func (结构体首字母 结构体类型) 函数名(参1，参2){</p><p>}</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> person&#123;</span><br><span class="line"><span class="keyword">return</span> person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法walk，(p person)就是接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span></span> walk() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s年龄是%d岁\n&quot;</span>, p.name, p.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)</span><br><span class="line">p1.walk()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-9-1-值接收者"><a href="#3-9-1-值接收者" class="headerlink" title="3.9.1 值接收者"></a>3.9.1 值接收者</h5><blockquote><p>结构体方法里的接收者如果是值类型时</p><ul><li>表示接受者是以拷贝的形式传进到方法里，那么方法里的接受者(初始化时得到的结构体对象)是一个拷贝的对象<ul><li><code>拷贝的是实例化的结构体对象</code></li></ul></li><li>即使在方法里对结构体对象的某个属性进行了修改，但是这个结构体本身的这个属性是不会变化的，因为值接收者就是复制拷贝，值拷贝的内存地址是完全不一样</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> person &#123;</span><br><span class="line"><span class="keyword">return</span> person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span></span> newYear() &#123;</span><br><span class="line"><span class="comment">// p1在newYear方法的内存地址：0xc000118030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1在newYear方法的内存地址：%p\n&quot;</span>, &amp;p)</span><br><span class="line">p.age += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化结构体得到p1对象</span></span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1的值: &#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1的值: %v\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1在初始化后的内存地址: 0xc000118000</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1在初始化后的内存地址: %p\n&quot;</span>, &amp;p1)</span><br><span class="line"></span><br><span class="line">p1.newYear()</span><br><span class="line"><span class="comment">// 过了一年, p1.age:19</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;过了一年, p1.age: %v\n&quot;</span>, p1.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出：</p><ul><li>p1通过构造函数创建了<code>person</code>这个结构体的实例对象<ul><li>在初始化后的内存地址:<code>0xc000118000</code></li><li>在<code>person</code>结构体的<code>newYear</code>方法里，传进入<code>p</code>的内存地址是:<code>0xc000118030</code>，二者内存地址明显不一样</li><li>所以在<code>newYear</code>方法里对<code>age</code>字段修改，相当于是修改的<code>p1</code>的副本里的<code>age</code>字段，所以实际上并没有修改成功</li></ul></li></ul></blockquote><h5 id="3-9-2-指针接收者"><a href="#3-9-2-指针接收者" class="headerlink" title="3.9.2 指针接收者"></a>3.9.2 指针接收者</h5><blockquote><p>在值接收者里，对应方法修改了结构体对象的某个值，因为值拷贝的原因，还是不会进行变化，那么如果真要修改，就要用到了指针接收者</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> *person &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> newYear() &#123;</span><br><span class="line"><span class="comment">// p1在newYear方法的内存地址：0xc00000c030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1在newYear方法的内存地址：%p\n&quot;</span>, p)</span><br><span class="line">p.age += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化结构体得到p1对象</span></span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1的值是person实例化后的指针</span></span><br><span class="line"><span class="comment">// p1的值: &amp;&#123;sam 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1的值: %v\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1的内存地址值: 0xc00000c030</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1的内存地址值: %p\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line">p1.newYear()</span><br><span class="line"><span class="comment">// 过了一年, p1.age: 20</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;过了一年, p1.age: %v\n&quot;</span>, p1.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出：</p><ul><li>person的构造函数返回是person的指针类型<ul><li>p1自身的值是<code>&amp;&#123;sam 19&#125;</code>,表示是结构体指针类型</li><li>那么<code>%p</code>就可以打印出<code>p1</code>的内存地址值</li></ul></li><li>在person结构体的<code>newYear</code>方法里<ul><li>拿到<code>p</code>的内存地址也是和<code>p1</code>一样，那就表示将<code>p1</code>传进到了<code>newYear</code>这个方法里</li><li>那么执行<code>p.age += 1</code>，就表示在修改<code>p1.age =+ 1</code>，那就实现了通过结构体方法修改成员变量值的效果</li></ul></li><li>从这里看出，使用指针结构体可以实现对成员变量的修改，后面使用的场景会很多，所以推荐使用指针结构体</li></ul></blockquote><h4 id="3-10-自定义类型加方法"><a href="#3-10-自定义类型加方法" class="headerlink" title="3.10 自定义类型加方法"></a>3.10 自定义类型加方法</h4><blockquote><p>方法只能给自定义的类型加方法，比如想给基础类型<code>int</code>加一个方法，就需要先创建一个属于自己的<code>myint</code>类型，然后对这个类型加方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m myInt)</span></span> hello() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;this is buildt int func&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := myInt(<span class="number">12</span>) <span class="comment">// 这里myInt(12)表示是强制类型转换</span></span><br><span class="line">m.hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-11-结构体匿名字段"><a href="#3-11-结构体匿名字段" class="headerlink" title="3.11 结构体匿名字段"></a>3.11 结构体匿名字段</h4><blockquote><p>在定义结构体时只定义变量类型，不写变量名</p><p>使用值列表的形式初始化结构体</p><p>这种情况容易出现不知字段的用途，所以用的较少</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只声明字段类型，不声明字段名，表示匿名结构体</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">string</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用值列表的形式初始化结构体</span></span><br><span class="line">p1 := person&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>,</span><br><span class="line"><span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;name 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-12-结构体嵌套"><a href="#3-12-结构体嵌套" class="headerlink" title="3.12 结构体嵌套"></a>3.12 结构体嵌套</h4><h5 id="3-12-1-显式嵌套结构体"><a href="#3-12-1-显式嵌套结构体" class="headerlink" title="3.12.1 显式嵌套结构体"></a>3.12.1 显式嵌套结构体</h5><blockquote><p>结构体里可以再嵌套另一个结构体，这样的结构体称作结构体嵌套</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体嵌套</span></span><br><span class="line"><span class="comment">// 被嵌套结构体</span></span><br><span class="line"><span class="keyword">type</span> 结构体<span class="number">1</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  var1 <span class="type">string</span></span><br><span class="line">  var2 strint</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体，将结构体1嵌套到结构体2中</span></span><br><span class="line"><span class="keyword">type</span> 结构体<span class="number">2</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">  var3 <span class="type">string</span></span><br><span class="line">  var4 结构体<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化结构体2，访问var1，下面是伪代码</span></span><br><span class="line"><span class="comment">// 通过结构体2找到结构体1，再访问结构体1里的var1字段</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;var1的值:%v\n&quot;</span>, 结构体<span class="number">2.</span>var4.var1)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要被嵌套的结构体</span></span><br><span class="line"><span class="keyword">type</span> specs <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 衣服结构体。里面嵌套了一个specs这个结构体</span></span><br><span class="line"><span class="keyword">type</span> clothes <span class="keyword">struct</span>&#123;</span><br><span class="line">name<span class="type">string</span></span><br><span class="line">price<span class="type">int</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 嵌套了specs结构体</span></span><br><span class="line">specsspecs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汽车结构体，里面嵌套了一个specs这个结构体</span></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">price <span class="type">int</span></span><br><span class="line">specs specs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newClothes</span><span class="params">(name, color, size <span class="type">string</span>, price <span class="type">int</span>)</span></span> clothes&#123;</span><br><span class="line"><span class="keyword">return</span> clothes&#123;</span><br><span class="line">name: name,</span><br><span class="line">price: price,</span><br><span class="line">specs: specs&#123;</span><br><span class="line">color: color,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCar</span><span class="params">(name, color, size <span class="type">string</span>, price <span class="type">int</span>)</span></span> car &#123;</span><br><span class="line"><span class="keyword">return</span> car&#123;</span><br><span class="line">name: name,</span><br><span class="line">price: price,</span><br><span class="line">specs: specs&#123;</span><br><span class="line">color: color,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *clothes)</span></span> wear(userName <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is wear %s\n&quot;</span>, userName, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *car)</span></span> drive(userName <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s drive a %s\n&quot;</span>, userName, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := newClothes(<span class="string">&quot;NaKe&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="number">33</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c1=&#123;NaKe 33 &#123;red XL&#125;&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1=%v\n&quot;</span>, c1)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c1.name=NaKe</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.name=%v\n&quot;</span>, c1.name)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c1.price=33</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.price=%v\n&quot;</span>, c1.price)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c1.specs.color=red</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.specs.color=%v\n&quot;</span>, c1.specs.color)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c1.specs.size=XL</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.specs.size=%v\n&quot;</span>, c1.specs.size)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// jason is wear NaKe</span></span><br><span class="line">c1.wear(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">c2 := newCar(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;2HX&quot;</span>, <span class="number">1999999</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c2=&#123;BMW 1999999 &#123;pink 2HX&#125;&#125; </span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2=%v\n&quot;</span>, c2)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//c2.name=BMW</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.name=%v\n&quot;</span>, c2.name)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c2.price=1999999</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.price=%v\n&quot;</span>, c2.price)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c2.specs.color=pink</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.specs.color=%v\n&quot;</span>, c2.specs.color)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// c2.specs.size=2HX</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.specs.size=%v\n&quot;</span>, c2.specs.size)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// sam drive a BMW</span></span><br><span class="line">c2.drive(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码分析</p><ul><li><code>specs</code>结构体是一个公共结构体，用来表示其他结构体都包含它的所有属性</li><li><code>clothes</code>结构体，里面嵌套了一个<code>specs</code>这个结构体，并且起了个变量名叫<code>specs</code></li><li><code>car</code>结构体，里面嵌套了一个<code>specs</code>这个结构体，并且起了个变量名叫<code>specs</code></li><li>对<code>clothes</code>结构体写构造函数，需要对<code>clothes</code>里的<code>specs</code>结构体进行初始化赋值，通过<code>newClothes</code>传入的形参值进行传入，最终将<code>clothes</code>结构体返回，同理<code>car</code>结构体也是一样的</li><li>通过<code>clothes</code>结构体的构造函数初始化了一个<code>c1</code>变量，传入了<code>name</code>、<code>price</code>、<code>color</code>、<code>size</code>变量以后，就可以对<code>c1</code>进行属性访问了<ul><li>需要访问<code>c1</code>的<code>color</code>属性，不能直接<code>c1.color</code>，这样是找不到的，会提示报错：<code> c1.color undefined (type clothes has no field or method color)</code><ul><li>因为<code>c1</code>本身是没有<code>color</code>属性的，<code>c1</code>的<code>color</code>属性在<code>specs</code>这个结构体里</li><li>所以需要<code>c1.specs.color</code>这样一级一级去找，<code>c1.specs.color</code>里的<code>specs</code>是<code>clothes</code>结构体里定义的<code>specs</code>这个变量名，不是<code>specs</code>这个结构体类型</li></ul></li><li>这样去访问嵌套结构体里的属性是比较清晰明了</li></ul></li></ul></blockquote><h5 id="3-12-2-匿名嵌套结构体"><a href="#3-12-2-匿名嵌套结构体" class="headerlink" title="3.12.2 匿名嵌套结构体"></a>3.12.2 匿名嵌套结构体</h5><blockquote><p>上面访问嵌套结构体时，不能直接通过<code>c1.color</code>进行访问<code>color</code>属性</p><p>如果直接通过c1.color进行访问color属性，需要对<code>clothes</code>里的嵌套结构体改造成<code>匿名嵌套结构体</code></p><p><code>匿名嵌套结构体</code>：</p><ul><li>嵌套结构体里对于被嵌套的结构体，不显式的写一个变量名，而是直接写该被嵌套的结构体</li><li>那么在构造函数时，类比到结构体匿名字段，那么这个被嵌套结构体的变量名就是它自己的名字，因为没有给名字，所以用的是自己的名字</li><li>那么这样定义的嵌套结构体的好处<ul><li>可以通过<code>c1.color</code>进行直接访问被嵌套的结构体的<code>color</code>属性，这样更加方便</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名嵌套结构体 </span></span><br><span class="line"><span class="keyword">type</span> specs <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clothes <span class="keyword">struct</span>&#123;</span><br><span class="line">name<span class="type">string</span></span><br><span class="line">price<span class="type">int</span></span><br><span class="line">  <span class="comment">// 匿名嵌套结构体，不写嵌套体的变量名</span></span><br><span class="line">  <span class="comment">// 等价于： specs specs表示是简写</span></span><br><span class="line">specs </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> specs <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clothes <span class="keyword">struct</span>&#123;</span><br><span class="line">name<span class="type">string</span></span><br><span class="line">price<span class="type">int</span></span><br><span class="line">specs <span class="comment">// 匿名嵌套结构体，不写嵌套体的变量名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">price <span class="type">int</span></span><br><span class="line">specs <span class="comment">// 嵌套结构体specs，不写嵌套体的变量名，表示匿名嵌套</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newClothes</span><span class="params">(name, color, size <span class="type">string</span>, price <span class="type">int</span>)</span></span> clothes&#123;</span><br><span class="line"><span class="keyword">return</span> clothes&#123;</span><br><span class="line">name: name,</span><br><span class="line">price: price,</span><br><span class="line"><span class="comment">// 冒号前面的specs就是specs这个结构体的名字，因为是匿名嵌套结构体来的，使用了该结构体的名字作为变量名</span></span><br><span class="line">specs: specs&#123;</span><br><span class="line">color: color,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCar</span><span class="params">(name, color, size <span class="type">string</span>, price <span class="type">int</span>)</span></span> car &#123;</span><br><span class="line"><span class="keyword">return</span> car&#123;</span><br><span class="line">name: name,</span><br><span class="line">price: price,</span><br><span class="line">specs: specs&#123;</span><br><span class="line">color: color,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *clothes)</span></span> wear(userName <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is wear %s\n&quot;</span>, userName, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *car)</span></span> drive(userName <span class="type">string</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s drive a %s\n&quot;</span>, userName, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := newClothes(<span class="string">&quot;NaKe&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1=&#123;NaKe 33 &#123;red XL&#125;&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1=%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.name=NaKe</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.name=%v\n&quot;</span>, c1.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.price=33</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.price=%v\n&quot;</span>, c1.price)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用c1.color、c1.size进行访问嵌套结构体里的属性</span></span><br><span class="line"><span class="comment">// c1.color=red</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.color=%v\n&quot;</span>, c1.color)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.size=XL</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.size=%v\n&quot;</span>, c1.size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jason is wear NaKe</span></span><br><span class="line">c1.wear(<span class="string">&quot;jason&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个例子</span></span><br><span class="line">c2 := newCar(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;2HX&quot;</span>, <span class="number">1999999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c2=&#123;BMW 1999999 &#123;pink 2HX&#125;&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2=%v\n&quot;</span>, c2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c2.name=BMW</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.name=%v\n&quot;</span>, c2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c2.price=1999999</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.price=%v\n&quot;</span>, c2.price)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用c2.color、c2.size进行访问嵌套结构体里的属性</span></span><br><span class="line"><span class="comment">// c2.color=pink</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.color=%v\n&quot;</span>, c2.color)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c2.size=2HX</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c2.size=%v\n&quot;</span>, c2.size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sam drive a BMW</span></span><br><span class="line">c2.drive(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-12-3-匿名嵌套结构体字段冲突"><a href="#3-12-3-匿名嵌套结构体字段冲突" class="headerlink" title="3.12.3 匿名嵌套结构体字段冲突"></a>3.12.3 匿名嵌套结构体字段冲突</h5><blockquote><p>如果被嵌套的结构体里有多个相同的字段，那么访问就出现匿名嵌套结构体冲突</p><ul><li>那么就需要按嵌套的结构体一层一层去找</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> carBody <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> carInside <span class="keyword">struct</span>&#123;</span><br><span class="line">color <span class="type">string</span></span><br><span class="line">siteNum <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">carBody</span><br><span class="line">carInside</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// car的字段比较多，所以返回结构体指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCar</span><span class="params">(name <span class="type">string</span>, bodyColor <span class="type">string</span>, size <span class="type">int</span>, insideColor <span class="type">string</span>, siteNum <span class="type">int</span>)</span></span> *car&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;car&#123;</span><br><span class="line">name: name,</span><br><span class="line">carBody: carBody&#123;</span><br><span class="line">color: bodyColor,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">carInside: carInside&#123;</span><br><span class="line">color: insideColor,</span><br><span class="line">siteNum: siteNum,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := newCar(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">199</span>, <span class="string">&quot;black&quot;</span>, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;c1=%p\n&quot;</span>, c1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;c1=%v\n&quot;</span>, *c1)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.color==&gt; %v\n&quot;</span>, c1.color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的car结构体匿名嵌套了结构体<code>carBody</code>和<code>carInside</code>，并且结构体<code>carBody</code>和<code>carInside</code>都有一个相同字段叫<code>color</code></p><p>那么实例化car结构体后赋值给c1，c1直接访问<code>color</code>字段就会报错: </p><ul><li>报错信息：<code>ambiguous selector c1.color</code>表示是模糊的选择器<code>c1.color</code></li><li>因为c1里有两个冲突的<code>color</code>字段，此时访问就不知道该访问哪个，就会报错</li></ul></blockquote><blockquote><p>如何解决呢？</p><ul><li>那就和显式嵌套结构体一样，一层一层的写结构体字段调用</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> carBody <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> carInside <span class="keyword">struct</span>&#123;</span><br><span class="line">color <span class="type">string</span></span><br><span class="line">siteNum <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">carBody</span><br><span class="line">carInside</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// car的字段比较多，所以返回结构体指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCar</span><span class="params">(name <span class="type">string</span>, bodyColor <span class="type">string</span>, size <span class="type">int</span>, insideColor <span class="type">string</span>, siteNum <span class="type">int</span>)</span></span> *car&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;car&#123;</span><br><span class="line">name: name,</span><br><span class="line">carBody: carBody&#123;</span><br><span class="line">color: bodyColor,</span><br><span class="line">size: size,</span><br><span class="line">&#125;,</span><br><span class="line">carInside: carInside&#123;</span><br><span class="line">color: insideColor,</span><br><span class="line">siteNum: siteNum,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := newCar(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">199</span>, <span class="string">&quot;black&quot;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// c1.carBody.color==&gt; red</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.carBody.color==&gt; %v\n&quot;</span>, c1.carBody.color)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.carInside.color==&gt; black</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.carInside.color==&gt; %v\n&quot;</span>, c1.carInside.color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-12-4-嵌套结构体是指针类型"><a href="#3-12-4-嵌套结构体是指针类型" class="headerlink" title="3.12.4 嵌套结构体是指针类型"></a>3.12.4 嵌套结构体是指针类型</h5><blockquote><p>被嵌套的结构体指定为指针类型</p><ul><li>当被嵌套的结构体自身定义的字段比较多，还需要被嵌套，可以在嵌套的时候传入指针类型</li><li>访问嵌套的指针结构体，也可以直接去访问</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> carBody <span class="keyword">struct</span>&#123;</span><br><span class="line">color<span class="type">string</span></span><br><span class="line">size<span class="type">int</span></span><br><span class="line">carType <span class="type">string</span></span><br><span class="line">carAddr <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">*carBody</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// car的字段比较多，所以返回结构体指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCar</span><span class="params">(name <span class="type">string</span>, color <span class="type">string</span>, size <span class="type">int</span>, carType, carAddr <span class="type">string</span>)</span></span> *car&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;car&#123;</span><br><span class="line">name: name,</span><br><span class="line">carBody: &amp;carBody&#123;</span><br><span class="line">color: color,</span><br><span class="line">size: size,</span><br><span class="line">carType: carType,</span><br><span class="line">carAddr: carAddr,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := newCar(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">199</span>, <span class="string">&quot;SUV_Car&quot;</span>, <span class="string">&quot;Germen&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1自身的值：&amp;&#123;BMW 0xc000024080&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1自身的值：%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1内存地址指向的值：&amp;&#123;BMW 0xc000024080&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1内存地址指向的值：%v\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1的类型：*main.car</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1的类型：%T\n&quot;</span>, c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.color：red</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.color：%v\n&quot;</span>, c1.color)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c1.carAddr：Germen</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;c1.carAddr：%v\n&quot;</span>, c1.carAddr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-12-5-嵌套结构体注意事项"><a href="#3-12-5-嵌套结构体注意事项" class="headerlink" title="3.12.5 嵌套结构体注意事项"></a>3.12.5 嵌套结构体注意事项</h5><blockquote><p>嵌套结构体写构造函数：</p><ul><li>需要将结构自身的字段和被嵌套的结构体的字段完全写全</li></ul><p>嵌套结构体查找属性：</p><ul><li>嵌套结构体查找属性时，先从自己内部的属性字典里去找，找不到再去嵌套结构体里找，这样一层一层去找元素</li></ul><p>匿名嵌套结构体使用场景：</p><ul><li>多适用于只有一个嵌套结构体</li></ul><p>显式嵌套结构体：</p><ul><li>当有多个嵌套结构体时，建议还是对嵌套的结构体写不同的变量名</li><li>并且在访问时一级一级的去写访问属性，如<code>c1.specs.color</code>，这样更清晰</li></ul><p>显式嵌套结构体和匿名嵌套结构体该用哪一种？</p><ul><li>这个看自身习惯，不过个人比较喜欢使用匿名嵌套结构体</li><li>这样在定义时不需要对嵌套结构体多写额外得字段名，直接用嵌套的结构体名字作为字段名即可</li><li>如果遇到结构体字段冲突，那就老老实实一级一级去写，这样不会出错，但是又和显示嵌套结构体访问字段方式一样了，</li><li>那用哪种嵌套结构体就仁者见仁智者见智了</li></ul></blockquote><h4 id="3-13-结构体模拟继承"><a href="#3-13-结构体模拟继承" class="headerlink" title="3.13 结构体模拟继承"></a>3.13 结构体模拟继承</h4><blockquote><p><code>go</code>本身是没有继承的，但是用结构体可以来模拟继承</p><p>继承：</p><ul><li>在其他语言中，有一个父类，然后有一个子类，子类可以继承父类的属性和方法</li><li>在<code>go</code>语言中可以使用结构体嵌套来模拟继承，当一个结构体A嵌套了结构体B，那么这个结构体A就拥有了结构体B的所有属性和方法，也就实现了模拟继承</li></ul><p>如下代码：</p><ul><li><code>father</code>结构体类比为一个父类，<code>son</code>结构体类比为一个子类，<code>father</code>结构体有个<code>house</code>方法</li><li><code>son</code>结构体中嵌套了<code>father</code>结构体，那么就拥有了<code>father</code>结构体的所有属性和方法，<code>son</code>结构体就可以进行访问<code>father</code>结构体的<code>house</code>方法和<code>name</code>属性</li><li>从执行结果里可以看到<code>s1=main.son&#123;age:19, father:main.father&#123;name:&quot;hupe&quot;&#125;&#125;</code>，就说明了<code>s1</code>结构体里嵌套的<code>father</code>结构体，那么就可以访问<code>father</code>结构体的所有的属性和方法</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// father结构体</span></span><br><span class="line"><span class="keyword">type</span> father <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// father的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newFather</span><span class="params">(name <span class="type">string</span>)</span></span> father&#123;</span><br><span class="line"><span class="keyword">return</span> father&#123;</span><br><span class="line">name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// father结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *father)</span></span> house() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;father init func, name [%v] have a house\n&quot;</span>, f.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son结构体</span></span><br><span class="line"><span class="keyword">type</span> son <span class="keyword">struct</span>&#123;</span><br><span class="line">age <span class="type">int</span></span><br><span class="line">father</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son结构体的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newSon</span><span class="params">(age <span class="type">int</span>, name <span class="type">string</span>)</span></span> son &#123;</span><br><span class="line"><span class="keyword">return</span> son&#123;</span><br><span class="line">age: age,</span><br><span class="line">father: father&#123;</span><br><span class="line">name: name,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *son)</span></span> goWalk() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;father is %v\n&quot;</span>, s.name)</span><br><span class="line">fmt.Printf(<span class="string">&quot;son age is %v\n&quot;</span>, s.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f1 := newFather(<span class="string">&quot;opim&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1=%#v\n&quot;</span>, f1)</span><br><span class="line"></span><br><span class="line">s1 := newSon(<span class="number">19</span>, <span class="string">&quot;hupe&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%#v\n&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">s1.goWalk()</span><br><span class="line">s1.house()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">f1=main.father&#123;name:&quot;opim&quot;&#125;</span></span><br><span class="line"><span class="comment">s1=main.son&#123;age:19, father:main.father&#123;name:&quot;hupe&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">father is hupe</span></span><br><span class="line"><span class="comment">son age is 19</span></span><br><span class="line"><span class="comment">father init func, name [hupe] have a house</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-14-结构体和json"><a href="#3-14-结构体和json" class="headerlink" title="3.14 结构体和json"></a>3.14 结构体和json</h4><h5 id="3-14-1-json解释"><a href="#3-14-1-json解释" class="headerlink" title="3.14.1 json解释"></a>3.14.1 json解释</h5><blockquote><p>结构体中支持json格式输出</p><p><code>JSON</code>简介</p><ul><li><p>JSON的全称是”JavaScript Object Notation”，意思是JavaScript对象表示法，它是一种基于文本，独立于语言的轻量级数据交换格式。</p></li><li><p>JSON语法</p><ul><li>数据在名称&#x2F;值对中</li><li>数据由逗号分隔</li><li>大括号保存对象</li><li>中括号保存数组</li></ul></li><li><p>JSON值</p><ul><li><p>数字(整数&#x2F;浮点数)</p></li><li><p>字符串(双引号)</p></li><li><p><a href="https://www.zhihu.com/search?q=%E5%B8%83%E5%B0%94%E5%80%BC&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:627916260%7D">布尔值</a>(true&#x2F;false)</p></li><li><p>数组(中括号中)</p></li><li><p>对象(大括号中)</p></li><li><p>null</p></li><li><p>实例</p></li></ul></li><li><p>JSON 数据的书写格式</p><ul><li>名称&#x2F;值对组合中的名称写在前面（在双引号中），值对写在后面，中间用冒号隔开</li><li>其中<code>值</code>可以是：数字（整数或浮点数）、字符串（在双引号中）、布尔值（true或false）、数组（在方括号中）、对象（在花括号中）、null</li></ul></li></ul></blockquote><h5 id="3-14-2-序列化和反序列化"><a href="#3-14-2-序列化和反序列化" class="headerlink" title="3.14.2 序列化和反序列化"></a>3.14.2 序列化和反序列化</h5><blockquote><p>知乎解释：<a href="https://zhuanlan.zhihu.com/p/40462507">序列化和反序列化</a></p><p>百度百科解释：</p><ul><li>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程<ul><li>把对象转化为可传输的字节序列过程称为序列化，比如<code>json</code>、<code>bytes</code>等形式</li><li>在序列化期间，对象将其当前状态写入到临时或持久性存储区</li></ul></li><li>反序列化<ul><li>可以通过从存储区中读取或反序列化对象的状态，重新创建该对象</li><li>把字节序列还原为对象的过程称为反序列化</li></ul></li></ul></blockquote><h5 id="3-14-3-go序列化"><a href="#3-14-3-go序列化" class="headerlink" title="3.14.3 go序列化"></a>3.14.3 go序列化</h5><blockquote><p>序列化：</p><ul><li>将go语言中的结构体变量 –&gt; json格式的字符串</li></ul><p><code>go</code>序列化:</p><ul><li><p>使用到了内置包<code>encoding/json</code>，需要先引入</p></li><li><p>输出序列化的值：</p><ul><li>需要使用内置函数<code>string</code></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">ret, err := json.Marshal(d1)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">json.Marshal(需要序列化的对象)</span></span><br><span class="line"><span class="comment">输出时使用string对ret进行转化成字符串，否则会直接输出会显示为空</span></span><br><span class="line"><span class="comment">返回两个值，ret是序列化的结果，err是错误信息，没有错误的话都是nil，表示空值，可以用来进行判断序列化是否转化成功</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>直接输出序列化的变量，是一个字节类型的</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := newDog(<span class="string">&quot;bom&quot;</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%v\n&quot;</span>, d1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化：将go语言中的结构体变量 --&gt; json格式的字符串</span></span><br><span class="line">ret, err := json.Marshal(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;json转化失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%#v\n&quot;</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220208180705196.png" class="" title="image-20220208180705196"><blockquote><p>使用string转化输出,但是输出是空的json</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">name: name,</span><br><span class="line">age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := newDog(<span class="string">&quot;bom&quot;</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%v\n&quot;</span>, d1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化：将go语言中的结构体变量 --&gt; json格式的字符串</span></span><br><span class="line">ret, err := json.Marshal(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;json转化失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%#v\n&quot;</span>, <span class="type">string</span>(ret))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220208180821232.png" class="" title="image-20220208180821232"><blockquote><p>上面可以看到使用<code>string</code>转化序列化的变量以后，输出的空字符串，没有d1里的name和age属性</p><p>这里就是字段的可见性的原因：</p><ul><li>因为在<code>go</code>字段名是小写的，那么其他包导入的时候，是访问不到的，属于隐藏变量</li><li>在上面的代码中，定义的<code>d1</code>的结构体的<code>name</code>和<code>age</code>属性都是小写，那么在<code>json</code>这个包序列化<code>d1</code>的时候，由于<code>d1</code>属性名都是小写，所以<code>json</code>包访问不到，所以出现了空字符串</li><li>所以修改<code>dog</code>结构体的<code>name</code>和<code>age</code>字段名首字母大写，构造函数中也进行对应的字段名首字母大写就可以正确输出<code>json</code>字符串了</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := newDog(<span class="string">&quot;bom&quot;</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%v\n&quot;</span>, d1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化：将go语言中的结构体变量 --&gt; json格式的字符串</span></span><br><span class="line"><span class="comment">// 需要注意的是结构体的字段名首字母必须大写，因为这是需要json包需要访问d1的name和age属性，小写的字段在其他包都是没法访问到的</span></span><br><span class="line">ret, err := json.Marshal(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;json转化失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%#v\n&quot;</span>, <span class="type">string</span>(ret))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220208181655186.png" class="" title="image-20220208181655186"><blockquote><p>下图是将上面的结果<code>&quot;&#123;\&quot;Name\&quot;:\&quot;bom\&quot;,\&quot;Age\&quot;:3&#125;&quot;</code>放到<code>json</code>格式转化的网站进行了转化，可以看到是一个正确的<code>json</code>字符串，反斜杠是表示转义符号</p></blockquote><blockquote><p>但是有个问题，序列化出来的<code>json</code>字段名首字母都是大写，但是传给前端的时候需要都是小写的，就需要使用<code>tag</code>，<code>tag</code>是在定义结构体的位置添加，tag表示给字段名起了一个别名</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加tag</span></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">    <span class="comment">// 反斜杠，json表示使用的包，用冒号隔开，后面要写的字段用小写，有多个用空格隔开</span></span><br><span class="line">    <span class="comment">// 可以理解为是给首字母大写的字段名通过tag起了一个别名</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意tag和后面的变量名不能有空格</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := newDog(<span class="string">&quot;bom&quot;</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%v\n&quot;</span>, d1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化：将go语言中的结构体变量 --&gt; json格式的字符串</span></span><br><span class="line"><span class="comment">// 需要注意的是结构体的字段名首字母必须大写，因为这是需要json包需要访问d1的name和age属性，小写的字段在其他包都是没法访问到的</span></span><br><span class="line">ret, err := json.Marshal(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;json转化失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%#v\n&quot;</span>, <span class="type">string</span>(ret))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220208184714283.png" class="" title="image-20220208184714283"><h5 id="3-14-4-go反序列化"><a href="#3-14-4-go反序列化" class="headerlink" title="3.14.4 go反序列化"></a>3.14.4 go反序列化</h5><blockquote><p>反序列化：</p><ul><li>将json格式的字符串 –&gt; go语言中的结构体变量</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">var</span> 变量 对应结构体类型</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(反序列化字符串)， 变量指针)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">接收的第一个参数是字节类型的切换，那么可以值接使用[]byte(反序列化字符串)进行强制转化</span></span><br><span class="line"><span class="comment">第二个参数是定义一个变量用来存储反序列化的值，一般都是需要传入指针，因为go语言的函数传值都是拷贝，如果不传指针，定义的变量传给Unmarshal函数一直都是副本，所以需要传递指针，变量在反序列化以后，值才会接收为反序列化的值</span></span><br><span class="line"><span class="comment">返回1个值，err是错误信息，没有错误的话都是nil，表示空值，可以用来进行判断反序列化是否成功</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line"><span class="comment">// 反引号表示将字符串的内容会原样输出</span></span><br><span class="line">jsonStrData := <span class="string">`&#123;&quot;name&quot;:&quot;lpm&quot;,&quot;age&quot;:13&#125;`</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, jsonStrData)</span><br><span class="line"></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(jsonStrData), &amp;d1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;err=%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;反序列化失败！！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;&#123;\&quot;name\&quot;:\&quot;lpm\&quot;,\&quot;age\&quot;:13&#125;&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3-14-5-go反序列化空值问题"><a href="#3-14-5-go反序列化空值问题" class="headerlink" title="3.14.5 go反序列化空值问题"></a>3.14.5 go反序列化空值问题</h5><blockquote><p>反序列化时，传递的<code>json</code>字段定义的名字值一定要和结构体里定义的一致，否则会出现空值的情况</p><p>比如将下方的<code>jsonStrData</code>里的”name”字段写成<code>uname</code>,那么反序列化出来d1的<code>Name</code>字段值就是空值</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="comment">// 首字母不大写，没法进行序列化</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog&#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">Name: name,</span><br><span class="line">Age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line"><span class="comment">// 反引号表示将字符串的内容会原样输出</span></span><br><span class="line">jsonStrData := <span class="string">`&#123;&quot;uname&quot;:&quot;lpm&quot;,&quot;age&quot;:13&#125;`</span></span><br><span class="line"></span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(jsonStrData), &amp;d1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;反序列化失败！！！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%#v\n&quot;</span>, d1) <span class="comment">// d1=main.dog&#123;Name:&quot;&quot;, Age:13&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-15-结构体向外暴露"><a href="#3-15-结构体向外暴露" class="headerlink" title="3.15 结构体向外暴露"></a>3.15 结构体向外暴露</h4><blockquote><ol><li>如果定义的结构体首字母大写，那么这个结构体对外部暴露可见，公有的变量，其他模块的<code>go</code>文件可以用来导入这个结构体</li><li>如果一个包里定义的结构体首字母是小写的，那么其他<code>go</code>文件是访问不到小写开头的结构体的</li><li>需要注意的点：</li></ol><ul><li>并且对首字母大写的结构体有格式要求，就是需要对首字母大写的结构体、方法写注释</li><li>注释的规则是 结构体名+空格+注释内容</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的格式必须是需要空格隔开</span></span><br><span class="line"><span class="comment">// Person 这是一个人的结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := newPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)</span><br><span class="line">p1.walk()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220424150850248.png" class="" title="image-20220424150850248"><blockquote><p>上图中的Person结构体是首字母大写的，表示外部可访问到</p><p>那么写的注释：</p><p><code>// Person 这是一个人的结构体</code>就需要符合<code>//+空格+结构体名+空格+注释</code>的规则来添加注释</p></blockquote><h4 id="3-16-空结构体"><a href="#3-16-空结构体" class="headerlink" title="3.16 空结构体"></a>3.16 空结构体</h4><h5 id="3-16-1-内存空间零占用"><a href="#3-16-1-内存空间零占用" class="headerlink" title="3.16.1 内存空间零占用"></a>3.16.1 内存空间零占用</h5><blockquote><p>在Go语言中，空结构体（表示为<code>struct&#123;&#125;</code>）是一个特殊的类型</p><ul><li>它没有任何字段，因此不占用内存空间。</li><li>空结构体主要用于信号传递或表示一个类型不包含任何数据。</li><li>它可以作为在不同goroutine之间传递信号的轻量级选项。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Sizeof empty struct: %d\n&quot;</span>, unsafe.Sizeof(empty))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230825130758534.png" class="" title="image-20230825130758534"><h5 id="3-16-2-内存地址永不变"><a href="#3-16-2-内存地址永不变" class="headerlink" title="3.16.2 内存地址永不变"></a>3.16.2 内存地址永不变</h5><blockquote><p>空结构体的内存地址永远不变</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> empty1 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> empty2 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> empty3 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> empty4 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> empty5 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> empty6 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty1:%p\n&quot;</span>, &amp;empty1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty2:%p\n&quot;</span>, &amp;empty2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty3:%p\n&quot;</span>, &amp;empty3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty4:%p\n&quot;</span>, &amp;empty4)</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty5:%p\n&quot;</span>, &amp;empty5)</span><br><span class="line">fmt.Printf(<span class="string">&quot;empty6:%p\n&quot;</span>, &amp;empty6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20230825131117711.png" class="" title="image-20230825131117711"><blockquote><p>可以看到empty1到empty6的内存地址都是同一个，因为他们不占内存空间，所以分配的内存地址都是同一个，可以用来节省内存</p><p>使用场景：</p><ul><li>可作为占位符，尤其是在通道同步中。</li><li>空结构体与通道结合的使用场景主要涉及事件通知和协调多个 goroutine</li></ul></blockquote><h4 id="3-17-结构体练习示例"><a href="#3-17-结构体练习示例" class="headerlink" title="3.17 结构体练习示例"></a>3.17 结构体练习示例</h4><blockquote><p>下面是结构体练习的例子</p><p>需要注意的是在编辑学生时，当修改完学生姓名&#x2F;年龄，一定要重新赋值给学生管理系统的map，否则修改会不生效</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// excute select func</span></span><br><span class="line">selectEvent()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;wellcome to student  manager system:&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">`</span></span><br><span class="line"><span class="string">1. showStu</span></span><br><span class="line"><span class="string">2. addStu</span></span><br><span class="line"><span class="string">3. delStu</span></span><br><span class="line"><span class="string">4. editStu</span></span><br><span class="line"><span class="string">5. quit</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">smr := newStuMr(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// lopp show menu</span></span><br><span class="line">showMenu()</span><br><span class="line"></span><br><span class="line"><span class="comment">// input user choice</span></span><br><span class="line"><span class="keyword">var</span> choice <span class="type">int</span></span><br><span class="line">fmt.Print(<span class="string">&quot;input your choice:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;choice)</span><br><span class="line">fmt.Printf(<span class="string">&quot;your choice is:%v\n&quot;</span>, choice)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> choice&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">smr.showStu()</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">smr.addStu()</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">smr.delStu()</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">smr.editStu()</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;bye~&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;your choice is wrong, pls input age...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stuMgr.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// student struct</span></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStudent</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> student&#123;</span><br><span class="line"><span class="keyword">return</span> student&#123;</span><br><span class="line">name: name,</span><br><span class="line"> age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *student)</span></span> alterStu(newName <span class="type">string</span>, newAge <span class="type">int</span>) &#123;</span><br><span class="line">s.name = newName</span><br><span class="line">s.age  = newAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// studentManager struct</span></span><br><span class="line"><span class="keyword">type</span> stuMr <span class="keyword">struct</span>&#123;</span><br><span class="line">studentData <span class="keyword">map</span>[<span class="type">int</span>]student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStuMr</span><span class="params">(stuSize <span class="type">int</span>)</span></span> stuMr&#123;</span><br><span class="line"><span class="keyword">return</span> stuMr&#123;</span><br><span class="line">studentData: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]student, stuSize),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuMr)</span></span> showStu() &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.studentData) == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;student data is empty, pls add first!!!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Id\tname\tage&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> s.studentData&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\t%v\t%v\n&quot;</span>,k, v.name, v.age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define globle virable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">id, age<span class="type">int</span></span><br><span class="line">name<span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuMr)</span></span> addStu() &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;pls input name:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;name)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">&quot;pls input age:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;age)</span><br><span class="line"></span><br><span class="line">id++</span><br><span class="line">s.studentData[id] = newStudent(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuMr)</span></span> delStu() &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.studentData) == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;student data is empty, pls add first!!!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;pls input Id:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;id)</span><br><span class="line">_, ok := s.studentData[id]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;id[%v] don&#x27;t exists!!!&quot;</span>, id)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">delete</span>(s.studentData, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuMr)</span></span> editStu() &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.studentData) == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;student data is empty, pls add first!!!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;pls input Id:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;id)</span><br><span class="line">qStuData, ok := s.studentData[id]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;id[%v] don&#x27;t exists!!!\n&quot;</span>, id)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;query stu data:%+v\n&quot;</span>, qStuData)</span><br><span class="line">fmt.Print(<span class="string">&quot;pls input new name:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;name)</span><br><span class="line">fmt.Print(<span class="string">&quot;pls input new age:&quot;</span>)</span><br><span class="line">fmt.Scan(&amp;age)</span><br><span class="line">qStuData.alterStu(name, age)</span><br><span class="line"></span><br><span class="line"><span class="comment">// give new qStuData to student map, ottherwise new data can&#x27;t be effctive</span></span><br><span class="line">s.studentData[id] = qStuData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、接口与反射"><a href="#十、接口与反射" class="headerlink" title="十、接口与反射"></a>十、接口与反射</h2><h3 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h3><h4 id="1-1-接口定义"><a href="#1-1-接口定义" class="headerlink" title="1.1 接口定义"></a>1.1 接口定义</h4><blockquote><ul><li>接口定义：<ul><li>接口是一种抽象的类型，一种特殊的类型</li><li>接口是一组<code>method</code>的集合，不关心属性，只关心方法</li><li>接口用于<code>不关心变量类型，只关心调用它的什么方法</code></li><li>可以联想到手机、相机、U盘都可以以与电脑的usb接口建立连接，那么手机、相机、U盘的usb卡槽大小一不一样不重要，只要实现了usb接口就可以读取数据</li></ul></li><li>接口注意：<ul><li>只有当两个或两个意义上的具体类型必须以相同的方式进行处理时，才需要定义接口</li><li>不要为了接口而写接口，会增加不必要的运行损耗</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口定义</span></span><br><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span> &#123;</span><br><span class="line">    接口方法<span class="number">1</span>(参数<span class="number">1</span>， 参数<span class="number">2.</span>..)(返回值<span class="number">1</span>，返回值<span class="number">2.</span>..)</span><br><span class="line">    接口方法<span class="number">2</span>(参数<span class="number">1</span>， 参数<span class="number">2.</span>..)(返回值<span class="number">1</span>，返回值<span class="number">2.</span>..)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有定义了接口方法的类型，都必须实现接口方法</span></span><br><span class="line"><span class="comment">// 只要实现了接口方法的变量都是speaker类型</span></span><br><span class="line"><span class="comment">// 接口方法也叫方法签名</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">@File   : main</span></span><br><span class="line"><span class="comment">@Date   : 2022/8/7 11:02 下午</span></span><br><span class="line"><span class="comment">@Author : lyzin</span></span><br><span class="line"><span class="comment">@Desc   :</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">start()</span><br><span class="line">stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机实例</span></span><br><span class="line"><span class="keyword">type</span> phone <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p phone)</span></span> start() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v开机了\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p phone)</span></span> stop() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v关机了\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相机实例</span></span><br><span class="line"><span class="keyword">type</span> camera <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c camera)</span></span> start() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v开机了\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c camera)</span></span> stop() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v关机了\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑实例</span></span><br><span class="line"><span class="keyword">type</span> computer <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// startWork 电脑启动工作，里面的形参是u，类型是Usb接口类型，只有实现Usb接口类型里面的方法的对象才可以被传入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c computer)</span></span> startWork(u Usb) &#123;</span><br><span class="line">u.start()</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">u.stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化手机</span></span><br><span class="line">p1 := phone&#123;name: <span class="string">&quot;华为手机&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化相机</span></span><br><span class="line">c1 := camera&#123;name: <span class="string">&quot;佳能相机&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化电脑</span></span><br><span class="line">cp := computer&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑使用手机</span></span><br><span class="line">cp.startWork(p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑使用相机</span></span><br><span class="line">cp.startWork(c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-接口实现"><a href="#1-2-接口实现" class="headerlink" title="1.2 接口实现"></a>1.2 接口实现</h4><blockquote><p>一个变量如果实现了接口类型中规定的所有方法，那么这个变量就实现了这个接口，所以可以称为这个接口类型的变量</p><p>接口类型的变量的值是<code>nil</code>，类型也是<code>nil</code>，这表示空接口</p><p>接口保存的是值的动态类型和动态值本身</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/13 20:19</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处表示dog结构体的方法没有实现接口里的speak方法，就会报错</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span></span> speak() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;狗在叫\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sp</span><span class="params">(s speaker)</span></span> &#123;</span><br><span class="line">s.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// d1里面有speak方法，那么d1这个变量变量就实现 specker这个接口类型，d1就是speaker这个接口类型的变量</span></span><br><span class="line">sp(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 speaker</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// nil</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-接口定义方法未实现"><a href="#1-3-接口定义方法未实现" class="headerlink" title="1.3 接口定义方法未实现"></a>1.3 接口定义方法未实现</h4><blockquote><p>如果变量的接口方法未实现，就会报错</p><p><code>implement</code>: 执行，实施，生效</p><p>会提示dog类型缺少speak方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/13 20:19</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处表示dog结构体的方法没有实现接口里的speak方法，就会报错</span></span><br><span class="line"><span class="comment">//func (d dog) speak() &#123;</span></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;狗在叫\n&quot;)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sp</span><span class="params">(s speaker)</span></span> &#123;</span><br><span class="line">s.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line">sp(d1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-值接收者实现接口"><a href="#1-4-值接收者实现接口" class="headerlink" title="1.4 值接收者实现接口"></a>1.4 值接收者实现接口</h4><blockquote><p>值接收者实现接口，结构体类型和结构体指针类型的变量都可以存储</p><p>从下面代码可以看出，<code>s1</code>是<code>speaker</code>类型的变量，但是<code>s1</code>既可以接收值类型结构体，也可以接收指针类型结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/13 20:19</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处表示dog结构体的方法实现的是值类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span></span> speak() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;狗在叫\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sp</span><span class="params">(s speaker)</span></span> &#123;</span><br><span class="line">s.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line"><span class="keyword">var</span> d2 dog</span><br><span class="line">d1 = dog&#123;name:<span class="string">&quot;tom&quot;</span>, age: <span class="number">19</span>&#125;</span><br><span class="line">d2 = dog&#123;name:<span class="string">&quot;yom&quot;</span>, age: <span class="number">29</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s1 speaker</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d2的值，接口可以接收到</span></span><br><span class="line">s1 = d1</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// s1=&#123;tom 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// s1=main.dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d2的指针，接口可以接收到</span></span><br><span class="line">s1 = &amp;d2</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// s1=&amp;&#123;yom 29&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// s1=*main.dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-指针接收者实现接口"><a href="#1-5-指针接收者实现接口" class="headerlink" title="1.5 指针接收者实现接口"></a>1.5 指针接收者实现接口</h4><blockquote><p>指针接收者实现接口只能存结构体指针</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/13 20:19</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处表示dog结构体的方法实现的是指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> speak() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;狗在叫\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sp</span><span class="params">(s speaker)</span></span> &#123;</span><br><span class="line">s.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line"><span class="keyword">var</span> d2 dog</span><br><span class="line">d1 = dog&#123;name:<span class="string">&quot;tom&quot;</span>, age: <span class="number">19</span>&#125;</span><br><span class="line">d2 = dog&#123;name:<span class="string">&quot;yom&quot;</span>, age: <span class="number">29</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s1 speaker</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d1的值，但是结构体方法的接收者是指针类型，所以不可以接收到</span></span><br><span class="line"><span class="comment">// 报错提示speak方法有指针接收者</span></span><br><span class="line">s1 = d1 <span class="comment">// 这样会报错，必须给s1赋值指针类型的结构体对象</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) </span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d2的指针，接口可以接收到</span></span><br><span class="line">s1 = &amp;d2</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// s1=&amp;&#123;yom 29&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// s1=*main.dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果结构体实现接口的方法的接收者是指针类型时，那么传给接口类型的方法的变量也必须是指针类型，否则就会报错</p></blockquote><h4 id="1-6-多个接口和接口嵌套"><a href="#1-6-多个接口和接口嵌套" class="headerlink" title="1.6 多个接口和接口嵌套"></a>1.6 多个接口和接口嵌套</h4><blockquote><p>同一个结构体可以实现多个接口</p><p>接口还可以进行嵌套</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/13 20:19</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// animal 接口嵌套了dog结构体的speaker、eater接口</span></span><br><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</span><br><span class="line">speaker</span><br><span class="line">eater</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现dog的speaker接口</span></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span> &#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现dog的eater接口</span></span><br><span class="line"><span class="keyword">type</span> eater <span class="keyword">interface</span> &#123;</span><br><span class="line">eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// dog结构体</span></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> speak() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;狗在叫\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> eat() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;狗在吃\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sp</span><span class="params">(s speaker)</span></span> &#123;</span><br><span class="line">s.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> d1 dog</span><br><span class="line"><span class="keyword">var</span> d2 dog</span><br><span class="line">d1 = dog&#123;name:<span class="string">&quot;tom&quot;</span>, age: <span class="number">19</span>&#125;</span><br><span class="line">d2 = dog&#123;name:<span class="string">&quot;yom&quot;</span>, age: <span class="number">29</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s1 speaker</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d2的值，但是结构体方法的接收者是指针类型，所以不可以接收到</span></span><br><span class="line"><span class="comment">// 报错提示speak方法有指针接收者</span></span><br><span class="line"><span class="comment">// s1 = d1 // 这样会报错，必须给s1赋值指针类型的结构体对象</span></span><br><span class="line">s1 = &amp;d1 <span class="comment">// 必须给接口传递结构体的指针</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// s1=&#123;tom 19&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// s1=main.dog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给s1的是d2的指针，接口可以接收到</span></span><br><span class="line">s1 = &amp;d2</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\n&quot;</span>, s1) <span class="comment">// s1=&amp;&#123;yom 29&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%T\n&quot;</span>, s1) <span class="comment">// s1=*main.dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口嵌套</span></span><br><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span>&#123;</span><br><span class="line">speaker</span><br><span class="line">eater</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第二层接口实现dog的speak接口</span></span><br><span class="line"><span class="keyword">type</span> speaker <span class="keyword">interface</span>&#123;</span><br><span class="line">speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第二层接口实现dog的eater接口</span></span><br><span class="line"><span class="keyword">type</span> eater <span class="keyword">interface</span>&#123;</span><br><span class="line">eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newDog</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> dog &#123;</span><br><span class="line"><span class="keyword">return</span> dog&#123;</span><br><span class="line">name: name,</span><br><span class="line"> age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> speak() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is speak...\n&quot;</span>, d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> eat() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is eating...\n&quot;</span>, d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfSpeak</span><span class="params">(x animal)</span></span> &#123;</span><br><span class="line">x.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfEat</span><span class="params">(x animal)</span></span> &#123;</span><br><span class="line">x.eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := newDog(<span class="string">&quot;sam&quot;</span>, <span class="number">19</span>)</span><br><span class="line">d2 := newDog(<span class="string">&quot;jam&quot;</span>, <span class="number">29</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d1=%v\n&quot;</span>, d1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;d2=%v\n&quot;</span>, d2)</span><br><span class="line"></span><br><span class="line">dfSpeak(&amp;d1)</span><br><span class="line">dfEat(&amp;d2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-空接口"><a href="#1-7-空接口" class="headerlink" title="1.7  空接口"></a>1.7  空接口</h4><blockquote><p>空接口是指没有定义任何方法的接口</p><p>所以任何类型都实现了空接口</p><p>那么空接口的变量可以存任何类型的变量，也就是说，只要变量的类型是空接口，那么就可以接收任意类型的变量</p><p>空接口没有任何约束</p></blockquote><h5 id="1-7-1-空接口变量"><a href="#1-7-1-空接口变量" class="headerlink" title="1.7.1 空接口变量"></a>1.7.1 空接口变量</h5><blockquote><p>空接口变量本身的值和类型都是<code>nil</code>，所以可以是任意类型</p><p>从下面代码可以以看出，当s1是空接口类型时，可以接收整型、字符串、布尔值等等类型，没有类型限制，所有说空接口可以是任意类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\t s1 type=%T\n&quot;</span>, s1, s1)</span><br><span class="line"></span><br><span class="line">s1 = <span class="number">19</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\t s1 type=%T\n&quot;</span>, s1, s1)</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&quot;sam&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\t s1 type=%T\n&quot;</span>, s1, s1)</span><br><span class="line"></span><br><span class="line">s1 = <span class="literal">true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1=%v\t s1 type=%T\n&quot;</span>, s1, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214143852695.png" class="" title="image-20220214143852695"><h5 id="1-7-2-函数形参-x2F-返回值为空接口"><a href="#1-7-2-函数形参-x2F-返回值为空接口" class="headerlink" title="1.7.2 函数形参&#x2F;返回值为空接口"></a>1.7.2 函数形参&#x2F;返回值为空接口</h5><blockquote><p>鉴于空接口变量可以接收任意数据类型的值，那么就可以用来给函数传参</p><ul><li>因为之前函数的形参变量类型都是固定，只允许传入固定类型的形参，有了空接口，就可以接收任意类型的形参</li><li>返回值也是同理，返回值可以返回任意类型的值，当然返回值有空接口的不多<ul><li>从下面代码可以看出，返回值是<code>interface&#123;&#125;</code>类型，表示可以返回任意类型的返回值</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参为空接口类型，表示可以接口任意类型的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showVal</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;showVal函数内：x:%v\t | x type:%T\n&quot;</span>, x, x)</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s1 := showVal(<span class="number">19</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法：%v\t %T\n&quot;</span>, s1, s1)</span><br><span class="line"></span><br><span class="line">s2 := showVal(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法：%v\t %T\n&quot;</span>, s2, s2)</span><br><span class="line"></span><br><span class="line">s3 := showVal(<span class="literal">true</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;main方法：%v\t %T\n&quot;</span>, s3, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214145120632.png" class="" title="image-20220214145120632"><h5 id="1-7-3-函数空接口接收可变长参数"><a href="#1-7-3-函数空接口接收可变长参数" class="headerlink" title="1.7.3 函数空接口接收可变长参数"></a>1.7.3 函数空接口接收可变长参数</h5><blockquote><p>函数可以接收可变长参数，那么可变长参数既可以是<code>int</code>&#x2F;<code>string</code>&#x2F;<code>slice</code>&#x2F;<code>map</code>等类型，那么也可以接收空接口类型</p><p>传进来多个值，都可以被空接口形参接收，并且是<code>空接口类型的切片</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复习下可变长参数函数的格式</span></span><br><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参 ...T)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参: 形参名</span></span><br><span class="line"><span class="comment">// ...T: 可变长参数的类型</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参为空接口类型，表示可以接口任意类型的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showVal</span><span class="params">(x ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;showVal函数内x的值:%v\n&quot;</span>, x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;showVal函数内x的type:%T\n&quot;</span>, x)</span><br><span class="line"><span class="comment">// 遍历可以空接口类型的可变长参数</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;v=%v\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sf := []<span class="type">string</span>&#123;<span class="string">&quot;huge&quot;</span>, <span class="string">&quot;bob&quot;</span>&#125;</span><br><span class="line">mf := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">mf[<span class="string">&quot;age1&quot;</span>] = <span class="number">19</span></span><br><span class="line">mf[<span class="string">&quot;age2&quot;</span>] = <span class="number">29</span></span><br><span class="line">mf[<span class="string">&quot;age3&quot;</span>] = <span class="number">39</span></span><br><span class="line"><span class="comment">// 可以看到showVal函数可以接收任意类型的形参</span></span><br><span class="line">showVal(<span class="number">19</span>, <span class="string">&quot;sam&quot;</span>, <span class="literal">true</span>, sf, mf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-8-类型断言"><a href="#1-8-类型断言" class="headerlink" title="1.8 类型断言"></a>1.8 类型断言</h4><blockquote><p>空接口可以接收任意类型的变量，那么可以对传进来的变量类型进行判断，叫做<code>类型断言</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口类型判断，也叫类型断言</span></span><br><span class="line">x.(T)</span><br></pre></td></tr></table></figure><blockquote><ul><li>x表示空接口变量，T表示需要判断的数据类型</li><li>类型断言会返回两个值<ul><li>一个是传进来的值本身</li><li>一个是错误码(布尔类型)<ul><li>当传入的值的类型是判断里指定的类型，则返回true，否则返回false</li></ul></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参为空接口类型，表示可以接口任意类型的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showVal</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">v, ok := x.(<span class="type">string</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;v=%v\tv type=%T\n&quot;</span>, v, v) <span class="comment">// v=sam   v type=string</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ok=%v\tok type=%T\n&quot;</span>, ok, ok) <span class="comment">// ok=true ok type=bool</span></span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\t%T\n&quot;</span>, v, v)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;x[%v] type[%T] is not a string type\n&quot;</span>, ok, ok)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 可以看到showVal函数可以接收任意类型的形参</span></span><br><span class="line">showVal(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个不是string类型的变量</span></span><br><span class="line">showVal(<span class="number">19</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214151505455.png" class="" title="image-20220214151505455"><h5 id="1-8-1-空接口类型断言"><a href="#1-8-1-空接口类型断言" class="headerlink" title="1.8.1 空接口类型断言"></a>1.8.1 空接口类型断言</h5><blockquote><p>类型断言和switch语句配合使用，用来判断空接口变量是什么类型，</p><p>在<code>switch t.(type)</code> 这种语法结构中，<code>type</code>并不是声明新的类型，而是用于获取接口 t 的动态类型（具体类型）。</p><p><code>type</code>是Go的关键字，但仅在Go的switch语句的类型断言场景下被使用，即仅在 <code>switch</code> 语句的这种类型断言（type switch）中起作用。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkType 检查变量的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkType</span><span class="params">(x <span class="keyword">interface</span> &#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> val := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v is a string\n&quot;</span>, val)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v is a int\n&quot;</span>, val)</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v is a bool\n&quot;</span>, val)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;unknow Type: %v\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">checkType(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line">checkType(<span class="number">90</span>)</span><br><span class="line">checkType(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// user 结构体</span></span><br><span class="line">u1 := user&#123;name: <span class="string">&quot;jhon&quot;</span>&#125;</span><br><span class="line">checkType(u1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220808083735071.png" class="" title="image-20220808083735071"><h5 id="1-8-2-非空接口类型断言"><a href="#1-8-2-非空接口类型断言" class="headerlink" title="1.8.2 非空接口类型断言"></a>1.8.2 非空接口类型断言</h5><blockquote><p>类型断言不止可以应用<code>空接口</code>类型断言，也可以应用到<code>非空接口</code>类型断言</p><p>以手机、相机使用usb在电脑上查看资料为例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">start()</span><br><span class="line">stop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机实例</span></span><br><span class="line"><span class="keyword">type</span> phone <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p phone)</span></span> start() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v开机了\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p phone)</span></span> stop() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v关机了\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相机实例</span></span><br><span class="line"><span class="keyword">type</span> camera <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c camera)</span></span> start() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v开机了\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c camera)</span></span> stop() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v关机了\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑实例</span></span><br><span class="line"><span class="keyword">type</span> computer <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// startWork 电脑启动工作，里面的形参是u，类型是Usb接口类型，只有实现Usb接口类型里面的方法的对象才可以被传入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c computer)</span></span> startWork(u Usb) &#123;</span><br><span class="line">uobj, ok := u.(phone);</span><br><span class="line">fmt.Printf(<span class="string">&quot;变量%v type:%T\n&quot;</span>, uobj, uobj)</span><br><span class="line"><span class="keyword">if</span>  ok &#123;</span><br><span class="line">u.start()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">u.stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化手机</span></span><br><span class="line">p1 := phone&#123;name: <span class="string">&quot;华为手机&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化相机</span></span><br><span class="line">c1 := camera&#123;name: <span class="string">&quot;佳能相机&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化电脑</span></span><br><span class="line">cp := computer&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑使用手机</span></span><br><span class="line">cp.startWork(p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑使用相机</span></span><br><span class="line">cp.startWork(c1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中对于computer的startWork方法进行了修改，里面使用了类型断言，判断传进来的<code>u</code>类型是否为phone，如果是phone，执行start方法，不是则执行stop方法</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220808091430004.png" class="" title="image-20220808091430004"><h3 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h3><blockquote><p><strong>程序编译</strong>：</p><ul><li>程序在编译时，变量的值会被转换为内存地址，变量名不会被编译器写入到可执行部分。</li></ul><p><strong>反射</strong>：</p><ul><li>是指在程序运行期对程序本身进行访问和修改的能力。</li></ul><p><strong>反射的作用</strong>：</p><ul><li>在运行程序时，程序无法获取自身的信息。</li><li>支持反射的语言可以在程序编译期将变量的反射信息，如字段名称、类型信息、结构体信息等整合到可执行文件中，并给程序提供接口访问反射信息，这样就可以在程序运行期获取类型的反射信息，并且有能力修改它们</li></ul><p><code>GO</code>语言中使用<code>reflect</code>包来进行访问反射信息</p><ul><li>reflect包使用<code>reflect.TypeOf</code>获取对象的类型</li><li>reflect包使用<code>reflect.ValueOf</code>获取对象的值</li></ul></blockquote><h4 id="2-1-反射获取类型"><a href="#2-1-反射获取类型" class="headerlink" title="2.1 反射获取类型"></a>2.1 反射获取类型</h4><blockquote><p>Go语言中，使用<code>reflect.TypeOf()</code>函数可以获得任意值的<code>类型对象</code></p><ul><li>从而通过<code>类型对象</code>可以访问该值的<code>类型信息</code></li><li>TypeOf返回任意值的反射类型。</li><li>如果任意值的类型对象是一个nil，TypeOf返回nil。</li></ul><p>下面代码分析</p><ul><li>定义了一个reflectType方法，接收一个空接口类型的x，表示接收任意类型的变量<ul><li>方法里面调用了<code>reflect</code>反射包的<code>TypeOf(x)</code>方法，表示用来获取传入的x的类型</li></ul></li><li>main函数中定义了三个变量，类型分别是int&#x2F;string&#x2F;boolean<ul><li>执行结果的截图来看，正确的打印出来了变量的对应类型</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeOf方法源码：Typeof可以动态的返回任意值的类型</span></span><br><span class="line"><span class="comment">// TypeOf returns the reflection Type that represents the dynamic type of i.</span></span><br><span class="line"><span class="comment">// If i is a nil interface value, TypeOf returns nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Type &#123;</span><br><span class="line">eface := *(*emptyInterface)(unsafe.Pointer(&amp;i))</span><br><span class="line"><span class="keyword">return</span> toType(eface.typ)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">v := reflect.TypeOf(x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v type:%v\n&quot;</span>,x, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">34</span></span><br><span class="line">reflectType(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;sam&quot;</span></span><br><span class="line">reflectType(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line">reflectType(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220328223413135.png" class="" title="image-20220328223413135"><h4 id="2-2-反射中的类型和种类"><a href="#2-2-反射中的类型和种类" class="headerlink" title="2.2 反射中的类型和种类"></a>2.2 反射中的类型和种类</h4><blockquote><p>反射类型其实把类型划细分为两种，从<code>TypeOf</code>方法的返回值是<code>Type</code>可以看到，<code>Type</code>自身是一个接口类型</p><ul><li>一种是类型Type<ul><li>是指用<code>type</code>关键字创建的<code>自定义类型</code></li></ul></li><li>一种是种类Kind<ul><li>是指<code>底层类型</code>，比如指针，结构体等，表示一大类的类型</li></ul></li></ul></blockquote><h5 id="2-2-1-TypeOf返回的Type是接口类型"><a href="#2-2-1-TypeOf返回的Type是接口类型" class="headerlink" title="2.2.1 TypeOf返回的Type是接口类型"></a>2.2.1 TypeOf返回的Type是接口类型</h5><blockquote><p>Type接口与是TypeOf方法返回值的类型，里面有很多方法</p><p>Type接口的注释的中文翻译：</p><ul><li><code>Type</code>是<code>go type</code>的代表</li><li>不是所有的方法都适用于所有kinds的types。如果有限制条件的的话，会在每个方法的文档中注明。</li><li>在调用特定类型的方法之前，请使用Kind方法来找出类型的种类。</li><li>调用一个不适合该类型的方法会导致运行时的panic</li><li>类型值是可以比较的，比如用&#x3D;&#x3D;运算符，所以它们可以作为map类型的键使用，如果两个类型值代表相同的类型，它们就是相等的。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type is the representation of a Go type.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Not all methods apply to all kinds of types. Restrictions,</span></span><br><span class="line"><span class="comment">// if any, are noted in the documentation for each method.</span></span><br><span class="line"><span class="comment">// Use the Kind method to find out the kind of type before</span></span><br><span class="line"><span class="comment">// calling kind-specific methods. Calling a method</span></span><br><span class="line"><span class="comment">// inappropriate to the kind of type causes a run-time panic.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Type values are comparable, such as with the == operator,</span></span><br><span class="line"><span class="comment">// so they can be used as map keys.</span></span><br><span class="line"><span class="comment">// Two Type values are equal if they represent identical types.</span></span><br><span class="line"><span class="keyword">type</span> Type <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Methods applicable to all types.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Align returns the alignment in bytes of a value of</span></span><br><span class="line"><span class="comment">// this type when allocated in memory.</span></span><br><span class="line">Align() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldAlign returns the alignment in bytes of a value of</span></span><br><span class="line"><span class="comment">// this type when used as a field in a struct.</span></span><br><span class="line">FieldAlign() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Method returns the i&#x27;th method in the type&#x27;s method set.</span></span><br><span class="line"><span class="comment">// It panics if i is not in the range [0, NumMethod()).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For a non-interface type T or *T, the returned Method&#x27;s Type and Func</span></span><br><span class="line"><span class="comment">// fields describe a function whose first argument is the receiver,</span></span><br><span class="line"><span class="comment">// and only exported methods are accessible.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For an interface type, the returned Method&#x27;s Type field gives the</span></span><br><span class="line"><span class="comment">// method signature, without a receiver, and the Func field is nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Methods are sorted in lexicographic order.</span></span><br><span class="line">Method(<span class="type">int</span>) Method</span><br><span class="line"></span><br><span class="line"><span class="comment">// MethodByName returns the method with that name in the type&#x27;s</span></span><br><span class="line"><span class="comment">// method set and a boolean indicating if the method was found.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For a non-interface type T or *T, the returned Method&#x27;s Type and Func</span></span><br><span class="line"><span class="comment">// fields describe a function whose first argument is the receiver.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For an interface type, the returned Method&#x27;s Type field gives the</span></span><br><span class="line"><span class="comment">// method signature, without a receiver, and the Func field is nil.</span></span><br><span class="line">MethodByName(<span class="type">string</span>) (Method, <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NumMethod returns the number of methods accessible using Method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that NumMethod counts unexported methods only for interface types.</span></span><br><span class="line">NumMethod() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Name returns the type&#x27;s name within its package for a defined type.</span></span><br><span class="line"><span class="comment">// For other (non-defined) types it returns the empty string.</span></span><br><span class="line">Name() <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PkgPath returns a defined type&#x27;s package path, that is, the import path</span></span><br><span class="line"><span class="comment">// that uniquely identifies the package, such as &quot;encoding/base64&quot;.</span></span><br><span class="line"><span class="comment">// If the type was predeclared (string, error) or not defined (*T, struct&#123;&#125;,</span></span><br><span class="line"><span class="comment">// []int, or A where A is an alias for a non-defined type), the package path</span></span><br><span class="line"><span class="comment">// will be the empty string.</span></span><br><span class="line">PkgPath() <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the number of bytes needed to store</span></span><br><span class="line"><span class="comment">// a value of the given type; it is analogous to unsafe.Sizeof.</span></span><br><span class="line">Size() <span class="type">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String returns a string representation of the type.</span></span><br><span class="line"><span class="comment">// The string representation may use shortened package names</span></span><br><span class="line"><span class="comment">// (e.g., base64 instead of &quot;encoding/base64&quot;) and is not</span></span><br><span class="line"><span class="comment">// guaranteed to be unique among types. To test for type identity,</span></span><br><span class="line"><span class="comment">// compare the Types directly.</span></span><br><span class="line">String() <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Kind returns the specific kind of this type.</span></span><br><span class="line">Kind() Kind</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implements reports whether the type implements the interface type u.</span></span><br><span class="line">Implements(u Type) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AssignableTo reports whether a value of the type is assignable to type u.</span></span><br><span class="line">AssignableTo(u Type) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConvertibleTo reports whether a value of the type is convertible to type u.</span></span><br><span class="line"><span class="comment">// Even if ConvertibleTo returns true, the conversion may still panic.</span></span><br><span class="line"><span class="comment">// For example, a slice of type []T is convertible to *[N]T,</span></span><br><span class="line"><span class="comment">// but the conversion will panic if its length is less than N.</span></span><br><span class="line">ConvertibleTo(u Type) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Comparable reports whether values of this type are comparable.</span></span><br><span class="line"><span class="comment">// Even if Comparable returns true, the comparison may still panic.</span></span><br><span class="line"><span class="comment">// For example, values of interface type are comparable,</span></span><br><span class="line"><span class="comment">// but the comparison will panic if their dynamic type is not comparable.</span></span><br><span class="line">Comparable() <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods applicable only to some types, depending on Kind.</span></span><br><span class="line"><span class="comment">// The methods allowed for each kind are:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Int*, Uint*, Float*, Complex*: Bits</span></span><br><span class="line"><span class="comment">//Array: Elem, Len</span></span><br><span class="line"><span class="comment">//Chan: ChanDir, Elem</span></span><br><span class="line"><span class="comment">//Func: In, NumIn, Out, NumOut, IsVariadic.</span></span><br><span class="line"><span class="comment">//Map: Key, Elem</span></span><br><span class="line"><span class="comment">//Ptr: Elem</span></span><br><span class="line"><span class="comment">//Slice: Elem</span></span><br><span class="line"><span class="comment">//Struct: Field, FieldByIndex, FieldByName, FieldByNameFunc, NumField</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bits returns the size of the type in bits.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not one of the</span></span><br><span class="line"><span class="comment">// sized or unsized Int, Uint, Float, or Complex kinds.</span></span><br><span class="line">Bits() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ChanDir returns a channel type&#x27;s direction.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Chan.</span></span><br><span class="line">ChanDir() ChanDir</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsVariadic reports whether a function type&#x27;s final input parameter</span></span><br><span class="line"><span class="comment">// is a &quot;...&quot; parameter. If so, t.In(t.NumIn() - 1) returns the parameter&#x27;s</span></span><br><span class="line"><span class="comment">// implicit actual type []T.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For concreteness, if t represents func(x int, y ... float64), then</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//t.NumIn() == 2</span></span><br><span class="line"><span class="comment">//t.In(0) is the reflect.Type for &quot;int&quot;</span></span><br><span class="line"><span class="comment">//t.In(1) is the reflect.Type for &quot;[]float64&quot;</span></span><br><span class="line"><span class="comment">//t.IsVariadic() == true</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// IsVariadic panics if the type&#x27;s Kind is not Func.</span></span><br><span class="line">IsVariadic() <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Elem returns a type&#x27;s element type.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Array, Chan, Map, Ptr, or Slice.</span></span><br><span class="line">Elem() Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// Field returns a struct type&#x27;s i&#x27;th field.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Struct.</span></span><br><span class="line"><span class="comment">// It panics if i is not in the range [0, NumField()).</span></span><br><span class="line">Field(i <span class="type">int</span>) StructField</span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldByIndex returns the nested field corresponding</span></span><br><span class="line"><span class="comment">// to the index sequence. It is equivalent to calling Field</span></span><br><span class="line"><span class="comment">// successively for each index i.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Struct.</span></span><br><span class="line">FieldByIndex(index []<span class="type">int</span>) StructField</span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldByName returns the struct field with the given name</span></span><br><span class="line"><span class="comment">// and a boolean indicating if the field was found.</span></span><br><span class="line">FieldByName(name <span class="type">string</span>) (StructField, <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// FieldByNameFunc returns the struct field with a name</span></span><br><span class="line"><span class="comment">// that satisfies the match function and a boolean indicating if</span></span><br><span class="line"><span class="comment">// the field was found.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// FieldByNameFunc considers the fields in the struct itself</span></span><br><span class="line"><span class="comment">// and then the fields in any embedded structs, in breadth first order,</span></span><br><span class="line"><span class="comment">// stopping at the shallowest nesting depth containing one or more</span></span><br><span class="line"><span class="comment">// fields satisfying the match function. If multiple fields at that depth</span></span><br><span class="line"><span class="comment">// satisfy the match function, they cancel each other</span></span><br><span class="line"><span class="comment">// and FieldByNameFunc returns no match.</span></span><br><span class="line"><span class="comment">// This behavior mirrors Go&#x27;s handling of name lookup in</span></span><br><span class="line"><span class="comment">// structs containing embedded fields.</span></span><br><span class="line">FieldByNameFunc(match <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>)</span></span> <span class="type">bool</span>) (StructField, <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In returns the type of a function type&#x27;s i&#x27;th input parameter.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Func.</span></span><br><span class="line"><span class="comment">// It panics if i is not in the range [0, NumIn()).</span></span><br><span class="line">In(i <span class="type">int</span>) Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key returns a map type&#x27;s key type.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Map.</span></span><br><span class="line">Key() Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len returns an array type&#x27;s length.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Array.</span></span><br><span class="line">Len() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NumField returns a struct type&#x27;s field count.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Struct.</span></span><br><span class="line">NumField() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NumIn returns a function type&#x27;s input parameter count.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Func.</span></span><br><span class="line">NumIn() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NumOut returns a function type&#x27;s output parameter count.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Func.</span></span><br><span class="line">NumOut() <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Out returns the type of a function type&#x27;s i&#x27;th output parameter.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Func.</span></span><br><span class="line"><span class="comment">// It panics if i is not in the range [0, NumOut()).</span></span><br><span class="line">Out(i <span class="type">int</span>) Type</span><br><span class="line"></span><br><span class="line">common() *rtype</span><br><span class="line">uncommon() *uncommonType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-2-Type接口的Name和Kind方法"><a href="#2-2-2-Type接口的Name和Kind方法" class="headerlink" title="2.2.2 Type接口的Name和Kind方法"></a>2.2.2 Type接口的Name和Kind方法</h5><blockquote><ul><li>Name方法<ul><li>对于已定义的类型，Name返回该类型在其包中的名称</li><li>对于其他（未定义的）类型，它返回空字符串</li><li>Name方法自身返回值是<code>string</code>类型</li></ul></li><li>Kind方法<ul><li>Kind返回该类型的具体种类</li><li>Kind方法自身返回值<code>Kind</code>类型，</li><li><code>Kind</code>类型的注释解释：<ul><li>Kind代表一个类型所代表的特定种类。</li><li>零的Kind不是一个有效的类型。</li></ul></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name方法源码</span></span><br><span class="line"><span class="comment">// Name returns the type&#x27;s name within its package for a defined type.</span></span><br><span class="line"><span class="comment">// For other (non-defined) types it returns the empty string.</span></span><br><span class="line">Name() <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Kind方法源码</span></span><br><span class="line"><span class="comment">// Kind returns the specific kind of this type.</span></span><br><span class="line">Kind() Kind</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kind类型源码</span></span><br><span class="line"><span class="comment">// A Kind represents the specific kind of type that a Type represents.</span></span><br><span class="line"><span class="comment">// The zero Kind is not a valid kind.</span></span><br><span class="line"><span class="keyword">type</span> Kind <span class="type">uint</span></span><br></pre></td></tr></table></figure><blockquote><p>下面是示例代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">v := reflect.TypeOf(x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%v &lt;==&gt; kind:%v\n&quot;</span>, v.Name(), v.Kind())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">34</span></span><br><span class="line">reflectType(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;sam&quot;</span></span><br><span class="line">reflectType(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line">reflectType(c)</span><br><span class="line"></span><br><span class="line">d1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">d1 = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">reflectType(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> e <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">e1 := e&#123;</span><br><span class="line">name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">reflectType(e1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从下面的运行结果看出， 结构体的类型是e类型，种类是struct结构体</p><p>Go语言的反射中像数组、切片、Map、指针等类型的变量，它们的<code>.Name()</code>都是返回<code>空</code>。</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220328224924305.png" class="" title="image-20220328224924305"><h4 id="2-3-reflect-ValueOf"><a href="#2-3-reflect-ValueOf" class="headerlink" title="2.3 reflect.ValueOf()"></a>2.3 reflect.ValueOf()</h4><blockquote><p><code>reflect.ValueOf()</code>返回的是<code>reflect.Value</code>类型，其中包含了原始值的值信息</p><p><code>reflect.Value</code>与原始值之间可以互相转换。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Printf(<span class="string">&quot;value:%+v &lt;==&gt; kind:%v\n&quot;</span>, v, v.Kind())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">34</span></span><br><span class="line">reflectType(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;sam&quot;</span></span><br><span class="line">reflectType(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line">reflectType(c)</span><br><span class="line"></span><br><span class="line">d1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">d1 = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">reflectType(d1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> e <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">e1 := e&#123;</span><br><span class="line">name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">reflectType(e1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220328225337645.png" class="" title="image-20220328225337645"><h4 id="2-4-reflect-TypeOf"><a href="#2-4-reflect-TypeOf" class="headerlink" title="2.4 reflect.TypeOf()"></a>2.4 reflect.TypeOf()</h4><blockquote><p>任意对象可以通过<code>reflect.TypeOf()</code>获得反射对象信息</p><p>如果传入的的类型是结构体，可以通过反射值对象<code>reflect.TypeOf</code>的两个方法来获取结构体信息</p><ul><li><code>NumField()</code>方法：返回结构体成员字段数量<ul><li>所以可以用来统计一个结构体里有多少个字段</li></ul></li><li><code>Field()</code>方法：根据索引，返回索引对应的结构体字段的信息<ul><li>可以获取一个结构体的一个字段的具体详细信息，比如Name，tag， index等</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># Field() 方法源代码，根据索引，返回索引对应的结构体字段的信息，返回值是StructField类型</span><br><span class="line"><span class="comment">// Field returns the i&#x27;th struct field.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *structType)</span></span> Field(i <span class="type">int</span>) (f StructField) &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span> || i &gt;= <span class="built_in">len</span>(t.fields) &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;reflect: Field index out of bounds&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">p := &amp;t.fields[i]</span><br><span class="line">f.Type = toType(p.typ)</span><br><span class="line">f.Name = p.name.name()</span><br><span class="line">f.Anonymous = p.embedded()</span><br><span class="line"><span class="keyword">if</span> !p.name.isExported() &#123;</span><br><span class="line">f.PkgPath = t.pkgPath.name()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> tag := p.name.tag(); tag != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">f.Tag = StructTag(tag)</span><br><span class="line">&#125;</span><br><span class="line">f.Offset = p.offset()</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOTE(rsc): This is the only allocation in the interface</span></span><br><span class="line"><span class="comment">// presented by a reflect.Type. It would be nice to avoid,</span></span><br><span class="line"><span class="comment">// at least in the common cases, but we need to make sure</span></span><br><span class="line"><span class="comment">// that misbehaving clients of reflect cannot affect other</span></span><br><span class="line"><span class="comment">// uses of reflect. One possibility is CL 5371098, but we</span></span><br><span class="line"><span class="comment">// postponed that ugliness until there is a demonstrated</span></span><br><span class="line"><span class="comment">// need for the performance. This is issue 2320.</span></span><br><span class="line">f.Index = []<span class="type">int</span>&#123;i&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StructField是一个结构体，可以看到这个结构体里的源代码的字段</span></span><br><span class="line"><span class="comment">// A StructField describes a single field in a struct.</span></span><br><span class="line"><span class="keyword">type</span> StructField <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Name is the field name.</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PkgPath is the package path that qualifies a lower case (unexported)</span></span><br><span class="line"><span class="comment">// field name. It is empty for upper case (exported) field names.</span></span><br><span class="line"><span class="comment">// See https://golang.org/ref/spec#Uniqueness_of_identifiers</span></span><br><span class="line">PkgPath <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Type      Type      <span class="comment">// field type 字段类型</span></span><br><span class="line">Tag       StructTag <span class="comment">// field tag string 字段标签</span></span><br><span class="line">Offset    <span class="type">uintptr</span>   <span class="comment">// offset within struct, in bytes 字段在结构体中的字节偏移量</span></span><br><span class="line">Index     []<span class="type">int</span>     <span class="comment">// index sequence for Type.FieldByIndex 用于Type.FieldByIndex时的索引切片</span></span><br><span class="line">Anonymous <span class="type">bool</span>      <span class="comment">// is an embedded field 是否匿名字段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NumField() 是接口方法</span></span><br><span class="line"><span class="comment">// NumField returns a struct type&#x27;s field count.</span></span><br><span class="line"><span class="comment">// It panics if the type&#x27;s Kind is not Struct.</span></span><br><span class="line">NumField() <span class="type">int</span></span><br></pre></td></tr></table></figure><h4 id="2-5-结构体反射示例"><a href="#2-5-结构体反射示例" class="headerlink" title="2.5 结构体反射示例"></a>2.5 结构体反射示例</h4><blockquote><p>for循环遍历结构体所有字段信息，返回结构体成员字段数量</p><ul><li><p>for循环会获取结构体所有字段的信息</p></li><li><p>当然也可以根据字段名获取指定字段信息</p></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`liu:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`liu:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := person&#123;</span><br><span class="line">Name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">Age: <span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先生成一个reflect的Type类型，才可以调用Field和NumField方法</span></span><br><span class="line">t := reflect.TypeOf(p1)</span><br><span class="line"><span class="comment">// t type:person  t.kind:struct</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;t type:%v \t t.kind:%v\n\n&quot;</span>, t.Name(), t.Kind())</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环遍历结构体所有字段信息，返回结构体成员字段数量</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; t.NumField(); i++&#123;</span><br><span class="line"><span class="comment">// Field方法传入索引，返回索引对应的结构体字段的信息，比如Name， Type， Tag等</span></span><br><span class="line">field := t.Field(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;field:%v\n&quot;</span>, field)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段的name就是结构体定义的首字母字段名</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%v\n&quot;</span>, field.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段的Type就是结构体定义的字段的类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%v\n&quot;</span>, field.Type)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的Tag是我们自己在结构体里定义的liu，使用Get通过tag名获取tag指向的值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;tag:%v\n\n&quot;</span>, field.Tag.Get(<span class="string">&quot;liu&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220328232318252.png" class="" title="image-20220328232318252"><h4 id="2-6-结构体反射tag"><a href="#2-6-结构体反射tag" class="headerlink" title="2.6 结构体反射tag"></a>2.6 结构体反射<code>tag</code></h4><blockquote><p><a href="https://github.com/golang/go/wiki/Well-known-struct-tags">https://github.com/golang/go/wiki/Well-known-struct-tags</a></p><p>通过字段名获取指定结构体字段信息，可以根据字段名，单独获取字段信息，更灵活一些</p><p>使用到了反射值对象（<code>reflect.Type</code>）的<code>FieldByName</code>方法</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FieldByName源码也是接口方法，需要统一实现，传入了字段名，然后返回了结构体字段类型和布尔类型，结构体字段类型就和上面的for循环一样，可以获取结构字段的详细信息了，比如name，type，tag等</span></span><br><span class="line"><span class="comment">// FieldByName returns the struct field with the given name</span></span><br><span class="line"><span class="comment">// and a boolean indicating if the field was found.</span></span><br><span class="line">FieldByName(name <span class="type">string</span>) (StructField, <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`liu:&quot;name&quot;`</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`liu:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := person&#123;</span><br><span class="line">Name: <span class="string">&quot;sam&quot;</span>,</span><br><span class="line">Age: <span class="number">19</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先生成一个reflect的Type类型，才可以调用Field和NumField方法</span></span><br><span class="line">t := reflect.TypeOf(p1)</span><br><span class="line"><span class="comment">// t type:person  t.kind:struct</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;t type:%v \t t.kind:%v\n\n&quot;</span>, t.Name(), t.Kind())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字段名，单独获取字段信息, 更灵活</span></span><br><span class="line">field, ok := t.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fieldObj:%v  ok:%v\n&quot;</span>, field, ok)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// 字段的name就是结构体定义的首字母字段名</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;name:%v\n&quot;</span>, field.Name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段的Type就是结构体定义的字段的类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%v\n&quot;</span>, field.Type)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的Tag是我们自己在结构体里定义的liu，使用Get通过tag名获取真正的tag的值</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;tag:%v\n\n&quot;</span>, field.Tag.Get(<span class="string">&quot;liu&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、包"><a href="#十一、包" class="headerlink" title="十一、包"></a>十一、包</h2><blockquote><p>Go语言中支持模块化的开发理念，在Go语言中使用<code>包（package）</code>来支持代码模块化和代码复用。</p><ul><li><p>一个包是由一个或多个Go源码文件（.go结尾的文件）组成，是一种高级的代码复用方案</p></li><li><p>Go语言为我们提供了很多内置包，如<code>fmt</code>、<code>os</code>、<code>io</code>等。</p></li></ul></blockquote><h3 id="1、包的组成"><a href="#1、包的组成" class="headerlink" title="1、包的组成"></a>1、包的组成</h3><blockquote><p>包类型大致可以分为<code>自定义包</code>和<code>main</code>两类</p><ul><li><code>自定义包</code>：表示这个包是自定义的包，包含一单独的功能，比如注册，登录等</li><li><code>main</code>：表示是一个可以执行，可以编译成<code>可执行文件</code>的包</li></ul></blockquote><h4 id="1-2-自定义包"><a href="#1-2-自定义包" class="headerlink" title="1.2 自定义包"></a>1.2 自定义包</h4><blockquote><p>可以根据自己的需要创建自定义包</p><ul><li>一个包可以简单理解为一个存放<code>*.go</code>文件的文件夹<ul><li>该文件夹下面的所有<code>.go</code>文件都要在非注释的第一行添加如下声明，声明该文件归属的包</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> packagename</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其中：</span></span><br><span class="line"><span class="comment">- package：声明包的关键字</span></span><br><span class="line"><span class="comment">- packagename：包名，可以不与文件夹的名称一致，不能包含 `-` 符号，最好与其实现的功能相对应</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="1-2-包可见性"><a href="#1-2-包可见性" class="headerlink" title="1.2 包可见性"></a>1.2 包可见性</h4><blockquote><p>在同一个包内部声明的标识符都位于同一个命名空间下</p><ul><li>所以当有大于1个<code>*.go</code>文件同属于一个包时，这个包里的<code>*.go</code>文件可以互相访问里面的函数、变量、方法等，就相当于是在同一个内存地址里面一样，直接引用就可以</li></ul></blockquote><blockquote><p>在<code>不同的包</code>内部声明的标识符就属于<code>不同的命名空间</code></p><ul><li><p>如果想让一个包中的标识符（如变量、常量、类型、函数等）能被<code>外部的包</code>使用，那么标识符必须是对外可见的（public）</p></li><li><p>在Go语言中是通过<code>标识符的首字母大/小写来控制标识符</code>的<code>对外可见（public）/不可见（private）</code>的</p><ul><li>在一个包内部只有<code>首字母大写的标识符</code>才是<code>对外可见</code>的。</li></ul></li><li><p>想要在包的外部使用包内部的标识符就需要添加包名前缀</p><ul><li>例如<code>fmt.Println(&quot;Hi go~&quot;)</code>，就是指调用<code>fmt</code>包中的<code>Println</code>函数</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个名为demo_test的包，在其中定义了若干标识符。在另外一个包中并不是所有的标识符都能通过demo_test.前缀访问到，因为只有那些首字母是大写的标识符才是对外可见的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> demo_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包级别标识符的可见性</span></span><br><span class="line"><span class="comment">// num 定义一个全局整型变量</span></span><br><span class="line"><span class="comment">// 首字母小写，对外不可见(只能在当前包内使用)</span></span><br><span class="line"><span class="keyword">var</span> il = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mode 定义一个常量</span></span><br><span class="line"><span class="comment">// 首字母大写，对外可见(可在其它包中使用)</span></span><br><span class="line"><span class="keyword">const</span> Mode = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// person 定义一个代表人的结构体</span></span><br><span class="line"><span class="comment">// 首字母小写，对外不可见(只能在当前包内使用)</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写，对外可见(可在其它包中使用)</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span> <span class="comment">// 可在包外访问的方法</span></span><br><span class="line">class <span class="type">string</span> <span class="comment">// 仅限包内访问的字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add 返回两个整数和的函数</span></span><br><span class="line"><span class="comment">// 首字母大写，对外可见(可在其它包中使用)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sayHi 打招呼的函数</span></span><br><span class="line"><span class="comment">// 首字母小写，对外不可见(只能在当前包内使用)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;七米&quot;</span> <span class="comment">// 函数局部变量，只能在当前函数内使用</span></span><br><span class="line">fmt.Println(myName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-自定义包注意事项"><a href="#1-3-自定义包注意事项" class="headerlink" title="1.3 自定义包注意事项"></a>1.3 自定义包注意事项</h4><blockquote><p>参考：</p><p><a href="https://studygolang.com/articles/7165">https://studygolang.com/articles/7165</a></p><p><a href="http://c.biancheng.net/view/5394.html">http://c.biancheng.net/view/5394.html</a></p></blockquote><blockquote><p>注意:</p><ul><li>一个文件夹下面直接包含的文件只能归属一个包，同一个包的文件不能存在于多个文件夹下<ul><li>也就是说一个文件夹只能有一个包，同一个包的文件不能分散与多个文件夹中</li></ul></li><li>包名一般是小写的，使用一个简短且有意义的名称</li><li>自定义包名常规都和包含<code>*.go</code>文件的文件夹名字一致<ul><li>也可以不和文件夹的名字一样，可以自己起一个包名字，然后所有<code>*.go</code>文件都声明为该包名<ul><li>文件夹名可以和该包名不一致，但<code>*.go</code>文件中使用的包名必须要和自定义包名一致</li></ul></li><li>包名不能包含<code>-</code>符号，需要符合标识符定义规则</li></ul></li><li>包一般使用域名作为目录名称，这样能保证包名的唯一性<ul><li>比如 GitHub 项目的包一般会放到<code>GOPATH/src/github.com/userName/projectName </code>目录下</li></ul></li></ul></blockquote><h4 id="1-4-包禁止循环引用"><a href="#1-4-包禁止循环引用" class="headerlink" title="1.4 包禁止循环引用"></a>1.4 包禁止循环引用</h4><blockquote><p><code>go</code>语言中禁止包的循环导入</p><p><code>jim</code>包和<code>kop</code>包互相引用，最后<code>main</code>包导入<code>jim</code>包、<code>kop</code>包后运行提示<code>import cycle not allowed</code></p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220215132419145.png" class="" title="image-20220215132419145"><h4 id="1-5-main包"><a href="#1-5-main包" class="headerlink" title="1.5 main包"></a>1.5 main包</h4><blockquote><p>包名为<code>main</code>的包是应用程序的入口包，这种包编译后会得到一个可执行文件</p><p>而编译不包含<code>main</code>包的源代码则不会得到可执行文件</p></blockquote><h4 id="1-6-包的导入"><a href="#1-6-包的导入" class="headerlink" title="1.6 包的导入"></a>1.6 包的导入</h4><blockquote><p>要在代码中引用其他包的内容，需要使用<code>import</code>关键字导入使用的包</p><p>注意事项：</p><ul><li><code>import</code>导入语句通常放在源码文件开头包声明语句的下面</li><li>导入的包名需要使用双引号包裹起来</li><li>导入的包名是从<code>GOPATH/src/ </code>后开始计算的，使用<code>/ </code>进行路径分隔</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体语法如下：</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;包的路径&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-6-1-包导入案例讲解"><a href="#1-6-1-包导入案例讲解" class="headerlink" title="1.6.1 包导入案例讲解"></a>1.6.1 包导入案例讲解</h5><blockquote><p>导入的包名是从<code>GOPATH/src/ </code>后开始计算的</p><p>那么当<code>day09</code>里的<code>import_demo.go</code>需要导入下图中的<code>day08</code>包里有两个<code>*.go</code>文件时，在<code>import_demo.go</code>中写的导入路径就需要从<code>src</code>下的<code>code.zinly.com</code>开始</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214174513405.png" class="" title="image-20220214174513405"><blockquote><p>day08文件夹中的<code>cal_data.go</code>代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// day08里的cal_data.go文件</span></span><br><span class="line"><span class="keyword">package</span> jim</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddVal</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母小写，表示别的包不可以导入使用</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写，表示别的包可以导入使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> person &#123;</span><br><span class="line"><span class="keyword">return</span> person &#123;</span><br><span class="line">name: name,</span><br><span class="line"> age: age,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写，表示别的包可以导入使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> ShowInfo() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name：%v\t age:%v\n&quot;</span>, p.name, p.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>day08文件夹中的<code>hibi.go</code>代码</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// day08里的hibi.go</span></span><br><span class="line"><span class="keyword">package</span> jim</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首字母大写，表示别的包可以导入使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowAge</span><span class="params">()</span></span> &#123;</span><br><span class="line">name := <span class="string">&quot;hibi&quot;</span></span><br><span class="line">f.Printf(<span class="string">&quot;name=%v\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>day09文件夹中的<code>import_demo.go</code>代码</p><p>这个导入代码里导入day08里的所有go文件，导入路径需要从src下的目录开始写，jimx是导入路径的别名，建议与导入的包名一致，这样也方便查找</p><ul><li>导入路径没有别名，那么在下面代码引用时，用已导入的包的包名来引用，也就是导入的代码里的包名来引用所有的方法、函数、变量等</li><li>导入路径有别名，那么在下面代码引用时，用声明的包别名来引用所有的方法、函数、变量等</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// day09文件夹中的`import_demo.go`文件</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// 导入day08里的所有go文件，需要从src下的目录开始写，jimx是导入的别名，建议与导入的包名一致，这样也方便查找</span></span><br><span class="line"> jimx <span class="string">&quot;code.zinly.com/goLearning/day08&quot;</span>  </span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret := jimx.AddVal(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;ret=%v\n&quot;</span>, ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化结构体</span></span><br><span class="line">p1 := jimx.NewPerson(<span class="string">&quot;sam&quot;</span>, <span class="number">12</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p1=%v\n&quot;</span>, p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用实例化的方法，首字母也必须大写</span></span><br><span class="line">p1.ShowInfo()</span><br><span class="line"></span><br><span class="line">jimx.ShowAge()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面代码可以看出，</p><ul><li><p><code>day09</code>文件夹导入了<code>day08</code>这个包，并且<code>day08</code>这个文件夹里所有<code>*.go</code>文件声明的包名没有和<code>day08</code>这个文件名字<code>day08</code>一样，而是叫<code>jim</code>，这里也就可以看出<code>包名</code>可以自定义</p></li><li><p><code>day08</code>里的所有<code>*.go</code>文件只有首字母大写的方法、变量等标识符才可以被<code>day09</code>里引用</p></li><li><p><code>day08</code>里的所有<code>*.go</code>文件的包名都必须一致，否则就会报错，从下图可以看出：</p><ul><li>day08文件中当<code>cal_data.go</code>和<code>bal_data_bak.go</code>声明为<code>jims</code>包</li><li>day08文件中当<code>hibi.go</code>声明为<code>jim</code>包</li><li>在<code>day09</code>的<code>import_demo.go</code>导入后执行，报错提示了在<code>day08</code>文件中<ul><li><code>found packages jims (bal_data_bak.go) and jim (hibi.go)</code>表示发现了2个包在<code>bal_data_bak.go</code>和<code>hibi.go</code>文件中</li><li>而且在<code>import_demo.go</code>即使将调用<code>Him()</code>写到很下面，仍然会优先检测<code>bal_data_bak.go</code>文件，而不是<code>cal_data.go</code>文件，说明导入时，是按目标包的文件名字母的顺序进行导入的</li></ul></li></ul></li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214182104927.png" class="" title="image-20220214182104927"><h4 id="1-7-匿名导包"><a href="#1-7-匿名导包" class="headerlink" title="1.7 匿名导包"></a>1.7 匿名导包</h4><blockquote><p>如果只希望导入包，而不使用包内部的数据，可以使用匿名导入包</p><p>后面学习数据库时才会用到，表示只会执行包的<code>init</code>函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名导包，在导入包的路径前面加一个下划线即可</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_  <span class="string">&quot;包的路径&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1-8-init函数"><a href="#1-8-init函数" class="headerlink" title="1.8 init函数"></a>1.8 init函数</h4><blockquote><p><code>init函数</code>是包的初始化函数</p><p>init函数的特点：</p><ul><li>init函数的定义没有入参也没有出参</li><li>一个源文件可以有<code>任意个</code>init函数</li><li>是在程序运行时自动被调用执行，不能在代码中主动调用它</li><li>当程序启动的时候，init函数会按照它们<code>声明的顺序自动执行</code></li><li>一个包的初始化过程是按照代码中引入的顺序来进行的，所有在该包中声明的<code>init</code>函数都将被串行调用并且仅调用执行一次<ul><li>例子：在gin项目中，我们通常使用一个main.go启动我们的服务，但往往我们不止一个main.go文件，还会有其他包、其它*.go文件，最终都会通过导入或封装到main.go中来统一启动，如果其他*.go文件中有init函数，那init函数一定会在main.go启动时被执行，如果其它文件的init函数中有结构体的初始化、读取配置文件，那就会出无法读取的情况，因为init函数执行肯定是在优先于读取配置文件的函数的，这一点就特别注意</li></ul></li><li>每一个包初始化的时候都是先执行依赖的包中声明的<code>init</code>函数再执行当前包中声明的<code>init</code>函数，确保在程序的<code>main</code>函数开始执行时所有的依赖包都已初始化完成</li></ul></blockquote><blockquote><p>参考：<a href="https://www.bilibili.com/read/cv12167787/">https://www.bilibili.com/read/cv12167787/</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214224358662.png" class="" title="image-20220214224358662"><h5 id="1-8-1-导包时init函数执行顺序"><a href="#1-8-1-导包时init函数执行顺序" class="headerlink" title="1.8.1 导包时init函数执行顺序"></a>1.8.1 导包时init函数执行顺序</h5><blockquote><p>从下图可以看出init函数导入包时的顺序</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214231144093.png" class="" title="image-20220214231144093"><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220214232204476.png" class="" title="image-20220214232204476"><h4 id="1-9-包的运行注意事项"><a href="#1-9-包的运行注意事项" class="headerlink" title="1.9 包的运行注意事项"></a>1.9 包的运行注意事项</h4><blockquote><p>当一个main包里有多个<code>*.go</code>文件时，而且文件之间有互相的依赖引用，当运行时，不能运行单独的文件</p><ul><li>单独运行一个<code>*.go</code>文件，因为引用的函数、变量在内存中并没有，所以会提示<code>undefined</code>的错误</li><li>所以需要以包的形式运行，也就是引导了哪些文件，<code>go run </code>时就跟上所有的<code>*.go</code>文件，这样才可以找到对应引用的函数、变量</li></ul></blockquote><h3 id="2、go包管理"><a href="#2、go包管理" class="headerlink" title="2、go包管理"></a>2、go包管理</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/330962571">https://zhuanlan.zhihu.com/p/330962571</a></p><p><a href="https://www.cnblogs.com/wongbingming/p/12941021.html">https://www.cnblogs.com/wongbingming/p/12941021.html</a></p><p><a href="https://golang.google.cn/doc/tutorial/create-module">https://golang.google.cn/doc/tutorial/create-module</a></p><p><a href="https://golang.google.cn/doc/modules/managing-dependencies#naming_module">https://golang.google.cn/doc/modules/managing-dependencies#naming_module</a></p><p><a href="https://golang.google.cn/doc/tutorial/getting-started">https://golang.google.cn/doc/tutorial/getting-started</a></p><p><a href="https://golang.google.cn/doc/modules/gomod-ref">https://golang.google.cn/doc/modules/gomod-ref</a></p><p><a href="https://www.jianshu.com/p/04dd0d386df2">https://www.jianshu.com/p/04dd0d386df2</a></p><p><a href="https://www.cnblogs.com/wongbingming/p/12941021.html">https://www.cnblogs.com/wongbingming/p/12941021.html</a></p><p><a href="https://blog.csdn.net/u011069013/article/details/110114319">https://blog.csdn.net/u011069013/article/details/110114319</a></p></blockquote><h4 id="2-1-go-module历史"><a href="#2-1-go-module历史" class="headerlink" title="2.1 go module历史"></a>2.1 go module历史</h4><blockquote><ul><li>在go1.11版本之前，使用自定义的包，需要将项目放到gopath目录下</li><li>go1.1之后的版本则不用手动配置<ul><li>使用<code>go mod</code>管理项目依赖</li><li>也不需要将项目放到gopath目录下</li><li>go1.13+以后可以彻底不需要gopath</li></ul></li></ul></blockquote><h4 id="2-2-go-module使用"><a href="#2-2-go-module使用" class="headerlink" title="2.2 go module使用"></a>2.2 go module使用</h4><h5 id="2-2-1-go-mod初始化项目"><a href="#2-2-1-go-mod初始化项目" class="headerlink" title="2.2.1 go mod初始化项目"></a>2.2.1 go mod初始化项目</h5><blockquote><p>在开发项目时，可以使用<code>go mod</code>命令生成一个<code>go.mod</code>文件管理项目的依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目目录下执行下面命令</span></span><br><span class="line">go mod init example.com/studygo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述命令会在项目目录下生成一个go.mod文件来管理项目依赖</span></span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220807230007597.png" class="" title="image-20220807230007597"><h5 id="2-2-2-调用本地包"><a href="#2-2-2-调用本地包" class="headerlink" title="2.2.2 调用本地包"></a>2.2.2 调用本地包</h5><blockquote><p>在studygo项目中新建目录calc包，calc里面放了两个公共函数，<code>Add</code>和<code>Sub</code></p><p>在studygo中新建main.go文件，调用calc中的Add和Sub函数，导入时需要从<code>go.mod</code>中定义的<code>module</code>名开始写，导入以后，就可以本地包的文件夹名点的方式来调用本地包里的方法、结构体、常量等</p></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220807230934626.png" class="" title="image-20220807230934626"><h5 id="2-2-3-go-mod常用命令"><a href="#2-2-3-go-mod常用命令" class="headerlink" title="2.2.3 go mod常用命令"></a>2.2.3 go mod常用命令</h5><blockquote><p>下面是go mod的命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">download    download modules to local cache -- 下载依赖的module到本地的gopath的pkg对应包里面</span><br><span class="line">edit        edit go.mod from tools or scripts -- 编辑go.mod文件</span><br><span class="line">graph       print module requirement graph -- 打印模块依赖图，前提是调用了第三方包</span><br><span class="line">init        initialize new module in current directory -- 创建一个新的module，创建go.mod文件</span><br><span class="line">tidy        add missing and remove unused modules -- 增加丢失的module，去掉未使用的module</span><br><span class="line">vendor      make vendored copy of dependencies -- 将依赖复制到vendor下</span><br><span class="line">verify      verify dependencies have expected content -- 检查依赖，检查下载的第三方库有无本地修改，有修改返回非0，否则会验证成功</span><br><span class="line">why         explain why packages or modules are needed -- 解释为什么需要依赖</span><br></pre></td></tr></table></figure><h5 id="2-2-4-调用第三方包"><a href="#2-2-4-调用第三方包" class="headerlink" title="2.2.4 调用第三方包"></a>2.2.4 调用第三方包</h5><blockquote><p>调用第三方包需要两步</p><ul><li>第一步：先写调用的代码</li><li>第二步：go mod tidy增加第三方包</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220807233216662.png" class="" title="image-20220807233216662"><h4 id="2-3-go-mod文件"><a href="#2-3-go-mod文件" class="headerlink" title="2.3 go.mod文件"></a>2.3 go.mod文件</h4><blockquote><p><a href="https://juejin.cn/post/6844903954879348750">https://juejin.cn/post/6844903954879348750</a></p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module example.com/foobar</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.13</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">    example.com/apple v0<span class="number">.1</span><span class="number">.2</span></span><br><span class="line">    example.com/banana v1<span class="number">.2</span><span class="number">.3</span></span><br><span class="line">    example.com/banana/v2 v2<span class="number">.3</span><span class="number">.4</span></span><br><span class="line">    example.com/pineapple v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20190924185754</span><span class="number">-1</span>b0db40df49a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">exclude example.com/banana v1<span class="number">.2</span><span class="number">.4</span></span><br><span class="line">replace example.com/apple v0<span class="number">.1</span><span class="number">.2</span> =&gt; example.com/rda v0<span class="number">.1</span><span class="number">.0</span> </span><br><span class="line">replace example.com/banana =&gt; example.com/hugebanana</span><br></pre></td></tr></table></figure><blockquote><p>go.mod 是启用了 Go moduels 的项目所必须的最重要的文件，它描述了当前项目（也就是当前模块）的元信息，每一行都以一个动词开头，目前有以下 5 个动词:</p><ul><li>module：用于定义当前项目的模块路径。</li><li>go：用于设置预期的 Go 版本。</li><li>require：用于设置一个特定的模块版本。</li><li>exclude：用于从使用中排除一个特定的模块版本。</li><li>replace：用于将一个模块版本替换为另外一个模块版本。</li></ul></blockquote><h4 id="2-4-go-sum文件"><a href="#2-4-go-sum文件" class="headerlink" title="2.4 go.sum文件"></a>2.4 go.sum文件</h4><blockquote><p>go.sum 是类似于比如 dep 的 Gopkg.lock 的一类文件，它详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了哪些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。</p></blockquote><h4 id="2-5-GO111MODULE"><a href="#2-5-GO111MODULE" class="headerlink" title="2.5 GO111MODULE"></a>2.5 GO111MODULE</h4><blockquote><p><code>GO111MODULE</code>环境变量主要是 Go modules 的开关，主要有以下参数：</p><ul><li>auto：只在项目包含了 go.mod 文件时启用 Go modules，在 Go 1.13 中仍然是默认值，详见 ：golang.org&#x2F;issue&#x2F;31857。</li><li>on：无脑启用 Go modules，推荐设置，未来版本中的默认值，让 GOPATH 从此成为历史。</li><li>off：禁用 Go modules。</li></ul></blockquote><h4 id="2-6-go-get和go-install命令"><a href="#2-6-go-get和go-install命令" class="headerlink" title="2.6 go get和go install命令"></a>2.6 go get和go install命令</h4><blockquote><ul><li>go get命令<ul><li>Get将其命令行参数解析为特定模块版本的软件包。</li><li>更新 go.mod 以要求这些版本，下载源代码到模块缓存，然后构建并安装指定的软件包。</li></ul></li><li>go install命令<ul><li>go install命令可以用来构建和安装软件包。当指定一个版本时，’go install’在模块感知模式下运行，忽略当前目录下的go.mod文件</li></ul></li></ul></blockquote><blockquote><ul><li>get和install命令选择<ul><li>用get构建和安装软件包的做法已经过时了。</li><li>在未来的版本中，-d标志将被默认启用，’go get’将只被用于调整当前模块的依赖关系。</li><li>要使用当前模块的依赖关系安装软件包，请使用’go install’。</li><li>要安装一个无视当前模块的软件包，使用’go install’，在每个参数后面加上@version后缀，如”@latest”。</li></ul></li></ul></blockquote><h2 id="十二、文件操作"><a href="#十二、文件操作" class="headerlink" title="十二、文件操作"></a>十二、文件操作</h2><blockquote><p>在<code>go</code>语言中，可以对文件进行读写操作</p></blockquote><h3 id="1、读取文件"><a href="#1、读取文件" class="headerlink" title="1、读取文件"></a>1、读取文件</h3><h4 id="1-1-打开关闭文件"><a href="#1-1-打开关闭文件" class="headerlink" title="1.1 打开关闭文件"></a>1.1 打开关闭文件</h4><blockquote><p><code>go</code>语言中使用<code>os</code>模块进行打开文件，获得文件句柄，也叫文件指针</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.Open()</span><br><span class="line"><span class="comment">// 用来打开文件，返回两个值，一个是os.File指针，另一个是错误码err</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fileHandler, err := os.Open(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开文件错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%#v\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%p\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler type=%T\n&quot;</span>, fileHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    fileHandler=&amp;&#123;0xc0000a4780&#125;</span></span><br><span class="line"><span class="comment">    fileHandler=0xc0000a2018</span></span><br><span class="line"><span class="comment">    fileHandler type=*os.File</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面获取到的文件的指针，那么就可以对该指针进行操作了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fileHandler.Close()</span><br></pre></td></tr></table></figure><blockquote><p>关闭文件一般是在<code>defer</code>语句来定义</p></blockquote><h4 id="1-2-读取文件内容"><a href="#1-2-读取文件内容" class="headerlink" title="1.2 读取文件内容"></a>1.2 读取文件内容</h4><h5 id="1-2-1-较为底层方法"><a href="#1-2-1-较为底层方法" class="headerlink" title="1.2.1 较为底层方法"></a>1.2.1 较为底层方法</h5><blockquote><p>较为底层的方法就是使用上面打开文件获取到的文件指针，调用<code>Read()</code>方法，<code>Read()</code>传入一个可以一个字节类型的切片，并且指定字节切片长度，就可以来读取文件内容</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line">fileHandler.Read([]<span class="type">byte</span>, 字节长度)</span><br></pre></td></tr></table></figure><blockquote><p>上面的方法是返回两个值</p><ul><li>第一个值n是按照Read()函数传入的字节切片长度，开始读取文件，然后返回读取到文件内容的字节数<ul><li>如果返回的n小于定义的切片长度，那么表示文件内容全部被读出来</li><li>如果返回的n大于定义的切片长度，那么表示文件内容只被读出来字节长度的文件内容，剩余的没有被读出来，那就需要使用<code>for</code>循环不断读取文件内容<ul><li>每次循环读取的都是从上一次读取的结尾作为开始进行读取</li></ul></li></ul></li><li>第二个值就是err<ul><li>err会有两种情况：<ul><li>读取内容错误，结果不等nil</li><li>文件内容都读取完成后，err会有一个<code>EOF(end of file)</code>的结束标识符，所以需要进行判断接收，如果是EOF，那就表示文件读取结束</li><li><code>EOF</code>需要使用<code>io</code>的<code>io.EOF</code>来接收</li></ul></li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readFile.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span> <span class="comment">// 读取文件的包</span></span><br><span class="line"><span class="string">&quot;io&quot;</span> <span class="comment">// 接收EOF结束符</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileContent</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">fileHandler, err := os.Open(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开文件错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%#v\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%p\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler type=%T\n&quot;</span>, fileHandler)</span><br><span class="line"><span class="comment">// 等待函数执行结束前，再执行文件关闭操作</span></span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line">readTimes := <span class="number">1</span></span><br><span class="line">AllTimes := <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n第%v次读取文件内容\n&quot;</span>, readTimes)</span><br><span class="line"><span class="comment">// 开始读取文件内容</span></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>)</span><br><span class="line">byteNums, err := fileHandler.Read(tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件读取结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件结束~&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断错误是不是nil</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件内容失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> readTimes &gt; AllTimes &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取超过%v次，再见~\n&quot;</span>, AllTimes)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">readTimes++</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取到的文件内容字节个数:%v\n&quot;</span>, byteNums)</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取到的文件内容:%v\n&quot;</span>, <span class="type">string</span>(tmp[:byteNums]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">readFileContent(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>如果文件在<code>Open</code>函数中写的是绝对路径，最好不要在<code>goland</code>中直接右键执行该读取文件内容的<code>go</code>文件，因为会提示找不到需要读取文件路径<ul><li>代码里如果写的是相对路径，那么就可以在终端里是使用<code>go run</code>&#x2F;<code>go build</code>运行就可以</li></ul></li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220215234301296.png" class="" title="image-20220215234301296"><h5 id="1-2-2-稍显优雅的方法"><a href="#1-2-2-稍显优雅的方法" class="headerlink" title="1.2.2 稍显优雅的方法"></a>1.2.2 稍显优雅的方法</h5><blockquote><p>使用<code>bufio</code>读取，<code>bufio</code>是在<code>file</code>的基础上封装了一层API，支持更多的功能</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入bufio</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;bufio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line"><span class="comment">// 使用bufio.NewReader传入打开文件获得的文件指针</span></span><br><span class="line">readObj := bufio.NewReader(fileHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的readObj调用ReadString方法，需要传入字符格式的分隔符，比如：`\n`，&#x27; &#x27;等</span></span><br><span class="line">line, err := readObj.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">// line的值是根据分隔符获得到的每一行</span></span><br><span class="line"><span class="comment">// err是读取的错误码</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileContent</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">fileHandler, err := os.Open(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开文件错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%#v\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler=%p\n&quot;</span>, fileHandler)</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler type=%T\n&quot;</span>, fileHandler)</span><br><span class="line"><span class="comment">// 等待函数执行结束前，再执行文件关闭操作</span></span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化bufio对象，并将打开的文件指针传入</span></span><br><span class="line">readObj := bufio.NewReader(fileHandler)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// ReadSting里传入的是字符，表示以什么分隔开</span></span><br><span class="line">readLine, err := readObj.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将每一行读出来</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;readline:%v\n&quot;</span>, readLine)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断文件读取结束</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取文件结束~&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断错误是不是nil</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件内容失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">readFileContent(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220215235504007.png" class="" title="image-20220215235504007"><h5 id="1-2-3-更简洁的方法"><a href="#1-2-3-更简洁的方法" class="headerlink" title="1.2.3 更简洁的方法"></a>1.2.3 更简洁的方法</h5><blockquote><p>使用<code>io/ioutil</code>的<code>ReadFile</code>方法读取完整文件内容，只需要传入文件名既可</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入io/ioutil</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"></span><br><span class="line">ioutil.ReadFile(fileName <span class="type">string</span>)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">返回两个值:</span></span><br><span class="line"><span class="comment">第一个值的类型：[]uint8，可以用string强制转换成`string`</span></span><br><span class="line"><span class="comment">第二个值是返回错误码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileContent</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 打开读取文件</span></span><br><span class="line">fileData, err := ioutil.ReadFile(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileData:%v\n&quot;</span>, <span class="type">string</span>(fileData))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">readFileContent(<span class="string">&quot;./name.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-4-练习读取文件"><a href="#1-2-4-练习读取文件" class="headerlink" title="1.2.4 练习读取文件"></a>1.2.4 练习读取文件</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileByLowType</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 底层方式</span></span><br><span class="line">fileHandler, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开文件失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line">times := <span class="number">1</span></span><br><span class="line">allTimes := <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n第%v次读取文件内容\n&quot;</span>, times)</span><br><span class="line"><span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>)</span><br><span class="line">readNums, err := fileHandler.Read(tmp)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;读取到的文件内容:\n%v\n&quot;</span>, <span class="type">string</span>(tmp[:readNums]))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断读到结尾，需要优先进行判断，否则会报错读取文件内容失败</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;文件读完了\n&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断读取文件内容错误码</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件内容失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> times &gt; allTimes &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件超过最大%v次数\n&quot;</span>, allTimes)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">times++</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileByBufio</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用bufio读取，不需要控制读取的切片长度</span></span><br><span class="line">fileHandler, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;打开文件失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(fileHandler)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取到的文件内容:%v\n&quot;</span>, line)</span><br><span class="line"><span class="comment">// 判断读到结尾，需要优先进行判断，否则会报错读取文件内容失败</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;文件读完了\n&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断读取文件内容错误码</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件内容失败:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileByIOUtil</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用ioutil读取，直接读取全部内容</span></span><br><span class="line"><span class="comment">// readData类型：[]uint8</span></span><br><span class="line">readData, err := ioutil.ReadFile(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取文件内容错误:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;读取到的内容:%v\n&quot;</span>, <span class="type">string</span>(readData))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fileName := <span class="string">&quot;./userinfo.txt&quot;</span></span><br><span class="line"><span class="comment">// 底层方式读取文件内容</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\n&gt;&gt;&gt;&gt;&gt;&gt;底层方式读取文件内容&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">readFileByLowType(fileName)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以bufio读取</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\n&gt;&gt;&gt;&gt;&gt;&gt;以bufio读取文件内容&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">readFileByBufio(fileName)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以io/ioutil读取</span></span><br><span class="line">fmt.Println(<span class="string">&quot;\n&gt;&gt;&gt;&gt;&gt;&gt;以io/ioutil读取文件内容&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>)</span><br><span class="line">readFileByIOUtil(fileName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、写入文件"><a href="#2、写入文件" class="headerlink" title="2、写入文件"></a>2、写入文件</h3><h4 id="2-1-写入文件模式"><a href="#2-1-写入文件模式" class="headerlink" title="2.1 写入文件模式"></a>2.1 写入文件模式</h4><blockquote><p><code>go</code>可以使用指定模式打开写入内容到文件中</p><p>需要注意的是flag是可以用位运算的<code>或(|)</code>来表示文件没有的话就可以先创建</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="type">string</span>, flag <span class="type">int</span>, perm FileMode)</span></span> (*File, err) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">name: 要打开的文件名</span></span><br><span class="line"><span class="comment">flag: 打开文件的模式</span></span><br><span class="line"><span class="comment">perm: 文件权限，是一个八进制数</span></span><br><span class="line"><span class="comment">  r(读) ： 04</span></span><br><span class="line"><span class="comment">  w(写) ： 02</span></span><br><span class="line"><span class="comment">x(执行) ： 01</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>flag支持的模式：</p><ul><li>os.O_WRONLY只写</li><li>os.O_CREATE    创建文件</li><li>os.O_RDONLY    只读</li><li>os.O_RDWR      读写</li><li>os.O_TRUNC     清空</li><li>os.O_APPEND    追加内容到文件</li></ul></blockquote><blockquote><p>关于文件权限的解释</p><p>在终端输入:<br><code>ls -l xxx.xxx （xxx.xxx是文件名）</code>查看的是<code>xxx文件</code>之中的文件权限</p><p>那么就会出现相类似的信息，主要都是这些<code>-rw-rw-r--</code></p><ul><li>一共有十位数，其中：最前面那个 - 代表的是类型</li><li>中间那三个 rw- 代表的是所有者（user）拥有的权限</li><li>然后那三个 r– 代表的是组群（group）拥有的权限</li><li>最后那三个 r– 代表的是其他人（other）拥有的权限</li></ul><p>那么CNAME文件的操作权限就是-rw-r-r– &#x3D; 644</p><ul><li>rw为什么是6，因为是连在一起，所以是r&#x3D;4加上w&#x3D;2所以是6</li></ul></blockquote><img src="/2021/05/16/golang/go%E7%AC%94%E8%AE%B0/go%E7%AC%94%E8%AE%B0/image-20220220210813699.png" class="" title="image-20220220210813699"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fileHandler, err := os.OpenFile(fileName, os.O_APPEND|os.O_CREATE, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;openFile failed: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;fileHandler:%v\n&quot;</span>, fileHandler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  os.O_APPEND|os.O_CREATE这是位运算，表示添加文件时，文件不存在，需要现金向创建，后面的0644是文件操作权限，表示文件时可读可写</span></span><br></pre></td></tr></table></figure><h4 id="2-2-write写入内容到文件"><a href="#2-2-write写入内容到文件" class="headerlink" title="2.2 write写入内容到文件"></a>2.2 write写入内容到文件</h4><blockquote><p>可以将字节或字符串写入到文件中</p><p>可以写入字节和字符串</p><ul><li><code>write</code>可以写入字节</li><li><code>writestring</code>可以写入字符串</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件实例代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="type">string</span>, fileContent <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fileHandler, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;openFile failed: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// write写入字节</span></span><br><span class="line">fileHandler.Write([]<span class="type">byte</span>(fileContent))</span><br><span class="line"><span class="comment">// writeString写入字符串</span></span><br><span class="line">fileHandler.WriteString(fileContent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入内容到文件</span></span><br><span class="line">fileName := <span class="string">&quot;./xx.txt&quot;</span></span><br><span class="line">writeFile(fileName, <span class="string">&quot;我是学习go语言&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-bufio写入内容到文件"><a href="#2-3-bufio写入内容到文件" class="headerlink" title="2.3 bufio写入内容到文件"></a>2.3 bufio写入内容到文件</h4><blockquote><p>需要注意的是，写完一定要使用<code>Flush函数</code>将写入缓存的内容保存到文件里</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="type">string</span>, fileContent <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fileHandler, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;openFile failed: %v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fileHandler.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// bufio写入文件</span></span><br><span class="line">wr := bufio.NewWriter(fileHandler)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入字节，将文件内容写到缓存里</span></span><br><span class="line">writer.Write([]<span class="type">byte</span>(fileContent))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 这里是将文件内容写到缓存里</span></span><br><span class="line">wr.WriteString(fileContent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写完需要将写入到缓存里的东西存到文件中</span></span><br><span class="line">wr.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入内容到文件</span></span><br><span class="line">fileName := <span class="string">&quot;./xx.txt&quot;</span></span><br><span class="line">writeFile(fileName, <span class="string">&quot;我是学习go语言222&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-ioutil写入内容到文件"><a href="#2-4-ioutil写入内容到文件" class="headerlink" title="2.4 ioutil写入内容到文件"></a>2.4 ioutil写入内容到文件</h4><blockquote><p>需要注意<code>WriteFile</code>里写入文件时字节切片类型</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  @Author: lyzin</span></span><br><span class="line"><span class="comment">    @Date: 2022/02/17 22:51</span></span><br><span class="line"><span class="comment">    @File: basic_study</span></span><br><span class="line"><span class="comment">    @Desc: </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(fileName <span class="type">string</span>, fileContent <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(fileName, []<span class="type">byte</span>(fileContent), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write file err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入内容到文件</span></span><br><span class="line">fileName := <span class="string">&quot;./xx.txt&quot;</span></span><br><span class="line">writeFile(fileName, <span class="string">&quot;我是学习go语言ioutil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go基础编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
